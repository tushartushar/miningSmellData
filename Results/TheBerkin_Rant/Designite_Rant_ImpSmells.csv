Implementation smell,Namespace,Class,File,Method,Description
Long Method,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,The method has 462 lines of code.
Long Method,Rant.Core.Compiler.Parsing,QueryParser,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Parsing\QueryParser.cs,Parse,The method has 186 lines of code.
Long Method,Rant.Core.Compiler.Parsing,SequenceParser,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Parsing\SequenceParser.cs,Parse,The method has 172 lines of code.
Long Method,Rant.Core.Compiler.Syntax,RstFunction,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RstFunction.cs,Run,The method has 118 lines of code.
Long Method,Rant.Core.Compiler.Syntax,RstBlock,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RstBlock.cs,Run,The method has 114 lines of code.
Long Method,Rant.Core.Formatting,CharConverter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\CharConverter.cs,ToScript,The method has 111 lines of code.
Long Method,Rant.Core,Sandbox,C:\repos\TheBerkin_Rant\Rant\Core\Sandbox.State.cs,RunSerial,The method has 101 lines of code.
Long Method,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The method has 102 lines of code.
Long Method,Rant.Vocabulary,RantDictionaryTable,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,FromStream,The method has 238 lines of code.
Long Method,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadTerms,The method has 193 lines of code.
Long Method,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The method has 162 lines of code.
Long Method,Rant.Vocabulary.Querying,CarrierState,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Querying\CarrierState.cs,GetEntry,The method has 111 lines of code.
Long Method,Rant.Vocabulary.Utilities,Diff,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\Diff.cs,Derive,The method has 100 lines of code.
Long Method,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The method has 621 lines of code.
Complex Method,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,Cyclomatic complexity of the method is 11
Complex Method,Rant.Core.Compiler,TokenReader,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\TokenReader.cs,TakeSeriesLoose,Cyclomatic complexity of the method is 8
Complex Method,Rant.Core.Compiler.Syntax,RstBlock,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RstBlock.cs,Run,Cyclomatic complexity of the method is 22
Complex Method,Rant.Core.Formatting,Unicode,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\Unicode.cs,GetByName,Cyclomatic complexity of the method is 10
Complex Method,Rant.Formats,EnglishPluralizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishPluralizer.cs,Pluralize,Cyclomatic complexity of the method is 14
Complex Method,Rant.Core.Output,OutputChainArticleBuffer,C:\repos\TheBerkin_Rant\Rant\Core\Output\OutputChainArticleBuffer.cs,OnNextBufferChange,Cyclomatic complexity of the method is 8
Complex Method,Rant.Core.Output,OutputChainBuffer,C:\repos\TheBerkin_Rant\Rant\Core\Output\OutputChainBuffer.cs,CapitalizeTitleString,Cyclomatic complexity of the method is 8
Complex Method,Rant.Core.Framework,RantFunctionSignature,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionSignature.cs,RantFunctionSignature,Cyclomatic complexity of the method is 8
Complex Method,Rant.Resources,RantPackageVersion,C:\repos\TheBerkin_Rant\Rant\Resources\RantPackageVersion.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Rant.Vocabulary,RantDictionaryTable,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,DeserializeData,Cyclomatic complexity of the method is 9
Complex Method,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,Cyclomatic complexity of the method is 9
Complex Method,Rant.Vocabulary.Querying,CarrierState,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Querying\CarrierState.cs,GetEntry,Cyclomatic complexity of the method is 39
Complex Method,Rant.Vocabulary.Utilities,Diff,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\Diff.cs,LongestCommonSubstring,Cyclomatic complexity of the method is 8
Complex Method,Rant.Vocabulary.Utilities,Rhymer,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\Rhymer.cs,Rhyme,Cyclomatic complexity of the method is 18
Complex Method,Rant.Vocabulary.Utilities,Rhymer,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\Rhymer.cs,LevenshteinDistance,Cyclomatic complexity of the method is 8
Long Parameter List,Rant.Core.Compiler,RantCompiler,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantCompiler.cs,SyntaxError,The method has 7 parameters. Parameters: line' lastLineStart' index' length' fatal' errorMessageType' errorMessageArgs
Long Parameter List,Rant.Core.Compiler,RantCompiler,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantCompiler.cs,SyntaxError,The method has 5 parameters. Parameters: start' end' fatal' errorMessageType' errorMessageArgs
Long Parameter List,Rant.Core.Compiler,Token,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Token.cs,Token,The method has 5 parameters. Parameters: type' line' lastLineStart' index' value
Long Parameter List,Rant.Core.Compiler,Token,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Token.cs,Token,The method has 5 parameters. Parameters: type' line' lastLineStart' index' value
Long Parameter List,Rant.Core.Compiler.Syntax,RstEscape,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RstEscape.cs,RstEscape,The method has 5 parameters. Parameters: location' quantity' unicode' codeHighSurrogate' codeLowSurrogate
Long Parameter List,Rant.Core,Sandbox,C:\repos\TheBerkin_Rant\Rant\Core\Sandbox.State.cs,Sandbox,The method has 6 parameters. Parameters: engine' pattern' rng' sizeLimit' carrierState' args
Long Parameter List,Rant.Formats,RantFormat,C:\repos\TheBerkin_Rant\Rant\Formats\RantFormat.cs,RantFormat,The method has 5 parameters. Parameters: culture' writingSystem' titleCaseExclusions' pluralizer' numVerbalizer
Long Parameter List,Rant.Formats.Grammar,EnglishInflection,C:\repos\TheBerkin_Rant\Rant\Formats\Grammar\EnglishInflection.cs,ConjugateVerb,The method has 5 parameters. Parameters: root' person' gender' tense' aspect
Long Parameter List,Rant.Formats.Grammar,Inflection,C:\repos\TheBerkin_Rant\Rant\Formats\Grammar\Inflection.cs,ConjugateVerb,The method has 5 parameters. Parameters: root' person' gender' tense' aspect
Long Parameter List,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,NumberWeighted,The method has 5 parameters. Parameters: sb' min' bias' max' sharpness
Long Parameter List,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,NumberWeightedRange,The method has 5 parameters. Parameters: sb' min' biasMin' biasMax' max
Long Parameter List,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,NumberWeightedRange,The method has 6 parameters. Parameters: sb' min' biasMin' biasMax' max' sharpness
Long Parameter List,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListFilter,The method has 5 parameters. Parameters: sb' listName' outputListName' varname' condition
Long Parameter List,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListMap,The method has 5 parameters. Parameters: sb' listName' outputListName' varname' body
Long Parameter List,Rant,RantCompilerMessage,C:\repos\TheBerkin_Rant\Rant\RantCompilerMessage.cs,RantCompilerMessage,The method has 7 parameters. Parameters: type' source' message' line' column' index' length
Long Parameter List,Rant,_<A;B;C;D;E>,C:\repos\TheBerkin_Rant\Rant\Tuple.cs,_,The method has 5 parameters. Parameters: Item1' Item2' Item3' Item4' Item5
Long Parameter List,Rant,_<A;B;C;D;E;F>,C:\repos\TheBerkin_Rant\Rant\Tuple.cs,_,The method has 6 parameters. Parameters: Item1' Item2' Item3' Item4' Item5' Item6
Long Parameter List,Rant,_<A;B;C;D;E;F;G>,C:\repos\TheBerkin_Rant\Rant\Tuple.cs,_,The method has 7 parameters. Parameters: Item1' Item2' Item3' Item4' Item5' Item6' Item7
Long Parameter List,Rant,_<A;B;C;D;E;F;G;H>,C:\repos\TheBerkin_Rant\Rant\Tuple.cs,_,The method has 8 parameters. Parameters: Item1' Item2' Item3' Item4' Item5' Item6' Item7' Item8
Long Parameter List,Rant,RantEngine,C:\repos\TheBerkin_Rant\Rant\RantEngine.cs,Do,The method has 5 parameters. Parameters: input' seed' charLimit' timeout' args
Long Parameter List,Rant,RantEngine,C:\repos\TheBerkin_Rant\Rant\RantEngine.cs,DoFile,The method has 5 parameters. Parameters: path' seed' charLimit' timeout' args
Long Parameter List,Rant,RantEngine,C:\repos\TheBerkin_Rant\Rant\RantEngine.cs,Do,The method has 5 parameters. Parameters: input' rng' charLimit' timeout' args
Long Parameter List,Rant,RantEngine,C:\repos\TheBerkin_Rant\Rant\RantEngine.cs,DoFile,The method has 5 parameters. Parameters: path' rng' charLimit' timeout' args
Long Parameter List,Rant,RantEngine,C:\repos\TheBerkin_Rant\Rant\RantEngine.cs,Do,The method has 5 parameters. Parameters: input' seed' charLimit' timeout' args
Long Parameter List,Rant,RantEngine,C:\repos\TheBerkin_Rant\Rant\RantEngine.cs,Do,The method has 5 parameters. Parameters: input' rng' charLimit' timeout' args
Long Parameter List,Rant,RantEngine,C:\repos\TheBerkin_Rant\Rant\RantEngine.cs,DoSerial,The method has 5 parameters. Parameters: input' seed' charLimit' timeout' args
Long Parameter List,Rant,RantEngine,C:\repos\TheBerkin_Rant\Rant\RantEngine.cs,DoSerial,The method has 5 parameters. Parameters: input' rng' charLimit' timeout' args
Long Parameter List,Rant,RantEngine,C:\repos\TheBerkin_Rant\Rant\RantEngine.cs,DoSerial,The method has 5 parameters. Parameters: input' seed' charLimit' timeout' args
Long Parameter List,Rant,RantEngine,C:\repos\TheBerkin_Rant\Rant\RantEngine.cs,DoSerial,The method has 5 parameters. Parameters: input' rng' charLimit' timeout' args
Long Parameter List,Rant,RantEngine,C:\repos\TheBerkin_Rant\Rant\RantEngine.cs,DoName,The method has 5 parameters. Parameters: patternName' seed' charLimit' timeout' args
Long Parameter List,Rant,RantEngine,C:\repos\TheBerkin_Rant\Rant\RantEngine.cs,DoName,The method has 5 parameters. Parameters: patternName' rng' charLimit' timeout' args
Long Parameter List,Rant,_,C:\repos\TheBerkin_Rant\Rant\_.cs,Create,The method has 5 parameters. Parameters: Item1' Item2' Item3' Item4' Item5
Long Parameter List,Rant,_,C:\repos\TheBerkin_Rant\Rant\_.cs,Create,The method has 6 parameters. Parameters: Item1' Item2' Item3' Item4' Item5' Item6
Long Parameter List,Rant,_,C:\repos\TheBerkin_Rant\Rant\_.cs,Create,The method has 7 parameters. Parameters: Item1' Item2' Item3' Item4' Item5' Item6' Item7
Long Parameter List,Rant,_,C:\repos\TheBerkin_Rant\Rant\_.cs,Create,The method has 8 parameters. Parameters: Item1' Item2' Item3' Item4' Item5' Item6' Item7' Item8
Long Parameter List,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ConstructTable,The method has 5 parameters. Parameters: origin' name' subs' termCount' table
Long Parameter List,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadTerms,The method has 9 parameters. Parameters: origin' str' len' line' i' table' activeTemplate' templates' result
Long Parameter List,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The method has 6 parameters. Parameters: origin' str' len' line' i' result
Long Parameter List,Rant.Vocabulary,RantTableLoadException,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantTableLoadException.cs,RantTableLoadException,The method has 5 parameters. Parameters: origin' line' col' messageType' messageArgs
Long Parameter List,Rant.Vocabulary.Querying,CarrierState,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Querying\CarrierState.cs,GetEntry,The method has 5 parameters. Parameters: carrier' subtypeIndex' pool' rng' weighted
Long Parameter List,Rant.Vocabulary.Querying,ClassFilter,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Querying\ClassFilter.cs,Test,The method has 5 parameters. Parameters: dictionary' table' entry' termIndex' query
Long Parameter List,Rant.Vocabulary.Querying,Filter,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Querying\Filter.cs,Test,The method has 5 parameters. Parameters: dictionary' table' entry' termIndex' query
Long Parameter List,Rant.Vocabulary.Querying,RegexFilter,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Querying\RegexFilter.cs,Test,The method has 5 parameters. Parameters: dictionary' table' entry' termIndex' query
Long Parameter List,Rant.Vocabulary.Querying,RangeFilter,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Querying\RangeFilter.cs,Test,The method has 5 parameters. Parameters: dictionary' table' entry' termIndex' query
Long Parameter List,Rant.Vocabulary.Utilities,Diff,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\Diff.cs,LongestCommonSubstring,The method has 5 parameters. Parameters: a' b' start_a' start_b' length
Long Statement,Rant.Core.Compiler.Parsing,SequenceParser,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Parsing\SequenceParser.cs,Parse,The length of the statement  "							if (!uint.TryParse(token.Value' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out surrogatePairCodePoint) " is 121.
Long Statement,Rant.Core.Compiler.Parsing,SequenceParser,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Parsing\SequenceParser.cs,Parse,The length of the statement  "										if (!short.TryParse(reader.ReadToken().Value' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out codePoint)) " is 123.
Long Statement,Rant.Core.Compiler.Parsing,SequenceParser,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Parsing\SequenceParser.cs,Parse,The length of the statement  "										if (!uint.TryParse(pairToken.Value' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out surrogatePairCodePoint) " is 125.
Long Statement,Rant.Core.Compiler.Parsing,TagParser,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Parsing\TagParser.cs,ParseFunction,The length of the statement  "					compiler.SyntaxError(functionName' false' "err-compiler-nonexistent-function"' functionName.Value' RantUtils.GetClosestFunctionName(functionName.Value)); " is 153.
Long Statement,Rant.Core.Compiler.Syntax,RstFunction,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RstFunction.cs,Run,The length of the statement  "								throw new RantRuntimeException(sb' _args[i]' "err-runtime-invalid-arg"' strNum' p.Name' p.RantType.ToString().ToLower()); " is 121.
Long Statement,Rant.Core.Compiler.Syntax,RstFunction,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RstFunction.cs,Run,The length of the statement  "                            throw new RantRuntimeException(sb' _args[i].Location' "err-runtime-unknown-mode"' strMode' Util.GetEnumListString(p.NativeType)); " is 129.
Long Statement,Rant.Core.Compiler.Syntax,RstFunction,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RstFunction.cs,Run,The length of the statement  "                                throw new RantRuntimeException(sb' _args[i].Location' "err-runtime-unknown-flag"' flag' Util.GetEnumListString(enumType)); " is 122.
Long Statement,Rant.Core.Compiler.Syntax,RstReplacer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RstReplacer.cs,ToString,The length of the statement  "            return $"Replacer `{_regex}`{((_regex.Options & RegexOptions.IgnoreCase) > 0 ? "i" : "")}{((_regex.Options & RegexOptions.Multiline) > 0 ? "m" : "")}"; " is 151.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,QueryCarrierComponent,The length of the statement  "			if (!Util.ValidateName(componentId)) throw new RantRuntimeException(sb' sb.CurrentAction' "err-invalid-ccid"' componentId); " is 123.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListAdd,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListAddNumber,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListAddPattern,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListAddPattern,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListPrepend,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListPrependNumber,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListPrependPattern,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListGet,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListGet,The length of the statement  "			if (index < 0 || index >= list.Count) throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-index-out-of-range"' list.Count - 1' index); " is 148.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListSet,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListSet,The length of the statement  "			if (index < 0 || index >= list.Count) throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-index-out-of-range"' list.Count - 1' index); " is 148.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListSetNumber,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListSetNumber,The length of the statement  "			if (index < 0 || index >= list.Count) throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-index-out-of-range"' list.Count - 1' index); " is 148.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListSetPattern,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListSetPattern,The length of the statement  "			if (index < 0 || index >= list.Count) throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-index-out-of-range"' list.Count - 1' index); " is 148.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListSetVar,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListSetVar,The length of the statement  "			if (index < 0 || index >= list.Count) throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-index-out-of-range"' list.Count - 1' index); " is 148.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListInsert,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListInsert,The length of the statement  "			if (index < 0 || index > list.Count) throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-index-out-of-range"' list.Count - 1' index); " is 147.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListInsert,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListInsert,The length of the statement  "			if (index < 0 || index > list.Count) throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-index-out-of-range"' list.Count - 1' index); " is 147.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListInsertPattern,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListInsertPattern,The length of the statement  "			if (index < 0 || index > list.Count) throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-index-out-of-range"' list.Count - 1' index); " is 147.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListInsertVar,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListInsertVar,The length of the statement  "			if (index < 0 || index > list.Count) throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-index-out-of-range"' list.Count - 1' index); " is 147.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListFind,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListFind,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListFindIgnoreCase,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListClear,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListPop,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListPopStart,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListCopyItemToVar,The length of the statement  "			var list = listObj.Value as List<RantObject> ?? throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-unexpected-type"' RantObjectType.List' listObj.Type); " is 167.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListCopyItemToVar,The length of the statement  "			if (index < 0 || index >= list.Count) throw new RantRuntimeException(sb' sb.CurrentAction' "err-runtime-index-out-of-range"' list.Count - 1' index); " is 148.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,ListFilter,The length of the statement  "					throw new RantRuntimeException(sb' condition' "err-runtime-unexpected-type"' RantObjectType.Boolean' RantObjectType.String); " is 124.
Long Statement,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,WhileLoop,The length of the statement  "					throw new RantRuntimeException(sb' condition' "err-runtime-unexpected-type"' RantObjectType.Boolean' RantObjectType.String); " is 124.
Long Statement,Rant.Resources,RantDependencyResolver,C:\repos\TheBerkin_Rant\Rant\Resources\RantDependencyResolver.cs,TryResolvePackage,The length of the statement  "				path = Directory.GetFiles(Environment.CurrentDirectory' $"{depdendency.ID}*.rantpkg"' SearchOption.AllDirectories).FirstOrDefault(p => " is 134.
Long Statement,Rant.Resources,RantResource,C:\repos\TheBerkin_Rant\Rant\Resources\RantResource.cs,DeserializeResource,The length of the statement  "            var resource = Activator.CreateInstance(type' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' new object[0]' null) as RantResource; " is 159.
Long Statement,Rant.Vocabulary,ClassCache,C:\repos\TheBerkin_Rant\Rant\Vocabulary\ClassCache.cs,Filter,The length of the statement  "			        .Where(cl => !ruleArray.Any(rule => rule.ShouldMatch && String.Equals(rule.Class' cl' StringComparison.InvariantCultureIgnoreCase))).ToArray(); " is 143.
Long Statement,Rant.Vocabulary,RantDictionaryTable,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,Query,The length of the statement  "				= _cache.Filter(query.GetClassFilters().SelectMany(cf => cf.GenerateRequiredSet(sb.RNG)).Distinct()' dictionary' this)?.ToList(); " is 129.
Long Statement,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadTerms,The length of the statement  "                                    if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint)) " is 126.
Long Statement,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The length of the statement  "                                        if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint)) " is 126.
Long Statement,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The length of the statement  "                                    if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint)) " is 126.
Long Statement,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The length of the statement  "                        if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' && " is 142.
Complex Conditional,Rant.Vocabulary.Querying,CarrierState,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Querying\CarrierState.cs,RemoveType,The conditional expression  "type == CarrierComponentType.Associative ||                  type == CarrierComponentType.Relational ||                  type == CarrierComponentType.Dissociative ||                  type == CarrierComponentType.Divergent"  is complex.
Complex Conditional,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The conditional expression  "current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER"))"  is complex.
Complex Conditional,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The conditional expression  "current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE")"  is complex.
Complex Conditional,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The conditional expression  "StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " ")"  is complex.
Complex Conditional,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The conditional expression  "current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H")"  is complex.
Complex Conditional,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The conditional expression  "(StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY")"  is complex.
Complex Conditional,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The conditional expression  "IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O')"  is complex.
Complex Conditional,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The conditional expression  "current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE")"  is complex.
Complex Conditional,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The conditional expression  "StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M'"  is complex.
Complex Conditional,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The conditional expression  "current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA")"  is complex.
Complex Conditional,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The conditional expression  "current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH")"  is complex.
Complex Conditional,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The conditional expression  "StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T'"  is complex.
Complex Conditional,Rant.Vocabulary.Utilities,Rhymer,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\Rhymer.cs,Rhyme,The conditional expression  "term1.SyllableCount >= 2 &&                      term2.SyllableCount >= 2 &&                      term1.Syllables[term1.SyllableCount - 2].IndexOf('"') > -1 &&                      term2.Syllables[term2.SyllableCount - 2].IndexOf('"') > -1 &&                      GetFirstVowelSound(term1.Syllables.Last()) == GetFirstVowelSound(term2.Syllables.Last())"  is complex.
Magic Number,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,The following statement contains a magic number: var text = new StringBuilder(64);
Magic Number,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,The following statement contains a magic number: var whitespace = new StringBuilder(16);
Magic Number,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,The following statement contains a magic number: while (i < len)              {                  // No text was written on this cycle yet' so set this to false                  cycleWroteText = false;                    // Set the current scanned character                  c = input[i];                    // If a newline is detected' update all line state variables                  if (c == '\n')                  {                      line++;                      lastLineStart = i + 1;                      lineStart = true;                      whitespace.Length = 0;                      goto iterate;                  }                    // Skip carriage returns too                  if (c == '\r') goto iterate;                    // If whitespace' capture it all before moving on                  if (char.IsWhiteSpace(c))                  {                      if (!lineStart) whitespace.Append(input[i]);                      goto iterate;                  }                    // At this point' a non-whitespace character has been read.                    // Emit whitespace if queued                  if (whitespace.Length > 0)                  {                      // If it's a line breaking character' a comment' or at the start of a line' skip it.                      if (!lineStart && c != '#')                          yield return new Token(R.Whitespace' line' lastLineStart' i' whitespace.ToString());                      whitespace.Length = 0;                  }                    lineStart = false;                    switch (c)                  {                      // Comment                      case '#':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Just eat the line and ignore it                          while (i < len && input[i] != '\n') i++;  						continue;                        // Escape sequence                      case '\\':                      {                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (i == li)                          {                              // This is the last character! Blasphemy!                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              yield break;                          }                            // At this point we know there's at least one character. Great!                            int escStart = i++; // Skip the slash    						// Verbose character  						if (input[i] == '@')  						{  							int nameStart = ++i;  							while(i < len)  							{  								if (input[i] == '@')  								{  									var name = input.Substring(nameStart' i - nameStart).Trim();  									var unicode = Unicode.GetByName(name);  									if (string.IsNullOrEmpty(unicode))  									{  										compiler.SyntaxError(line' lastLineStart' nameStart' i - nameStart' false' "err-compiler-invalid-vchar"' name);  										goto iterate;  									}  									yield return new Token(R.Text' line' lastLineStart' nameStart' unicode);  									goto iterate;  								}  								i++;  							}  							compiler.SyntaxError(line' lastLineStart' i - 1' 1' false' "err-compiler-incomplete-vchar");  							break;  						}                            // No escaping whitespace.                          if (char.IsWhiteSpace(input[i]))                          {                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              break;                          }                            // There's a quantifier here.                          if (char.IsDigit(input[i]))                          {                              int qStart = i++; // Skip past the digit                              while (i < len && char.IsDigit(input[i])) i++;                              if (i >= li)                              {                                  compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                                  break;                              }                              // We need a comma after a quantifier                              if (input[i] != ''')                              {                                  compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-missing-quantity-comma");                                  break;                              }                              yield return new Token(R.EscapeSequenceQuantifier' line' lastLineStart' qStart' input.Substring(qStart' i - qStart));                              i++; // Skip past the comma                          }                            // At this point we need to make sure that there are more characters                          if (i >= len)                          {                              compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                              break;                          }                            switch (input[i])                          {                              case 'u': // Unicode code point                                  // This will require 4 characters                                  if (len - ++i < 4)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceUnicode' line' lastLineStart' escStart' input.Substring(i' 4));                                  i += 4;                                  goto loop;                              case 'U': // Unicode surrogate pair                                  // This will require 8 characters                                  if (len - ++i < 8)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceSurrogatePair' line' lastLineStart' escStart' input.Substring(i' 8));                                  i += 8;                                  goto loop;                              default:                                  // Spit out the escape char token                                  yield return new Token(R.EscapeSequenceChar' line' lastLineStart' i' input[i]);                                  goto iterate;                          }                      }                        // Verbatim string                      case '\"':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of quotes                          if (len - i >= 2)                          {                              int vstrStart = ++i; // Skip past starting quote                              var buffer = new StringBuilder();                              while (i < len)                              {                                  // Found a matching quote?                                  if (input[i] == '\"')                                  {                                      // Oh' it's just an escaped quote. (two in a row)                                      if (i < li && input[i + 1] == '\"')                                      {                                          buffer.Append('\"');                                          i += 2; // Skip past current and second quote                                          continue;                                      }                                        // Neato' looks like it's the end of the string literal.                                        // We don't need a new token for this' so just add it to the text buffer.                                      if (text.Length == 0)                                      {                                          lastTextLine = line;                                          lastTextIndex = i;                                          lastTextLineStart = lastLineStart;                                      }                                      text.Append(buffer);                                      cycleWroteText = true;                                        i++;                                      goto loop;                                  }                                  buffer.Append(input[i]);                                  i++;                              }                              compiler.SyntaxError(line' lastLineStart' vstrStart - 1' i - vstrStart' false' "err-compiler-incomplete-verbatim");                          }                          else                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-verbatim");                          break;                        // Regular expression                      case '`':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of apostrophes                          if (li - i >= 2)                          {                              int regStart = ++i; // Skip past starting apostrophe                              var buffer = new StringBuilder();                                while (i < len)                              {                                  // Found an escape sequence in the regex?                                  if (input[i] == '\\')                                  {                                      buffer.Append('\\');                                        // Make sure there's room for an escape code and the end of the literal                                      if (li - i >= 2)                                      {                                          if (input[i + 1] == '`')                                          {                                              buffer.Append('`');                                              i += 2; // Skip past current and second quote                                              continue;                                          }                                          i++;                                          continue;                                      }                                        // If we don't have enough room for an escape char and an ending apostrophe' error.                                      compiler.SyntaxError(line' lastLineStart' regStart - 1' i - regStart + 1' false' "err-compiler-incomplete-regex");                                      break;                                  }                                    // Found another apostrophe that isn't escaped?                                  if (input[i] == '`')                                  {                                      yield return new Token(R.Regex' line' lastLineStart' regStart - 1' buffer.ToString());                                        // Read flags                                      if (++i < len && char.IsLetter(input[i]))                                      {                                          int flagsStart = i++;                                          while (i < len && char.IsLetter(input[i])) i++;                                          yield return new Token(R.RegexFlags' line' lastLineStart' flagsStart' input.Substring(flagsStart' i - flagsStart));                                      }                                      goto loop;                                  }                                    // Add character to buffer                                  buffer.Append(input[i]);                                  i++;                              }                                // Reached EOF                              compiler.SyntaxError(line' lastLineStart' regStart' i - regStart' false' "err-compiler-incomplete-regex");                          }                          else                          {                              // Impossible to create regex here because there are too few characters remaining                              compiler.SyntaxError(line' lastLineStart' i' len - i' false' "err-compiler-incomplete-regex");                          }                          break;                        case '[':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftSquare' line' lastLineStart' i' c);                          break;                      case ']':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightSquare' line' lastLineStart' i' c);                          break;                      case '{':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftCurly' line' lastLineStart' i' c);                          break;                      case '}':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightCurly' line' lastLineStart' i' c);                          break;                      case '(':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftParen' line' lastLineStart' i' c);                          break;                      case ')':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightParen' line' lastLineStart' i' c);                          break;                      case '<':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftAngle' line' lastLineStart' i' c);                          break;                      case '>':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightAngle' line' lastLineStart' i' c);                          break;                      case '|':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Pipe' line' lastLineStart' i' c);                          break;                      case '?':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (li - i > 0 && input[i + 1] == '!')                          {                              yield return new Token(R.Without' line' lastLineStart' i' "?!");                              i++;                              break;                          }                          yield return new Token(R.Question' line' lastLineStart' i' c);                          break;                      case '!':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Exclamation' line' lastLineStart' i' c);                          break;                      case '@':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.At' line' lastLineStart' i' c);                          break;                      case '-':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Hyphen' line' lastLineStart' i' c);                          break;                      case '$':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Dollar' line' lastLineStart' i' c);                          break;                      case '=':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Equal' line' lastLineStart' i' c);                          break;                      case '&':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Ampersand' line' lastLineStart' i' c);                          break;                      case '+':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Plus' line' lastLineStart' i' c);                          break;                      case '.':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Period' line' lastLineStart' i' c);                          break;                      case ':':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Check for double-colon                          if (li - i > 0 && input[i + 1] == ':')                          {                              yield return new Token(R.DoubleColon' line' lastLineStart' i' "::");                              i += 2;                              goto loop;                          }                          yield return new Token(R.Colon' line' lastLineStart' i' c);                          break;                      case ';':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Semicolon' line' lastLineStart' i' c);                          break;                      default:                          if (text.Length == 0)                          {                              lastTextLine = line;                              lastTextIndex = i;                              lastTextLineStart = lastLineStart;                          }                          text.Append(c);                          cycleWroteText = true;                          break;                  }                    // Iterates the index                  iterate:                  i++;                    loop: // Skips iteration of the index                    // Emit text token if appropriate                  if (!cycleWroteText && text.Length > 0)                  {                      yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                      text.Length = 0;                  }              }
Magic Number,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,The following statement contains a magic number: while (i < len)              {                  // No text was written on this cycle yet' so set this to false                  cycleWroteText = false;                    // Set the current scanned character                  c = input[i];                    // If a newline is detected' update all line state variables                  if (c == '\n')                  {                      line++;                      lastLineStart = i + 1;                      lineStart = true;                      whitespace.Length = 0;                      goto iterate;                  }                    // Skip carriage returns too                  if (c == '\r') goto iterate;                    // If whitespace' capture it all before moving on                  if (char.IsWhiteSpace(c))                  {                      if (!lineStart) whitespace.Append(input[i]);                      goto iterate;                  }                    // At this point' a non-whitespace character has been read.                    // Emit whitespace if queued                  if (whitespace.Length > 0)                  {                      // If it's a line breaking character' a comment' or at the start of a line' skip it.                      if (!lineStart && c != '#')                          yield return new Token(R.Whitespace' line' lastLineStart' i' whitespace.ToString());                      whitespace.Length = 0;                  }                    lineStart = false;                    switch (c)                  {                      // Comment                      case '#':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Just eat the line and ignore it                          while (i < len && input[i] != '\n') i++;  						continue;                        // Escape sequence                      case '\\':                      {                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (i == li)                          {                              // This is the last character! Blasphemy!                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              yield break;                          }                            // At this point we know there's at least one character. Great!                            int escStart = i++; // Skip the slash    						// Verbose character  						if (input[i] == '@')  						{  							int nameStart = ++i;  							while(i < len)  							{  								if (input[i] == '@')  								{  									var name = input.Substring(nameStart' i - nameStart).Trim();  									var unicode = Unicode.GetByName(name);  									if (string.IsNullOrEmpty(unicode))  									{  										compiler.SyntaxError(line' lastLineStart' nameStart' i - nameStart' false' "err-compiler-invalid-vchar"' name);  										goto iterate;  									}  									yield return new Token(R.Text' line' lastLineStart' nameStart' unicode);  									goto iterate;  								}  								i++;  							}  							compiler.SyntaxError(line' lastLineStart' i - 1' 1' false' "err-compiler-incomplete-vchar");  							break;  						}                            // No escaping whitespace.                          if (char.IsWhiteSpace(input[i]))                          {                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              break;                          }                            // There's a quantifier here.                          if (char.IsDigit(input[i]))                          {                              int qStart = i++; // Skip past the digit                              while (i < len && char.IsDigit(input[i])) i++;                              if (i >= li)                              {                                  compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                                  break;                              }                              // We need a comma after a quantifier                              if (input[i] != ''')                              {                                  compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-missing-quantity-comma");                                  break;                              }                              yield return new Token(R.EscapeSequenceQuantifier' line' lastLineStart' qStart' input.Substring(qStart' i - qStart));                              i++; // Skip past the comma                          }                            // At this point we need to make sure that there are more characters                          if (i >= len)                          {                              compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                              break;                          }                            switch (input[i])                          {                              case 'u': // Unicode code point                                  // This will require 4 characters                                  if (len - ++i < 4)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceUnicode' line' lastLineStart' escStart' input.Substring(i' 4));                                  i += 4;                                  goto loop;                              case 'U': // Unicode surrogate pair                                  // This will require 8 characters                                  if (len - ++i < 8)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceSurrogatePair' line' lastLineStart' escStart' input.Substring(i' 8));                                  i += 8;                                  goto loop;                              default:                                  // Spit out the escape char token                                  yield return new Token(R.EscapeSequenceChar' line' lastLineStart' i' input[i]);                                  goto iterate;                          }                      }                        // Verbatim string                      case '\"':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of quotes                          if (len - i >= 2)                          {                              int vstrStart = ++i; // Skip past starting quote                              var buffer = new StringBuilder();                              while (i < len)                              {                                  // Found a matching quote?                                  if (input[i] == '\"')                                  {                                      // Oh' it's just an escaped quote. (two in a row)                                      if (i < li && input[i + 1] == '\"')                                      {                                          buffer.Append('\"');                                          i += 2; // Skip past current and second quote                                          continue;                                      }                                        // Neato' looks like it's the end of the string literal.                                        // We don't need a new token for this' so just add it to the text buffer.                                      if (text.Length == 0)                                      {                                          lastTextLine = line;                                          lastTextIndex = i;                                          lastTextLineStart = lastLineStart;                                      }                                      text.Append(buffer);                                      cycleWroteText = true;                                        i++;                                      goto loop;                                  }                                  buffer.Append(input[i]);                                  i++;                              }                              compiler.SyntaxError(line' lastLineStart' vstrStart - 1' i - vstrStart' false' "err-compiler-incomplete-verbatim");                          }                          else                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-verbatim");                          break;                        // Regular expression                      case '`':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of apostrophes                          if (li - i >= 2)                          {                              int regStart = ++i; // Skip past starting apostrophe                              var buffer = new StringBuilder();                                while (i < len)                              {                                  // Found an escape sequence in the regex?                                  if (input[i] == '\\')                                  {                                      buffer.Append('\\');                                        // Make sure there's room for an escape code and the end of the literal                                      if (li - i >= 2)                                      {                                          if (input[i + 1] == '`')                                          {                                              buffer.Append('`');                                              i += 2; // Skip past current and second quote                                              continue;                                          }                                          i++;                                          continue;                                      }                                        // If we don't have enough room for an escape char and an ending apostrophe' error.                                      compiler.SyntaxError(line' lastLineStart' regStart - 1' i - regStart + 1' false' "err-compiler-incomplete-regex");                                      break;                                  }                                    // Found another apostrophe that isn't escaped?                                  if (input[i] == '`')                                  {                                      yield return new Token(R.Regex' line' lastLineStart' regStart - 1' buffer.ToString());                                        // Read flags                                      if (++i < len && char.IsLetter(input[i]))                                      {                                          int flagsStart = i++;                                          while (i < len && char.IsLetter(input[i])) i++;                                          yield return new Token(R.RegexFlags' line' lastLineStart' flagsStart' input.Substring(flagsStart' i - flagsStart));                                      }                                      goto loop;                                  }                                    // Add character to buffer                                  buffer.Append(input[i]);                                  i++;                              }                                // Reached EOF                              compiler.SyntaxError(line' lastLineStart' regStart' i - regStart' false' "err-compiler-incomplete-regex");                          }                          else                          {                              // Impossible to create regex here because there are too few characters remaining                              compiler.SyntaxError(line' lastLineStart' i' len - i' false' "err-compiler-incomplete-regex");                          }                          break;                        case '[':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftSquare' line' lastLineStart' i' c);                          break;                      case ']':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightSquare' line' lastLineStart' i' c);                          break;                      case '{':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftCurly' line' lastLineStart' i' c);                          break;                      case '}':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightCurly' line' lastLineStart' i' c);                          break;                      case '(':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftParen' line' lastLineStart' i' c);                          break;                      case ')':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightParen' line' lastLineStart' i' c);                          break;                      case '<':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftAngle' line' lastLineStart' i' c);                          break;                      case '>':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightAngle' line' lastLineStart' i' c);                          break;                      case '|':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Pipe' line' lastLineStart' i' c);                          break;                      case '?':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (li - i > 0 && input[i + 1] == '!')                          {                              yield return new Token(R.Without' line' lastLineStart' i' "?!");                              i++;                              break;                          }                          yield return new Token(R.Question' line' lastLineStart' i' c);                          break;                      case '!':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Exclamation' line' lastLineStart' i' c);                          break;                      case '@':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.At' line' lastLineStart' i' c);                          break;                      case '-':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Hyphen' line' lastLineStart' i' c);                          break;                      case '$':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Dollar' line' lastLineStart' i' c);                          break;                      case '=':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Equal' line' lastLineStart' i' c);                          break;                      case '&':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Ampersand' line' lastLineStart' i' c);                          break;                      case '+':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Plus' line' lastLineStart' i' c);                          break;                      case '.':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Period' line' lastLineStart' i' c);                          break;                      case ':':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Check for double-colon                          if (li - i > 0 && input[i + 1] == ':')                          {                              yield return new Token(R.DoubleColon' line' lastLineStart' i' "::");                              i += 2;                              goto loop;                          }                          yield return new Token(R.Colon' line' lastLineStart' i' c);                          break;                      case ';':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Semicolon' line' lastLineStart' i' c);                          break;                      default:                          if (text.Length == 0)                          {                              lastTextLine = line;                              lastTextIndex = i;                              lastTextLineStart = lastLineStart;                          }                          text.Append(c);                          cycleWroteText = true;                          break;                  }                    // Iterates the index                  iterate:                  i++;                    loop: // Skips iteration of the index                    // Emit text token if appropriate                  if (!cycleWroteText && text.Length > 0)                  {                      yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                      text.Length = 0;                  }              }
Magic Number,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,The following statement contains a magic number: while (i < len)              {                  // No text was written on this cycle yet' so set this to false                  cycleWroteText = false;                    // Set the current scanned character                  c = input[i];                    // If a newline is detected' update all line state variables                  if (c == '\n')                  {                      line++;                      lastLineStart = i + 1;                      lineStart = true;                      whitespace.Length = 0;                      goto iterate;                  }                    // Skip carriage returns too                  if (c == '\r') goto iterate;                    // If whitespace' capture it all before moving on                  if (char.IsWhiteSpace(c))                  {                      if (!lineStart) whitespace.Append(input[i]);                      goto iterate;                  }                    // At this point' a non-whitespace character has been read.                    // Emit whitespace if queued                  if (whitespace.Length > 0)                  {                      // If it's a line breaking character' a comment' or at the start of a line' skip it.                      if (!lineStart && c != '#')                          yield return new Token(R.Whitespace' line' lastLineStart' i' whitespace.ToString());                      whitespace.Length = 0;                  }                    lineStart = false;                    switch (c)                  {                      // Comment                      case '#':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Just eat the line and ignore it                          while (i < len && input[i] != '\n') i++;  						continue;                        // Escape sequence                      case '\\':                      {                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (i == li)                          {                              // This is the last character! Blasphemy!                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              yield break;                          }                            // At this point we know there's at least one character. Great!                            int escStart = i++; // Skip the slash    						// Verbose character  						if (input[i] == '@')  						{  							int nameStart = ++i;  							while(i < len)  							{  								if (input[i] == '@')  								{  									var name = input.Substring(nameStart' i - nameStart).Trim();  									var unicode = Unicode.GetByName(name);  									if (string.IsNullOrEmpty(unicode))  									{  										compiler.SyntaxError(line' lastLineStart' nameStart' i - nameStart' false' "err-compiler-invalid-vchar"' name);  										goto iterate;  									}  									yield return new Token(R.Text' line' lastLineStart' nameStart' unicode);  									goto iterate;  								}  								i++;  							}  							compiler.SyntaxError(line' lastLineStart' i - 1' 1' false' "err-compiler-incomplete-vchar");  							break;  						}                            // No escaping whitespace.                          if (char.IsWhiteSpace(input[i]))                          {                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              break;                          }                            // There's a quantifier here.                          if (char.IsDigit(input[i]))                          {                              int qStart = i++; // Skip past the digit                              while (i < len && char.IsDigit(input[i])) i++;                              if (i >= li)                              {                                  compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                                  break;                              }                              // We need a comma after a quantifier                              if (input[i] != ''')                              {                                  compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-missing-quantity-comma");                                  break;                              }                              yield return new Token(R.EscapeSequenceQuantifier' line' lastLineStart' qStart' input.Substring(qStart' i - qStart));                              i++; // Skip past the comma                          }                            // At this point we need to make sure that there are more characters                          if (i >= len)                          {                              compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                              break;                          }                            switch (input[i])                          {                              case 'u': // Unicode code point                                  // This will require 4 characters                                  if (len - ++i < 4)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceUnicode' line' lastLineStart' escStart' input.Substring(i' 4));                                  i += 4;                                  goto loop;                              case 'U': // Unicode surrogate pair                                  // This will require 8 characters                                  if (len - ++i < 8)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceSurrogatePair' line' lastLineStart' escStart' input.Substring(i' 8));                                  i += 8;                                  goto loop;                              default:                                  // Spit out the escape char token                                  yield return new Token(R.EscapeSequenceChar' line' lastLineStart' i' input[i]);                                  goto iterate;                          }                      }                        // Verbatim string                      case '\"':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of quotes                          if (len - i >= 2)                          {                              int vstrStart = ++i; // Skip past starting quote                              var buffer = new StringBuilder();                              while (i < len)                              {                                  // Found a matching quote?                                  if (input[i] == '\"')                                  {                                      // Oh' it's just an escaped quote. (two in a row)                                      if (i < li && input[i + 1] == '\"')                                      {                                          buffer.Append('\"');                                          i += 2; // Skip past current and second quote                                          continue;                                      }                                        // Neato' looks like it's the end of the string literal.                                        // We don't need a new token for this' so just add it to the text buffer.                                      if (text.Length == 0)                                      {                                          lastTextLine = line;                                          lastTextIndex = i;                                          lastTextLineStart = lastLineStart;                                      }                                      text.Append(buffer);                                      cycleWroteText = true;                                        i++;                                      goto loop;                                  }                                  buffer.Append(input[i]);                                  i++;                              }                              compiler.SyntaxError(line' lastLineStart' vstrStart - 1' i - vstrStart' false' "err-compiler-incomplete-verbatim");                          }                          else                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-verbatim");                          break;                        // Regular expression                      case '`':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of apostrophes                          if (li - i >= 2)                          {                              int regStart = ++i; // Skip past starting apostrophe                              var buffer = new StringBuilder();                                while (i < len)                              {                                  // Found an escape sequence in the regex?                                  if (input[i] == '\\')                                  {                                      buffer.Append('\\');                                        // Make sure there's room for an escape code and the end of the literal                                      if (li - i >= 2)                                      {                                          if (input[i + 1] == '`')                                          {                                              buffer.Append('`');                                              i += 2; // Skip past current and second quote                                              continue;                                          }                                          i++;                                          continue;                                      }                                        // If we don't have enough room for an escape char and an ending apostrophe' error.                                      compiler.SyntaxError(line' lastLineStart' regStart - 1' i - regStart + 1' false' "err-compiler-incomplete-regex");                                      break;                                  }                                    // Found another apostrophe that isn't escaped?                                  if (input[i] == '`')                                  {                                      yield return new Token(R.Regex' line' lastLineStart' regStart - 1' buffer.ToString());                                        // Read flags                                      if (++i < len && char.IsLetter(input[i]))                                      {                                          int flagsStart = i++;                                          while (i < len && char.IsLetter(input[i])) i++;                                          yield return new Token(R.RegexFlags' line' lastLineStart' flagsStart' input.Substring(flagsStart' i - flagsStart));                                      }                                      goto loop;                                  }                                    // Add character to buffer                                  buffer.Append(input[i]);                                  i++;                              }                                // Reached EOF                              compiler.SyntaxError(line' lastLineStart' regStart' i - regStart' false' "err-compiler-incomplete-regex");                          }                          else                          {                              // Impossible to create regex here because there are too few characters remaining                              compiler.SyntaxError(line' lastLineStart' i' len - i' false' "err-compiler-incomplete-regex");                          }                          break;                        case '[':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftSquare' line' lastLineStart' i' c);                          break;                      case ']':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightSquare' line' lastLineStart' i' c);                          break;                      case '{':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftCurly' line' lastLineStart' i' c);                          break;                      case '}':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightCurly' line' lastLineStart' i' c);                          break;                      case '(':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftParen' line' lastLineStart' i' c);                          break;                      case ')':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightParen' line' lastLineStart' i' c);                          break;                      case '<':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftAngle' line' lastLineStart' i' c);                          break;                      case '>':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightAngle' line' lastLineStart' i' c);                          break;                      case '|':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Pipe' line' lastLineStart' i' c);                          break;                      case '?':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (li - i > 0 && input[i + 1] == '!')                          {                              yield return new Token(R.Without' line' lastLineStart' i' "?!");                              i++;                              break;                          }                          yield return new Token(R.Question' line' lastLineStart' i' c);                          break;                      case '!':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Exclamation' line' lastLineStart' i' c);                          break;                      case '@':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.At' line' lastLineStart' i' c);                          break;                      case '-':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Hyphen' line' lastLineStart' i' c);                          break;                      case '$':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Dollar' line' lastLineStart' i' c);                          break;                      case '=':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Equal' line' lastLineStart' i' c);                          break;                      case '&':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Ampersand' line' lastLineStart' i' c);                          break;                      case '+':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Plus' line' lastLineStart' i' c);                          break;                      case '.':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Period' line' lastLineStart' i' c);                          break;                      case ':':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Check for double-colon                          if (li - i > 0 && input[i + 1] == ':')                          {                              yield return new Token(R.DoubleColon' line' lastLineStart' i' "::");                              i += 2;                              goto loop;                          }                          yield return new Token(R.Colon' line' lastLineStart' i' c);                          break;                      case ';':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Semicolon' line' lastLineStart' i' c);                          break;                      default:                          if (text.Length == 0)                          {                              lastTextLine = line;                              lastTextIndex = i;                              lastTextLineStart = lastLineStart;                          }                          text.Append(c);                          cycleWroteText = true;                          break;                  }                    // Iterates the index                  iterate:                  i++;                    loop: // Skips iteration of the index                    // Emit text token if appropriate                  if (!cycleWroteText && text.Length > 0)                  {                      yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                      text.Length = 0;                  }              }
Magic Number,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,The following statement contains a magic number: while (i < len)              {                  // No text was written on this cycle yet' so set this to false                  cycleWroteText = false;                    // Set the current scanned character                  c = input[i];                    // If a newline is detected' update all line state variables                  if (c == '\n')                  {                      line++;                      lastLineStart = i + 1;                      lineStart = true;                      whitespace.Length = 0;                      goto iterate;                  }                    // Skip carriage returns too                  if (c == '\r') goto iterate;                    // If whitespace' capture it all before moving on                  if (char.IsWhiteSpace(c))                  {                      if (!lineStart) whitespace.Append(input[i]);                      goto iterate;                  }                    // At this point' a non-whitespace character has been read.                    // Emit whitespace if queued                  if (whitespace.Length > 0)                  {                      // If it's a line breaking character' a comment' or at the start of a line' skip it.                      if (!lineStart && c != '#')                          yield return new Token(R.Whitespace' line' lastLineStart' i' whitespace.ToString());                      whitespace.Length = 0;                  }                    lineStart = false;                    switch (c)                  {                      // Comment                      case '#':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Just eat the line and ignore it                          while (i < len && input[i] != '\n') i++;  						continue;                        // Escape sequence                      case '\\':                      {                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (i == li)                          {                              // This is the last character! Blasphemy!                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              yield break;                          }                            // At this point we know there's at least one character. Great!                            int escStart = i++; // Skip the slash    						// Verbose character  						if (input[i] == '@')  						{  							int nameStart = ++i;  							while(i < len)  							{  								if (input[i] == '@')  								{  									var name = input.Substring(nameStart' i - nameStart).Trim();  									var unicode = Unicode.GetByName(name);  									if (string.IsNullOrEmpty(unicode))  									{  										compiler.SyntaxError(line' lastLineStart' nameStart' i - nameStart' false' "err-compiler-invalid-vchar"' name);  										goto iterate;  									}  									yield return new Token(R.Text' line' lastLineStart' nameStart' unicode);  									goto iterate;  								}  								i++;  							}  							compiler.SyntaxError(line' lastLineStart' i - 1' 1' false' "err-compiler-incomplete-vchar");  							break;  						}                            // No escaping whitespace.                          if (char.IsWhiteSpace(input[i]))                          {                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              break;                          }                            // There's a quantifier here.                          if (char.IsDigit(input[i]))                          {                              int qStart = i++; // Skip past the digit                              while (i < len && char.IsDigit(input[i])) i++;                              if (i >= li)                              {                                  compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                                  break;                              }                              // We need a comma after a quantifier                              if (input[i] != ''')                              {                                  compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-missing-quantity-comma");                                  break;                              }                              yield return new Token(R.EscapeSequenceQuantifier' line' lastLineStart' qStart' input.Substring(qStart' i - qStart));                              i++; // Skip past the comma                          }                            // At this point we need to make sure that there are more characters                          if (i >= len)                          {                              compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                              break;                          }                            switch (input[i])                          {                              case 'u': // Unicode code point                                  // This will require 4 characters                                  if (len - ++i < 4)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceUnicode' line' lastLineStart' escStart' input.Substring(i' 4));                                  i += 4;                                  goto loop;                              case 'U': // Unicode surrogate pair                                  // This will require 8 characters                                  if (len - ++i < 8)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceSurrogatePair' line' lastLineStart' escStart' input.Substring(i' 8));                                  i += 8;                                  goto loop;                              default:                                  // Spit out the escape char token                                  yield return new Token(R.EscapeSequenceChar' line' lastLineStart' i' input[i]);                                  goto iterate;                          }                      }                        // Verbatim string                      case '\"':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of quotes                          if (len - i >= 2)                          {                              int vstrStart = ++i; // Skip past starting quote                              var buffer = new StringBuilder();                              while (i < len)                              {                                  // Found a matching quote?                                  if (input[i] == '\"')                                  {                                      // Oh' it's just an escaped quote. (two in a row)                                      if (i < li && input[i + 1] == '\"')                                      {                                          buffer.Append('\"');                                          i += 2; // Skip past current and second quote                                          continue;                                      }                                        // Neato' looks like it's the end of the string literal.                                        // We don't need a new token for this' so just add it to the text buffer.                                      if (text.Length == 0)                                      {                                          lastTextLine = line;                                          lastTextIndex = i;                                          lastTextLineStart = lastLineStart;                                      }                                      text.Append(buffer);                                      cycleWroteText = true;                                        i++;                                      goto loop;                                  }                                  buffer.Append(input[i]);                                  i++;                              }                              compiler.SyntaxError(line' lastLineStart' vstrStart - 1' i - vstrStart' false' "err-compiler-incomplete-verbatim");                          }                          else                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-verbatim");                          break;                        // Regular expression                      case '`':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of apostrophes                          if (li - i >= 2)                          {                              int regStart = ++i; // Skip past starting apostrophe                              var buffer = new StringBuilder();                                while (i < len)                              {                                  // Found an escape sequence in the regex?                                  if (input[i] == '\\')                                  {                                      buffer.Append('\\');                                        // Make sure there's room for an escape code and the end of the literal                                      if (li - i >= 2)                                      {                                          if (input[i + 1] == '`')                                          {                                              buffer.Append('`');                                              i += 2; // Skip past current and second quote                                              continue;                                          }                                          i++;                                          continue;                                      }                                        // If we don't have enough room for an escape char and an ending apostrophe' error.                                      compiler.SyntaxError(line' lastLineStart' regStart - 1' i - regStart + 1' false' "err-compiler-incomplete-regex");                                      break;                                  }                                    // Found another apostrophe that isn't escaped?                                  if (input[i] == '`')                                  {                                      yield return new Token(R.Regex' line' lastLineStart' regStart - 1' buffer.ToString());                                        // Read flags                                      if (++i < len && char.IsLetter(input[i]))                                      {                                          int flagsStart = i++;                                          while (i < len && char.IsLetter(input[i])) i++;                                          yield return new Token(R.RegexFlags' line' lastLineStart' flagsStart' input.Substring(flagsStart' i - flagsStart));                                      }                                      goto loop;                                  }                                    // Add character to buffer                                  buffer.Append(input[i]);                                  i++;                              }                                // Reached EOF                              compiler.SyntaxError(line' lastLineStart' regStart' i - regStart' false' "err-compiler-incomplete-regex");                          }                          else                          {                              // Impossible to create regex here because there are too few characters remaining                              compiler.SyntaxError(line' lastLineStart' i' len - i' false' "err-compiler-incomplete-regex");                          }                          break;                        case '[':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftSquare' line' lastLineStart' i' c);                          break;                      case ']':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightSquare' line' lastLineStart' i' c);                          break;                      case '{':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftCurly' line' lastLineStart' i' c);                          break;                      case '}':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightCurly' line' lastLineStart' i' c);                          break;                      case '(':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftParen' line' lastLineStart' i' c);                          break;                      case ')':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightParen' line' lastLineStart' i' c);                          break;                      case '<':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftAngle' line' lastLineStart' i' c);                          break;                      case '>':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightAngle' line' lastLineStart' i' c);                          break;                      case '|':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Pipe' line' lastLineStart' i' c);                          break;                      case '?':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (li - i > 0 && input[i + 1] == '!')                          {                              yield return new Token(R.Without' line' lastLineStart' i' "?!");                              i++;                              break;                          }                          yield return new Token(R.Question' line' lastLineStart' i' c);                          break;                      case '!':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Exclamation' line' lastLineStart' i' c);                          break;                      case '@':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.At' line' lastLineStart' i' c);                          break;                      case '-':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Hyphen' line' lastLineStart' i' c);                          break;                      case '$':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Dollar' line' lastLineStart' i' c);                          break;                      case '=':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Equal' line' lastLineStart' i' c);                          break;                      case '&':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Ampersand' line' lastLineStart' i' c);                          break;                      case '+':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Plus' line' lastLineStart' i' c);                          break;                      case '.':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Period' line' lastLineStart' i' c);                          break;                      case ':':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Check for double-colon                          if (li - i > 0 && input[i + 1] == ':')                          {                              yield return new Token(R.DoubleColon' line' lastLineStart' i' "::");                              i += 2;                              goto loop;                          }                          yield return new Token(R.Colon' line' lastLineStart' i' c);                          break;                      case ';':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Semicolon' line' lastLineStart' i' c);                          break;                      default:                          if (text.Length == 0)                          {                              lastTextLine = line;                              lastTextIndex = i;                              lastTextLineStart = lastLineStart;                          }                          text.Append(c);                          cycleWroteText = true;                          break;                  }                    // Iterates the index                  iterate:                  i++;                    loop: // Skips iteration of the index                    // Emit text token if appropriate                  if (!cycleWroteText && text.Length > 0)                  {                      yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                      text.Length = 0;                  }              }
Magic Number,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,The following statement contains a magic number: while (i < len)              {                  // No text was written on this cycle yet' so set this to false                  cycleWroteText = false;                    // Set the current scanned character                  c = input[i];                    // If a newline is detected' update all line state variables                  if (c == '\n')                  {                      line++;                      lastLineStart = i + 1;                      lineStart = true;                      whitespace.Length = 0;                      goto iterate;                  }                    // Skip carriage returns too                  if (c == '\r') goto iterate;                    // If whitespace' capture it all before moving on                  if (char.IsWhiteSpace(c))                  {                      if (!lineStart) whitespace.Append(input[i]);                      goto iterate;                  }                    // At this point' a non-whitespace character has been read.                    // Emit whitespace if queued                  if (whitespace.Length > 0)                  {                      // If it's a line breaking character' a comment' or at the start of a line' skip it.                      if (!lineStart && c != '#')                          yield return new Token(R.Whitespace' line' lastLineStart' i' whitespace.ToString());                      whitespace.Length = 0;                  }                    lineStart = false;                    switch (c)                  {                      // Comment                      case '#':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Just eat the line and ignore it                          while (i < len && input[i] != '\n') i++;  						continue;                        // Escape sequence                      case '\\':                      {                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (i == li)                          {                              // This is the last character! Blasphemy!                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              yield break;                          }                            // At this point we know there's at least one character. Great!                            int escStart = i++; // Skip the slash    						// Verbose character  						if (input[i] == '@')  						{  							int nameStart = ++i;  							while(i < len)  							{  								if (input[i] == '@')  								{  									var name = input.Substring(nameStart' i - nameStart).Trim();  									var unicode = Unicode.GetByName(name);  									if (string.IsNullOrEmpty(unicode))  									{  										compiler.SyntaxError(line' lastLineStart' nameStart' i - nameStart' false' "err-compiler-invalid-vchar"' name);  										goto iterate;  									}  									yield return new Token(R.Text' line' lastLineStart' nameStart' unicode);  									goto iterate;  								}  								i++;  							}  							compiler.SyntaxError(line' lastLineStart' i - 1' 1' false' "err-compiler-incomplete-vchar");  							break;  						}                            // No escaping whitespace.                          if (char.IsWhiteSpace(input[i]))                          {                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              break;                          }                            // There's a quantifier here.                          if (char.IsDigit(input[i]))                          {                              int qStart = i++; // Skip past the digit                              while (i < len && char.IsDigit(input[i])) i++;                              if (i >= li)                              {                                  compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                                  break;                              }                              // We need a comma after a quantifier                              if (input[i] != ''')                              {                                  compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-missing-quantity-comma");                                  break;                              }                              yield return new Token(R.EscapeSequenceQuantifier' line' lastLineStart' qStart' input.Substring(qStart' i - qStart));                              i++; // Skip past the comma                          }                            // At this point we need to make sure that there are more characters                          if (i >= len)                          {                              compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                              break;                          }                            switch (input[i])                          {                              case 'u': // Unicode code point                                  // This will require 4 characters                                  if (len - ++i < 4)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceUnicode' line' lastLineStart' escStart' input.Substring(i' 4));                                  i += 4;                                  goto loop;                              case 'U': // Unicode surrogate pair                                  // This will require 8 characters                                  if (len - ++i < 8)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceSurrogatePair' line' lastLineStart' escStart' input.Substring(i' 8));                                  i += 8;                                  goto loop;                              default:                                  // Spit out the escape char token                                  yield return new Token(R.EscapeSequenceChar' line' lastLineStart' i' input[i]);                                  goto iterate;                          }                      }                        // Verbatim string                      case '\"':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of quotes                          if (len - i >= 2)                          {                              int vstrStart = ++i; // Skip past starting quote                              var buffer = new StringBuilder();                              while (i < len)                              {                                  // Found a matching quote?                                  if (input[i] == '\"')                                  {                                      // Oh' it's just an escaped quote. (two in a row)                                      if (i < li && input[i + 1] == '\"')                                      {                                          buffer.Append('\"');                                          i += 2; // Skip past current and second quote                                          continue;                                      }                                        // Neato' looks like it's the end of the string literal.                                        // We don't need a new token for this' so just add it to the text buffer.                                      if (text.Length == 0)                                      {                                          lastTextLine = line;                                          lastTextIndex = i;                                          lastTextLineStart = lastLineStart;                                      }                                      text.Append(buffer);                                      cycleWroteText = true;                                        i++;                                      goto loop;                                  }                                  buffer.Append(input[i]);                                  i++;                              }                              compiler.SyntaxError(line' lastLineStart' vstrStart - 1' i - vstrStart' false' "err-compiler-incomplete-verbatim");                          }                          else                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-verbatim");                          break;                        // Regular expression                      case '`':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of apostrophes                          if (li - i >= 2)                          {                              int regStart = ++i; // Skip past starting apostrophe                              var buffer = new StringBuilder();                                while (i < len)                              {                                  // Found an escape sequence in the regex?                                  if (input[i] == '\\')                                  {                                      buffer.Append('\\');                                        // Make sure there's room for an escape code and the end of the literal                                      if (li - i >= 2)                                      {                                          if (input[i + 1] == '`')                                          {                                              buffer.Append('`');                                              i += 2; // Skip past current and second quote                                              continue;                                          }                                          i++;                                          continue;                                      }                                        // If we don't have enough room for an escape char and an ending apostrophe' error.                                      compiler.SyntaxError(line' lastLineStart' regStart - 1' i - regStart + 1' false' "err-compiler-incomplete-regex");                                      break;                                  }                                    // Found another apostrophe that isn't escaped?                                  if (input[i] == '`')                                  {                                      yield return new Token(R.Regex' line' lastLineStart' regStart - 1' buffer.ToString());                                        // Read flags                                      if (++i < len && char.IsLetter(input[i]))                                      {                                          int flagsStart = i++;                                          while (i < len && char.IsLetter(input[i])) i++;                                          yield return new Token(R.RegexFlags' line' lastLineStart' flagsStart' input.Substring(flagsStart' i - flagsStart));                                      }                                      goto loop;                                  }                                    // Add character to buffer                                  buffer.Append(input[i]);                                  i++;                              }                                // Reached EOF                              compiler.SyntaxError(line' lastLineStart' regStart' i - regStart' false' "err-compiler-incomplete-regex");                          }                          else                          {                              // Impossible to create regex here because there are too few characters remaining                              compiler.SyntaxError(line' lastLineStart' i' len - i' false' "err-compiler-incomplete-regex");                          }                          break;                        case '[':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftSquare' line' lastLineStart' i' c);                          break;                      case ']':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightSquare' line' lastLineStart' i' c);                          break;                      case '{':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftCurly' line' lastLineStart' i' c);                          break;                      case '}':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightCurly' line' lastLineStart' i' c);                          break;                      case '(':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftParen' line' lastLineStart' i' c);                          break;                      case ')':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightParen' line' lastLineStart' i' c);                          break;                      case '<':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftAngle' line' lastLineStart' i' c);                          break;                      case '>':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightAngle' line' lastLineStart' i' c);                          break;                      case '|':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Pipe' line' lastLineStart' i' c);                          break;                      case '?':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (li - i > 0 && input[i + 1] == '!')                          {                              yield return new Token(R.Without' line' lastLineStart' i' "?!");                              i++;                              break;                          }                          yield return new Token(R.Question' line' lastLineStart' i' c);                          break;                      case '!':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Exclamation' line' lastLineStart' i' c);                          break;                      case '@':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.At' line' lastLineStart' i' c);                          break;                      case '-':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Hyphen' line' lastLineStart' i' c);                          break;                      case '$':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Dollar' line' lastLineStart' i' c);                          break;                      case '=':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Equal' line' lastLineStart' i' c);                          break;                      case '&':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Ampersand' line' lastLineStart' i' c);                          break;                      case '+':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Plus' line' lastLineStart' i' c);                          break;                      case '.':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Period' line' lastLineStart' i' c);                          break;                      case ':':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Check for double-colon                          if (li - i > 0 && input[i + 1] == ':')                          {                              yield return new Token(R.DoubleColon' line' lastLineStart' i' "::");                              i += 2;                              goto loop;                          }                          yield return new Token(R.Colon' line' lastLineStart' i' c);                          break;                      case ';':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Semicolon' line' lastLineStart' i' c);                          break;                      default:                          if (text.Length == 0)                          {                              lastTextLine = line;                              lastTextIndex = i;                              lastTextLineStart = lastLineStart;                          }                          text.Append(c);                          cycleWroteText = true;                          break;                  }                    // Iterates the index                  iterate:                  i++;                    loop: // Skips iteration of the index                    // Emit text token if appropriate                  if (!cycleWroteText && text.Length > 0)                  {                      yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                      text.Length = 0;                  }              }
Magic Number,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,The following statement contains a magic number: while (i < len)              {                  // No text was written on this cycle yet' so set this to false                  cycleWroteText = false;                    // Set the current scanned character                  c = input[i];                    // If a newline is detected' update all line state variables                  if (c == '\n')                  {                      line++;                      lastLineStart = i + 1;                      lineStart = true;                      whitespace.Length = 0;                      goto iterate;                  }                    // Skip carriage returns too                  if (c == '\r') goto iterate;                    // If whitespace' capture it all before moving on                  if (char.IsWhiteSpace(c))                  {                      if (!lineStart) whitespace.Append(input[i]);                      goto iterate;                  }                    // At this point' a non-whitespace character has been read.                    // Emit whitespace if queued                  if (whitespace.Length > 0)                  {                      // If it's a line breaking character' a comment' or at the start of a line' skip it.                      if (!lineStart && c != '#')                          yield return new Token(R.Whitespace' line' lastLineStart' i' whitespace.ToString());                      whitespace.Length = 0;                  }                    lineStart = false;                    switch (c)                  {                      // Comment                      case '#':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Just eat the line and ignore it                          while (i < len && input[i] != '\n') i++;  						continue;                        // Escape sequence                      case '\\':                      {                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (i == li)                          {                              // This is the last character! Blasphemy!                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              yield break;                          }                            // At this point we know there's at least one character. Great!                            int escStart = i++; // Skip the slash    						// Verbose character  						if (input[i] == '@')  						{  							int nameStart = ++i;  							while(i < len)  							{  								if (input[i] == '@')  								{  									var name = input.Substring(nameStart' i - nameStart).Trim();  									var unicode = Unicode.GetByName(name);  									if (string.IsNullOrEmpty(unicode))  									{  										compiler.SyntaxError(line' lastLineStart' nameStart' i - nameStart' false' "err-compiler-invalid-vchar"' name);  										goto iterate;  									}  									yield return new Token(R.Text' line' lastLineStart' nameStart' unicode);  									goto iterate;  								}  								i++;  							}  							compiler.SyntaxError(line' lastLineStart' i - 1' 1' false' "err-compiler-incomplete-vchar");  							break;  						}                            // No escaping whitespace.                          if (char.IsWhiteSpace(input[i]))                          {                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              break;                          }                            // There's a quantifier here.                          if (char.IsDigit(input[i]))                          {                              int qStart = i++; // Skip past the digit                              while (i < len && char.IsDigit(input[i])) i++;                              if (i >= li)                              {                                  compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                                  break;                              }                              // We need a comma after a quantifier                              if (input[i] != ''')                              {                                  compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-missing-quantity-comma");                                  break;                              }                              yield return new Token(R.EscapeSequenceQuantifier' line' lastLineStart' qStart' input.Substring(qStart' i - qStart));                              i++; // Skip past the comma                          }                            // At this point we need to make sure that there are more characters                          if (i >= len)                          {                              compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                              break;                          }                            switch (input[i])                          {                              case 'u': // Unicode code point                                  // This will require 4 characters                                  if (len - ++i < 4)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceUnicode' line' lastLineStart' escStart' input.Substring(i' 4));                                  i += 4;                                  goto loop;                              case 'U': // Unicode surrogate pair                                  // This will require 8 characters                                  if (len - ++i < 8)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceSurrogatePair' line' lastLineStart' escStart' input.Substring(i' 8));                                  i += 8;                                  goto loop;                              default:                                  // Spit out the escape char token                                  yield return new Token(R.EscapeSequenceChar' line' lastLineStart' i' input[i]);                                  goto iterate;                          }                      }                        // Verbatim string                      case '\"':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of quotes                          if (len - i >= 2)                          {                              int vstrStart = ++i; // Skip past starting quote                              var buffer = new StringBuilder();                              while (i < len)                              {                                  // Found a matching quote?                                  if (input[i] == '\"')                                  {                                      // Oh' it's just an escaped quote. (two in a row)                                      if (i < li && input[i + 1] == '\"')                                      {                                          buffer.Append('\"');                                          i += 2; // Skip past current and second quote                                          continue;                                      }                                        // Neato' looks like it's the end of the string literal.                                        // We don't need a new token for this' so just add it to the text buffer.                                      if (text.Length == 0)                                      {                                          lastTextLine = line;                                          lastTextIndex = i;                                          lastTextLineStart = lastLineStart;                                      }                                      text.Append(buffer);                                      cycleWroteText = true;                                        i++;                                      goto loop;                                  }                                  buffer.Append(input[i]);                                  i++;                              }                              compiler.SyntaxError(line' lastLineStart' vstrStart - 1' i - vstrStart' false' "err-compiler-incomplete-verbatim");                          }                          else                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-verbatim");                          break;                        // Regular expression                      case '`':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of apostrophes                          if (li - i >= 2)                          {                              int regStart = ++i; // Skip past starting apostrophe                              var buffer = new StringBuilder();                                while (i < len)                              {                                  // Found an escape sequence in the regex?                                  if (input[i] == '\\')                                  {                                      buffer.Append('\\');                                        // Make sure there's room for an escape code and the end of the literal                                      if (li - i >= 2)                                      {                                          if (input[i + 1] == '`')                                          {                                              buffer.Append('`');                                              i += 2; // Skip past current and second quote                                              continue;                                          }                                          i++;                                          continue;                                      }                                        // If we don't have enough room for an escape char and an ending apostrophe' error.                                      compiler.SyntaxError(line' lastLineStart' regStart - 1' i - regStart + 1' false' "err-compiler-incomplete-regex");                                      break;                                  }                                    // Found another apostrophe that isn't escaped?                                  if (input[i] == '`')                                  {                                      yield return new Token(R.Regex' line' lastLineStart' regStart - 1' buffer.ToString());                                        // Read flags                                      if (++i < len && char.IsLetter(input[i]))                                      {                                          int flagsStart = i++;                                          while (i < len && char.IsLetter(input[i])) i++;                                          yield return new Token(R.RegexFlags' line' lastLineStart' flagsStart' input.Substring(flagsStart' i - flagsStart));                                      }                                      goto loop;                                  }                                    // Add character to buffer                                  buffer.Append(input[i]);                                  i++;                              }                                // Reached EOF                              compiler.SyntaxError(line' lastLineStart' regStart' i - regStart' false' "err-compiler-incomplete-regex");                          }                          else                          {                              // Impossible to create regex here because there are too few characters remaining                              compiler.SyntaxError(line' lastLineStart' i' len - i' false' "err-compiler-incomplete-regex");                          }                          break;                        case '[':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftSquare' line' lastLineStart' i' c);                          break;                      case ']':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightSquare' line' lastLineStart' i' c);                          break;                      case '{':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftCurly' line' lastLineStart' i' c);                          break;                      case '}':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightCurly' line' lastLineStart' i' c);                          break;                      case '(':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftParen' line' lastLineStart' i' c);                          break;                      case ')':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightParen' line' lastLineStart' i' c);                          break;                      case '<':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftAngle' line' lastLineStart' i' c);                          break;                      case '>':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightAngle' line' lastLineStart' i' c);                          break;                      case '|':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Pipe' line' lastLineStart' i' c);                          break;                      case '?':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (li - i > 0 && input[i + 1] == '!')                          {                              yield return new Token(R.Without' line' lastLineStart' i' "?!");                              i++;                              break;                          }                          yield return new Token(R.Question' line' lastLineStart' i' c);                          break;                      case '!':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Exclamation' line' lastLineStart' i' c);                          break;                      case '@':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.At' line' lastLineStart' i' c);                          break;                      case '-':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Hyphen' line' lastLineStart' i' c);                          break;                      case '$':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Dollar' line' lastLineStart' i' c);                          break;                      case '=':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Equal' line' lastLineStart' i' c);                          break;                      case '&':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Ampersand' line' lastLineStart' i' c);                          break;                      case '+':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Plus' line' lastLineStart' i' c);                          break;                      case '.':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Period' line' lastLineStart' i' c);                          break;                      case ':':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Check for double-colon                          if (li - i > 0 && input[i + 1] == ':')                          {                              yield return new Token(R.DoubleColon' line' lastLineStart' i' "::");                              i += 2;                              goto loop;                          }                          yield return new Token(R.Colon' line' lastLineStart' i' c);                          break;                      case ';':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Semicolon' line' lastLineStart' i' c);                          break;                      default:                          if (text.Length == 0)                          {                              lastTextLine = line;                              lastTextIndex = i;                              lastTextLineStart = lastLineStart;                          }                          text.Append(c);                          cycleWroteText = true;                          break;                  }                    // Iterates the index                  iterate:                  i++;                    loop: // Skips iteration of the index                    // Emit text token if appropriate                  if (!cycleWroteText && text.Length > 0)                  {                      yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                      text.Length = 0;                  }              }
Magic Number,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,The following statement contains a magic number: while (i < len)              {                  // No text was written on this cycle yet' so set this to false                  cycleWroteText = false;                    // Set the current scanned character                  c = input[i];                    // If a newline is detected' update all line state variables                  if (c == '\n')                  {                      line++;                      lastLineStart = i + 1;                      lineStart = true;                      whitespace.Length = 0;                      goto iterate;                  }                    // Skip carriage returns too                  if (c == '\r') goto iterate;                    // If whitespace' capture it all before moving on                  if (char.IsWhiteSpace(c))                  {                      if (!lineStart) whitespace.Append(input[i]);                      goto iterate;                  }                    // At this point' a non-whitespace character has been read.                    // Emit whitespace if queued                  if (whitespace.Length > 0)                  {                      // If it's a line breaking character' a comment' or at the start of a line' skip it.                      if (!lineStart && c != '#')                          yield return new Token(R.Whitespace' line' lastLineStart' i' whitespace.ToString());                      whitespace.Length = 0;                  }                    lineStart = false;                    switch (c)                  {                      // Comment                      case '#':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Just eat the line and ignore it                          while (i < len && input[i] != '\n') i++;  						continue;                        // Escape sequence                      case '\\':                      {                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (i == li)                          {                              // This is the last character! Blasphemy!                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              yield break;                          }                            // At this point we know there's at least one character. Great!                            int escStart = i++; // Skip the slash    						// Verbose character  						if (input[i] == '@')  						{  							int nameStart = ++i;  							while(i < len)  							{  								if (input[i] == '@')  								{  									var name = input.Substring(nameStart' i - nameStart).Trim();  									var unicode = Unicode.GetByName(name);  									if (string.IsNullOrEmpty(unicode))  									{  										compiler.SyntaxError(line' lastLineStart' nameStart' i - nameStart' false' "err-compiler-invalid-vchar"' name);  										goto iterate;  									}  									yield return new Token(R.Text' line' lastLineStart' nameStart' unicode);  									goto iterate;  								}  								i++;  							}  							compiler.SyntaxError(line' lastLineStart' i - 1' 1' false' "err-compiler-incomplete-vchar");  							break;  						}                            // No escaping whitespace.                          if (char.IsWhiteSpace(input[i]))                          {                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              break;                          }                            // There's a quantifier here.                          if (char.IsDigit(input[i]))                          {                              int qStart = i++; // Skip past the digit                              while (i < len && char.IsDigit(input[i])) i++;                              if (i >= li)                              {                                  compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                                  break;                              }                              // We need a comma after a quantifier                              if (input[i] != ''')                              {                                  compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-missing-quantity-comma");                                  break;                              }                              yield return new Token(R.EscapeSequenceQuantifier' line' lastLineStart' qStart' input.Substring(qStart' i - qStart));                              i++; // Skip past the comma                          }                            // At this point we need to make sure that there are more characters                          if (i >= len)                          {                              compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                              break;                          }                            switch (input[i])                          {                              case 'u': // Unicode code point                                  // This will require 4 characters                                  if (len - ++i < 4)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceUnicode' line' lastLineStart' escStart' input.Substring(i' 4));                                  i += 4;                                  goto loop;                              case 'U': // Unicode surrogate pair                                  // This will require 8 characters                                  if (len - ++i < 8)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceSurrogatePair' line' lastLineStart' escStart' input.Substring(i' 8));                                  i += 8;                                  goto loop;                              default:                                  // Spit out the escape char token                                  yield return new Token(R.EscapeSequenceChar' line' lastLineStart' i' input[i]);                                  goto iterate;                          }                      }                        // Verbatim string                      case '\"':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of quotes                          if (len - i >= 2)                          {                              int vstrStart = ++i; // Skip past starting quote                              var buffer = new StringBuilder();                              while (i < len)                              {                                  // Found a matching quote?                                  if (input[i] == '\"')                                  {                                      // Oh' it's just an escaped quote. (two in a row)                                      if (i < li && input[i + 1] == '\"')                                      {                                          buffer.Append('\"');                                          i += 2; // Skip past current and second quote                                          continue;                                      }                                        // Neato' looks like it's the end of the string literal.                                        // We don't need a new token for this' so just add it to the text buffer.                                      if (text.Length == 0)                                      {                                          lastTextLine = line;                                          lastTextIndex = i;                                          lastTextLineStart = lastLineStart;                                      }                                      text.Append(buffer);                                      cycleWroteText = true;                                        i++;                                      goto loop;                                  }                                  buffer.Append(input[i]);                                  i++;                              }                              compiler.SyntaxError(line' lastLineStart' vstrStart - 1' i - vstrStart' false' "err-compiler-incomplete-verbatim");                          }                          else                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-verbatim");                          break;                        // Regular expression                      case '`':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of apostrophes                          if (li - i >= 2)                          {                              int regStart = ++i; // Skip past starting apostrophe                              var buffer = new StringBuilder();                                while (i < len)                              {                                  // Found an escape sequence in the regex?                                  if (input[i] == '\\')                                  {                                      buffer.Append('\\');                                        // Make sure there's room for an escape code and the end of the literal                                      if (li - i >= 2)                                      {                                          if (input[i + 1] == '`')                                          {                                              buffer.Append('`');                                              i += 2; // Skip past current and second quote                                              continue;                                          }                                          i++;                                          continue;                                      }                                        // If we don't have enough room for an escape char and an ending apostrophe' error.                                      compiler.SyntaxError(line' lastLineStart' regStart - 1' i - regStart + 1' false' "err-compiler-incomplete-regex");                                      break;                                  }                                    // Found another apostrophe that isn't escaped?                                  if (input[i] == '`')                                  {                                      yield return new Token(R.Regex' line' lastLineStart' regStart - 1' buffer.ToString());                                        // Read flags                                      if (++i < len && char.IsLetter(input[i]))                                      {                                          int flagsStart = i++;                                          while (i < len && char.IsLetter(input[i])) i++;                                          yield return new Token(R.RegexFlags' line' lastLineStart' flagsStart' input.Substring(flagsStart' i - flagsStart));                                      }                                      goto loop;                                  }                                    // Add character to buffer                                  buffer.Append(input[i]);                                  i++;                              }                                // Reached EOF                              compiler.SyntaxError(line' lastLineStart' regStart' i - regStart' false' "err-compiler-incomplete-regex");                          }                          else                          {                              // Impossible to create regex here because there are too few characters remaining                              compiler.SyntaxError(line' lastLineStart' i' len - i' false' "err-compiler-incomplete-regex");                          }                          break;                        case '[':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftSquare' line' lastLineStart' i' c);                          break;                      case ']':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightSquare' line' lastLineStart' i' c);                          break;                      case '{':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftCurly' line' lastLineStart' i' c);                          break;                      case '}':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightCurly' line' lastLineStart' i' c);                          break;                      case '(':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftParen' line' lastLineStart' i' c);                          break;                      case ')':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightParen' line' lastLineStart' i' c);                          break;                      case '<':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftAngle' line' lastLineStart' i' c);                          break;                      case '>':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightAngle' line' lastLineStart' i' c);                          break;                      case '|':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Pipe' line' lastLineStart' i' c);                          break;                      case '?':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (li - i > 0 && input[i + 1] == '!')                          {                              yield return new Token(R.Without' line' lastLineStart' i' "?!");                              i++;                              break;                          }                          yield return new Token(R.Question' line' lastLineStart' i' c);                          break;                      case '!':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Exclamation' line' lastLineStart' i' c);                          break;                      case '@':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.At' line' lastLineStart' i' c);                          break;                      case '-':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Hyphen' line' lastLineStart' i' c);                          break;                      case '$':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Dollar' line' lastLineStart' i' c);                          break;                      case '=':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Equal' line' lastLineStart' i' c);                          break;                      case '&':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Ampersand' line' lastLineStart' i' c);                          break;                      case '+':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Plus' line' lastLineStart' i' c);                          break;                      case '.':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Period' line' lastLineStart' i' c);                          break;                      case ':':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Check for double-colon                          if (li - i > 0 && input[i + 1] == ':')                          {                              yield return new Token(R.DoubleColon' line' lastLineStart' i' "::");                              i += 2;                              goto loop;                          }                          yield return new Token(R.Colon' line' lastLineStart' i' c);                          break;                      case ';':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Semicolon' line' lastLineStart' i' c);                          break;                      default:                          if (text.Length == 0)                          {                              lastTextLine = line;                              lastTextIndex = i;                              lastTextLineStart = lastLineStart;                          }                          text.Append(c);                          cycleWroteText = true;                          break;                  }                    // Iterates the index                  iterate:                  i++;                    loop: // Skips iteration of the index                    // Emit text token if appropriate                  if (!cycleWroteText && text.Length > 0)                  {                      yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                      text.Length = 0;                  }              }
Magic Number,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,The following statement contains a magic number: while (i < len)              {                  // No text was written on this cycle yet' so set this to false                  cycleWroteText = false;                    // Set the current scanned character                  c = input[i];                    // If a newline is detected' update all line state variables                  if (c == '\n')                  {                      line++;                      lastLineStart = i + 1;                      lineStart = true;                      whitespace.Length = 0;                      goto iterate;                  }                    // Skip carriage returns too                  if (c == '\r') goto iterate;                    // If whitespace' capture it all before moving on                  if (char.IsWhiteSpace(c))                  {                      if (!lineStart) whitespace.Append(input[i]);                      goto iterate;                  }                    // At this point' a non-whitespace character has been read.                    // Emit whitespace if queued                  if (whitespace.Length > 0)                  {                      // If it's a line breaking character' a comment' or at the start of a line' skip it.                      if (!lineStart && c != '#')                          yield return new Token(R.Whitespace' line' lastLineStart' i' whitespace.ToString());                      whitespace.Length = 0;                  }                    lineStart = false;                    switch (c)                  {                      // Comment                      case '#':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Just eat the line and ignore it                          while (i < len && input[i] != '\n') i++;  						continue;                        // Escape sequence                      case '\\':                      {                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (i == li)                          {                              // This is the last character! Blasphemy!                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              yield break;                          }                            // At this point we know there's at least one character. Great!                            int escStart = i++; // Skip the slash    						// Verbose character  						if (input[i] == '@')  						{  							int nameStart = ++i;  							while(i < len)  							{  								if (input[i] == '@')  								{  									var name = input.Substring(nameStart' i - nameStart).Trim();  									var unicode = Unicode.GetByName(name);  									if (string.IsNullOrEmpty(unicode))  									{  										compiler.SyntaxError(line' lastLineStart' nameStart' i - nameStart' false' "err-compiler-invalid-vchar"' name);  										goto iterate;  									}  									yield return new Token(R.Text' line' lastLineStart' nameStart' unicode);  									goto iterate;  								}  								i++;  							}  							compiler.SyntaxError(line' lastLineStart' i - 1' 1' false' "err-compiler-incomplete-vchar");  							break;  						}                            // No escaping whitespace.                          if (char.IsWhiteSpace(input[i]))                          {                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              break;                          }                            // There's a quantifier here.                          if (char.IsDigit(input[i]))                          {                              int qStart = i++; // Skip past the digit                              while (i < len && char.IsDigit(input[i])) i++;                              if (i >= li)                              {                                  compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                                  break;                              }                              // We need a comma after a quantifier                              if (input[i] != ''')                              {                                  compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-missing-quantity-comma");                                  break;                              }                              yield return new Token(R.EscapeSequenceQuantifier' line' lastLineStart' qStart' input.Substring(qStart' i - qStart));                              i++; // Skip past the comma                          }                            // At this point we need to make sure that there are more characters                          if (i >= len)                          {                              compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                              break;                          }                            switch (input[i])                          {                              case 'u': // Unicode code point                                  // This will require 4 characters                                  if (len - ++i < 4)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceUnicode' line' lastLineStart' escStart' input.Substring(i' 4));                                  i += 4;                                  goto loop;                              case 'U': // Unicode surrogate pair                                  // This will require 8 characters                                  if (len - ++i < 8)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceSurrogatePair' line' lastLineStart' escStart' input.Substring(i' 8));                                  i += 8;                                  goto loop;                              default:                                  // Spit out the escape char token                                  yield return new Token(R.EscapeSequenceChar' line' lastLineStart' i' input[i]);                                  goto iterate;                          }                      }                        // Verbatim string                      case '\"':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of quotes                          if (len - i >= 2)                          {                              int vstrStart = ++i; // Skip past starting quote                              var buffer = new StringBuilder();                              while (i < len)                              {                                  // Found a matching quote?                                  if (input[i] == '\"')                                  {                                      // Oh' it's just an escaped quote. (two in a row)                                      if (i < li && input[i + 1] == '\"')                                      {                                          buffer.Append('\"');                                          i += 2; // Skip past current and second quote                                          continue;                                      }                                        // Neato' looks like it's the end of the string literal.                                        // We don't need a new token for this' so just add it to the text buffer.                                      if (text.Length == 0)                                      {                                          lastTextLine = line;                                          lastTextIndex = i;                                          lastTextLineStart = lastLineStart;                                      }                                      text.Append(buffer);                                      cycleWroteText = true;                                        i++;                                      goto loop;                                  }                                  buffer.Append(input[i]);                                  i++;                              }                              compiler.SyntaxError(line' lastLineStart' vstrStart - 1' i - vstrStart' false' "err-compiler-incomplete-verbatim");                          }                          else                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-verbatim");                          break;                        // Regular expression                      case '`':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of apostrophes                          if (li - i >= 2)                          {                              int regStart = ++i; // Skip past starting apostrophe                              var buffer = new StringBuilder();                                while (i < len)                              {                                  // Found an escape sequence in the regex?                                  if (input[i] == '\\')                                  {                                      buffer.Append('\\');                                        // Make sure there's room for an escape code and the end of the literal                                      if (li - i >= 2)                                      {                                          if (input[i + 1] == '`')                                          {                                              buffer.Append('`');                                              i += 2; // Skip past current and second quote                                              continue;                                          }                                          i++;                                          continue;                                      }                                        // If we don't have enough room for an escape char and an ending apostrophe' error.                                      compiler.SyntaxError(line' lastLineStart' regStart - 1' i - regStart + 1' false' "err-compiler-incomplete-regex");                                      break;                                  }                                    // Found another apostrophe that isn't escaped?                                  if (input[i] == '`')                                  {                                      yield return new Token(R.Regex' line' lastLineStart' regStart - 1' buffer.ToString());                                        // Read flags                                      if (++i < len && char.IsLetter(input[i]))                                      {                                          int flagsStart = i++;                                          while (i < len && char.IsLetter(input[i])) i++;                                          yield return new Token(R.RegexFlags' line' lastLineStart' flagsStart' input.Substring(flagsStart' i - flagsStart));                                      }                                      goto loop;                                  }                                    // Add character to buffer                                  buffer.Append(input[i]);                                  i++;                              }                                // Reached EOF                              compiler.SyntaxError(line' lastLineStart' regStart' i - regStart' false' "err-compiler-incomplete-regex");                          }                          else                          {                              // Impossible to create regex here because there are too few characters remaining                              compiler.SyntaxError(line' lastLineStart' i' len - i' false' "err-compiler-incomplete-regex");                          }                          break;                        case '[':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftSquare' line' lastLineStart' i' c);                          break;                      case ']':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightSquare' line' lastLineStart' i' c);                          break;                      case '{':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftCurly' line' lastLineStart' i' c);                          break;                      case '}':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightCurly' line' lastLineStart' i' c);                          break;                      case '(':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftParen' line' lastLineStart' i' c);                          break;                      case ')':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightParen' line' lastLineStart' i' c);                          break;                      case '<':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftAngle' line' lastLineStart' i' c);                          break;                      case '>':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightAngle' line' lastLineStart' i' c);                          break;                      case '|':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Pipe' line' lastLineStart' i' c);                          break;                      case '?':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (li - i > 0 && input[i + 1] == '!')                          {                              yield return new Token(R.Without' line' lastLineStart' i' "?!");                              i++;                              break;                          }                          yield return new Token(R.Question' line' lastLineStart' i' c);                          break;                      case '!':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Exclamation' line' lastLineStart' i' c);                          break;                      case '@':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.At' line' lastLineStart' i' c);                          break;                      case '-':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Hyphen' line' lastLineStart' i' c);                          break;                      case '$':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Dollar' line' lastLineStart' i' c);                          break;                      case '=':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Equal' line' lastLineStart' i' c);                          break;                      case '&':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Ampersand' line' lastLineStart' i' c);                          break;                      case '+':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Plus' line' lastLineStart' i' c);                          break;                      case '.':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Period' line' lastLineStart' i' c);                          break;                      case ':':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Check for double-colon                          if (li - i > 0 && input[i + 1] == ':')                          {                              yield return new Token(R.DoubleColon' line' lastLineStart' i' "::");                              i += 2;                              goto loop;                          }                          yield return new Token(R.Colon' line' lastLineStart' i' c);                          break;                      case ';':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Semicolon' line' lastLineStart' i' c);                          break;                      default:                          if (text.Length == 0)                          {                              lastTextLine = line;                              lastTextIndex = i;                              lastTextLineStart = lastLineStart;                          }                          text.Append(c);                          cycleWroteText = true;                          break;                  }                    // Iterates the index                  iterate:                  i++;                    loop: // Skips iteration of the index                    // Emit text token if appropriate                  if (!cycleWroteText && text.Length > 0)                  {                      yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                      text.Length = 0;                  }              }
Magic Number,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,The following statement contains a magic number: while (i < len)              {                  // No text was written on this cycle yet' so set this to false                  cycleWroteText = false;                    // Set the current scanned character                  c = input[i];                    // If a newline is detected' update all line state variables                  if (c == '\n')                  {                      line++;                      lastLineStart = i + 1;                      lineStart = true;                      whitespace.Length = 0;                      goto iterate;                  }                    // Skip carriage returns too                  if (c == '\r') goto iterate;                    // If whitespace' capture it all before moving on                  if (char.IsWhiteSpace(c))                  {                      if (!lineStart) whitespace.Append(input[i]);                      goto iterate;                  }                    // At this point' a non-whitespace character has been read.                    // Emit whitespace if queued                  if (whitespace.Length > 0)                  {                      // If it's a line breaking character' a comment' or at the start of a line' skip it.                      if (!lineStart && c != '#')                          yield return new Token(R.Whitespace' line' lastLineStart' i' whitespace.ToString());                      whitespace.Length = 0;                  }                    lineStart = false;                    switch (c)                  {                      // Comment                      case '#':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Just eat the line and ignore it                          while (i < len && input[i] != '\n') i++;  						continue;                        // Escape sequence                      case '\\':                      {                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (i == li)                          {                              // This is the last character! Blasphemy!                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              yield break;                          }                            // At this point we know there's at least one character. Great!                            int escStart = i++; // Skip the slash    						// Verbose character  						if (input[i] == '@')  						{  							int nameStart = ++i;  							while(i < len)  							{  								if (input[i] == '@')  								{  									var name = input.Substring(nameStart' i - nameStart).Trim();  									var unicode = Unicode.GetByName(name);  									if (string.IsNullOrEmpty(unicode))  									{  										compiler.SyntaxError(line' lastLineStart' nameStart' i - nameStart' false' "err-compiler-invalid-vchar"' name);  										goto iterate;  									}  									yield return new Token(R.Text' line' lastLineStart' nameStart' unicode);  									goto iterate;  								}  								i++;  							}  							compiler.SyntaxError(line' lastLineStart' i - 1' 1' false' "err-compiler-incomplete-vchar");  							break;  						}                            // No escaping whitespace.                          if (char.IsWhiteSpace(input[i]))                          {                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              break;                          }                            // There's a quantifier here.                          if (char.IsDigit(input[i]))                          {                              int qStart = i++; // Skip past the digit                              while (i < len && char.IsDigit(input[i])) i++;                              if (i >= li)                              {                                  compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                                  break;                              }                              // We need a comma after a quantifier                              if (input[i] != ''')                              {                                  compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-missing-quantity-comma");                                  break;                              }                              yield return new Token(R.EscapeSequenceQuantifier' line' lastLineStart' qStart' input.Substring(qStart' i - qStart));                              i++; // Skip past the comma                          }                            // At this point we need to make sure that there are more characters                          if (i >= len)                          {                              compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                              break;                          }                            switch (input[i])                          {                              case 'u': // Unicode code point                                  // This will require 4 characters                                  if (len - ++i < 4)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceUnicode' line' lastLineStart' escStart' input.Substring(i' 4));                                  i += 4;                                  goto loop;                              case 'U': // Unicode surrogate pair                                  // This will require 8 characters                                  if (len - ++i < 8)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceSurrogatePair' line' lastLineStart' escStart' input.Substring(i' 8));                                  i += 8;                                  goto loop;                              default:                                  // Spit out the escape char token                                  yield return new Token(R.EscapeSequenceChar' line' lastLineStart' i' input[i]);                                  goto iterate;                          }                      }                        // Verbatim string                      case '\"':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of quotes                          if (len - i >= 2)                          {                              int vstrStart = ++i; // Skip past starting quote                              var buffer = new StringBuilder();                              while (i < len)                              {                                  // Found a matching quote?                                  if (input[i] == '\"')                                  {                                      // Oh' it's just an escaped quote. (two in a row)                                      if (i < li && input[i + 1] == '\"')                                      {                                          buffer.Append('\"');                                          i += 2; // Skip past current and second quote                                          continue;                                      }                                        // Neato' looks like it's the end of the string literal.                                        // We don't need a new token for this' so just add it to the text buffer.                                      if (text.Length == 0)                                      {                                          lastTextLine = line;                                          lastTextIndex = i;                                          lastTextLineStart = lastLineStart;                                      }                                      text.Append(buffer);                                      cycleWroteText = true;                                        i++;                                      goto loop;                                  }                                  buffer.Append(input[i]);                                  i++;                              }                              compiler.SyntaxError(line' lastLineStart' vstrStart - 1' i - vstrStart' false' "err-compiler-incomplete-verbatim");                          }                          else                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-verbatim");                          break;                        // Regular expression                      case '`':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of apostrophes                          if (li - i >= 2)                          {                              int regStart = ++i; // Skip past starting apostrophe                              var buffer = new StringBuilder();                                while (i < len)                              {                                  // Found an escape sequence in the regex?                                  if (input[i] == '\\')                                  {                                      buffer.Append('\\');                                        // Make sure there's room for an escape code and the end of the literal                                      if (li - i >= 2)                                      {                                          if (input[i + 1] == '`')                                          {                                              buffer.Append('`');                                              i += 2; // Skip past current and second quote                                              continue;                                          }                                          i++;                                          continue;                                      }                                        // If we don't have enough room for an escape char and an ending apostrophe' error.                                      compiler.SyntaxError(line' lastLineStart' regStart - 1' i - regStart + 1' false' "err-compiler-incomplete-regex");                                      break;                                  }                                    // Found another apostrophe that isn't escaped?                                  if (input[i] == '`')                                  {                                      yield return new Token(R.Regex' line' lastLineStart' regStart - 1' buffer.ToString());                                        // Read flags                                      if (++i < len && char.IsLetter(input[i]))                                      {                                          int flagsStart = i++;                                          while (i < len && char.IsLetter(input[i])) i++;                                          yield return new Token(R.RegexFlags' line' lastLineStart' flagsStart' input.Substring(flagsStart' i - flagsStart));                                      }                                      goto loop;                                  }                                    // Add character to buffer                                  buffer.Append(input[i]);                                  i++;                              }                                // Reached EOF                              compiler.SyntaxError(line' lastLineStart' regStart' i - regStart' false' "err-compiler-incomplete-regex");                          }                          else                          {                              // Impossible to create regex here because there are too few characters remaining                              compiler.SyntaxError(line' lastLineStart' i' len - i' false' "err-compiler-incomplete-regex");                          }                          break;                        case '[':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftSquare' line' lastLineStart' i' c);                          break;                      case ']':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightSquare' line' lastLineStart' i' c);                          break;                      case '{':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftCurly' line' lastLineStart' i' c);                          break;                      case '}':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightCurly' line' lastLineStart' i' c);                          break;                      case '(':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftParen' line' lastLineStart' i' c);                          break;                      case ')':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightParen' line' lastLineStart' i' c);                          break;                      case '<':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftAngle' line' lastLineStart' i' c);                          break;                      case '>':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightAngle' line' lastLineStart' i' c);                          break;                      case '|':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Pipe' line' lastLineStart' i' c);                          break;                      case '?':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (li - i > 0 && input[i + 1] == '!')                          {                              yield return new Token(R.Without' line' lastLineStart' i' "?!");                              i++;                              break;                          }                          yield return new Token(R.Question' line' lastLineStart' i' c);                          break;                      case '!':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Exclamation' line' lastLineStart' i' c);                          break;                      case '@':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.At' line' lastLineStart' i' c);                          break;                      case '-':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Hyphen' line' lastLineStart' i' c);                          break;                      case '$':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Dollar' line' lastLineStart' i' c);                          break;                      case '=':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Equal' line' lastLineStart' i' c);                          break;                      case '&':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Ampersand' line' lastLineStart' i' c);                          break;                      case '+':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Plus' line' lastLineStart' i' c);                          break;                      case '.':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Period' line' lastLineStart' i' c);                          break;                      case ':':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Check for double-colon                          if (li - i > 0 && input[i + 1] == ':')                          {                              yield return new Token(R.DoubleColon' line' lastLineStart' i' "::");                              i += 2;                              goto loop;                          }                          yield return new Token(R.Colon' line' lastLineStart' i' c);                          break;                      case ';':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Semicolon' line' lastLineStart' i' c);                          break;                      default:                          if (text.Length == 0)                          {                              lastTextLine = line;                              lastTextIndex = i;                              lastTextLineStart = lastLineStart;                          }                          text.Append(c);                          cycleWroteText = true;                          break;                  }                    // Iterates the index                  iterate:                  i++;                    loop: // Skips iteration of the index                    // Emit text token if appropriate                  if (!cycleWroteText && text.Length > 0)                  {                      yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                      text.Length = 0;                  }              }
Magic Number,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,The following statement contains a magic number: while (i < len)              {                  // No text was written on this cycle yet' so set this to false                  cycleWroteText = false;                    // Set the current scanned character                  c = input[i];                    // If a newline is detected' update all line state variables                  if (c == '\n')                  {                      line++;                      lastLineStart = i + 1;                      lineStart = true;                      whitespace.Length = 0;                      goto iterate;                  }                    // Skip carriage returns too                  if (c == '\r') goto iterate;                    // If whitespace' capture it all before moving on                  if (char.IsWhiteSpace(c))                  {                      if (!lineStart) whitespace.Append(input[i]);                      goto iterate;                  }                    // At this point' a non-whitespace character has been read.                    // Emit whitespace if queued                  if (whitespace.Length > 0)                  {                      // If it's a line breaking character' a comment' or at the start of a line' skip it.                      if (!lineStart && c != '#')                          yield return new Token(R.Whitespace' line' lastLineStart' i' whitespace.ToString());                      whitespace.Length = 0;                  }                    lineStart = false;                    switch (c)                  {                      // Comment                      case '#':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Just eat the line and ignore it                          while (i < len && input[i] != '\n') i++;  						continue;                        // Escape sequence                      case '\\':                      {                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (i == li)                          {                              // This is the last character! Blasphemy!                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              yield break;                          }                            // At this point we know there's at least one character. Great!                            int escStart = i++; // Skip the slash    						// Verbose character  						if (input[i] == '@')  						{  							int nameStart = ++i;  							while(i < len)  							{  								if (input[i] == '@')  								{  									var name = input.Substring(nameStart' i - nameStart).Trim();  									var unicode = Unicode.GetByName(name);  									if (string.IsNullOrEmpty(unicode))  									{  										compiler.SyntaxError(line' lastLineStart' nameStart' i - nameStart' false' "err-compiler-invalid-vchar"' name);  										goto iterate;  									}  									yield return new Token(R.Text' line' lastLineStart' nameStart' unicode);  									goto iterate;  								}  								i++;  							}  							compiler.SyntaxError(line' lastLineStart' i - 1' 1' false' "err-compiler-incomplete-vchar");  							break;  						}                            // No escaping whitespace.                          if (char.IsWhiteSpace(input[i]))                          {                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              break;                          }                            // There's a quantifier here.                          if (char.IsDigit(input[i]))                          {                              int qStart = i++; // Skip past the digit                              while (i < len && char.IsDigit(input[i])) i++;                              if (i >= li)                              {                                  compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                                  break;                              }                              // We need a comma after a quantifier                              if (input[i] != ''')                              {                                  compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-missing-quantity-comma");                                  break;                              }                              yield return new Token(R.EscapeSequenceQuantifier' line' lastLineStart' qStart' input.Substring(qStart' i - qStart));                              i++; // Skip past the comma                          }                            // At this point we need to make sure that there are more characters                          if (i >= len)                          {                              compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                              break;                          }                            switch (input[i])                          {                              case 'u': // Unicode code point                                  // This will require 4 characters                                  if (len - ++i < 4)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceUnicode' line' lastLineStart' escStart' input.Substring(i' 4));                                  i += 4;                                  goto loop;                              case 'U': // Unicode surrogate pair                                  // This will require 8 characters                                  if (len - ++i < 8)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceSurrogatePair' line' lastLineStart' escStart' input.Substring(i' 8));                                  i += 8;                                  goto loop;                              default:                                  // Spit out the escape char token                                  yield return new Token(R.EscapeSequenceChar' line' lastLineStart' i' input[i]);                                  goto iterate;                          }                      }                        // Verbatim string                      case '\"':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of quotes                          if (len - i >= 2)                          {                              int vstrStart = ++i; // Skip past starting quote                              var buffer = new StringBuilder();                              while (i < len)                              {                                  // Found a matching quote?                                  if (input[i] == '\"')                                  {                                      // Oh' it's just an escaped quote. (two in a row)                                      if (i < li && input[i + 1] == '\"')                                      {                                          buffer.Append('\"');                                          i += 2; // Skip past current and second quote                                          continue;                                      }                                        // Neato' looks like it's the end of the string literal.                                        // We don't need a new token for this' so just add it to the text buffer.                                      if (text.Length == 0)                                      {                                          lastTextLine = line;                                          lastTextIndex = i;                                          lastTextLineStart = lastLineStart;                                      }                                      text.Append(buffer);                                      cycleWroteText = true;                                        i++;                                      goto loop;                                  }                                  buffer.Append(input[i]);                                  i++;                              }                              compiler.SyntaxError(line' lastLineStart' vstrStart - 1' i - vstrStart' false' "err-compiler-incomplete-verbatim");                          }                          else                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-verbatim");                          break;                        // Regular expression                      case '`':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of apostrophes                          if (li - i >= 2)                          {                              int regStart = ++i; // Skip past starting apostrophe                              var buffer = new StringBuilder();                                while (i < len)                              {                                  // Found an escape sequence in the regex?                                  if (input[i] == '\\')                                  {                                      buffer.Append('\\');                                        // Make sure there's room for an escape code and the end of the literal                                      if (li - i >= 2)                                      {                                          if (input[i + 1] == '`')                                          {                                              buffer.Append('`');                                              i += 2; // Skip past current and second quote                                              continue;                                          }                                          i++;                                          continue;                                      }                                        // If we don't have enough room for an escape char and an ending apostrophe' error.                                      compiler.SyntaxError(line' lastLineStart' regStart - 1' i - regStart + 1' false' "err-compiler-incomplete-regex");                                      break;                                  }                                    // Found another apostrophe that isn't escaped?                                  if (input[i] == '`')                                  {                                      yield return new Token(R.Regex' line' lastLineStart' regStart - 1' buffer.ToString());                                        // Read flags                                      if (++i < len && char.IsLetter(input[i]))                                      {                                          int flagsStart = i++;                                          while (i < len && char.IsLetter(input[i])) i++;                                          yield return new Token(R.RegexFlags' line' lastLineStart' flagsStart' input.Substring(flagsStart' i - flagsStart));                                      }                                      goto loop;                                  }                                    // Add character to buffer                                  buffer.Append(input[i]);                                  i++;                              }                                // Reached EOF                              compiler.SyntaxError(line' lastLineStart' regStart' i - regStart' false' "err-compiler-incomplete-regex");                          }                          else                          {                              // Impossible to create regex here because there are too few characters remaining                              compiler.SyntaxError(line' lastLineStart' i' len - i' false' "err-compiler-incomplete-regex");                          }                          break;                        case '[':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftSquare' line' lastLineStart' i' c);                          break;                      case ']':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightSquare' line' lastLineStart' i' c);                          break;                      case '{':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftCurly' line' lastLineStart' i' c);                          break;                      case '}':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightCurly' line' lastLineStart' i' c);                          break;                      case '(':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftParen' line' lastLineStart' i' c);                          break;                      case ')':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightParen' line' lastLineStart' i' c);                          break;                      case '<':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftAngle' line' lastLineStart' i' c);                          break;                      case '>':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightAngle' line' lastLineStart' i' c);                          break;                      case '|':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Pipe' line' lastLineStart' i' c);                          break;                      case '?':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (li - i > 0 && input[i + 1] == '!')                          {                              yield return new Token(R.Without' line' lastLineStart' i' "?!");                              i++;                              break;                          }                          yield return new Token(R.Question' line' lastLineStart' i' c);                          break;                      case '!':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Exclamation' line' lastLineStart' i' c);                          break;                      case '@':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.At' line' lastLineStart' i' c);                          break;                      case '-':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Hyphen' line' lastLineStart' i' c);                          break;                      case '$':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Dollar' line' lastLineStart' i' c);                          break;                      case '=':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Equal' line' lastLineStart' i' c);                          break;                      case '&':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Ampersand' line' lastLineStart' i' c);                          break;                      case '+':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Plus' line' lastLineStart' i' c);                          break;                      case '.':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Period' line' lastLineStart' i' c);                          break;                      case ':':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Check for double-colon                          if (li - i > 0 && input[i + 1] == ':')                          {                              yield return new Token(R.DoubleColon' line' lastLineStart' i' "::");                              i += 2;                              goto loop;                          }                          yield return new Token(R.Colon' line' lastLineStart' i' c);                          break;                      case ';':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Semicolon' line' lastLineStart' i' c);                          break;                      default:                          if (text.Length == 0)                          {                              lastTextLine = line;                              lastTextIndex = i;                              lastTextLineStart = lastLineStart;                          }                          text.Append(c);                          cycleWroteText = true;                          break;                  }                    // Iterates the index                  iterate:                  i++;                    loop: // Skips iteration of the index                    // Emit text token if appropriate                  if (!cycleWroteText && text.Length > 0)                  {                      yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                      text.Length = 0;                  }              }
Magic Number,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,The following statement contains a magic number: while (i < len)              {                  // No text was written on this cycle yet' so set this to false                  cycleWroteText = false;                    // Set the current scanned character                  c = input[i];                    // If a newline is detected' update all line state variables                  if (c == '\n')                  {                      line++;                      lastLineStart = i + 1;                      lineStart = true;                      whitespace.Length = 0;                      goto iterate;                  }                    // Skip carriage returns too                  if (c == '\r') goto iterate;                    // If whitespace' capture it all before moving on                  if (char.IsWhiteSpace(c))                  {                      if (!lineStart) whitespace.Append(input[i]);                      goto iterate;                  }                    // At this point' a non-whitespace character has been read.                    // Emit whitespace if queued                  if (whitespace.Length > 0)                  {                      // If it's a line breaking character' a comment' or at the start of a line' skip it.                      if (!lineStart && c != '#')                          yield return new Token(R.Whitespace' line' lastLineStart' i' whitespace.ToString());                      whitespace.Length = 0;                  }                    lineStart = false;                    switch (c)                  {                      // Comment                      case '#':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Just eat the line and ignore it                          while (i < len && input[i] != '\n') i++;  						continue;                        // Escape sequence                      case '\\':                      {                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (i == li)                          {                              // This is the last character! Blasphemy!                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              yield break;                          }                            // At this point we know there's at least one character. Great!                            int escStart = i++; // Skip the slash    						// Verbose character  						if (input[i] == '@')  						{  							int nameStart = ++i;  							while(i < len)  							{  								if (input[i] == '@')  								{  									var name = input.Substring(nameStart' i - nameStart).Trim();  									var unicode = Unicode.GetByName(name);  									if (string.IsNullOrEmpty(unicode))  									{  										compiler.SyntaxError(line' lastLineStart' nameStart' i - nameStart' false' "err-compiler-invalid-vchar"' name);  										goto iterate;  									}  									yield return new Token(R.Text' line' lastLineStart' nameStart' unicode);  									goto iterate;  								}  								i++;  							}  							compiler.SyntaxError(line' lastLineStart' i - 1' 1' false' "err-compiler-incomplete-vchar");  							break;  						}                            // No escaping whitespace.                          if (char.IsWhiteSpace(input[i]))                          {                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              break;                          }                            // There's a quantifier here.                          if (char.IsDigit(input[i]))                          {                              int qStart = i++; // Skip past the digit                              while (i < len && char.IsDigit(input[i])) i++;                              if (i >= li)                              {                                  compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                                  break;                              }                              // We need a comma after a quantifier                              if (input[i] != ''')                              {                                  compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-missing-quantity-comma");                                  break;                              }                              yield return new Token(R.EscapeSequenceQuantifier' line' lastLineStart' qStart' input.Substring(qStart' i - qStart));                              i++; // Skip past the comma                          }                            // At this point we need to make sure that there are more characters                          if (i >= len)                          {                              compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                              break;                          }                            switch (input[i])                          {                              case 'u': // Unicode code point                                  // This will require 4 characters                                  if (len - ++i < 4)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceUnicode' line' lastLineStart' escStart' input.Substring(i' 4));                                  i += 4;                                  goto loop;                              case 'U': // Unicode surrogate pair                                  // This will require 8 characters                                  if (len - ++i < 8)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceSurrogatePair' line' lastLineStart' escStart' input.Substring(i' 8));                                  i += 8;                                  goto loop;                              default:                                  // Spit out the escape char token                                  yield return new Token(R.EscapeSequenceChar' line' lastLineStart' i' input[i]);                                  goto iterate;                          }                      }                        // Verbatim string                      case '\"':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of quotes                          if (len - i >= 2)                          {                              int vstrStart = ++i; // Skip past starting quote                              var buffer = new StringBuilder();                              while (i < len)                              {                                  // Found a matching quote?                                  if (input[i] == '\"')                                  {                                      // Oh' it's just an escaped quote. (two in a row)                                      if (i < li && input[i + 1] == '\"')                                      {                                          buffer.Append('\"');                                          i += 2; // Skip past current and second quote                                          continue;                                      }                                        // Neato' looks like it's the end of the string literal.                                        // We don't need a new token for this' so just add it to the text buffer.                                      if (text.Length == 0)                                      {                                          lastTextLine = line;                                          lastTextIndex = i;                                          lastTextLineStart = lastLineStart;                                      }                                      text.Append(buffer);                                      cycleWroteText = true;                                        i++;                                      goto loop;                                  }                                  buffer.Append(input[i]);                                  i++;                              }                              compiler.SyntaxError(line' lastLineStart' vstrStart - 1' i - vstrStart' false' "err-compiler-incomplete-verbatim");                          }                          else                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-verbatim");                          break;                        // Regular expression                      case '`':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of apostrophes                          if (li - i >= 2)                          {                              int regStart = ++i; // Skip past starting apostrophe                              var buffer = new StringBuilder();                                while (i < len)                              {                                  // Found an escape sequence in the regex?                                  if (input[i] == '\\')                                  {                                      buffer.Append('\\');                                        // Make sure there's room for an escape code and the end of the literal                                      if (li - i >= 2)                                      {                                          if (input[i + 1] == '`')                                          {                                              buffer.Append('`');                                              i += 2; // Skip past current and second quote                                              continue;                                          }                                          i++;                                          continue;                                      }                                        // If we don't have enough room for an escape char and an ending apostrophe' error.                                      compiler.SyntaxError(line' lastLineStart' regStart - 1' i - regStart + 1' false' "err-compiler-incomplete-regex");                                      break;                                  }                                    // Found another apostrophe that isn't escaped?                                  if (input[i] == '`')                                  {                                      yield return new Token(R.Regex' line' lastLineStart' regStart - 1' buffer.ToString());                                        // Read flags                                      if (++i < len && char.IsLetter(input[i]))                                      {                                          int flagsStart = i++;                                          while (i < len && char.IsLetter(input[i])) i++;                                          yield return new Token(R.RegexFlags' line' lastLineStart' flagsStart' input.Substring(flagsStart' i - flagsStart));                                      }                                      goto loop;                                  }                                    // Add character to buffer                                  buffer.Append(input[i]);                                  i++;                              }                                // Reached EOF                              compiler.SyntaxError(line' lastLineStart' regStart' i - regStart' false' "err-compiler-incomplete-regex");                          }                          else                          {                              // Impossible to create regex here because there are too few characters remaining                              compiler.SyntaxError(line' lastLineStart' i' len - i' false' "err-compiler-incomplete-regex");                          }                          break;                        case '[':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftSquare' line' lastLineStart' i' c);                          break;                      case ']':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightSquare' line' lastLineStart' i' c);                          break;                      case '{':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftCurly' line' lastLineStart' i' c);                          break;                      case '}':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightCurly' line' lastLineStart' i' c);                          break;                      case '(':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftParen' line' lastLineStart' i' c);                          break;                      case ')':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightParen' line' lastLineStart' i' c);                          break;                      case '<':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftAngle' line' lastLineStart' i' c);                          break;                      case '>':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightAngle' line' lastLineStart' i' c);                          break;                      case '|':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Pipe' line' lastLineStart' i' c);                          break;                      case '?':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (li - i > 0 && input[i + 1] == '!')                          {                              yield return new Token(R.Without' line' lastLineStart' i' "?!");                              i++;                              break;                          }                          yield return new Token(R.Question' line' lastLineStart' i' c);                          break;                      case '!':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Exclamation' line' lastLineStart' i' c);                          break;                      case '@':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.At' line' lastLineStart' i' c);                          break;                      case '-':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Hyphen' line' lastLineStart' i' c);                          break;                      case '$':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Dollar' line' lastLineStart' i' c);                          break;                      case '=':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Equal' line' lastLineStart' i' c);                          break;                      case '&':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Ampersand' line' lastLineStart' i' c);                          break;                      case '+':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Plus' line' lastLineStart' i' c);                          break;                      case '.':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Period' line' lastLineStart' i' c);                          break;                      case ':':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Check for double-colon                          if (li - i > 0 && input[i + 1] == ':')                          {                              yield return new Token(R.DoubleColon' line' lastLineStart' i' "::");                              i += 2;                              goto loop;                          }                          yield return new Token(R.Colon' line' lastLineStart' i' c);                          break;                      case ';':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Semicolon' line' lastLineStart' i' c);                          break;                      default:                          if (text.Length == 0)                          {                              lastTextLine = line;                              lastTextIndex = i;                              lastTextLineStart = lastLineStart;                          }                          text.Append(c);                          cycleWroteText = true;                          break;                  }                    // Iterates the index                  iterate:                  i++;                    loop: // Skips iteration of the index                    // Emit text token if appropriate                  if (!cycleWroteText && text.Length > 0)                  {                      yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                      text.Length = 0;                  }              }
Magic Number,Rant.Core.Compiler,RantLexer,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\RantLexer.cs,Lex,The following statement contains a magic number: while (i < len)              {                  // No text was written on this cycle yet' so set this to false                  cycleWroteText = false;                    // Set the current scanned character                  c = input[i];                    // If a newline is detected' update all line state variables                  if (c == '\n')                  {                      line++;                      lastLineStart = i + 1;                      lineStart = true;                      whitespace.Length = 0;                      goto iterate;                  }                    // Skip carriage returns too                  if (c == '\r') goto iterate;                    // If whitespace' capture it all before moving on                  if (char.IsWhiteSpace(c))                  {                      if (!lineStart) whitespace.Append(input[i]);                      goto iterate;                  }                    // At this point' a non-whitespace character has been read.                    // Emit whitespace if queued                  if (whitespace.Length > 0)                  {                      // If it's a line breaking character' a comment' or at the start of a line' skip it.                      if (!lineStart && c != '#')                          yield return new Token(R.Whitespace' line' lastLineStart' i' whitespace.ToString());                      whitespace.Length = 0;                  }                    lineStart = false;                    switch (c)                  {                      // Comment                      case '#':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Just eat the line and ignore it                          while (i < len && input[i] != '\n') i++;  						continue;                        // Escape sequence                      case '\\':                      {                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (i == li)                          {                              // This is the last character! Blasphemy!                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              yield break;                          }                            // At this point we know there's at least one character. Great!                            int escStart = i++; // Skip the slash    						// Verbose character  						if (input[i] == '@')  						{  							int nameStart = ++i;  							while(i < len)  							{  								if (input[i] == '@')  								{  									var name = input.Substring(nameStart' i - nameStart).Trim();  									var unicode = Unicode.GetByName(name);  									if (string.IsNullOrEmpty(unicode))  									{  										compiler.SyntaxError(line' lastLineStart' nameStart' i - nameStart' false' "err-compiler-invalid-vchar"' name);  										goto iterate;  									}  									yield return new Token(R.Text' line' lastLineStart' nameStart' unicode);  									goto iterate;  								}  								i++;  							}  							compiler.SyntaxError(line' lastLineStart' i - 1' 1' false' "err-compiler-incomplete-vchar");  							break;  						}                            // No escaping whitespace.                          if (char.IsWhiteSpace(input[i]))                          {                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-escape");                              break;                          }                            // There's a quantifier here.                          if (char.IsDigit(input[i]))                          {                              int qStart = i++; // Skip past the digit                              while (i < len && char.IsDigit(input[i])) i++;                              if (i >= li)                              {                                  compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                                  break;                              }                              // We need a comma after a quantifier                              if (input[i] != ''')                              {                                  compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-missing-quantity-comma");                                  break;                              }                              yield return new Token(R.EscapeSequenceQuantifier' line' lastLineStart' qStart' input.Substring(qStart' i - qStart));                              i++; // Skip past the comma                          }                            // At this point we need to make sure that there are more characters                          if (i >= len)                          {                              compiler.SyntaxError(line' lastLineStart' escStart' i - escStart' false' "err-compiler-incomplete-escape");                              break;                          }                            switch (input[i])                          {                              case 'u': // Unicode code point                                  // This will require 4 characters                                  if (len - ++i < 4)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceUnicode' line' lastLineStart' escStart' input.Substring(i' 4));                                  i += 4;                                  goto loop;                              case 'U': // Unicode surrogate pair                                  // This will require 8 characters                                  if (len - ++i < 8)                                  {                                      compiler.SyntaxError(line' lastLineStart' escStart' len - escStart' false' "err-compiler-incomplete-escape");                                      yield break;                                  }                                  yield return new Token(R.EscapeSequenceSurrogatePair' line' lastLineStart' escStart' input.Substring(i' 8));                                  i += 8;                                  goto loop;                              default:                                  // Spit out the escape char token                                  yield return new Token(R.EscapeSequenceChar' line' lastLineStart' i' input[i]);                                  goto iterate;                          }                      }                        // Verbatim string                      case '\"':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of quotes                          if (len - i >= 2)                          {                              int vstrStart = ++i; // Skip past starting quote                              var buffer = new StringBuilder();                              while (i < len)                              {                                  // Found a matching quote?                                  if (input[i] == '\"')                                  {                                      // Oh' it's just an escaped quote. (two in a row)                                      if (i < li && input[i + 1] == '\"')                                      {                                          buffer.Append('\"');                                          i += 2; // Skip past current and second quote                                          continue;                                      }                                        // Neato' looks like it's the end of the string literal.                                        // We don't need a new token for this' so just add it to the text buffer.                                      if (text.Length == 0)                                      {                                          lastTextLine = line;                                          lastTextIndex = i;                                          lastTextLineStart = lastLineStart;                                      }                                      text.Append(buffer);                                      cycleWroteText = true;                                        i++;                                      goto loop;                                  }                                  buffer.Append(input[i]);                                  i++;                              }                              compiler.SyntaxError(line' lastLineStart' vstrStart - 1' i - vstrStart' false' "err-compiler-incomplete-verbatim");                          }                          else                              compiler.SyntaxError(line' lastLineStart' i' 1' false' "err-compiler-incomplete-verbatim");                          break;                        // Regular expression                      case '`':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Make sure we have at least a pair of apostrophes                          if (li - i >= 2)                          {                              int regStart = ++i; // Skip past starting apostrophe                              var buffer = new StringBuilder();                                while (i < len)                              {                                  // Found an escape sequence in the regex?                                  if (input[i] == '\\')                                  {                                      buffer.Append('\\');                                        // Make sure there's room for an escape code and the end of the literal                                      if (li - i >= 2)                                      {                                          if (input[i + 1] == '`')                                          {                                              buffer.Append('`');                                              i += 2; // Skip past current and second quote                                              continue;                                          }                                          i++;                                          continue;                                      }                                        // If we don't have enough room for an escape char and an ending apostrophe' error.                                      compiler.SyntaxError(line' lastLineStart' regStart - 1' i - regStart + 1' false' "err-compiler-incomplete-regex");                                      break;                                  }                                    // Found another apostrophe that isn't escaped?                                  if (input[i] == '`')                                  {                                      yield return new Token(R.Regex' line' lastLineStart' regStart - 1' buffer.ToString());                                        // Read flags                                      if (++i < len && char.IsLetter(input[i]))                                      {                                          int flagsStart = i++;                                          while (i < len && char.IsLetter(input[i])) i++;                                          yield return new Token(R.RegexFlags' line' lastLineStart' flagsStart' input.Substring(flagsStart' i - flagsStart));                                      }                                      goto loop;                                  }                                    // Add character to buffer                                  buffer.Append(input[i]);                                  i++;                              }                                // Reached EOF                              compiler.SyntaxError(line' lastLineStart' regStart' i - regStart' false' "err-compiler-incomplete-regex");                          }                          else                          {                              // Impossible to create regex here because there are too few characters remaining                              compiler.SyntaxError(line' lastLineStart' i' len - i' false' "err-compiler-incomplete-regex");                          }                          break;                        case '[':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftSquare' line' lastLineStart' i' c);                          break;                      case ']':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightSquare' line' lastLineStart' i' c);                          break;                      case '{':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftCurly' line' lastLineStart' i' c);                          break;                      case '}':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightCurly' line' lastLineStart' i' c);                          break;                      case '(':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftParen' line' lastLineStart' i' c);                          break;                      case ')':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightParen' line' lastLineStart' i' c);                          break;                      case '<':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.LeftAngle' line' lastLineStart' i' c);                          break;                      case '>':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.RightAngle' line' lastLineStart' i' c);                          break;                      case '|':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Pipe' line' lastLineStart' i' c);                          break;                      case '?':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          if (li - i > 0 && input[i + 1] == '!')                          {                              yield return new Token(R.Without' line' lastLineStart' i' "?!");                              i++;                              break;                          }                          yield return new Token(R.Question' line' lastLineStart' i' c);                          break;                      case '!':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Exclamation' line' lastLineStart' i' c);                          break;                      case '@':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.At' line' lastLineStart' i' c);                          break;                      case '-':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Hyphen' line' lastLineStart' i' c);                          break;                      case '$':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Dollar' line' lastLineStart' i' c);                          break;                      case '=':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Equal' line' lastLineStart' i' c);                          break;                      case '&':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Ampersand' line' lastLineStart' i' c);                          break;                      case '+':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Plus' line' lastLineStart' i' c);                          break;                      case '.':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Period' line' lastLineStart' i' c);                          break;                      case ':':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          // Check for double-colon                          if (li - i > 0 && input[i + 1] == ':')                          {                              yield return new Token(R.DoubleColon' line' lastLineStart' i' "::");                              i += 2;                              goto loop;                          }                          yield return new Token(R.Colon' line' lastLineStart' i' c);                          break;                      case ';':                          if (text.Length > 0)                          {                              yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                              text.Length = 0;                          }                          yield return new Token(R.Semicolon' line' lastLineStart' i' c);                          break;                      default:                          if (text.Length == 0)                          {                              lastTextLine = line;                              lastTextIndex = i;                              lastTextLineStart = lastLineStart;                          }                          text.Append(c);                          cycleWroteText = true;                          break;                  }                    // Iterates the index                  iterate:                  i++;                    loop: // Skips iteration of the index                    // Emit text token if appropriate                  if (!cycleWroteText && text.Length > 0)                  {                      yield return new Token(R.Text' lastTextLine' lastTextLineStart' lastTextIndex' text.ToString());                      text.Length = 0;                  }              }
Magic Number,Rant.Core.Compiler.Parsing,SequenceParser,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Parsing\SequenceParser.cs,Parse,The following statement contains a magic number: while (!reader.End)  			{  				token = reader.ReadToken();    				switch (token.Type)  				{  					case R.LeftAngle:  						yield return Get<QueryParser>();  						break;    					case R.LeftSquare:  						yield return Get<TagParser>();  						break;    					case R.LeftCurly:  						reader.SkipSpace();  						yield return Get<BlockParser>();  						break;    					case R.Pipe:  						if (context == CompileContext.BlockSequence)  							yield break;  						goto default; // Print it if we're not in a block    					case R.RightCurly:  						if (context == CompileContext.BlockSequence)  						{  							compiler.LeaveContext();  							yield break;  						}  						compiler.SyntaxError(token' false' "err-compiler-unexpected-token"' token.Value);  						break;    					// end of argument  					case R.Semicolon:  						if (context == CompileContext.ArgumentSequence)  							yield break;  						// this is probably just a semicolon in text  						actionCallback(new RstText(token.Value' token.ToLocation()));  						break;    					case R.RightSquare:  						// end of arguments / direct object in query  						switch (context)  						{  							case CompileContext.ArgumentSequence:  							case CompileContext.SubroutineBody:  							case CompileContext.QueryComplement:  								compiler.LeaveContext();  								yield break;  						}  						compiler.SyntaxError(token' false' "err-compiler-unexpected-token"' token.Value);  						break;    					case R.RightAngle:  						compiler.SyntaxError(token' false' "err-compiler-unexpected-token"' token.Value);  						break;    					// the end of a block weight' maybe  					case R.RightParen:  						if (context == CompileContext.BlockWeight)  						{  							reader.SkipSpace();  							compiler.LeaveContext();  							yield break;  						}  						actionCallback(new RstText(token.Value' token.ToLocation()));  						break;    					case R.Whitespace:  						switch (context)  						{  							case CompileContext.BlockSequence:  								switch (reader.PeekType())  								{  									case R.Pipe:  									case R.RightCurly:  										continue; // Ignore whitespace at the end of block elements  								}  								goto default;  							default:  								actionCallback(new RstText(token.Value' token.ToLocation()));  								break;  						}  						break;    					case R.EscapeSequenceChar: // Handle escape sequences  						actionCallback(new RstEscape(token.ToLocation()' 1' false' token.Value[0]));  						break;  					case R.EscapeSequenceUnicode:  						{  							short codePoint;  							if (!short.TryParse(token.Value' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out codePoint))  							{  								compiler.SyntaxError(reader.PrevToken' false' "err-compiler-invalid-escape-unicode"' reader.PrevToken.Value);  								break;  							}  							actionCallback(new RstEscape(token.ToLocation()' 1' true' Convert.ToChar(codePoint)));  							break;  						}  					case R.EscapeSequenceSurrogatePair:  						{  							uint surrogatePairCodePoint;  							if (!uint.TryParse(token.Value' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out surrogatePairCodePoint)  								|| surrogatePairCodePoint < 0x10000)  							{  								compiler.SyntaxError(reader.PrevToken' false' "err-compiler-invalid-escape-surrogate"' token.Value);  								break;  							}    							surrogatePairCodePoint -= 0x10000;  							ushort highCodePoint = (ushort)(0xD800 + ((surrogatePairCodePoint & 0xFFC00) >> 10));  							ushort lowCodePoint = (ushort)(0xDC00 + (surrogatePairCodePoint & 0x003FF));  							char low' high;  							if (!char.IsSurrogatePair(high = Convert.ToChar(highCodePoint)' low = Convert.ToChar(lowCodePoint)))  							{  								compiler.SyntaxError(reader.PrevToken' false' "err-compiler-invalid-escape-surrogate"' token.Value);  								break;  							}  							actionCallback(new RstEscape(token.ToLocation()' 1' true' high' low));  							break;  						}  					case R.EscapeSequenceQuantifier:  						{  							if (!Util.ParseInt(token.Value' out int quantity) || quantity <= 0)  							{  								compiler.SyntaxError(token' false' "err-compiler-escape-bad-quantity");  								break;  							}  							switch (reader.PeekType())  							{  								case R.EscapeSequenceChar:  									actionCallback(new RstEscape(token.ToLocation()' quantity' false' reader.ReadToken().Value[0]));  									break;  								case R.EscapeSequenceUnicode:  									{  										short codePoint;  										if (!short.TryParse(reader.ReadToken().Value' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out codePoint))  										{  											compiler.SyntaxError(reader.PrevToken' false' "err-compiler-invalid-escape-unicode"' reader.PrevToken.Value);  											break;  										}  										actionCallback(new RstEscape(token.ToLocation()' quantity' true' Convert.ToChar(codePoint)));  										break;  									}  								case R.EscapeSequenceSurrogatePair:  									{  										var pairToken = reader.ReadToken();  										uint surrogatePairCodePoint;  										if (!uint.TryParse(pairToken.Value' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out surrogatePairCodePoint)  											|| surrogatePairCodePoint < 0x10000)  										{  											compiler.SyntaxError(reader.PrevToken' false' "err-compiler-invalid-escape-surrogate"' pairToken.Value);  											break;  										}    										surrogatePairCodePoint -= 0x10000;  										ushort highCodePoint = (ushort)(0xD800 + ((surrogatePairCodePoint & 0xFFC00) >> 10));  										ushort lowCodePoint = (ushort)(0xDC00 + (surrogatePairCodePoint & 0x3FF));  										char low' high;  										if (!char.IsSurrogatePair(high = Convert.ToChar(highCodePoint)' low = Convert.ToChar(lowCodePoint)))  										{  											compiler.SyntaxError(reader.PrevToken' false' "err-compiler-invalid-escape-surrogate"' pairToken.Value);  											break;  										}  										actionCallback(new RstEscape(token.ToLocation()' quantity' true' high' low));  										break;  									}  							}  							break;  						}    					case R.EOF:  						if (context != CompileContext.DefaultSequence)  							compiler.SyntaxError(token' true' "err-compiler-eof");  						yield break;    					default: // Handle text  						actionCallback(new RstText(token.Value' token.ToLocation()));  						break;  				}  			}
Magic Number,Rant.Core.Compiler.Parsing,SequenceParser,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Parsing\SequenceParser.cs,Parse,The following statement contains a magic number: while (!reader.End)  			{  				token = reader.ReadToken();    				switch (token.Type)  				{  					case R.LeftAngle:  						yield return Get<QueryParser>();  						break;    					case R.LeftSquare:  						yield return Get<TagParser>();  						break;    					case R.LeftCurly:  						reader.SkipSpace();  						yield return Get<BlockParser>();  						break;    					case R.Pipe:  						if (context == CompileContext.BlockSequence)  							yield break;  						goto default; // Print it if we're not in a block    					case R.RightCurly:  						if (context == CompileContext.BlockSequence)  						{  							compiler.LeaveContext();  							yield break;  						}  						compiler.SyntaxError(token' false' "err-compiler-unexpected-token"' token.Value);  						break;    					// end of argument  					case R.Semicolon:  						if (context == CompileContext.ArgumentSequence)  							yield break;  						// this is probably just a semicolon in text  						actionCallback(new RstText(token.Value' token.ToLocation()));  						break;    					case R.RightSquare:  						// end of arguments / direct object in query  						switch (context)  						{  							case CompileContext.ArgumentSequence:  							case CompileContext.SubroutineBody:  							case CompileContext.QueryComplement:  								compiler.LeaveContext();  								yield break;  						}  						compiler.SyntaxError(token' false' "err-compiler-unexpected-token"' token.Value);  						break;    					case R.RightAngle:  						compiler.SyntaxError(token' false' "err-compiler-unexpected-token"' token.Value);  						break;    					// the end of a block weight' maybe  					case R.RightParen:  						if (context == CompileContext.BlockWeight)  						{  							reader.SkipSpace();  							compiler.LeaveContext();  							yield break;  						}  						actionCallback(new RstText(token.Value' token.ToLocation()));  						break;    					case R.Whitespace:  						switch (context)  						{  							case CompileContext.BlockSequence:  								switch (reader.PeekType())  								{  									case R.Pipe:  									case R.RightCurly:  										continue; // Ignore whitespace at the end of block elements  								}  								goto default;  							default:  								actionCallback(new RstText(token.Value' token.ToLocation()));  								break;  						}  						break;    					case R.EscapeSequenceChar: // Handle escape sequences  						actionCallback(new RstEscape(token.ToLocation()' 1' false' token.Value[0]));  						break;  					case R.EscapeSequenceUnicode:  						{  							short codePoint;  							if (!short.TryParse(token.Value' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out codePoint))  							{  								compiler.SyntaxError(reader.PrevToken' false' "err-compiler-invalid-escape-unicode"' reader.PrevToken.Value);  								break;  							}  							actionCallback(new RstEscape(token.ToLocation()' 1' true' Convert.ToChar(codePoint)));  							break;  						}  					case R.EscapeSequenceSurrogatePair:  						{  							uint surrogatePairCodePoint;  							if (!uint.TryParse(token.Value' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out surrogatePairCodePoint)  								|| surrogatePairCodePoint < 0x10000)  							{  								compiler.SyntaxError(reader.PrevToken' false' "err-compiler-invalid-escape-surrogate"' token.Value);  								break;  							}    							surrogatePairCodePoint -= 0x10000;  							ushort highCodePoint = (ushort)(0xD800 + ((surrogatePairCodePoint & 0xFFC00) >> 10));  							ushort lowCodePoint = (ushort)(0xDC00 + (surrogatePairCodePoint & 0x003FF));  							char low' high;  							if (!char.IsSurrogatePair(high = Convert.ToChar(highCodePoint)' low = Convert.ToChar(lowCodePoint)))  							{  								compiler.SyntaxError(reader.PrevToken' false' "err-compiler-invalid-escape-surrogate"' token.Value);  								break;  							}  							actionCallback(new RstEscape(token.ToLocation()' 1' true' high' low));  							break;  						}  					case R.EscapeSequenceQuantifier:  						{  							if (!Util.ParseInt(token.Value' out int quantity) || quantity <= 0)  							{  								compiler.SyntaxError(token' false' "err-compiler-escape-bad-quantity");  								break;  							}  							switch (reader.PeekType())  							{  								case R.EscapeSequenceChar:  									actionCallback(new RstEscape(token.ToLocation()' quantity' false' reader.ReadToken().Value[0]));  									break;  								case R.EscapeSequenceUnicode:  									{  										short codePoint;  										if (!short.TryParse(reader.ReadToken().Value' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out codePoint))  										{  											compiler.SyntaxError(reader.PrevToken' false' "err-compiler-invalid-escape-unicode"' reader.PrevToken.Value);  											break;  										}  										actionCallback(new RstEscape(token.ToLocation()' quantity' true' Convert.ToChar(codePoint)));  										break;  									}  								case R.EscapeSequenceSurrogatePair:  									{  										var pairToken = reader.ReadToken();  										uint surrogatePairCodePoint;  										if (!uint.TryParse(pairToken.Value' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out surrogatePairCodePoint)  											|| surrogatePairCodePoint < 0x10000)  										{  											compiler.SyntaxError(reader.PrevToken' false' "err-compiler-invalid-escape-surrogate"' pairToken.Value);  											break;  										}    										surrogatePairCodePoint -= 0x10000;  										ushort highCodePoint = (ushort)(0xD800 + ((surrogatePairCodePoint & 0xFFC00) >> 10));  										ushort lowCodePoint = (ushort)(0xDC00 + (surrogatePairCodePoint & 0x3FF));  										char low' high;  										if (!char.IsSurrogatePair(high = Convert.ToChar(highCodePoint)' low = Convert.ToChar(lowCodePoint)))  										{  											compiler.SyntaxError(reader.PrevToken' false' "err-compiler-invalid-escape-surrogate"' pairToken.Value);  											break;  										}  										actionCallback(new RstEscape(token.ToLocation()' quantity' true' high' low));  										break;  									}  							}  							break;  						}    					case R.EOF:  						if (context != CompileContext.DefaultSequence)  							compiler.SyntaxError(token' true' "err-compiler-eof");  						yield break;    					default: // Handle text  						actionCallback(new RstText(token.Value' token.ToLocation()));  						break;  				}  			}
Magic Number,Rant.Core.Compiler.Parsing,TagParser,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Parsing\TagParser.cs,Parse,The following statement contains a magic number: switch (nextType)  			{  				case R.Regex:  					{  						var regex = reader.Read(R.Regex' "acc-replacer-regex");  						var options = RegexOptions.Compiled | RegexOptions.ExplicitCapture;  						if (reader.IsNext(R.RegexFlags))  						{  							var flagsToken = reader.ReadToken();  							foreach (char flag in flagsToken.Value)  							{  								switch (flag)  								{  									case 'i':  										options |= RegexOptions.IgnoreCase;  										break;  									case 'm':  										options |= RegexOptions.Multiline;  										break;  								}  							}  						}    						reader.Read(R.Colon);    						var arguments = new List<RST>();    						var iterator = ReadArguments(compiler' reader' arguments);  						while (iterator.MoveNext())  							yield return iterator.Current;    						compiler.SetNextActionCallback(actionCallback);    						if (arguments.Count != 2)  						{  							compiler.SyntaxError(tagStart' reader.PrevToken' false' "err-compiler-replacer-argcount");  							yield break;  						}    						actionCallback(new RstReplacer(regex.ToLocation()' new Regex(regex.Value' options)' arguments[0]' arguments[1]));  					}  					break;  				case R.Dollar:  					{  						reader.ReadToken();  						var e = ParseSubroutine(compiler' context' reader' actionCallback);  						while (e.MoveNext())  							yield return e.Current;  					}  					break;  				default:  					{  						var e = ParseFunction(compiler' context' reader' actionCallback);  						while (e.MoveNext())  							yield return e.Current;  					}  					break;  			}
Magic Number,Rant.Core.Compiler.Syntax,RSTAttribute,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RSTAttribute.cs,RSTAttribute,The following statement contains a magic number: if (typeCodeString.Length != 4) throw new ArgumentException("Type code must be four characters long.");
Magic Number,Rant.Core.Compiler.Syntax,RstBlock,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RstBlock.cs,Run,The following statement contains a magic number: if (attribs.Chance < 100 && sb.RNG.NextDouble(0' 100) > attribs.Chance)  				yield break;
Magic Number,Rant.Core.Compiler.Syntax,RstBlock,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RstBlock.cs,Run,The following statement contains a magic number: if (attribs.Chance < 100 && sb.RNG.NextDouble(0' 100) > attribs.Chance)  				yield break;
Magic Number,Rant.Core.Compiler.Syntax,RstBlock,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RstBlock.cs,Run,The following statement contains a magic number: for (int i = 0; i < reps; i++)  			{  				if (i == 0 && attribs.StartIndex >= 0 && attribs.Sync == null)  				{  					next = attribs.StartIndex > _count ? _count - 1 : attribs.StartIndex;  				}  				else if (_weighted)  				{  					double choice = sb.RNG.NextDouble(weightSum);  					for (int j = 0; j < _count; j++)  					{  						if (choice < _weights[j])  						{  							next = j;  							break;  						}  						choice -= _weights[j];  					}  				}  				else  				{  					next = attribs.NextIndex(_count' sb.RNG);  				}    				if (next == -1) break;    				block.Next(next); // Set next block index    				sb.Blocks.Pop(); // Don't allow separator to access block state    				// Separator  				if (i > 0 && attribs.Separator != null)  				{  					if (attribs.IsSeries)  					{  						// Check if we're on the last separator in a series  						if (i == reps - 1)  						{  							// Add the oxford comma if specified  							if (attribs.EndSeparator != null)  								if (reps > 2) yield return attribs.EndSeparator;    							sb.Print(sb.Format.WritingSystem.Space);    							// Add conjunction if specified (it normally should be' if it's a series)  							if (attribs.EndConjunction != null)  							{  								yield return attribs.EndConjunction;  								sb.Print(sb.Format.WritingSystem.Space);  							}  						}  						else if (reps > 2)  						{  							yield return attribs.Separator;  							sb.Print(sb.Format.WritingSystem.Space);  						}  					}  					else  					{  						yield return attribs.Separator;  					}  				}  				sb.Blocks.Push(block); // Now put it back    				// Prefix  				if (attribs.Before != null) yield return attribs.Before;    				// Content    				// Redirect output if requested  				if (attribs.Redirect != null)  				{  					sb.AddOutputWriter();  				}    				sb.Objects.EnterScope();  				yield return _elements[next];  				sb.Objects.ExitScope();    				// Retrieve redirected output  				if (attribs.Redirect != null)  				{  					sb.PushRedirectedOutput();  					yield return attribs.Redirect;  					sb.PopRedirectedOutput();  				}    				// Affix  				if (attribs.After != null) yield return attribs.After;  			}
Magic Number,Rant.Core.Compiler.Syntax,RstBlock,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RstBlock.cs,Run,The following statement contains a magic number: for (int i = 0; i < reps; i++)  			{  				if (i == 0 && attribs.StartIndex >= 0 && attribs.Sync == null)  				{  					next = attribs.StartIndex > _count ? _count - 1 : attribs.StartIndex;  				}  				else if (_weighted)  				{  					double choice = sb.RNG.NextDouble(weightSum);  					for (int j = 0; j < _count; j++)  					{  						if (choice < _weights[j])  						{  							next = j;  							break;  						}  						choice -= _weights[j];  					}  				}  				else  				{  					next = attribs.NextIndex(_count' sb.RNG);  				}    				if (next == -1) break;    				block.Next(next); // Set next block index    				sb.Blocks.Pop(); // Don't allow separator to access block state    				// Separator  				if (i > 0 && attribs.Separator != null)  				{  					if (attribs.IsSeries)  					{  						// Check if we're on the last separator in a series  						if (i == reps - 1)  						{  							// Add the oxford comma if specified  							if (attribs.EndSeparator != null)  								if (reps > 2) yield return attribs.EndSeparator;    							sb.Print(sb.Format.WritingSystem.Space);    							// Add conjunction if specified (it normally should be' if it's a series)  							if (attribs.EndConjunction != null)  							{  								yield return attribs.EndConjunction;  								sb.Print(sb.Format.WritingSystem.Space);  							}  						}  						else if (reps > 2)  						{  							yield return attribs.Separator;  							sb.Print(sb.Format.WritingSystem.Space);  						}  					}  					else  					{  						yield return attribs.Separator;  					}  				}  				sb.Blocks.Push(block); // Now put it back    				// Prefix  				if (attribs.Before != null) yield return attribs.Before;    				// Content    				// Redirect output if requested  				if (attribs.Redirect != null)  				{  					sb.AddOutputWriter();  				}    				sb.Objects.EnterScope();  				yield return _elements[next];  				sb.Objects.ExitScope();    				// Retrieve redirected output  				if (attribs.Redirect != null)  				{  					sb.PushRedirectedOutput();  					yield return attribs.Redirect;  					sb.PopRedirectedOutput();  				}    				// Affix  				if (attribs.After != null) yield return attribs.After;  			}
Magic Number,Rant.Core.Compiler.Syntax,RST,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RST.cs,SerializeRST,The following statement contains a magic number: var stack = new Stack<IEnumerator<RST>>(10);
Magic Number,Rant.Core.Compiler.Syntax,RST,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RST.cs,DeserializeRST,The following statement contains a magic number: var stack = new Stack<IEnumerator<DeserializeRequest>>(10);
Magic Number,Rant.Core.Constructs,BlockAttribs,C:\repos\TheBerkin_Rant\Rant\Core\Constructs\BlockAttribs.cs,SetDefaults,The following statement contains a magic number: Chance = 100;
Magic Number,Rant.Core.Constructs,Synchronizer,C:\repos\TheBerkin_Rant\Rant\Core\Constructs\Synchronizer.cs,ScrambleSlots,The following statement contains a magic number: if (_state.Length == 2) // Handle 2-item scenario              {                  if (_rng.Next(0' 2) != 0) return;                  t = _state[0];                  _state[0] = _state[1];                  _state[1] = t;                  return;              }
Magic Number,Rant.Core.Constructs,Synchronizer,C:\repos\TheBerkin_Rant\Rant\Core\Constructs\Synchronizer.cs,ScrambleSlots,The following statement contains a magic number: if (_state.Length == 2) // Handle 2-item scenario              {                  if (_rng.Next(0' 2) != 0) return;                  t = _state[0];                  _state[0] = _state[1];                  _state[1] = t;                  return;              }
Magic Number,Rant.Core.Constructs,Synchronizer,C:\repos\TheBerkin_Rant\Rant\Core\Constructs\Synchronizer.cs,ScrambleSlots,The following statement contains a magic number: for (int i = 0; i < _state.Length; i++)              {                  t = _state[i];                  do                  {                      s = _rng.Next(_state.Length);                  } while (s == t && _state.Length < 3);                  _state[i] = _state[s];                  _state[s] = t;              }
Magic Number,Rant.Core.Formatting,CharConverter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\CharConverter.cs,ToBoldScript,The following statement contains a magic number: if (c >= 'A' && c <= 'Z')  			{  				ushort d = unchecked((ushort)(a + (c - 'A')));  				return Encoding.UTF8.GetString(new byte[] { 0xf0' 0x9d' (byte)((d & 0xff00) >> 8)' (byte)(d & 0xff) }' 0' 4);  			}
Magic Number,Rant.Core.Formatting,CharConverter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\CharConverter.cs,ToBoldScript,The following statement contains a magic number: if (c >= 'A' && c <= 'Z')  			{  				ushort d = unchecked((ushort)(a + (c - 'A')));  				return Encoding.UTF8.GetString(new byte[] { 0xf0' 0x9d' (byte)((d & 0xff00) >> 8)' (byte)(d & 0xff) }' 0' 4);  			}
Magic Number,Rant.Core.Formatting,CharConverter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\CharConverter.cs,ToBoldScript,The following statement contains a magic number: if (c >= 'a' && c <= 'z')  			{  				ushort d = unchecked((ushort)(b + (c - 'a')));  				return Encoding.UTF8.GetString(new byte[] { 0xf0' 0x9d' (byte)((d & 0xff00) >> 8)' (byte)(d & 0xff) }' 0' 4);  			}
Magic Number,Rant.Core.Formatting,CharConverter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\CharConverter.cs,ToBoldScript,The following statement contains a magic number: if (c >= 'a' && c <= 'z')  			{  				ushort d = unchecked((ushort)(b + (c - 'a')));  				return Encoding.UTF8.GetString(new byte[] { 0xf0' 0x9d' (byte)((d & 0xff00) >> 8)' (byte)(d & 0xff) }' 0' 4);  			}
Magic Number,Rant.Core.Formatting,Unicode,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\Unicode.cs,GetByName,The following statement contains a magic number: const uint highSurrogateMask = lowSurrogateMask << 10;
Magic Number,Rant.Core.Formatting,Unicode,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\Unicode.cs,GetByName,The following statement contains a magic number: result = _cache[codePoint] = new string(new[]              {                  (char)(((sp & highSurrogateMask) >> 10) + highSurrogateOffset)'                  (char)((sp & lowSurrogateMask) + lowSurrogateOffset)              });
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetHex,The following statement contains a magic number: string hexString = Convert.ToString(number' 16);
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetHex,The following statement contains a magic number: int numBytes = targetLength % 2 != 0 ? (int)Math.Ceiling((double)targetLength / 2) : targetLength / 2;
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetHex,The following statement contains a magic number: int numBytes = targetLength % 2 != 0 ? (int)Math.Ceiling((double)targetLength / 2) : targetLength / 2;
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetHex,The following statement contains a magic number: int numBytes = targetLength % 2 != 0 ? (int)Math.Ceiling((double)targetLength / 2) : targetLength / 2;
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetHex,The following statement contains a magic number: if (hexString.Length % 2 != 0)                  hexString = "0" + hexString;
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetHex,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)                  bytes[i] = hexString[i * 2].ToString() + hexString[i * 2 + 1].ToString();
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetHex,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)                  bytes[i] = hexString[i * 2].ToString() + hexString[i * 2 + 1].ToString();
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetBinary,The following statement contains a magic number: string hexString = Convert.ToString(number' 2);
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetBinary,The following statement contains a magic number: if (needsReverse && hexString.Length % 8 != 0) hexString = new string('0'' hexString.Length % 8) + hexString;
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetBinary,The following statement contains a magic number: if (needsReverse && hexString.Length % 8 != 0) hexString = new string('0'' hexString.Length % 8) + hexString;
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetBinary,The following statement contains a magic number: int finalLength =                  BinaryFormat == BinaryFormat.Pad                      ? (origLength < BinaryFormatDigits * 4 ? BinaryFormatDigits * 4 : origLength)                      : BinaryFormat == BinaryFormat.Truncate                          ? (origLength < BinaryFormatDigits * 4 ? origLength : BinaryFormatDigits * 4)                          : origLength;
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetBinary,The following statement contains a magic number: int finalLength =                  BinaryFormat == BinaryFormat.Pad                      ? (origLength < BinaryFormatDigits * 4 ? BinaryFormatDigits * 4 : origLength)                      : BinaryFormat == BinaryFormat.Truncate                          ? (origLength < BinaryFormatDigits * 4 ? origLength : BinaryFormatDigits * 4)                          : origLength;
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetBinary,The following statement contains a magic number: int finalLength =                  BinaryFormat == BinaryFormat.Pad                      ? (origLength < BinaryFormatDigits * 4 ? BinaryFormatDigits * 4 : origLength)                      : BinaryFormat == BinaryFormat.Truncate                          ? (origLength < BinaryFormatDigits * 4 ? origLength : BinaryFormatDigits * 4)                          : origLength;
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetBinary,The following statement contains a magic number: int finalLength =                  BinaryFormat == BinaryFormat.Pad                      ? (origLength < BinaryFormatDigits * 4 ? BinaryFormatDigits * 4 : origLength)                      : BinaryFormat == BinaryFormat.Truncate                          ? (origLength < BinaryFormatDigits * 4 ? origLength : BinaryFormatDigits * 4)                          : origLength;
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetBinary,The following statement contains a magic number: if (needsReverse)              {                  for (int i = 0; i < origLength; i += 8)                  for (int j = 0; j < 8; j++)                      chars[finalLength - i - (8 - j)] = hexString[i + j];              }              else              {                  int truncatedOrigin = origLength > finalLength ? origLength - finalLength : 0;                  int truncatedLength = origLength > finalLength ? finalLength : origLength;                  hexString.CopyTo(truncatedOrigin' chars' finalLength - truncatedLength' truncatedLength);              }
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetBinary,The following statement contains a magic number: if (needsReverse)              {                  for (int i = 0; i < origLength; i += 8)                  for (int j = 0; j < 8; j++)                      chars[finalLength - i - (8 - j)] = hexString[i + j];              }              else              {                  int truncatedOrigin = origLength > finalLength ? origLength - finalLength : 0;                  int truncatedLength = origLength > finalLength ? finalLength : origLength;                  hexString.CopyTo(truncatedOrigin' chars' finalLength - truncatedLength' truncatedLength);              }
Magic Number,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,GetBinary,The following statement contains a magic number: if (needsReverse)              {                  for (int i = 0; i < origLength; i += 8)                  for (int j = 0; j < 8; j++)                      chars[finalLength - i - (8 - j)] = hexString[i + j];              }              else              {                  int truncatedOrigin = origLength > finalLength ? origLength - finalLength : 0;                  int truncatedLength = origLength > finalLength ? finalLength : origLength;                  hexString.CopyTo(truncatedOrigin' chars' finalLength - truncatedLength' truncatedLength);              }
Magic Number,Rant.Core,Sandbox,C:\repos\TheBerkin_Rant\Rant\Core\Sandbox.State.cs,Run,The following statement contains a magic number: lock (PatternArgs ?? fallbackArgsLockObj)  				{  					if (pattern == null) pattern = Pattern;  					LastTimeout = timeout;  					long timeoutMS = (long)(timeout * 1000);  					bool timed = timeoutMS > 0;  					bool stopwatchAlreadyRunning = _stopwatch.IsRunning;  					if (!_stopwatch.IsRunning)  					{  						_stopwatch.Reset();  						_stopwatch.Start();  					}    					var callStack = new Stack<IEnumerator<RST>>();  					IEnumerator<RST> action;    					// Push the AST root  					CurrentAction = pattern.SyntaxTree;  					_trace.Push(pattern.SyntaxTree);  					callStack.Push(pattern.SyntaxTree.Run(this));    				top:  					while (callStack.Any())  					{  						// Get the topmost call stack item  						action = callStack.Peek();    						// Execute the node until it runs out of children  						while (action.MoveNext())  						{  							if (timed && _stopwatch.ElapsedMilliseconds >= timeoutMS)  							{  								throw new RantRuntimeException(this' action.Current.Location'  									GetString("err-pattern-timeout"' timeout));  							}    							if (callStack.Count >= RantEngine.MaxStackSize)  							{  								throw new RantRuntimeException(this' action.Current.Location'  									GetString("err-stack-overflow"));  							}    							if (action.Current == null) break;    							// Push child node onto stack and start over  							CurrentAction = action.Current;  							_trace.Push(action.Current);  							callStack.Push(CurrentAction.Run(this));  							goto top;  						}    						// Remove node once finished  						callStack.Pop();  						_trace.Pop();  					}    					if (!stopwatchAlreadyRunning) _stopwatch.Stop();    					return Return();  				}
Magic Number,Rant.Core,Sandbox,C:\repos\TheBerkin_Rant\Rant\Core\Sandbox.State.cs,RunSerial,The following statement contains a magic number: long timeoutMS = (long)(timeout * 1000);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E;F>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]' (F)args[5]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E;F>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]' (F)args[5]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E;F>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]' (F)args[5]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E;F>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]' (F)args[5]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E;F;G>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]' (F)args[5]' (G)args[6]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E;F;G>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]' (F)args[5]' (G)args[6]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E;F;G>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]' (F)args[5]' (G)args[6]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E;F;G>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]' (F)args[5]' (G)args[6]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E;F;G>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]' (F)args[5]' (G)args[6]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E;F;G;H>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]' (F)args[5]' (G)args[6]' (H)args[7]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E;F;G;H>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]' (F)args[5]' (G)args[6]' (H)args[7]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E;F;G;H>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]' (F)args[5]' (G)args[6]' (H)args[7]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E;F;G;H>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]' (F)args[5]' (G)args[6]' (H)args[7]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E;F;G;H>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]' (F)args[5]' (G)args[6]' (H)args[7]);
Magic Number,Rant.Core.Utilities,WitchcraftVoid<A;B;C;D;E;F;G;H>,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Witchcraft.cs,Invoke,The following statement contains a magic number: _func(sb' (A)args[0]' (B)args[1]' (C)args[2]' (D)args[3]'                  (E)args[4]' (F)args[5]' (G)args[6]' (H)args[7]);
Magic Number,Rant.Core.Utilities,Extensions,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Extensions.cs,RotL,The following statement contains a magic number: return (data << (times % 64)) | (data >> (64 - times % 64));
Magic Number,Rant.Core.Utilities,Extensions,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Extensions.cs,RotL,The following statement contains a magic number: return (data << (times % 64)) | (data >> (64 - times % 64));
Magic Number,Rant.Core.Utilities,Extensions,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Extensions.cs,RotL,The following statement contains a magic number: return (data << (times % 64)) | (data >> (64 - times % 64));
Magic Number,Rant.Core.Utilities,Extensions,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Extensions.cs,RotR,The following statement contains a magic number: return (data >> (times % 64)) | (data << (64 - times % 64));
Magic Number,Rant.Core.Utilities,Extensions,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Extensions.cs,RotR,The following statement contains a magic number: return (data >> (times % 64)) | (data << (64 - times % 64));
Magic Number,Rant.Core.Utilities,Extensions,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Extensions.cs,RotR,The following statement contains a magic number: return (data >> (times % 64)) | (data << (64 - times % 64));
Magic Number,Rant.Core.Utilities,Extensions,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Extensions.cs,Hash,The following statement contains a magic number: unchecked              {                  long seed = 13;                  foreach (char c in input)                  {                      seed += c * 19;                      seed *= 6364136223846793005;                  }                  return seed;              }
Magic Number,Rant.Core.Utilities,Extensions,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Extensions.cs,Hash,The following statement contains a magic number: unchecked              {                  long seed = 13;                  foreach (char c in input)                  {                      seed += c * 19;                      seed *= 6364136223846793005;                  }                  return seed;              }
Magic Number,Rant.Core.Utilities,Extensions,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Extensions.cs,Hash,The following statement contains a magic number: unchecked              {                  long seed = 13;                  foreach (char c in input)                  {                      seed += c * 19;                      seed *= 6364136223846793005;                  }                  return seed;              }
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,HashOf,The following statement contains a magic number: return unchecked(objects.Select(o => o.GetHashCode()).Aggregate(17' (hash' next) => hash * 31 + next));
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,HashOf,The following statement contains a magic number: return unchecked(objects.Select(o => o.GetHashCode()).Aggregate(17' (hash' next) => hash * 31 + next));
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseInt,The following statement contains a magic number: unchecked  			{  				int n = number = 0;  				int l = str.Length - 1;  				for (int i = l' x = 1; i >= 0; i--' x *= 10)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								number = -n;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							n += x;  							break;    						case '2':  							n += 2 * x;  							break;    						case '3':  							n += 3 * x;  							break;    						case '4':  							n += 4 * x;  							break;    						case '5':  							n += 5 * x;  							break;    						case '6':  							n += 6 * x;  							break;    						case '7':  							n += 7 * x;  							break;    						case '8':  							n += 8 * x;  							break;    						case '9':  							n += 9 * x;  							break;    						default:  							return false;  					}  				}  				number = n;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseInt,The following statement contains a magic number: unchecked  			{  				int n = number = 0;  				int l = str.Length - 1;  				for (int i = l' x = 1; i >= 0; i--' x *= 10)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								number = -n;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							n += x;  							break;    						case '2':  							n += 2 * x;  							break;    						case '3':  							n += 3 * x;  							break;    						case '4':  							n += 4 * x;  							break;    						case '5':  							n += 5 * x;  							break;    						case '6':  							n += 6 * x;  							break;    						case '7':  							n += 7 * x;  							break;    						case '8':  							n += 8 * x;  							break;    						case '9':  							n += 9 * x;  							break;    						default:  							return false;  					}  				}  				number = n;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseInt,The following statement contains a magic number: unchecked  			{  				int n = number = 0;  				int l = str.Length - 1;  				for (int i = l' x = 1; i >= 0; i--' x *= 10)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								number = -n;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							n += x;  							break;    						case '2':  							n += 2 * x;  							break;    						case '3':  							n += 3 * x;  							break;    						case '4':  							n += 4 * x;  							break;    						case '5':  							n += 5 * x;  							break;    						case '6':  							n += 6 * x;  							break;    						case '7':  							n += 7 * x;  							break;    						case '8':  							n += 8 * x;  							break;    						case '9':  							n += 9 * x;  							break;    						default:  							return false;  					}  				}  				number = n;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseInt,The following statement contains a magic number: unchecked  			{  				int n = number = 0;  				int l = str.Length - 1;  				for (int i = l' x = 1; i >= 0; i--' x *= 10)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								number = -n;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							n += x;  							break;    						case '2':  							n += 2 * x;  							break;    						case '3':  							n += 3 * x;  							break;    						case '4':  							n += 4 * x;  							break;    						case '5':  							n += 5 * x;  							break;    						case '6':  							n += 6 * x;  							break;    						case '7':  							n += 7 * x;  							break;    						case '8':  							n += 8 * x;  							break;    						case '9':  							n += 9 * x;  							break;    						default:  							return false;  					}  				}  				number = n;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseInt,The following statement contains a magic number: unchecked  			{  				int n = number = 0;  				int l = str.Length - 1;  				for (int i = l' x = 1; i >= 0; i--' x *= 10)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								number = -n;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							n += x;  							break;    						case '2':  							n += 2 * x;  							break;    						case '3':  							n += 3 * x;  							break;    						case '4':  							n += 4 * x;  							break;    						case '5':  							n += 5 * x;  							break;    						case '6':  							n += 6 * x;  							break;    						case '7':  							n += 7 * x;  							break;    						case '8':  							n += 8 * x;  							break;    						case '9':  							n += 9 * x;  							break;    						default:  							return false;  					}  				}  				number = n;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseInt,The following statement contains a magic number: unchecked  			{  				int n = number = 0;  				int l = str.Length - 1;  				for (int i = l' x = 1; i >= 0; i--' x *= 10)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								number = -n;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							n += x;  							break;    						case '2':  							n += 2 * x;  							break;    						case '3':  							n += 3 * x;  							break;    						case '4':  							n += 4 * x;  							break;    						case '5':  							n += 5 * x;  							break;    						case '6':  							n += 6 * x;  							break;    						case '7':  							n += 7 * x;  							break;    						case '8':  							n += 8 * x;  							break;    						case '9':  							n += 9 * x;  							break;    						default:  							return false;  					}  				}  				number = n;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseInt,The following statement contains a magic number: unchecked  			{  				int n = number = 0;  				int l = str.Length - 1;  				for (int i = l' x = 1; i >= 0; i--' x *= 10)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								number = -n;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							n += x;  							break;    						case '2':  							n += 2 * x;  							break;    						case '3':  							n += 3 * x;  							break;    						case '4':  							n += 4 * x;  							break;    						case '5':  							n += 5 * x;  							break;    						case '6':  							n += 6 * x;  							break;    						case '7':  							n += 7 * x;  							break;    						case '8':  							n += 8 * x;  							break;    						case '9':  							n += 9 * x;  							break;    						default:  							return false;  					}  				}  				number = n;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseInt,The following statement contains a magic number: unchecked  			{  				int n = number = 0;  				int l = str.Length - 1;  				for (int i = l' x = 1; i >= 0; i--' x *= 10)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								number = -n;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							n += x;  							break;    						case '2':  							n += 2 * x;  							break;    						case '3':  							n += 3 * x;  							break;    						case '4':  							n += 4 * x;  							break;    						case '5':  							n += 5 * x;  							break;    						case '6':  							n += 6 * x;  							break;    						case '7':  							n += 7 * x;  							break;    						case '8':  							n += 8 * x;  							break;    						case '9':  							n += 9 * x;  							break;    						default:  							return false;  					}  				}  				number = n;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseInt,The following statement contains a magic number: unchecked  			{  				int n = number = 0;  				int l = str.Length - 1;  				for (int i = l' x = 1; i >= 0; i--' x *= 10)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								number = -n;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							n += x;  							break;    						case '2':  							n += 2 * x;  							break;    						case '3':  							n += 3 * x;  							break;    						case '4':  							n += 4 * x;  							break;    						case '5':  							n += 5 * x;  							break;    						case '6':  							n += 6 * x;  							break;    						case '7':  							n += 7 * x;  							break;    						case '8':  							n += 8 * x;  							break;    						case '9':  							n += 9 * x;  							break;    						default:  							return false;  					}  				}  				number = n;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The following statement contains a magic number: unchecked  			{  				double num = d = 0.0;  				if (str.Length == 0) return false;  				int l = str.Length;  				int ones = l - 1;  				double x = 0.1;    				for (int i = 0; i < l; i++)  				{  					if (str[i] == '.')  					{  						ones = i - 1;  						for (i++; i < l; i++' x /= 10.0)  						{  							switch (str[i])  							{  								case '0':  									continue;    								case '1':  									num += x;  									break;    								case '2':  									num += x * 2;  									break;    								case '3':  									num += x * 3;  									break;    								case '4':  									num += x * 4;  									break;    								case '5':  									num += x * 5;  									break;    								case '6':  									num += x * 6;  									break;    								case '7':  									num += x * 7;  									break;    								case '8':  									num += x * 8;  									break;    								case '9':  									num += x * 9;  									break;    								default:  									return false;  							}  						}  						break;  					}  				}    				x = 1.0;  				for (int i = ones; i >= 0; i--' x *= 10.0)  				{  					switch (str[i])  					{  						case '-':  							if (i == 0)  							{  								d = -num;  								return true;  							}  							return false;    						case '0':  							continue;    						case '1':  							num += x;  							break;    						case '2':  							num += x * 2;  							break;    						case '3':  							num += x * 3;  							break;    						case '4':  							num += x * 4;  							break;    						case '5':  							num += x * 5;  							break;    						case '6':  							num += x * 6;  							break;    						case '7':  							num += x * 7;  							break;    						case '8':  							num += x * 8;  							break;    						case '9':  							num += x * 9;  							break;    						default:  							return false;  					}  				}    				d = num;  				return true;  			}
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,TryParseSurrogatePair,The following statement contains a magic number: if (value?.Length != 8) return false;
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,TryParseSurrogatePair,The following statement contains a magic number: const uint highSurrogateMask = lowSurrogateMask << 10;
Magic Number,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,TryParseSurrogatePair,The following statement contains a magic number: highSurrogate = (char)(((codePoint & highSurrogateMask) >> 10) + highSurrogateOffset);
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,EnglishNumberVerbalizer,The following statement contains a magic number: cache = new string[1000];
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,EnglishNumberVerbalizer,The following statement contains a magic number: for(int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = tens[i / 10] + (i % 10 > 0 ? $"-{pre[i % 10]}" : "");  				}  				else  				{  					int h = i % 100;  					cache[i] = pre[i / 100] + " hundred"  						+ (h > 0  							? " and "   								+ (h < 20   									? pre[h]   									: tens[h / 10] + (h % 10 > 0 ? "-" + pre[i % 10] : ""))  							: "");  				}  			}
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,EnglishNumberVerbalizer,The following statement contains a magic number: for(int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = tens[i / 10] + (i % 10 > 0 ? $"-{pre[i % 10]}" : "");  				}  				else  				{  					int h = i % 100;  					cache[i] = pre[i / 100] + " hundred"  						+ (h > 0  							? " and "   								+ (h < 20   									? pre[h]   									: tens[h / 10] + (h % 10 > 0 ? "-" + pre[i % 10] : ""))  							: "");  				}  			}
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,EnglishNumberVerbalizer,The following statement contains a magic number: for(int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = tens[i / 10] + (i % 10 > 0 ? $"-{pre[i % 10]}" : "");  				}  				else  				{  					int h = i % 100;  					cache[i] = pre[i / 100] + " hundred"  						+ (h > 0  							? " and "   								+ (h < 20   									? pre[h]   									: tens[h / 10] + (h % 10 > 0 ? "-" + pre[i % 10] : ""))  							: "");  				}  			}
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,EnglishNumberVerbalizer,The following statement contains a magic number: for(int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = tens[i / 10] + (i % 10 > 0 ? $"-{pre[i % 10]}" : "");  				}  				else  				{  					int h = i % 100;  					cache[i] = pre[i / 100] + " hundred"  						+ (h > 0  							? " and "   								+ (h < 20   									? pre[h]   									: tens[h / 10] + (h % 10 > 0 ? "-" + pre[i % 10] : ""))  							: "");  				}  			}
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,EnglishNumberVerbalizer,The following statement contains a magic number: for(int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = tens[i / 10] + (i % 10 > 0 ? $"-{pre[i % 10]}" : "");  				}  				else  				{  					int h = i % 100;  					cache[i] = pre[i / 100] + " hundred"  						+ (h > 0  							? " and "   								+ (h < 20   									? pre[h]   									: tens[h / 10] + (h % 10 > 0 ? "-" + pre[i % 10] : ""))  							: "");  				}  			}
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,EnglishNumberVerbalizer,The following statement contains a magic number: for(int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = tens[i / 10] + (i % 10 > 0 ? $"-{pre[i % 10]}" : "");  				}  				else  				{  					int h = i % 100;  					cache[i] = pre[i / 100] + " hundred"  						+ (h > 0  							? " and "   								+ (h < 20   									? pre[h]   									: tens[h / 10] + (h % 10 > 0 ? "-" + pre[i % 10] : ""))  							: "");  				}  			}
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,EnglishNumberVerbalizer,The following statement contains a magic number: for(int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = tens[i / 10] + (i % 10 > 0 ? $"-{pre[i % 10]}" : "");  				}  				else  				{  					int h = i % 100;  					cache[i] = pre[i / 100] + " hundred"  						+ (h > 0  							? " and "   								+ (h < 20   									? pre[h]   									: tens[h / 10] + (h % 10 > 0 ? "-" + pre[i % 10] : ""))  							: "");  				}  			}
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,EnglishNumberVerbalizer,The following statement contains a magic number: for(int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = tens[i / 10] + (i % 10 > 0 ? $"-{pre[i % 10]}" : "");  				}  				else  				{  					int h = i % 100;  					cache[i] = pre[i / 100] + " hundred"  						+ (h > 0  							? " and "   								+ (h < 20   									? pre[h]   									: tens[h / 10] + (h % 10 > 0 ? "-" + pre[i % 10] : ""))  							: "");  				}  			}
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,EnglishNumberVerbalizer,The following statement contains a magic number: for(int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = tens[i / 10] + (i % 10 > 0 ? $"-{pre[i % 10]}" : "");  				}  				else  				{  					int h = i % 100;  					cache[i] = pre[i / 100] + " hundred"  						+ (h > 0  							? " and "   								+ (h < 20   									? pre[h]   									: tens[h / 10] + (h % 10 > 0 ? "-" + pre[i % 10] : ""))  							: "");  				}  			}
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,EnglishNumberVerbalizer,The following statement contains a magic number: for(int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = tens[i / 10] + (i % 10 > 0 ? $"-{pre[i % 10]}" : "");  				}  				else  				{  					int h = i % 100;  					cache[i] = pre[i / 100] + " hundred"  						+ (h > 0  							? " and "   								+ (h < 20   									? pre[h]   									: tens[h / 10] + (h % 10 > 0 ? "-" + pre[i % 10] : ""))  							: "");  				}  			}
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,EnglishNumberVerbalizer,The following statement contains a magic number: for(int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = tens[i / 10] + (i % 10 > 0 ? $"-{pre[i % 10]}" : "");  				}  				else  				{  					int h = i % 100;  					cache[i] = pre[i / 100] + " hundred"  						+ (h > 0  							? " and "   								+ (h < 20   									? pre[h]   									: tens[h / 10] + (h % 10 > 0 ? "-" + pre[i % 10] : ""))  							: "");  				}  			}
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,EnglishNumberVerbalizer,The following statement contains a magic number: for(int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = tens[i / 10] + (i % 10 > 0 ? $"-{pre[i % 10]}" : "");  				}  				else  				{  					int h = i % 100;  					cache[i] = pre[i / 100] + " hundred"  						+ (h > 0  							? " and "   								+ (h < 20   									? pre[h]   									: tens[h / 10] + (h % 10 > 0 ? "-" + pre[i % 10] : ""))  							: "");  				}  			}
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,Verbalize,The following statement contains a magic number: int firstGroupLength = dn % 3;
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,Verbalize,The following statement contains a magic number: if (firstGroupLength == 0) firstGroupLength = 3;
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,Verbalize,The following statement contains a magic number: for (int i = 0; i < gn; i++)  			{  				group = i == 0  						? nstr.Substring(0' firstGroupLength)  						: nstr.Substring(firstGroupLength + (i - 1) * 3' 3);    				// Index of power name  				int p = (gn - 1) - i;  				int gv = Int32.Parse(group);  				if (p > 0 && gv > 0)  				{  					// Print powers of thousand  					sb.Append($"{cache[gv]} {thousandPowers[p - 1]}");    					// If the last three digits are 000' there's no space needed.  					if (!(p - 1 == 0 && number % 1000 == 0)) sb.Append(" ");  				}  				else if ((gn > 1 && gv != 0) || gn == 1)  				{  					if (gn > 1 && gv < 100) sb.Append("and ");  					// Print last three digits  					sb.Append(cache[gv]);  				}  			}
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,Verbalize,The following statement contains a magic number: for (int i = 0; i < gn; i++)  			{  				group = i == 0  						? nstr.Substring(0' firstGroupLength)  						: nstr.Substring(firstGroupLength + (i - 1) * 3' 3);    				// Index of power name  				int p = (gn - 1) - i;  				int gv = Int32.Parse(group);  				if (p > 0 && gv > 0)  				{  					// Print powers of thousand  					sb.Append($"{cache[gv]} {thousandPowers[p - 1]}");    					// If the last three digits are 000' there's no space needed.  					if (!(p - 1 == 0 && number % 1000 == 0)) sb.Append(" ");  				}  				else if ((gn > 1 && gv != 0) || gn == 1)  				{  					if (gn > 1 && gv < 100) sb.Append("and ");  					// Print last three digits  					sb.Append(cache[gv]);  				}  			}
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,Verbalize,The following statement contains a magic number: for (int i = 0; i < gn; i++)  			{  				group = i == 0  						? nstr.Substring(0' firstGroupLength)  						: nstr.Substring(firstGroupLength + (i - 1) * 3' 3);    				// Index of power name  				int p = (gn - 1) - i;  				int gv = Int32.Parse(group);  				if (p > 0 && gv > 0)  				{  					// Print powers of thousand  					sb.Append($"{cache[gv]} {thousandPowers[p - 1]}");    					// If the last three digits are 000' there's no space needed.  					if (!(p - 1 == 0 && number % 1000 == 0)) sb.Append(" ");  				}  				else if ((gn > 1 && gv != 0) || gn == 1)  				{  					if (gn > 1 && gv < 100) sb.Append("and ");  					// Print last three digits  					sb.Append(cache[gv]);  				}  			}
Magic Number,Rant.Formats,EnglishNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishNumberVerbalizer.cs,Verbalize,The following statement contains a magic number: for (int i = 0; i < gn; i++)  			{  				group = i == 0  						? nstr.Substring(0' firstGroupLength)  						: nstr.Substring(firstGroupLength + (i - 1) * 3' 3);    				// Index of power name  				int p = (gn - 1) - i;  				int gv = Int32.Parse(group);  				if (p > 0 && gv > 0)  				{  					// Print powers of thousand  					sb.Append($"{cache[gv]} {thousandPowers[p - 1]}");    					// If the last three digits are 000' there's no space needed.  					if (!(p - 1 == 0 && number % 1000 == 0)) sb.Append(" ");  				}  				else if ((gn > 1 && gv != 0) || gn == 1)  				{  					if (gn > 1 && gv < 100) sb.Append("and ");  					// Print last three digits  					sb.Append(cache[gv]);  				}  			}
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,GermanNumberVerbalizer,The following statement contains a magic number: cache = new string[1000];
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,GermanNumberVerbalizer,The following statement contains a magic number: for (int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = (i % 10 > 0 ? und[i % 10] : "") + tens[i / 10];  				}  				else  				{  					int h = i % 100;  					cache[i] = (i / 100 > 1 ? pre[i / 100] : "") + "hundert"  						+ (h > 0  							? (h < 20  									? pre[h]  									: (h % 10 > 0 ? und[i % 10] : "") + tens[h / 10])  							: "");  				}  			}
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,GermanNumberVerbalizer,The following statement contains a magic number: for (int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = (i % 10 > 0 ? und[i % 10] : "") + tens[i / 10];  				}  				else  				{  					int h = i % 100;  					cache[i] = (i / 100 > 1 ? pre[i / 100] : "") + "hundert"  						+ (h > 0  							? (h < 20  									? pre[h]  									: (h % 10 > 0 ? und[i % 10] : "") + tens[h / 10])  							: "");  				}  			}
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,GermanNumberVerbalizer,The following statement contains a magic number: for (int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = (i % 10 > 0 ? und[i % 10] : "") + tens[i / 10];  				}  				else  				{  					int h = i % 100;  					cache[i] = (i / 100 > 1 ? pre[i / 100] : "") + "hundert"  						+ (h > 0  							? (h < 20  									? pre[h]  									: (h % 10 > 0 ? und[i % 10] : "") + tens[h / 10])  							: "");  				}  			}
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,GermanNumberVerbalizer,The following statement contains a magic number: for (int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = (i % 10 > 0 ? und[i % 10] : "") + tens[i / 10];  				}  				else  				{  					int h = i % 100;  					cache[i] = (i / 100 > 1 ? pre[i / 100] : "") + "hundert"  						+ (h > 0  							? (h < 20  									? pre[h]  									: (h % 10 > 0 ? und[i % 10] : "") + tens[h / 10])  							: "");  				}  			}
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,GermanNumberVerbalizer,The following statement contains a magic number: for (int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = (i % 10 > 0 ? und[i % 10] : "") + tens[i / 10];  				}  				else  				{  					int h = i % 100;  					cache[i] = (i / 100 > 1 ? pre[i / 100] : "") + "hundert"  						+ (h > 0  							? (h < 20  									? pre[h]  									: (h % 10 > 0 ? und[i % 10] : "") + tens[h / 10])  							: "");  				}  			}
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,GermanNumberVerbalizer,The following statement contains a magic number: for (int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = (i % 10 > 0 ? und[i % 10] : "") + tens[i / 10];  				}  				else  				{  					int h = i % 100;  					cache[i] = (i / 100 > 1 ? pre[i / 100] : "") + "hundert"  						+ (h > 0  							? (h < 20  									? pre[h]  									: (h % 10 > 0 ? und[i % 10] : "") + tens[h / 10])  							: "");  				}  			}
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,GermanNumberVerbalizer,The following statement contains a magic number: for (int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = (i % 10 > 0 ? und[i % 10] : "") + tens[i / 10];  				}  				else  				{  					int h = i % 100;  					cache[i] = (i / 100 > 1 ? pre[i / 100] : "") + "hundert"  						+ (h > 0  							? (h < 20  									? pre[h]  									: (h % 10 > 0 ? und[i % 10] : "") + tens[h / 10])  							: "");  				}  			}
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,GermanNumberVerbalizer,The following statement contains a magic number: for (int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = (i % 10 > 0 ? und[i % 10] : "") + tens[i / 10];  				}  				else  				{  					int h = i % 100;  					cache[i] = (i / 100 > 1 ? pre[i / 100] : "") + "hundert"  						+ (h > 0  							? (h < 20  									? pre[h]  									: (h % 10 > 0 ? und[i % 10] : "") + tens[h / 10])  							: "");  				}  			}
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,GermanNumberVerbalizer,The following statement contains a magic number: for (int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = (i % 10 > 0 ? und[i % 10] : "") + tens[i / 10];  				}  				else  				{  					int h = i % 100;  					cache[i] = (i / 100 > 1 ? pre[i / 100] : "") + "hundert"  						+ (h > 0  							? (h < 20  									? pre[h]  									: (h % 10 > 0 ? und[i % 10] : "") + tens[h / 10])  							: "");  				}  			}
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,GermanNumberVerbalizer,The following statement contains a magic number: for (int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = (i % 10 > 0 ? und[i % 10] : "") + tens[i / 10];  				}  				else  				{  					int h = i % 100;  					cache[i] = (i / 100 > 1 ? pre[i / 100] : "") + "hundert"  						+ (h > 0  							? (h < 20  									? pre[h]  									: (h % 10 > 0 ? und[i % 10] : "") + tens[h / 10])  							: "");  				}  			}
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,GermanNumberVerbalizer,The following statement contains a magic number: for (int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = (i % 10 > 0 ? und[i % 10] : "") + tens[i / 10];  				}  				else  				{  					int h = i % 100;  					cache[i] = (i / 100 > 1 ? pre[i / 100] : "") + "hundert"  						+ (h > 0  							? (h < 20  									? pre[h]  									: (h % 10 > 0 ? und[i % 10] : "") + tens[h / 10])  							: "");  				}  			}
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,GermanNumberVerbalizer,The following statement contains a magic number: for (int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = (i % 10 > 0 ? und[i % 10] : "") + tens[i / 10];  				}  				else  				{  					int h = i % 100;  					cache[i] = (i / 100 > 1 ? pre[i / 100] : "") + "hundert"  						+ (h > 0  							? (h < 20  									? pre[h]  									: (h % 10 > 0 ? und[i % 10] : "") + tens[h / 10])  							: "");  				}  			}
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,GermanNumberVerbalizer,The following statement contains a magic number: for (int i = 0; i < 1000; i++)  			{  				if (i < 20)  				{  					cache[i] = pre[i];  				}  				else if (i < 100)  				{  					cache[i] = (i % 10 > 0 ? und[i % 10] : "") + tens[i / 10];  				}  				else  				{  					int h = i % 100;  					cache[i] = (i / 100 > 1 ? pre[i / 100] : "") + "hundert"  						+ (h > 0  							? (h < 20  									? pre[h]  									: (h % 10 > 0 ? und[i % 10] : "") + tens[h / 10])  							: "");  				}  			}
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,Verbalize,The following statement contains a magic number: int firstGroupLength = dn % 3;
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,Verbalize,The following statement contains a magic number: if (firstGroupLength == 0) firstGroupLength = 3;
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,Verbalize,The following statement contains a magic number: for (int i = 0; i < gn; i++)  			{  				group = i == 0  						? nstr.Substring(0' firstGroupLength)  						: nstr.Substring(firstGroupLength + (i - 1) * 3' 3);    				// Index of power name  				int p = (gn - 1) - i;  				int gv = Int32.Parse(group);  				if (p > 0)  				{  					if (gv == 1	 && p > 1)  					{  						// One million +  						sb.Append(thousandPowers[p - 1]);  					}  					else  					{  						// Print powers of thousand  						if (gv > 1) sb.Append(cache[gv]);  						if (gv > 0) sb.Append(thousandPowersPl[p - 1]);						  					}  					  				}  				else if ((gn > 1 && gv != 0) || gn == 1)  				{  					// Print last three digits  					sb.Append(cache[gv]);  				}  			}
Magic Number,Rant.Formats,GermanNumberVerbalizer,C:\repos\TheBerkin_Rant\Rant\Formats\GermanNumberVerbalizer.cs,Verbalize,The following statement contains a magic number: for (int i = 0; i < gn; i++)  			{  				group = i == 0  						? nstr.Substring(0' firstGroupLength)  						: nstr.Substring(firstGroupLength + (i - 1) * 3' 3);    				// Index of power name  				int p = (gn - 1) - i;  				int gv = Int32.Parse(group);  				if (p > 0)  				{  					if (gv == 1	 && p > 1)  					{  						// One million +  						sb.Append(thousandPowers[p - 1]);  					}  					else  					{  						// Print powers of thousand  						if (gv > 1) sb.Append(cache[gv]);  						if (gv > 0) sb.Append(thousandPowersPl[p - 1]);						  					}  					  				}  				else if ((gn > 1 && gv != 0) || gn == 1)  				{  					// Print last three digits  					sb.Append(cache[gv]);  				}  			}
Magic Number,Rant.Formats,EnglishPluralizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishPluralizer.cs,Pluralize,The following statement contains a magic number: if (input.EndsWith("fe")) return input.Substring(0' l - 2) + "ves";
Magic Number,Rant.Formats,EnglishPluralizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishPluralizer.cs,Pluralize,The following statement contains a magic number: if (consonants.Contains(input[l - 2]))  			{  				// With nouns ending in o preceded by a consonant' the plural in many cases is spelled by adding -es...  				if (input.EndsWith("o")) return input + "es";    				// Nouns ending in a y preceded by a consonant usually drop the y and add -ies...  				if (input.EndsWith("y")) return input.Substring(0' l - 1) + "ies";  			}
Magic Number,Rant.Formats,EnglishPluralizer,C:\repos\TheBerkin_Rant\Rant\Formats\EnglishPluralizer.cs,Pluralize,The following statement contains a magic number: if (input.EndsWith("man")) return input.Substring(0' l - 2) + "en";
Magic Number,Rant.Localization,Txtres,C:\repos\TheBerkin_Rant\Rant\Localization\Txtres.cs,LoadStringTableData,The following statement contains a magic number: using (var reader = new StreamReader(stream))              {                  loop:                  while (!reader.EndOfStream)                  {                      string line = reader.ReadLine();                      if (line == null || line.Length == 0) continue;                      var kv = line.Split(new[] { '=' }' 2);                      if (kv.Length != 2) continue;                      string key = kv[0].Trim();                      if (!key.All(c => char.IsLetterOrDigit(c) || c == '-' || c == '_')) continue;                      string valueLiteral = kv[1].Trim();                      var sb = new StringBuilder();                      int i = 0;                      int len = valueLiteral.Length;                      while (i < len)                      {                          if (i == 0 || i == valueLiteral.Length - 1)                          {                              if (valueLiteral[i] != '"') goto loop;                              i++;                              continue;                          }                          switch (valueLiteral[i])                          {                              case '\\':                              {                                  if (i == valueLiteral.Length - 1) goto loop;                                  switch (valueLiteral[i + 1])                                  {                                      case 'a':                                          sb.Append('\a');                                          break;                                      case 'b':                                          sb.Append('\b');                                          break;                                      case 'f':                                          sb.Append('\f');                                          break;                                      case 'n':                                          sb.Append('\n');                                          break;                                      case 'r':                                          sb.Append('\r');                                          break;                                      case 't':                                          sb.Append('\t');                                          break;                                      case 'v':                                          sb.Append('\v');                                          break;                                      case 'u':                                      {                                          if (i + 5 >= valueLiteral.Length) goto loop;  										if (!short.TryParse(valueLiteral.Substring(i + 1' 4)'  										NumberStyles.AllowHexSpecifier'  										CultureInfo.InvariantCulture' out short code))  											goto loop;  										sb.Append((char)code);                                          i += 6;                                          continue;                                      }                                      default:                                          sb.Append(valueLiteral[i + 1]);                                          break;                                  }                                  i += 2;                                  continue;                              }                              default:                                  sb.Append(valueLiteral[i]);                                  break;                          }                          i++;                      }                      table[key] = sb.ToString();                  }                  _languages[lang] = table;              }
Magic Number,Rant.Localization,Txtres,C:\repos\TheBerkin_Rant\Rant\Localization\Txtres.cs,LoadStringTableData,The following statement contains a magic number: using (var reader = new StreamReader(stream))              {                  loop:                  while (!reader.EndOfStream)                  {                      string line = reader.ReadLine();                      if (line == null || line.Length == 0) continue;                      var kv = line.Split(new[] { '=' }' 2);                      if (kv.Length != 2) continue;                      string key = kv[0].Trim();                      if (!key.All(c => char.IsLetterOrDigit(c) || c == '-' || c == '_')) continue;                      string valueLiteral = kv[1].Trim();                      var sb = new StringBuilder();                      int i = 0;                      int len = valueLiteral.Length;                      while (i < len)                      {                          if (i == 0 || i == valueLiteral.Length - 1)                          {                              if (valueLiteral[i] != '"') goto loop;                              i++;                              continue;                          }                          switch (valueLiteral[i])                          {                              case '\\':                              {                                  if (i == valueLiteral.Length - 1) goto loop;                                  switch (valueLiteral[i + 1])                                  {                                      case 'a':                                          sb.Append('\a');                                          break;                                      case 'b':                                          sb.Append('\b');                                          break;                                      case 'f':                                          sb.Append('\f');                                          break;                                      case 'n':                                          sb.Append('\n');                                          break;                                      case 'r':                                          sb.Append('\r');                                          break;                                      case 't':                                          sb.Append('\t');                                          break;                                      case 'v':                                          sb.Append('\v');                                          break;                                      case 'u':                                      {                                          if (i + 5 >= valueLiteral.Length) goto loop;  										if (!short.TryParse(valueLiteral.Substring(i + 1' 4)'  										NumberStyles.AllowHexSpecifier'  										CultureInfo.InvariantCulture' out short code))  											goto loop;  										sb.Append((char)code);                                          i += 6;                                          continue;                                      }                                      default:                                          sb.Append(valueLiteral[i + 1]);                                          break;                                  }                                  i += 2;                                  continue;                              }                              default:                                  sb.Append(valueLiteral[i]);                                  break;                          }                          i++;                      }                      table[key] = sb.ToString();                  }                  _languages[lang] = table;              }
Magic Number,Rant.Localization,Txtres,C:\repos\TheBerkin_Rant\Rant\Localization\Txtres.cs,LoadStringTableData,The following statement contains a magic number: using (var reader = new StreamReader(stream))              {                  loop:                  while (!reader.EndOfStream)                  {                      string line = reader.ReadLine();                      if (line == null || line.Length == 0) continue;                      var kv = line.Split(new[] { '=' }' 2);                      if (kv.Length != 2) continue;                      string key = kv[0].Trim();                      if (!key.All(c => char.IsLetterOrDigit(c) || c == '-' || c == '_')) continue;                      string valueLiteral = kv[1].Trim();                      var sb = new StringBuilder();                      int i = 0;                      int len = valueLiteral.Length;                      while (i < len)                      {                          if (i == 0 || i == valueLiteral.Length - 1)                          {                              if (valueLiteral[i] != '"') goto loop;                              i++;                              continue;                          }                          switch (valueLiteral[i])                          {                              case '\\':                              {                                  if (i == valueLiteral.Length - 1) goto loop;                                  switch (valueLiteral[i + 1])                                  {                                      case 'a':                                          sb.Append('\a');                                          break;                                      case 'b':                                          sb.Append('\b');                                          break;                                      case 'f':                                          sb.Append('\f');                                          break;                                      case 'n':                                          sb.Append('\n');                                          break;                                      case 'r':                                          sb.Append('\r');                                          break;                                      case 't':                                          sb.Append('\t');                                          break;                                      case 'v':                                          sb.Append('\v');                                          break;                                      case 'u':                                      {                                          if (i + 5 >= valueLiteral.Length) goto loop;  										if (!short.TryParse(valueLiteral.Substring(i + 1' 4)'  										NumberStyles.AllowHexSpecifier'  										CultureInfo.InvariantCulture' out short code))  											goto loop;  										sb.Append((char)code);                                          i += 6;                                          continue;                                      }                                      default:                                          sb.Append(valueLiteral[i + 1]);                                          break;                                  }                                  i += 2;                                  continue;                              }                              default:                                  sb.Append(valueLiteral[i]);                                  break;                          }                          i++;                      }                      table[key] = sb.ToString();                  }                  _languages[lang] = table;              }
Magic Number,Rant.Localization,Txtres,C:\repos\TheBerkin_Rant\Rant\Localization\Txtres.cs,LoadStringTableData,The following statement contains a magic number: using (var reader = new StreamReader(stream))              {                  loop:                  while (!reader.EndOfStream)                  {                      string line = reader.ReadLine();                      if (line == null || line.Length == 0) continue;                      var kv = line.Split(new[] { '=' }' 2);                      if (kv.Length != 2) continue;                      string key = kv[0].Trim();                      if (!key.All(c => char.IsLetterOrDigit(c) || c == '-' || c == '_')) continue;                      string valueLiteral = kv[1].Trim();                      var sb = new StringBuilder();                      int i = 0;                      int len = valueLiteral.Length;                      while (i < len)                      {                          if (i == 0 || i == valueLiteral.Length - 1)                          {                              if (valueLiteral[i] != '"') goto loop;                              i++;                              continue;                          }                          switch (valueLiteral[i])                          {                              case '\\':                              {                                  if (i == valueLiteral.Length - 1) goto loop;                                  switch (valueLiteral[i + 1])                                  {                                      case 'a':                                          sb.Append('\a');                                          break;                                      case 'b':                                          sb.Append('\b');                                          break;                                      case 'f':                                          sb.Append('\f');                                          break;                                      case 'n':                                          sb.Append('\n');                                          break;                                      case 'r':                                          sb.Append('\r');                                          break;                                      case 't':                                          sb.Append('\t');                                          break;                                      case 'v':                                          sb.Append('\v');                                          break;                                      case 'u':                                      {                                          if (i + 5 >= valueLiteral.Length) goto loop;  										if (!short.TryParse(valueLiteral.Substring(i + 1' 4)'  										NumberStyles.AllowHexSpecifier'  										CultureInfo.InvariantCulture' out short code))  											goto loop;  										sb.Append((char)code);                                          i += 6;                                          continue;                                      }                                      default:                                          sb.Append(valueLiteral[i + 1]);                                          break;                                  }                                  i += 2;                                  continue;                              }                              default:                                  sb.Append(valueLiteral[i]);                                  break;                          }                          i++;                      }                      table[key] = sb.ToString();                  }                  _languages[lang] = table;              }
Magic Number,Rant.Localization,Txtres,C:\repos\TheBerkin_Rant\Rant\Localization\Txtres.cs,LoadStringTableData,The following statement contains a magic number: using (var reader = new StreamReader(stream))              {                  loop:                  while (!reader.EndOfStream)                  {                      string line = reader.ReadLine();                      if (line == null || line.Length == 0) continue;                      var kv = line.Split(new[] { '=' }' 2);                      if (kv.Length != 2) continue;                      string key = kv[0].Trim();                      if (!key.All(c => char.IsLetterOrDigit(c) || c == '-' || c == '_')) continue;                      string valueLiteral = kv[1].Trim();                      var sb = new StringBuilder();                      int i = 0;                      int len = valueLiteral.Length;                      while (i < len)                      {                          if (i == 0 || i == valueLiteral.Length - 1)                          {                              if (valueLiteral[i] != '"') goto loop;                              i++;                              continue;                          }                          switch (valueLiteral[i])                          {                              case '\\':                              {                                  if (i == valueLiteral.Length - 1) goto loop;                                  switch (valueLiteral[i + 1])                                  {                                      case 'a':                                          sb.Append('\a');                                          break;                                      case 'b':                                          sb.Append('\b');                                          break;                                      case 'f':                                          sb.Append('\f');                                          break;                                      case 'n':                                          sb.Append('\n');                                          break;                                      case 'r':                                          sb.Append('\r');                                          break;                                      case 't':                                          sb.Append('\t');                                          break;                                      case 'v':                                          sb.Append('\v');                                          break;                                      case 'u':                                      {                                          if (i + 5 >= valueLiteral.Length) goto loop;  										if (!short.TryParse(valueLiteral.Substring(i + 1' 4)'  										NumberStyles.AllowHexSpecifier'  										CultureInfo.InvariantCulture' out short code))  											goto loop;  										sb.Append((char)code);                                          i += 6;                                          continue;                                      }                                      default:                                          sb.Append(valueLiteral[i + 1]);                                          break;                                  }                                  i += 2;                                  continue;                              }                              default:                                  sb.Append(valueLiteral[i]);                                  break;                          }                          i++;                      }                      table[key] = sb.ToString();                  }                  _languages[lang] = table;              }
Magic Number,Rant.Localization,Txtres,C:\repos\TheBerkin_Rant\Rant\Localization\Txtres.cs,LoadStringTableData,The following statement contains a magic number: using (var reader = new StreamReader(stream))              {                  loop:                  while (!reader.EndOfStream)                  {                      string line = reader.ReadLine();                      if (line == null || line.Length == 0) continue;                      var kv = line.Split(new[] { '=' }' 2);                      if (kv.Length != 2) continue;                      string key = kv[0].Trim();                      if (!key.All(c => char.IsLetterOrDigit(c) || c == '-' || c == '_')) continue;                      string valueLiteral = kv[1].Trim();                      var sb = new StringBuilder();                      int i = 0;                      int len = valueLiteral.Length;                      while (i < len)                      {                          if (i == 0 || i == valueLiteral.Length - 1)                          {                              if (valueLiteral[i] != '"') goto loop;                              i++;                              continue;                          }                          switch (valueLiteral[i])                          {                              case '\\':                              {                                  if (i == valueLiteral.Length - 1) goto loop;                                  switch (valueLiteral[i + 1])                                  {                                      case 'a':                                          sb.Append('\a');                                          break;                                      case 'b':                                          sb.Append('\b');                                          break;                                      case 'f':                                          sb.Append('\f');                                          break;                                      case 'n':                                          sb.Append('\n');                                          break;                                      case 'r':                                          sb.Append('\r');                                          break;                                      case 't':                                          sb.Append('\t');                                          break;                                      case 'v':                                          sb.Append('\v');                                          break;                                      case 'u':                                      {                                          if (i + 5 >= valueLiteral.Length) goto loop;  										if (!short.TryParse(valueLiteral.Substring(i + 1' 4)'  										NumberStyles.AllowHexSpecifier'  										CultureInfo.InvariantCulture' out short code))  											goto loop;  										sb.Append((char)code);                                          i += 6;                                          continue;                                      }                                      default:                                          sb.Append(valueLiteral[i + 1]);                                          break;                                  }                                  i += 2;                                  continue;                              }                              default:                                  sb.Append(valueLiteral[i]);                                  break;                          }                          i++;                      }                      table[key] = sb.ToString();                  }                  _languages[lang] = table;              }
Magic Number,Rant.Core.Output,OutputChain,C:\repos\TheBerkin_Rant\Rant\Core\Output\OutputChain.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(256);
Magic Number,Rant.Core.Output,OutputChainBuffer,C:\repos\TheBerkin_Rant\Rant\Core\Output\OutputChainBuffer.cs,CapitalizeTitleString,The following statement contains a magic number: var wordBuffer = new StringBuilder(32);
Magic Number,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,Switch,The following statement contains a magic number: if (casePairs.Length % 2 != 0)  				throw new RantRuntimeException(sb' sb.CurrentAction' "err-switch-incomplete-pair");
Magic Number,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,Switch,The following statement contains a magic number: for (int i = 0; i < casePairs.Length; i += 2)  			{  				sb.AddOutputWriter();  				yield return casePairs[i];  				string output = sb.Return().Main;  				if (String.Equals(input' output' StringComparison.Ordinal))  				{  					yield return casePairs[i + 1];  					yield break;  				}  			}
Magic Number,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,Abbreviate,The following statement contains a magic number: if (words.Length < 3)  			{  				sb.Print(words.Aggregate((c' n) => c + Char.ToUpperInvariant(n[0]).ToString()));  				return;  			}
Magic Number,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,Odd,The following statement contains a magic number: if (sb.Blocks.Peek().Iteration % 2 != 0) yield return action;
Magic Number,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,Even,The following statement contains a magic number: if (sb.Blocks.Peek().Iteration % 2 == 0) yield return action;
Magic Number,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,RotateVariablesRight,The following statement contains a magic number: if (varNames.Length < 2) return;
Magic Number,Rant.Core.Framework,RantFunctionRegistry,C:\repos\TheBerkin_Rant\Rant\Core\Framework\RantFunctionRegistry.cs,RotateVariablesLeft,The following statement contains a magic number: if (varNames.Length < 2) return;
Magic Number,Rant,RNG,C:\repos\TheBerkin_Rant\Rant\RNG.cs,GetRaw,The following statement contains a magic number: unchecked              {                  _hashState.Init(s' g);                  for (int i = 0; i < 8; i++)                  {                      _hashState.HashUnsigned =                          (_hashState.HashUnsigned + 31                           * Table[((_hashState.Seed ^ _hashState.HashUnsigned) >> (i * 8)) & 0xff].RotR(i) + 47                           * Table[((_hashState.Generation ^ _hashState.HashUnsigned) >> (i * 8)) & 0xff].RotL(i) + 11)                          * 6364136223846793005;                  }                  return _hashState.HashSigned;              }
Magic Number,Rant,RNG,C:\repos\TheBerkin_Rant\Rant\RNG.cs,GetRaw,The following statement contains a magic number: unchecked              {                  _hashState.Init(s' g);                  for (int i = 0; i < 8; i++)                  {                      _hashState.HashUnsigned =                          (_hashState.HashUnsigned + 31                           * Table[((_hashState.Seed ^ _hashState.HashUnsigned) >> (i * 8)) & 0xff].RotR(i) + 47                           * Table[((_hashState.Generation ^ _hashState.HashUnsigned) >> (i * 8)) & 0xff].RotL(i) + 11)                          * 6364136223846793005;                  }                  return _hashState.HashSigned;              }
Magic Number,Rant,RNG,C:\repos\TheBerkin_Rant\Rant\RNG.cs,GetRaw,The following statement contains a magic number: unchecked              {                  _hashState.Init(s' g);                  for (int i = 0; i < 8; i++)                  {                      _hashState.HashUnsigned =                          (_hashState.HashUnsigned + 31                           * Table[((_hashState.Seed ^ _hashState.HashUnsigned) >> (i * 8)) & 0xff].RotR(i) + 47                           * Table[((_hashState.Generation ^ _hashState.HashUnsigned) >> (i * 8)) & 0xff].RotL(i) + 11)                          * 6364136223846793005;                  }                  return _hashState.HashSigned;              }
Magic Number,Rant,RNG,C:\repos\TheBerkin_Rant\Rant\RNG.cs,GetRaw,The following statement contains a magic number: unchecked              {                  _hashState.Init(s' g);                  for (int i = 0; i < 8; i++)                  {                      _hashState.HashUnsigned =                          (_hashState.HashUnsigned + 31                           * Table[((_hashState.Seed ^ _hashState.HashUnsigned) >> (i * 8)) & 0xff].RotR(i) + 47                           * Table[((_hashState.Generation ^ _hashState.HashUnsigned) >> (i * 8)) & 0xff].RotL(i) + 11)                          * 6364136223846793005;                  }                  return _hashState.HashSigned;              }
Magic Number,Rant,RNG,C:\repos\TheBerkin_Rant\Rant\RNG.cs,GetRaw,The following statement contains a magic number: unchecked              {                  _hashState.Init(s' g);                  for (int i = 0; i < 8; i++)                  {                      _hashState.HashUnsigned =                          (_hashState.HashUnsigned + 31                           * Table[((_hashState.Seed ^ _hashState.HashUnsigned) >> (i * 8)) & 0xff].RotR(i) + 47                           * Table[((_hashState.Generation ^ _hashState.HashUnsigned) >> (i * 8)) & 0xff].RotL(i) + 11)                          * 6364136223846793005;                  }                  return _hashState.HashSigned;              }
Magic Number,Rant,RNG,C:\repos\TheBerkin_Rant\Rant\RNG.cs,GetRaw,The following statement contains a magic number: unchecked              {                  _hashState.Init(s' g);                  for (int i = 0; i < 8; i++)                  {                      _hashState.HashUnsigned =                          (_hashState.HashUnsigned + 31                           * Table[((_hashState.Seed ^ _hashState.HashUnsigned) >> (i * 8)) & 0xff].RotR(i) + 47                           * Table[((_hashState.Generation ^ _hashState.HashUnsigned) >> (i * 8)) & 0xff].RotL(i) + 11)                          * 6364136223846793005;                  }                  return _hashState.HashSigned;              }
Magic Number,Rant,RNG,C:\repos\TheBerkin_Rant\Rant\RNG.cs,GetRaw,The following statement contains a magic number: unchecked              {                  _hashState.Init(s' g);                  for (int i = 0; i < 8; i++)                  {                      _hashState.HashUnsigned =                          (_hashState.HashUnsigned + 31                           * Table[((_hashState.Seed ^ _hashState.HashUnsigned) >> (i * 8)) & 0xff].RotR(i) + 47                           * Table[((_hashState.Generation ^ _hashState.HashUnsigned) >> (i * 8)) & 0xff].RotL(i) + 11)                          * 6364136223846793005;                  }                  return _hashState.HashSigned;              }
Magic Number,Rant,RantProgram,C:\repos\TheBerkin_Rant\Rant\RantProgram.cs,LoadStream,The following statement contains a magic number: using (var input = new EasyReader(stream))  			{  				if (Encoding.ASCII.GetString(input.ReadBytes(4)) != Magic)  					throw new InvalidDataException(GetString("err-pgmload-bad-magic"));    				var rst = RST.DeserializeRST(input);    				// TODO: Use string table    				return new RantProgram(programName' RantProgramOrigin.File' rst);  			}
Magic Number,Rant.Resources,RantPackageVersion,C:\repos\TheBerkin_Rant\Rant\Resources\RantPackageVersion.cs,Parse,The following statement contains a magic number: if (parts.Length > 3) throw new FormatException("Version cannot be composed of more than 3 parts.");
Magic Number,Rant.Resources,RantPackageVersion,C:\repos\TheBerkin_Rant\Rant\Resources\RantPackageVersion.cs,Parse,The following statement contains a magic number: if (parts.Length < 2) return v;
Magic Number,Rant.Resources,RantPackageVersion,C:\repos\TheBerkin_Rant\Rant\Resources\RantPackageVersion.cs,Parse,The following statement contains a magic number: if (parts.Length < 3) return v;
Magic Number,Rant.Resources,RantPackageVersion,C:\repos\TheBerkin_Rant\Rant\Resources\RantPackageVersion.cs,Parse,The following statement contains a magic number: if (!int.TryParse(parts[2]' styles' CultureInfo.InvariantCulture' out v._revision) || v._revision < 0)                  throw new FormatException("Revision number must be a valid' non-negative integer.");
Magic Number,Rant.Resources,RantPackageVersion,C:\repos\TheBerkin_Rant\Rant\Resources\RantPackageVersion.cs,TryParse,The following statement contains a magic number: if (parts.Length > 3) return false;
Magic Number,Rant.Resources,RantPackageVersion,C:\repos\TheBerkin_Rant\Rant\Resources\RantPackageVersion.cs,TryParse,The following statement contains a magic number: if (parts.Length < 2) return true;
Magic Number,Rant.Resources,RantPackageVersion,C:\repos\TheBerkin_Rant\Rant\Resources\RantPackageVersion.cs,TryParse,The following statement contains a magic number: if (parts.Length < 3) return true;
Magic Number,Rant.Resources,RantPackageVersion,C:\repos\TheBerkin_Rant\Rant\Resources\RantPackageVersion.cs,TryParse,The following statement contains a magic number: return int.TryParse(parts[2]' styles' CultureInfo.InvariantCulture' out v._revision) && v._revision >= 0;
Magic Number,Rant.Resources,RantResource,C:\repos\TheBerkin_Rant\Rant\Resources\RantResource.cs,DeserializeResource,The following statement contains a magic number: var typeCode = Encoding.ASCII.GetString(reader.ReadBytes(4));
Magic Number,Rant.Resources,RantPackage,C:\repos\TheBerkin_Rant\Rant\Resources\RantPackage.cs,Load,The following statement contains a magic number: using (var reader = new EasyReader(source))              {                  string magic = Encoding.ASCII.GetString(reader.ReadBytes(4));                  if (magic != MAGIC)                      throw new InvalidDataException(GetString("err-file-corrupt"));                  ushort version = reader.ReadUInt16();                  if (version != PACKAGE_FORMAT_VERSION)                      throw new InvalidDataException(GetString("err-invalid-package-version"' version));                  bool compress = reader.ReadBoolean();    				var package = new RantPackage();    				package.Title = reader.ReadString();  				package.ID = reader.ReadString();  				package.Description = reader.ReadString();  				package.Tags = reader.ReadStringArray();  				package.Authors = reader.ReadStringArray();  				int vmaj = reader.ReadInt32();  				int vmin = reader.ReadInt32();  				int vrev = reader.ReadInt32();  				package.Version = new RantPackageVersion(vmaj' vmin' vrev);  				int depCount = reader.ReadInt32();  				for(int i = 0; i < depCount; i++)  				{  					var depId = reader.ReadString();  					int depVerMaj = reader.ReadInt32();  					int depVerMin = reader.ReadInt32();  					int depVerRev = reader.ReadInt32();  					bool depAllowNewer = reader.ReadBoolean();  					package.AddDependency(new RantPackageDependency(depId' new RantPackageVersion(depVerMaj' depVerMin' depVerRev))  					{  						AllowNewer = depAllowNewer  					});  				}    				int resCount = reader.ReadInt32();    				if (compress)  				{  					using (var decompressStream = new DeflateStream(reader.BaseStream' CompressionMode.Decompress' true))  					{  						for (int i = 0; i < resCount; i++)  						{  							package._resources.Add(RantResource.DeserializeResource(new EasyReader(decompressStream' true)));  						}  					}  				}  				else  				{  					for(int i = 0; i < resCount; i++)  					{  						package._resources.Add(RantResource.DeserializeResource(reader));  					}  				}    				return package;              }
Magic Number,Rant.Core.IO,BitField,C:\repos\TheBerkin_Rant\Rant\Core\IO\BitField.cs,BitField,The following statement contains a magic number: if (bits % 8 != 0)                  throw new ArgumentException("Bit count must be a multiple of 8.");
Magic Number,Rant.Core.IO,BitField,C:\repos\TheBerkin_Rant\Rant\Core\IO\BitField.cs,BitField,The following statement contains a magic number: _field = new byte[bits / 8];
Magic Number,Rant.Core.IO,BitField,C:\repos\TheBerkin_Rant\Rant\Core\IO\BitField.cs,FromBytes,The following statement contains a magic number: var bf = new BitField(data.Length * 8);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadChar,The following statement contains a magic number: return BitConverter.ToChar(ReadAndFormat(2)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadChar,The following statement contains a magic number: value = BitConverter.ToChar(ReadAndFormat(2)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadUInt16,The following statement contains a magic number: return BitConverter.ToUInt16(ReadAndFormat(2)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadUInt16,The following statement contains a magic number: value = BitConverter.ToUInt16(ReadAndFormat(2)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadInt16,The following statement contains a magic number: return BitConverter.ToInt16(ReadAndFormat(2)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadUInt32,The following statement contains a magic number: return BitConverter.ToUInt32(ReadAndFormat(4)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadUInt32,The following statement contains a magic number: value = BitConverter.ToUInt32(ReadAndFormat(4)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadInt32,The following statement contains a magic number: return BitConverter.ToInt32(ReadAndFormat(4)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadInt32,The following statement contains a magic number: value = BitConverter.ToInt32(ReadAndFormat(4)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadUInt64,The following statement contains a magic number: return BitConverter.ToUInt64(ReadAndFormat(8)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadUInt64,The following statement contains a magic number: value = BitConverter.ToUInt64(ReadAndFormat(8)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadInt64,The following statement contains a magic number: return BitConverter.ToInt64(ReadAndFormat(8)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadInt64,The following statement contains a magic number: value = BitConverter.ToInt64(ReadAndFormat(8)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadSingle,The following statement contains a magic number: return BitConverter.ToSingle(ReadAndFormat(4)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadSingle,The following statement contains a magic number: value = BitConverter.ToSingle(ReadAndFormat(4)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadDouble,The following statement contains a magic number: return BitConverter.ToDouble(ReadAndFormat(8)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadDouble,The following statement contains a magic number: value = BitConverter.ToDouble(ReadAndFormat(8)' 0);
Magic Number,Rant.Core.IO,EasyReader,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyReader.cs,ReadEnum,The following statement contains a magic number: Array.Resize(ref data' 8);
Magic Number,Rant.Core.IO,EasyWriter,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyWriter.cs,Write,The following statement contains a magic number: BaseStream.Write(data' 0' 2);
Magic Number,Rant.Core.IO,EasyWriter,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyWriter.cs,Write,The following statement contains a magic number: BaseStream.Write(data' 0' 2);
Magic Number,Rant.Core.IO,EasyWriter,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyWriter.cs,Write,The following statement contains a magic number: BaseStream.Write(data' 0' 4);
Magic Number,Rant.Core.IO,EasyWriter,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyWriter.cs,Write,The following statement contains a magic number: BaseStream.Write(data' 0' 4);
Magic Number,Rant.Core.IO,EasyWriter,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyWriter.cs,Write,The following statement contains a magic number: BaseStream.Write(data' 0' 8);
Magic Number,Rant.Core.IO,EasyWriter,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyWriter.cs,Write,The following statement contains a magic number: BaseStream.Write(data' 0' 8);
Magic Number,Rant.Core.IO,EasyWriter,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyWriter.cs,Write,The following statement contains a magic number: BaseStream.Write(data' 0' 4);
Magic Number,Rant.Core.IO,EasyWriter,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyWriter.cs,Write,The following statement contains a magic number: BaseStream.Write(data' 0' 8);
Magic Number,Rant.Core.IO,EasyWriter,C:\repos\TheBerkin_Rant\Rant\Core\IO\EasyWriter.cs,Write,The following statement contains a magic number: BaseStream.Write(data' 0' 2);
Magic Number,Rant.Core.IO,IOUtil,C:\repos\TheBerkin_Rant\Rant\Core\IO\IOUtil.cs,NumberOfSetBits,The following statement contains a magic number: i = (i & 0x33333333) + ((i >> 2) & 0x33333333);
Magic Number,Rant.Core.IO,IOUtil,C:\repos\TheBerkin_Rant\Rant\Core\IO\IOUtil.cs,NumberOfSetBits,The following statement contains a magic number: return (int)(((i + (i >> 4)) & 0x0F0F0F0F) * 0x01010101) >> 24;
Magic Number,Rant.Core.IO,IOUtil,C:\repos\TheBerkin_Rant\Rant\Core\IO\IOUtil.cs,NumberOfSetBits,The following statement contains a magic number: return (int)(((i + (i >> 4)) & 0x0F0F0F0F) * 0x01010101) >> 24;
Magic Number,Rant.Vocabulary,RantDictionaryTable,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,FromStream,The following statement contains a magic number: using (var reader = new StreamReader(stream))              {                  while (!reader.EndOfStream)                  {                      line++;                        // Skip blank lines                      if (Util.IsNullOrWhiteSpace(l = reader.ReadLine())) continue;                        // Update line info                      len = l.Length;                      i = 0;                        // Skip whitespace at the start of the line                      while (i < len && char.IsWhiteSpace(l[i])) i++;                        switch (l[i++])                      {                          // Comments                          case '#':                              continue;                            // Directive                          case '@':                          {                              // Read directive name                              int dPos = i;                              if (!Tools.ReadDirectiveName(l' len' ref i' out string directiveName))                                  throw new RantTableLoadException(origin' line' dPos + 1' "err-table-missing-directive-name");                                // Read arguments                              var args = new List<Argument>();                              while (Tools.ReadArg(origin' l' len' line' ref i' out Argument arg)) args.Add(arg);                                switch (directiveName.ToLowerInvariant())                              {                                  // Table name definition                                  case "name":                                  {                                      // Do not allow this to appear anywhere except at the top of the file                                      if (table != null)                                          throw new RantTableLoadException(origin' line' dPos + 1' "err-table-misplaced-header-directive");                                      // Do not allow multiple @name directives                                      if (name != null)                                          throw new RantTableLoadException(origin' line' dPos + 1' "err-table-multiple-names");                                      // One argument required                                      if (args.Count != 1)                                          throw new RantTableLoadException(origin' line' dPos + 1' "err-table-name-args");                                      // Must meet standard identifier requirements                                      if (!Util.ValidateName(args[0].Value))                                          throw new RantTableLoadException(origin' line' args[0].CharIndex + 1' "err-table-invalid-name"' args[0].Value);                                      name = args[0].Value;                                      break;                                  }                                    // Subtype definition                                  case "sub":                                  {                                      // Do not allow this to appear anywhere except at the top of the file                                      if (table != null)                                          throw new RantTableLoadException(origin' line' dPos + 1' "err-table-misplaced-header-directive");                                      // @sub requires at least one argument                                      if (args.Count == 0)                                          throw new RantTableLoadException(origin' line' dPos + 1' "err-table-subtype-args");                                        // If the first argument is a number' use it as the subtype index.                                      if (Util.ParseInt(args[0].Value' out int termIndex))                                      {                                          // Disallow negative term indices                                          if (termIndex < 0)                                              throw new RantTableLoadException(origin' line' dPos + 1' "err-table-sub-index-negative"' termIndex);                                          // Requires at least one name                                          if (args.Count < 2)                                              throw new RantTableLoadException(origin' line' dPos + 1' "err-table-sub-missing-name");                                          // If the index is outside the current term index range' increase the number.                                          if (termIndex >= termsPerEntry)                                              termsPerEntry = termIndex + 1;                                          // Assign all following names to the index                                          for (int j = 1; j < args.Count; j++)                                          {                                              // Validate subtype name                                              if (!Util.ValidateName(args[j].Value))                                                  throw new RantTableLoadException(origin' line' args[j].CharIndex + 1' "err-table-bad-subtype"' args[j].Value);                                              subtypes[args[j].Value] = termIndex;                                          }                                      }                                      else                                      {                                          // Add to last index                                          termIndex = termsPerEntry++;                                          // Assign all following names to the index                                          foreach (var a in args)                                          {                                              // Validate subtype name                                              if (!Util.ValidateName(a.Value))                                                  throw new RantTableLoadException(origin' line' a.CharIndex + 1' "err-table-bad-subtype"' a.Value);                                              subtypes[a.Value] = termIndex;                                          }                                      }                                      break;                                  }                                  case "hide":                                      if (args.Count == 0) break;                                      foreach (var a in args)                                      {                                          if (!Util.ValidateName(a.Value))                                              throw new RantTableLoadException(origin' line' i' "err-table-invalid-class"' a.Value);                                          hidden.Add(String.Intern(a.Value));                                      }                                      break;                                  case "dummy":                                      if (args.Count != 0)                                          throw new RantTableLoadException(origin' line' i' "err-table-argc-mismatch"' directiveName' 0' args.Count);                                      dummy = true;                                      break;                                  case "id":                                      if (args.Count != 1)                                          throw new RantTableLoadException(origin' line' i' "err-table-argc-mismatch"' directiveName' 1' args.Count);                                      if (!Util.ValidateName(args[0].Value))                                          throw new RantTableLoadException(origin' line' args[0].CharIndex + 1' "err-table-bad-template-id"' args[0].Value);                                      tId = args[0].Value;                                      break;                                  case "using":                                      if (args.Count != 1)                                          throw new RantTableLoadException(origin' line' i' "err-table-argc-mismatch"' directiveName' 1' args.Count);                                      if (!Util.ValidateName(args[0].Value))                                          throw new RantTableLoadException(origin' line' args[0].CharIndex + 1' "err-table-bad-template-id"' args[0].Value);                                      if (!templates.TryGetValue(args[0].Value' out activeTemplate))                                          throw new RantTableLoadException(origin' line' args[0].CharIndex + 1' "err-table-template-not-found"' args[0].Value);                                      break;                                  case "class":                                  {                                      var cList = new List<string>();                                      if (args.Count == 0)                                          throw new RantTableLoadException(origin' line' i' "err-table-args-expected"' directiveName);                                      foreach (var cArg in args)                                      {                                          if (!Tools.ValidateClassName(cArg.Value))                                              throw new RantTableLoadException(origin' line' cArg.CharIndex + 1' "err-table-invalid-class"' cArg.Value);                                          cList.Add(cArg.Value);                                          autoClasses.Add(cArg.Value);                                      }                                      autoClassStack.Push(cList);                                      break;                                  }                                  case "endclass":                                  {                                      if (args.Count == 0)                                      {                                          if (autoClassStack.Count > 0)                                          {                                              foreach (string cName in autoClassStack.Pop())                                                  autoClasses.Remove(cName);                                          }                                      }                                      break;                                  }                              }                              break;                          }                            // Entry                          case '>':                              Tools.ConstructTable(origin' name' subtypes' ref termsPerEntry' ref table);                              Tools.ReadTerms(origin' l' len' line' ref i' table' activeTemplate' templates' out currentEntry);                              if (!dummy) table.AddEntry(currentEntry);                              foreach (string autoClass in autoClasses) currentEntry.AddClass(autoClass);                              if (tId != null)                              {                                  templates[tId] = currentEntry;                                  tId = null;                              }                              dummy = false;                              activeTemplate = null;                              break;                            // Property                          case '-':                          {                              Tools.ConstructTable(origin' name' subtypes' ref termsPerEntry' ref table);                              Tools.SkipSpace(l' len' ref i);                                // Read property name                              int dPos = i;                              if (!Tools.ReadDirectiveName(l' len' ref i' out string propName))                                  throw new RantTableLoadException(origin' line' dPos + 1' "err-table-missing-property-name");                                // Read arguments                              var args = new List<Argument>();                              while (Tools.ReadArg(origin' l' len' line' ref i' out Argument arg)) args.Add(arg);                                // No args? Skip it.                              if (args.Count == 0)                                  continue;                                switch (propName.ToLowerInvariant())                              {                                  case "class":                                      foreach (var cArg in args)                                      {                                          if (!Tools.ValidateClassName(cArg.Value))                                              throw new RantTableLoadException(origin' line' cArg.CharIndex + 1' "err-table-invalid-class"' cArg.Value);                                          currentEntry.AddClass(cArg.Value);                                      }                                      break;                                  case "weight":                                  {                                      if (!float.TryParse(args[0].Value' out float weight) || weight <= 0)                                          throw new RantTableLoadException(origin' line' args[0].CharIndex + 1' "err-table-invalid-weight"' args[0].Value);                                      currentEntry.Weight = weight;  									table.EnableWeighting = true;                                      break;                                  }                                  case "pron":                                      if (args.Count != table.TermsPerEntry)                                          continue;                                      for (int j = 0; j < currentEntry.TermCount; j++)                                          currentEntry[j].Pronunciation = args[j].Value;                                      break;                                  default:                                      if (args.Count == 1)                                          currentEntry.SetMetadata(propName' args[0].Value);                                      else                                          currentEntry.SetMetadata(propName' args.Select(a => a.Value).ToArray());                                      break;                              }                              break;                          }                      }                  }              }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadTerms,The following statement contains a magic number: while (i < len)                  {                      switch (c = str[i++])                      {                          // Inline comment                          case '#':                              goto done;                          // Phrasal split operator                          case '+':                              if (split > -1)                                  throw new RantTableLoadException(origin' line' i' "err-table-multiple-splits");                              white.Length = 0;                              split = buffer.Length;                              SkipSpace(str' len' ref i);                              break;                          // Term reference                          case '[':                          {                              SkipSpace(str' len' ref i);                              if (i >= len)                                  throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                              int start = i;                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (str[i++])                              {                                  // Current term from active template                                  case ']':                                      if (t == -1)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-no-template");                                      buffer.Append(activeTemplate[t].Value);                                      break;                                  // Custom term from active template                                  case '.':                                  {                                      if (activeTemplate == null)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-no-template");                                      while (i < len && IsValidSubtypeChar(str[i])) i++; // Read subtype name                                      if (str[i] != ']')                                          throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                                      string subName = str.Substring(start + 1' i - start - 1);                                      if (subName.Length == 0)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-empty-subtype-reference");                                      int templateSubIndex = table.GetSubtypeIndex(subName);                                      if (templateSubIndex == -1)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-nonexistent-subtype"' subName);                                        // Add term value to buffer                                      buffer.Append(activeTemplate[templateSubIndex].Value);                                      i++; // Skip past closing bracket                                      break;                                  }                                  // It is probably a reference to another entry' let's see.                                  default:                                  {                                      while (i < len && IsValidSubtypeChar(str[i]) || str[i] == '.') i++;                                      if (str[i] != ']')                                          throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                                      var id = str.Substring(start' i - start).Split(new[] { '.' }' StringSplitOptions.RemoveEmptyEntries);                                      switch (id.Length)                                      {                                          // It's just a template ID.                                          case 1:                                          {                                              if (!templates.TryGetValue(id[0]' out RantDictionaryEntry entry))                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-entry-not-found");                                              // Append term value to buffer                                              buffer.Append(entry[t].Value);                                              break;                                          }                                          // Template ID and custom subtype                                          case 2:                                          {                                              if (!templates.TryGetValue(id[0]' out RantDictionaryEntry entry))                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-entry-not-found");                                              int templateSubIndex = table.GetSubtypeIndex(id[1]);                                              if (templateSubIndex == -1 || templateSubIndex >= table.TermsPerEntry)                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-nonexistent-subtype"' id[1]);                                              buffer.Append(entry[templateSubIndex].Value);                                              break;                                          }                                          // ???                                          default:                                              throw new RantTableLoadException(origin' line' start + 1' "err-table-invalid-term-reference");                                      }                                        i++; // Skip past closing bracket                                      break;                                  }                              }                              break;                          }                          case '\\':                          {                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (c = str[i++])                              {                                  case 'n':                                      buffer.Append('\n');                                      continue;                                  case 'r':                                      buffer.Append('\r');                                      continue;                                  case 't':                                      buffer.Append('\t');                                      continue;                                  case 'v':                                      buffer.Append('\v');                                      continue;                                  case 'f':                                      buffer.Append('\f');                                      continue;                                  case 'b':                                      buffer.Append('\b');                                      continue;                                  case 's':                                      buffer.Append(' ');                                      continue;                                  case 'u':                                  {                                      if (i + 4 > len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append((char)codePoint);                                      i += 4;                                      continue;                                  }                                  case 'U':                                  {                                      if (i + 8 > len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append(high).Append(low);                                      i += 8;                                      continue;                                  }                                  default:                                      buffer.Append(c);                                      continue;                              }                              continue;                          }                          case ''':                              if (t >= terms.Length)                                  throw new RantTableLoadException(origin' line' i' "err-table-too-many-terms"' terms.Length' t);                              terms[t++] = new RantDictionaryTerm(buffer.ToString()' split);                              buffer.Length = 0;                              white.Length = 0;                              split = -1;                              SkipSpace(str' len' ref i);                              break;                          default:                              if (char.IsWhiteSpace(c))                                  white.Append(c);                              else                              {                                  if (white.Length > 0)                                  {                                      buffer.Append(white);                                      white.Length = 0;                                  }                                  buffer.Append(c);                              }                              continue;                      }                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadTerms,The following statement contains a magic number: while (i < len)                  {                      switch (c = str[i++])                      {                          // Inline comment                          case '#':                              goto done;                          // Phrasal split operator                          case '+':                              if (split > -1)                                  throw new RantTableLoadException(origin' line' i' "err-table-multiple-splits");                              white.Length = 0;                              split = buffer.Length;                              SkipSpace(str' len' ref i);                              break;                          // Term reference                          case '[':                          {                              SkipSpace(str' len' ref i);                              if (i >= len)                                  throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                              int start = i;                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (str[i++])                              {                                  // Current term from active template                                  case ']':                                      if (t == -1)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-no-template");                                      buffer.Append(activeTemplate[t].Value);                                      break;                                  // Custom term from active template                                  case '.':                                  {                                      if (activeTemplate == null)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-no-template");                                      while (i < len && IsValidSubtypeChar(str[i])) i++; // Read subtype name                                      if (str[i] != ']')                                          throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                                      string subName = str.Substring(start + 1' i - start - 1);                                      if (subName.Length == 0)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-empty-subtype-reference");                                      int templateSubIndex = table.GetSubtypeIndex(subName);                                      if (templateSubIndex == -1)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-nonexistent-subtype"' subName);                                        // Add term value to buffer                                      buffer.Append(activeTemplate[templateSubIndex].Value);                                      i++; // Skip past closing bracket                                      break;                                  }                                  // It is probably a reference to another entry' let's see.                                  default:                                  {                                      while (i < len && IsValidSubtypeChar(str[i]) || str[i] == '.') i++;                                      if (str[i] != ']')                                          throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                                      var id = str.Substring(start' i - start).Split(new[] { '.' }' StringSplitOptions.RemoveEmptyEntries);                                      switch (id.Length)                                      {                                          // It's just a template ID.                                          case 1:                                          {                                              if (!templates.TryGetValue(id[0]' out RantDictionaryEntry entry))                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-entry-not-found");                                              // Append term value to buffer                                              buffer.Append(entry[t].Value);                                              break;                                          }                                          // Template ID and custom subtype                                          case 2:                                          {                                              if (!templates.TryGetValue(id[0]' out RantDictionaryEntry entry))                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-entry-not-found");                                              int templateSubIndex = table.GetSubtypeIndex(id[1]);                                              if (templateSubIndex == -1 || templateSubIndex >= table.TermsPerEntry)                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-nonexistent-subtype"' id[1]);                                              buffer.Append(entry[templateSubIndex].Value);                                              break;                                          }                                          // ???                                          default:                                              throw new RantTableLoadException(origin' line' start + 1' "err-table-invalid-term-reference");                                      }                                        i++; // Skip past closing bracket                                      break;                                  }                              }                              break;                          }                          case '\\':                          {                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (c = str[i++])                              {                                  case 'n':                                      buffer.Append('\n');                                      continue;                                  case 'r':                                      buffer.Append('\r');                                      continue;                                  case 't':                                      buffer.Append('\t');                                      continue;                                  case 'v':                                      buffer.Append('\v');                                      continue;                                  case 'f':                                      buffer.Append('\f');                                      continue;                                  case 'b':                                      buffer.Append('\b');                                      continue;                                  case 's':                                      buffer.Append(' ');                                      continue;                                  case 'u':                                  {                                      if (i + 4 > len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append((char)codePoint);                                      i += 4;                                      continue;                                  }                                  case 'U':                                  {                                      if (i + 8 > len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append(high).Append(low);                                      i += 8;                                      continue;                                  }                                  default:                                      buffer.Append(c);                                      continue;                              }                              continue;                          }                          case ''':                              if (t >= terms.Length)                                  throw new RantTableLoadException(origin' line' i' "err-table-too-many-terms"' terms.Length' t);                              terms[t++] = new RantDictionaryTerm(buffer.ToString()' split);                              buffer.Length = 0;                              white.Length = 0;                              split = -1;                              SkipSpace(str' len' ref i);                              break;                          default:                              if (char.IsWhiteSpace(c))                                  white.Append(c);                              else                              {                                  if (white.Length > 0)                                  {                                      buffer.Append(white);                                      white.Length = 0;                                  }                                  buffer.Append(c);                              }                              continue;                      }                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadTerms,The following statement contains a magic number: while (i < len)                  {                      switch (c = str[i++])                      {                          // Inline comment                          case '#':                              goto done;                          // Phrasal split operator                          case '+':                              if (split > -1)                                  throw new RantTableLoadException(origin' line' i' "err-table-multiple-splits");                              white.Length = 0;                              split = buffer.Length;                              SkipSpace(str' len' ref i);                              break;                          // Term reference                          case '[':                          {                              SkipSpace(str' len' ref i);                              if (i >= len)                                  throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                              int start = i;                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (str[i++])                              {                                  // Current term from active template                                  case ']':                                      if (t == -1)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-no-template");                                      buffer.Append(activeTemplate[t].Value);                                      break;                                  // Custom term from active template                                  case '.':                                  {                                      if (activeTemplate == null)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-no-template");                                      while (i < len && IsValidSubtypeChar(str[i])) i++; // Read subtype name                                      if (str[i] != ']')                                          throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                                      string subName = str.Substring(start + 1' i - start - 1);                                      if (subName.Length == 0)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-empty-subtype-reference");                                      int templateSubIndex = table.GetSubtypeIndex(subName);                                      if (templateSubIndex == -1)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-nonexistent-subtype"' subName);                                        // Add term value to buffer                                      buffer.Append(activeTemplate[templateSubIndex].Value);                                      i++; // Skip past closing bracket                                      break;                                  }                                  // It is probably a reference to another entry' let's see.                                  default:                                  {                                      while (i < len && IsValidSubtypeChar(str[i]) || str[i] == '.') i++;                                      if (str[i] != ']')                                          throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                                      var id = str.Substring(start' i - start).Split(new[] { '.' }' StringSplitOptions.RemoveEmptyEntries);                                      switch (id.Length)                                      {                                          // It's just a template ID.                                          case 1:                                          {                                              if (!templates.TryGetValue(id[0]' out RantDictionaryEntry entry))                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-entry-not-found");                                              // Append term value to buffer                                              buffer.Append(entry[t].Value);                                              break;                                          }                                          // Template ID and custom subtype                                          case 2:                                          {                                              if (!templates.TryGetValue(id[0]' out RantDictionaryEntry entry))                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-entry-not-found");                                              int templateSubIndex = table.GetSubtypeIndex(id[1]);                                              if (templateSubIndex == -1 || templateSubIndex >= table.TermsPerEntry)                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-nonexistent-subtype"' id[1]);                                              buffer.Append(entry[templateSubIndex].Value);                                              break;                                          }                                          // ???                                          default:                                              throw new RantTableLoadException(origin' line' start + 1' "err-table-invalid-term-reference");                                      }                                        i++; // Skip past closing bracket                                      break;                                  }                              }                              break;                          }                          case '\\':                          {                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (c = str[i++])                              {                                  case 'n':                                      buffer.Append('\n');                                      continue;                                  case 'r':                                      buffer.Append('\r');                                      continue;                                  case 't':                                      buffer.Append('\t');                                      continue;                                  case 'v':                                      buffer.Append('\v');                                      continue;                                  case 'f':                                      buffer.Append('\f');                                      continue;                                  case 'b':                                      buffer.Append('\b');                                      continue;                                  case 's':                                      buffer.Append(' ');                                      continue;                                  case 'u':                                  {                                      if (i + 4 > len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append((char)codePoint);                                      i += 4;                                      continue;                                  }                                  case 'U':                                  {                                      if (i + 8 > len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append(high).Append(low);                                      i += 8;                                      continue;                                  }                                  default:                                      buffer.Append(c);                                      continue;                              }                              continue;                          }                          case ''':                              if (t >= terms.Length)                                  throw new RantTableLoadException(origin' line' i' "err-table-too-many-terms"' terms.Length' t);                              terms[t++] = new RantDictionaryTerm(buffer.ToString()' split);                              buffer.Length = 0;                              white.Length = 0;                              split = -1;                              SkipSpace(str' len' ref i);                              break;                          default:                              if (char.IsWhiteSpace(c))                                  white.Append(c);                              else                              {                                  if (white.Length > 0)                                  {                                      buffer.Append(white);                                      white.Length = 0;                                  }                                  buffer.Append(c);                              }                              continue;                      }                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadTerms,The following statement contains a magic number: while (i < len)                  {                      switch (c = str[i++])                      {                          // Inline comment                          case '#':                              goto done;                          // Phrasal split operator                          case '+':                              if (split > -1)                                  throw new RantTableLoadException(origin' line' i' "err-table-multiple-splits");                              white.Length = 0;                              split = buffer.Length;                              SkipSpace(str' len' ref i);                              break;                          // Term reference                          case '[':                          {                              SkipSpace(str' len' ref i);                              if (i >= len)                                  throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                              int start = i;                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (str[i++])                              {                                  // Current term from active template                                  case ']':                                      if (t == -1)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-no-template");                                      buffer.Append(activeTemplate[t].Value);                                      break;                                  // Custom term from active template                                  case '.':                                  {                                      if (activeTemplate == null)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-no-template");                                      while (i < len && IsValidSubtypeChar(str[i])) i++; // Read subtype name                                      if (str[i] != ']')                                          throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                                      string subName = str.Substring(start + 1' i - start - 1);                                      if (subName.Length == 0)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-empty-subtype-reference");                                      int templateSubIndex = table.GetSubtypeIndex(subName);                                      if (templateSubIndex == -1)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-nonexistent-subtype"' subName);                                        // Add term value to buffer                                      buffer.Append(activeTemplate[templateSubIndex].Value);                                      i++; // Skip past closing bracket                                      break;                                  }                                  // It is probably a reference to another entry' let's see.                                  default:                                  {                                      while (i < len && IsValidSubtypeChar(str[i]) || str[i] == '.') i++;                                      if (str[i] != ']')                                          throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                                      var id = str.Substring(start' i - start).Split(new[] { '.' }' StringSplitOptions.RemoveEmptyEntries);                                      switch (id.Length)                                      {                                          // It's just a template ID.                                          case 1:                                          {                                              if (!templates.TryGetValue(id[0]' out RantDictionaryEntry entry))                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-entry-not-found");                                              // Append term value to buffer                                              buffer.Append(entry[t].Value);                                              break;                                          }                                          // Template ID and custom subtype                                          case 2:                                          {                                              if (!templates.TryGetValue(id[0]' out RantDictionaryEntry entry))                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-entry-not-found");                                              int templateSubIndex = table.GetSubtypeIndex(id[1]);                                              if (templateSubIndex == -1 || templateSubIndex >= table.TermsPerEntry)                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-nonexistent-subtype"' id[1]);                                              buffer.Append(entry[templateSubIndex].Value);                                              break;                                          }                                          // ???                                          default:                                              throw new RantTableLoadException(origin' line' start + 1' "err-table-invalid-term-reference");                                      }                                        i++; // Skip past closing bracket                                      break;                                  }                              }                              break;                          }                          case '\\':                          {                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (c = str[i++])                              {                                  case 'n':                                      buffer.Append('\n');                                      continue;                                  case 'r':                                      buffer.Append('\r');                                      continue;                                  case 't':                                      buffer.Append('\t');                                      continue;                                  case 'v':                                      buffer.Append('\v');                                      continue;                                  case 'f':                                      buffer.Append('\f');                                      continue;                                  case 'b':                                      buffer.Append('\b');                                      continue;                                  case 's':                                      buffer.Append(' ');                                      continue;                                  case 'u':                                  {                                      if (i + 4 > len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append((char)codePoint);                                      i += 4;                                      continue;                                  }                                  case 'U':                                  {                                      if (i + 8 > len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append(high).Append(low);                                      i += 8;                                      continue;                                  }                                  default:                                      buffer.Append(c);                                      continue;                              }                              continue;                          }                          case ''':                              if (t >= terms.Length)                                  throw new RantTableLoadException(origin' line' i' "err-table-too-many-terms"' terms.Length' t);                              terms[t++] = new RantDictionaryTerm(buffer.ToString()' split);                              buffer.Length = 0;                              white.Length = 0;                              split = -1;                              SkipSpace(str' len' ref i);                              break;                          default:                              if (char.IsWhiteSpace(c))                                  white.Append(c);                              else                              {                                  if (white.Length > 0)                                  {                                      buffer.Append(white);                                      white.Length = 0;                                  }                                  buffer.Append(c);                              }                              continue;                      }                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadTerms,The following statement contains a magic number: while (i < len)                  {                      switch (c = str[i++])                      {                          // Inline comment                          case '#':                              goto done;                          // Phrasal split operator                          case '+':                              if (split > -1)                                  throw new RantTableLoadException(origin' line' i' "err-table-multiple-splits");                              white.Length = 0;                              split = buffer.Length;                              SkipSpace(str' len' ref i);                              break;                          // Term reference                          case '[':                          {                              SkipSpace(str' len' ref i);                              if (i >= len)                                  throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                              int start = i;                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (str[i++])                              {                                  // Current term from active template                                  case ']':                                      if (t == -1)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-no-template");                                      buffer.Append(activeTemplate[t].Value);                                      break;                                  // Custom term from active template                                  case '.':                                  {                                      if (activeTemplate == null)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-no-template");                                      while (i < len && IsValidSubtypeChar(str[i])) i++; // Read subtype name                                      if (str[i] != ']')                                          throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                                      string subName = str.Substring(start + 1' i - start - 1);                                      if (subName.Length == 0)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-empty-subtype-reference");                                      int templateSubIndex = table.GetSubtypeIndex(subName);                                      if (templateSubIndex == -1)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-nonexistent-subtype"' subName);                                        // Add term value to buffer                                      buffer.Append(activeTemplate[templateSubIndex].Value);                                      i++; // Skip past closing bracket                                      break;                                  }                                  // It is probably a reference to another entry' let's see.                                  default:                                  {                                      while (i < len && IsValidSubtypeChar(str[i]) || str[i] == '.') i++;                                      if (str[i] != ']')                                          throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                                      var id = str.Substring(start' i - start).Split(new[] { '.' }' StringSplitOptions.RemoveEmptyEntries);                                      switch (id.Length)                                      {                                          // It's just a template ID.                                          case 1:                                          {                                              if (!templates.TryGetValue(id[0]' out RantDictionaryEntry entry))                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-entry-not-found");                                              // Append term value to buffer                                              buffer.Append(entry[t].Value);                                              break;                                          }                                          // Template ID and custom subtype                                          case 2:                                          {                                              if (!templates.TryGetValue(id[0]' out RantDictionaryEntry entry))                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-entry-not-found");                                              int templateSubIndex = table.GetSubtypeIndex(id[1]);                                              if (templateSubIndex == -1 || templateSubIndex >= table.TermsPerEntry)                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-nonexistent-subtype"' id[1]);                                              buffer.Append(entry[templateSubIndex].Value);                                              break;                                          }                                          // ???                                          default:                                              throw new RantTableLoadException(origin' line' start + 1' "err-table-invalid-term-reference");                                      }                                        i++; // Skip past closing bracket                                      break;                                  }                              }                              break;                          }                          case '\\':                          {                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (c = str[i++])                              {                                  case 'n':                                      buffer.Append('\n');                                      continue;                                  case 'r':                                      buffer.Append('\r');                                      continue;                                  case 't':                                      buffer.Append('\t');                                      continue;                                  case 'v':                                      buffer.Append('\v');                                      continue;                                  case 'f':                                      buffer.Append('\f');                                      continue;                                  case 'b':                                      buffer.Append('\b');                                      continue;                                  case 's':                                      buffer.Append(' ');                                      continue;                                  case 'u':                                  {                                      if (i + 4 > len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append((char)codePoint);                                      i += 4;                                      continue;                                  }                                  case 'U':                                  {                                      if (i + 8 > len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append(high).Append(low);                                      i += 8;                                      continue;                                  }                                  default:                                      buffer.Append(c);                                      continue;                              }                              continue;                          }                          case ''':                              if (t >= terms.Length)                                  throw new RantTableLoadException(origin' line' i' "err-table-too-many-terms"' terms.Length' t);                              terms[t++] = new RantDictionaryTerm(buffer.ToString()' split);                              buffer.Length = 0;                              white.Length = 0;                              split = -1;                              SkipSpace(str' len' ref i);                              break;                          default:                              if (char.IsWhiteSpace(c))                                  white.Append(c);                              else                              {                                  if (white.Length > 0)                                  {                                      buffer.Append(white);                                      white.Length = 0;                                  }                                  buffer.Append(c);                              }                              continue;                      }                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadTerms,The following statement contains a magic number: while (i < len)                  {                      switch (c = str[i++])                      {                          // Inline comment                          case '#':                              goto done;                          // Phrasal split operator                          case '+':                              if (split > -1)                                  throw new RantTableLoadException(origin' line' i' "err-table-multiple-splits");                              white.Length = 0;                              split = buffer.Length;                              SkipSpace(str' len' ref i);                              break;                          // Term reference                          case '[':                          {                              SkipSpace(str' len' ref i);                              if (i >= len)                                  throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                              int start = i;                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (str[i++])                              {                                  // Current term from active template                                  case ']':                                      if (t == -1)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-no-template");                                      buffer.Append(activeTemplate[t].Value);                                      break;                                  // Custom term from active template                                  case '.':                                  {                                      if (activeTemplate == null)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-no-template");                                      while (i < len && IsValidSubtypeChar(str[i])) i++; // Read subtype name                                      if (str[i] != ']')                                          throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                                      string subName = str.Substring(start + 1' i - start - 1);                                      if (subName.Length == 0)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-empty-subtype-reference");                                      int templateSubIndex = table.GetSubtypeIndex(subName);                                      if (templateSubIndex == -1)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-nonexistent-subtype"' subName);                                        // Add term value to buffer                                      buffer.Append(activeTemplate[templateSubIndex].Value);                                      i++; // Skip past closing bracket                                      break;                                  }                                  // It is probably a reference to another entry' let's see.                                  default:                                  {                                      while (i < len && IsValidSubtypeChar(str[i]) || str[i] == '.') i++;                                      if (str[i] != ']')                                          throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                                      var id = str.Substring(start' i - start).Split(new[] { '.' }' StringSplitOptions.RemoveEmptyEntries);                                      switch (id.Length)                                      {                                          // It's just a template ID.                                          case 1:                                          {                                              if (!templates.TryGetValue(id[0]' out RantDictionaryEntry entry))                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-entry-not-found");                                              // Append term value to buffer                                              buffer.Append(entry[t].Value);                                              break;                                          }                                          // Template ID and custom subtype                                          case 2:                                          {                                              if (!templates.TryGetValue(id[0]' out RantDictionaryEntry entry))                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-entry-not-found");                                              int templateSubIndex = table.GetSubtypeIndex(id[1]);                                              if (templateSubIndex == -1 || templateSubIndex >= table.TermsPerEntry)                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-nonexistent-subtype"' id[1]);                                              buffer.Append(entry[templateSubIndex].Value);                                              break;                                          }                                          // ???                                          default:                                              throw new RantTableLoadException(origin' line' start + 1' "err-table-invalid-term-reference");                                      }                                        i++; // Skip past closing bracket                                      break;                                  }                              }                              break;                          }                          case '\\':                          {                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (c = str[i++])                              {                                  case 'n':                                      buffer.Append('\n');                                      continue;                                  case 'r':                                      buffer.Append('\r');                                      continue;                                  case 't':                                      buffer.Append('\t');                                      continue;                                  case 'v':                                      buffer.Append('\v');                                      continue;                                  case 'f':                                      buffer.Append('\f');                                      continue;                                  case 'b':                                      buffer.Append('\b');                                      continue;                                  case 's':                                      buffer.Append(' ');                                      continue;                                  case 'u':                                  {                                      if (i + 4 > len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append((char)codePoint);                                      i += 4;                                      continue;                                  }                                  case 'U':                                  {                                      if (i + 8 > len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append(high).Append(low);                                      i += 8;                                      continue;                                  }                                  default:                                      buffer.Append(c);                                      continue;                              }                              continue;                          }                          case ''':                              if (t >= terms.Length)                                  throw new RantTableLoadException(origin' line' i' "err-table-too-many-terms"' terms.Length' t);                              terms[t++] = new RantDictionaryTerm(buffer.ToString()' split);                              buffer.Length = 0;                              white.Length = 0;                              split = -1;                              SkipSpace(str' len' ref i);                              break;                          default:                              if (char.IsWhiteSpace(c))                                  white.Append(c);                              else                              {                                  if (white.Length > 0)                                  {                                      buffer.Append(white);                                      white.Length = 0;                                  }                                  buffer.Append(c);                              }                              continue;                      }                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadTerms,The following statement contains a magic number: while (i < len)                  {                      switch (c = str[i++])                      {                          // Inline comment                          case '#':                              goto done;                          // Phrasal split operator                          case '+':                              if (split > -1)                                  throw new RantTableLoadException(origin' line' i' "err-table-multiple-splits");                              white.Length = 0;                              split = buffer.Length;                              SkipSpace(str' len' ref i);                              break;                          // Term reference                          case '[':                          {                              SkipSpace(str' len' ref i);                              if (i >= len)                                  throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                              int start = i;                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (str[i++])                              {                                  // Current term from active template                                  case ']':                                      if (t == -1)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-no-template");                                      buffer.Append(activeTemplate[t].Value);                                      break;                                  // Custom term from active template                                  case '.':                                  {                                      if (activeTemplate == null)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-no-template");                                      while (i < len && IsValidSubtypeChar(str[i])) i++; // Read subtype name                                      if (str[i] != ']')                                          throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                                      string subName = str.Substring(start + 1' i - start - 1);                                      if (subName.Length == 0)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-empty-subtype-reference");                                      int templateSubIndex = table.GetSubtypeIndex(subName);                                      if (templateSubIndex == -1)                                          throw new RantTableLoadException(origin' line' start + 1' "err-table-nonexistent-subtype"' subName);                                        // Add term value to buffer                                      buffer.Append(activeTemplate[templateSubIndex].Value);                                      i++; // Skip past closing bracket                                      break;                                  }                                  // It is probably a reference to another entry' let's see.                                  default:                                  {                                      while (i < len && IsValidSubtypeChar(str[i]) || str[i] == '.') i++;                                      if (str[i] != ']')                                          throw new RantTableLoadException(origin' line' i' "err-table-incomplete-term-reference");                                      var id = str.Substring(start' i - start).Split(new[] { '.' }' StringSplitOptions.RemoveEmptyEntries);                                      switch (id.Length)                                      {                                          // It's just a template ID.                                          case 1:                                          {                                              if (!templates.TryGetValue(id[0]' out RantDictionaryEntry entry))                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-entry-not-found");                                              // Append term value to buffer                                              buffer.Append(entry[t].Value);                                              break;                                          }                                          // Template ID and custom subtype                                          case 2:                                          {                                              if (!templates.TryGetValue(id[0]' out RantDictionaryEntry entry))                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-entry-not-found");                                              int templateSubIndex = table.GetSubtypeIndex(id[1]);                                              if (templateSubIndex == -1 || templateSubIndex >= table.TermsPerEntry)                                                  throw new RantTableLoadException(origin' line' start + 1' "err-table-nonexistent-subtype"' id[1]);                                              buffer.Append(entry[templateSubIndex].Value);                                              break;                                          }                                          // ???                                          default:                                              throw new RantTableLoadException(origin' line' start + 1' "err-table-invalid-term-reference");                                      }                                        i++; // Skip past closing bracket                                      break;                                  }                              }                              break;                          }                          case '\\':                          {                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (c = str[i++])                              {                                  case 'n':                                      buffer.Append('\n');                                      continue;                                  case 'r':                                      buffer.Append('\r');                                      continue;                                  case 't':                                      buffer.Append('\t');                                      continue;                                  case 'v':                                      buffer.Append('\v');                                      continue;                                  case 'f':                                      buffer.Append('\f');                                      continue;                                  case 'b':                                      buffer.Append('\b');                                      continue;                                  case 's':                                      buffer.Append(' ');                                      continue;                                  case 'u':                                  {                                      if (i + 4 > len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append((char)codePoint);                                      i += 4;                                      continue;                                  }                                  case 'U':                                  {                                      if (i + 8 > len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append(high).Append(low);                                      i += 8;                                      continue;                                  }                                  default:                                      buffer.Append(c);                                      continue;                              }                              continue;                          }                          case ''':                              if (t >= terms.Length)                                  throw new RantTableLoadException(origin' line' i' "err-table-too-many-terms"' terms.Length' t);                              terms[t++] = new RantDictionaryTerm(buffer.ToString()' split);                              buffer.Length = 0;                              white.Length = 0;                              split = -1;                              SkipSpace(str' len' ref i);                              break;                          default:                              if (char.IsWhiteSpace(c))                                  white.Append(c);                              else                              {                                  if (white.Length > 0)                                  {                                      buffer.Append(white);                                      white.Length = 0;                                  }                                  buffer.Append(c);                              }                              continue;                      }                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The following statement contains a magic number: if (str[i] == '\"')                  {                      if (++i >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                      while (i < len)                      {                          switch (c = str[i++])                          {                              case '\"':                                  while (i < len && char.IsWhiteSpace(str[i])) i++;                                  if (i < len && str[i] == ''') i++;                                  result = new Argument(start' buffer.ToString());                                  return true;                              case '\\':                                  if (i >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                  switch (c = str[i++])                                  {                                      case 'n':                                          buffer.Append('\n');                                          continue;                                      case 'r':                                          buffer.Append('\r');                                          continue;                                      case 't':                                          buffer.Append('\t');                                          continue;                                      case 'v':                                          buffer.Append('\v');                                          continue;                                      case 'f':                                          buffer.Append('\f');                                          continue;                                      case 'b':                                          buffer.Append('\b');                                          continue;                                      case 's':                                          buffer.Append(' ');                                          continue;                                      case 'u':                                      {                                          if (i + 4 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                          if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                              throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                          buffer.Append((char)codePoint);                                          i += 4;                                          continue;                                      }                                      case 'U':                                      {                                          if (i + 8 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                          if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                              throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                          buffer.Append(high).Append(low);                                          i += 8;                                          continue;                                      }                                      default:                                          buffer.Append(c);                                          continue;                                  }                                  break;                              default:                                  buffer.Append(c);                                  break;                          }                      }                      throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The following statement contains a magic number: if (str[i] == '\"')                  {                      if (++i >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                      while (i < len)                      {                          switch (c = str[i++])                          {                              case '\"':                                  while (i < len && char.IsWhiteSpace(str[i])) i++;                                  if (i < len && str[i] == ''') i++;                                  result = new Argument(start' buffer.ToString());                                  return true;                              case '\\':                                  if (i >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                  switch (c = str[i++])                                  {                                      case 'n':                                          buffer.Append('\n');                                          continue;                                      case 'r':                                          buffer.Append('\r');                                          continue;                                      case 't':                                          buffer.Append('\t');                                          continue;                                      case 'v':                                          buffer.Append('\v');                                          continue;                                      case 'f':                                          buffer.Append('\f');                                          continue;                                      case 'b':                                          buffer.Append('\b');                                          continue;                                      case 's':                                          buffer.Append(' ');                                          continue;                                      case 'u':                                      {                                          if (i + 4 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                          if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                              throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                          buffer.Append((char)codePoint);                                          i += 4;                                          continue;                                      }                                      case 'U':                                      {                                          if (i + 8 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                          if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                              throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                          buffer.Append(high).Append(low);                                          i += 8;                                          continue;                                      }                                      default:                                          buffer.Append(c);                                          continue;                                  }                                  break;                              default:                                  buffer.Append(c);                                  break;                          }                      }                      throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The following statement contains a magic number: if (str[i] == '\"')                  {                      if (++i >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                      while (i < len)                      {                          switch (c = str[i++])                          {                              case '\"':                                  while (i < len && char.IsWhiteSpace(str[i])) i++;                                  if (i < len && str[i] == ''') i++;                                  result = new Argument(start' buffer.ToString());                                  return true;                              case '\\':                                  if (i >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                  switch (c = str[i++])                                  {                                      case 'n':                                          buffer.Append('\n');                                          continue;                                      case 'r':                                          buffer.Append('\r');                                          continue;                                      case 't':                                          buffer.Append('\t');                                          continue;                                      case 'v':                                          buffer.Append('\v');                                          continue;                                      case 'f':                                          buffer.Append('\f');                                          continue;                                      case 'b':                                          buffer.Append('\b');                                          continue;                                      case 's':                                          buffer.Append(' ');                                          continue;                                      case 'u':                                      {                                          if (i + 4 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                          if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                              throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                          buffer.Append((char)codePoint);                                          i += 4;                                          continue;                                      }                                      case 'U':                                      {                                          if (i + 8 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                          if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                              throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                          buffer.Append(high).Append(low);                                          i += 8;                                          continue;                                      }                                      default:                                          buffer.Append(c);                                          continue;                                  }                                  break;                              default:                                  buffer.Append(c);                                  break;                          }                      }                      throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The following statement contains a magic number: if (str[i] == '\"')                  {                      if (++i >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                      while (i < len)                      {                          switch (c = str[i++])                          {                              case '\"':                                  while (i < len && char.IsWhiteSpace(str[i])) i++;                                  if (i < len && str[i] == ''') i++;                                  result = new Argument(start' buffer.ToString());                                  return true;                              case '\\':                                  if (i >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                  switch (c = str[i++])                                  {                                      case 'n':                                          buffer.Append('\n');                                          continue;                                      case 'r':                                          buffer.Append('\r');                                          continue;                                      case 't':                                          buffer.Append('\t');                                          continue;                                      case 'v':                                          buffer.Append('\v');                                          continue;                                      case 'f':                                          buffer.Append('\f');                                          continue;                                      case 'b':                                          buffer.Append('\b');                                          continue;                                      case 's':                                          buffer.Append(' ');                                          continue;                                      case 'u':                                      {                                          if (i + 4 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                          if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                              throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                          buffer.Append((char)codePoint);                                          i += 4;                                          continue;                                      }                                      case 'U':                                      {                                          if (i + 8 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                          if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                              throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                          buffer.Append(high).Append(low);                                          i += 8;                                          continue;                                      }                                      default:                                          buffer.Append(c);                                          continue;                                  }                                  break;                              default:                                  buffer.Append(c);                                  break;                          }                      }                      throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The following statement contains a magic number: if (str[i] == '\"')                  {                      if (++i >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                      while (i < len)                      {                          switch (c = str[i++])                          {                              case '\"':                                  while (i < len && char.IsWhiteSpace(str[i])) i++;                                  if (i < len && str[i] == ''') i++;                                  result = new Argument(start' buffer.ToString());                                  return true;                              case '\\':                                  if (i >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                  switch (c = str[i++])                                  {                                      case 'n':                                          buffer.Append('\n');                                          continue;                                      case 'r':                                          buffer.Append('\r');                                          continue;                                      case 't':                                          buffer.Append('\t');                                          continue;                                      case 'v':                                          buffer.Append('\v');                                          continue;                                      case 'f':                                          buffer.Append('\f');                                          continue;                                      case 'b':                                          buffer.Append('\b');                                          continue;                                      case 's':                                          buffer.Append(' ');                                          continue;                                      case 'u':                                      {                                          if (i + 4 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                          if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                              throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                          buffer.Append((char)codePoint);                                          i += 4;                                          continue;                                      }                                      case 'U':                                      {                                          if (i + 8 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                          if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                              throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                          buffer.Append(high).Append(low);                                          i += 8;                                          continue;                                      }                                      default:                                          buffer.Append(c);                                          continue;                                  }                                  break;                              default:                                  buffer.Append(c);                                  break;                          }                      }                      throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The following statement contains a magic number: if (str[i] == '\"')                  {                      if (++i >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                      while (i < len)                      {                          switch (c = str[i++])                          {                              case '\"':                                  while (i < len && char.IsWhiteSpace(str[i])) i++;                                  if (i < len && str[i] == ''') i++;                                  result = new Argument(start' buffer.ToString());                                  return true;                              case '\\':                                  if (i >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                  switch (c = str[i++])                                  {                                      case 'n':                                          buffer.Append('\n');                                          continue;                                      case 'r':                                          buffer.Append('\r');                                          continue;                                      case 't':                                          buffer.Append('\t');                                          continue;                                      case 'v':                                          buffer.Append('\v');                                          continue;                                      case 'f':                                          buffer.Append('\f');                                          continue;                                      case 'b':                                          buffer.Append('\b');                                          continue;                                      case 's':                                          buffer.Append(' ');                                          continue;                                      case 'u':                                      {                                          if (i + 4 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                          if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                              throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                          buffer.Append((char)codePoint);                                          i += 4;                                          continue;                                      }                                      case 'U':                                      {                                          if (i + 8 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                          if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                              throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                          buffer.Append(high).Append(low);                                          i += 8;                                          continue;                                      }                                      default:                                          buffer.Append(c);                                          continue;                                  }                                  break;                              default:                                  buffer.Append(c);                                  break;                          }                      }                      throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The following statement contains a magic number: while (i < len)                  {                      switch (c = str[i++])                      {                          case ''':                              result = new Argument(start' buffer.ToString());                              return true;                          case '#':                              result = new Argument(start' buffer.ToString());                              i = len;                              return true;                          case '\\':                          {                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (c = str[i++])                              {                                  case 'n':                                      buffer.Append('\n');                                      continue;                                  case 'r':                                      buffer.Append('\r');                                      continue;                                  case 't':                                      buffer.Append('\t');                                      continue;                                  case 'v':                                      buffer.Append('\v');                                      continue;                                  case 'f':                                      buffer.Append('\f');                                      continue;                                  case 'b':                                      buffer.Append('\b');                                      continue;                                  case 's':                                      buffer.Append(' ');                                      continue;                                  case 'u':                                  {                                      if (i + 4 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append((char)codePoint);                                      i += 4;                                      continue;                                  }                                  case 'U':                                  {                                      if (i + 8 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append(high).Append(low);                                      i += 8;                                      continue;                                  }                                  default:                                      buffer.Append(c);                                      continue;                              }  							continue;  						}                          case '\"':                              throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                          default:                              if (char.IsWhiteSpace(c))                                  white.Append(c);                              else                              {                                  if (white.Length > 0)                                  {                                      buffer.Append(white);                                      white.Length = 0;                                  }                                  buffer.Append(c);                              }                              continue;                      }                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The following statement contains a magic number: while (i < len)                  {                      switch (c = str[i++])                      {                          case ''':                              result = new Argument(start' buffer.ToString());                              return true;                          case '#':                              result = new Argument(start' buffer.ToString());                              i = len;                              return true;                          case '\\':                          {                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (c = str[i++])                              {                                  case 'n':                                      buffer.Append('\n');                                      continue;                                  case 'r':                                      buffer.Append('\r');                                      continue;                                  case 't':                                      buffer.Append('\t');                                      continue;                                  case 'v':                                      buffer.Append('\v');                                      continue;                                  case 'f':                                      buffer.Append('\f');                                      continue;                                  case 'b':                                      buffer.Append('\b');                                      continue;                                  case 's':                                      buffer.Append(' ');                                      continue;                                  case 'u':                                  {                                      if (i + 4 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append((char)codePoint);                                      i += 4;                                      continue;                                  }                                  case 'U':                                  {                                      if (i + 8 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append(high).Append(low);                                      i += 8;                                      continue;                                  }                                  default:                                      buffer.Append(c);                                      continue;                              }  							continue;  						}                          case '\"':                              throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                          default:                              if (char.IsWhiteSpace(c))                                  white.Append(c);                              else                              {                                  if (white.Length > 0)                                  {                                      buffer.Append(white);                                      white.Length = 0;                                  }                                  buffer.Append(c);                              }                              continue;                      }                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The following statement contains a magic number: while (i < len)                  {                      switch (c = str[i++])                      {                          case ''':                              result = new Argument(start' buffer.ToString());                              return true;                          case '#':                              result = new Argument(start' buffer.ToString());                              i = len;                              return true;                          case '\\':                          {                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (c = str[i++])                              {                                  case 'n':                                      buffer.Append('\n');                                      continue;                                  case 'r':                                      buffer.Append('\r');                                      continue;                                  case 't':                                      buffer.Append('\t');                                      continue;                                  case 'v':                                      buffer.Append('\v');                                      continue;                                  case 'f':                                      buffer.Append('\f');                                      continue;                                  case 'b':                                      buffer.Append('\b');                                      continue;                                  case 's':                                      buffer.Append(' ');                                      continue;                                  case 'u':                                  {                                      if (i + 4 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append((char)codePoint);                                      i += 4;                                      continue;                                  }                                  case 'U':                                  {                                      if (i + 8 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append(high).Append(low);                                      i += 8;                                      continue;                                  }                                  default:                                      buffer.Append(c);                                      continue;                              }  							continue;  						}                          case '\"':                              throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                          default:                              if (char.IsWhiteSpace(c))                                  white.Append(c);                              else                              {                                  if (white.Length > 0)                                  {                                      buffer.Append(white);                                      white.Length = 0;                                  }                                  buffer.Append(c);                              }                              continue;                      }                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The following statement contains a magic number: while (i < len)                  {                      switch (c = str[i++])                      {                          case ''':                              result = new Argument(start' buffer.ToString());                              return true;                          case '#':                              result = new Argument(start' buffer.ToString());                              i = len;                              return true;                          case '\\':                          {                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (c = str[i++])                              {                                  case 'n':                                      buffer.Append('\n');                                      continue;                                  case 'r':                                      buffer.Append('\r');                                      continue;                                  case 't':                                      buffer.Append('\t');                                      continue;                                  case 'v':                                      buffer.Append('\v');                                      continue;                                  case 'f':                                      buffer.Append('\f');                                      continue;                                  case 'b':                                      buffer.Append('\b');                                      continue;                                  case 's':                                      buffer.Append(' ');                                      continue;                                  case 'u':                                  {                                      if (i + 4 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append((char)codePoint);                                      i += 4;                                      continue;                                  }                                  case 'U':                                  {                                      if (i + 8 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append(high).Append(low);                                      i += 8;                                      continue;                                  }                                  default:                                      buffer.Append(c);                                      continue;                              }  							continue;  						}                          case '\"':                              throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                          default:                              if (char.IsWhiteSpace(c))                                  white.Append(c);                              else                              {                                  if (white.Length > 0)                                  {                                      buffer.Append(white);                                      white.Length = 0;                                  }                                  buffer.Append(c);                              }                              continue;                      }                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The following statement contains a magic number: while (i < len)                  {                      switch (c = str[i++])                      {                          case ''':                              result = new Argument(start' buffer.ToString());                              return true;                          case '#':                              result = new Argument(start' buffer.ToString());                              i = len;                              return true;                          case '\\':                          {                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (c = str[i++])                              {                                  case 'n':                                      buffer.Append('\n');                                      continue;                                  case 'r':                                      buffer.Append('\r');                                      continue;                                  case 't':                                      buffer.Append('\t');                                      continue;                                  case 'v':                                      buffer.Append('\v');                                      continue;                                  case 'f':                                      buffer.Append('\f');                                      continue;                                  case 'b':                                      buffer.Append('\b');                                      continue;                                  case 's':                                      buffer.Append(' ');                                      continue;                                  case 'u':                                  {                                      if (i + 4 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append((char)codePoint);                                      i += 4;                                      continue;                                  }                                  case 'U':                                  {                                      if (i + 8 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append(high).Append(low);                                      i += 8;                                      continue;                                  }                                  default:                                      buffer.Append(c);                                      continue;                              }  							continue;  						}                          case '\"':                              throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                          default:                              if (char.IsWhiteSpace(c))                                  white.Append(c);                              else                              {                                  if (white.Length > 0)                                  {                                      buffer.Append(white);                                      white.Length = 0;                                  }                                  buffer.Append(c);                              }                              continue;                      }                  }
Magic Number,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The following statement contains a magic number: while (i < len)                  {                      switch (c = str[i++])                      {                          case ''':                              result = new Argument(start' buffer.ToString());                              return true;                          case '#':                              result = new Argument(start' buffer.ToString());                              i = len;                              return true;                          case '\\':                          {                              if (white.Length > 0)                              {                                  buffer.Append(white);                                  white.Length = 0;                              }                              switch (c = str[i++])                              {                                  case 'n':                                      buffer.Append('\n');                                      continue;                                  case 'r':                                      buffer.Append('\r');                                      continue;                                  case 't':                                      buffer.Append('\t');                                      continue;                                  case 'v':                                      buffer.Append('\v');                                      continue;                                  case 'f':                                      buffer.Append('\f');                                      continue;                                  case 'b':                                      buffer.Append('\b');                                      continue;                                  case 's':                                      buffer.Append(' ');                                      continue;                                  case 'u':                                  {                                      if (i + 4 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!ushort.TryParse(str.Substring(i' 4)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out ushort codePoint))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append((char)codePoint);                                      i += 4;                                      continue;                                  }                                  case 'U':                                  {                                      if (i + 8 >= len) throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-escape");                                      if (!Util.TryParseSurrogatePair(str.Substring(i' 8)' out char high' out char low))                                          throw new RantTableLoadException(origin' line' i + 1' "err-table-unrecognized-codepoint");                                      buffer.Append(high).Append(low);                                      i += 8;                                      continue;                                  }                                  default:                                      buffer.Append(c);                                      continue;                              }  							continue;  						}                          case '\"':                              throw new RantTableLoadException(origin' line' i + 1' "err-table-incomplete-literal");                          default:                              if (char.IsWhiteSpace(c))                                  white.Append(c);                              else                              {                                  if (white.Length > 0)                                  {                                      buffer.Append(white);                                      white.Length = 0;                                  }                                  buffer.Append(c);                              }                              continue;                      }                  }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,DoubleMetaphoneStringExtension,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,GenerateDoubleMetaphone,The following statement contains a magic number: while (metaphoneData.PrimaryLength < 4 || metaphoneData.SecondaryLength < 4)              {                  if (current >= self.Length)                      break;                    switch (workingString[current])                  {                      case 'A':                      case 'E':                      case 'I':                      case 'O':                      case 'U':                      case 'Y':                          if (current == 0)                              metaphoneData.Add("A");                          current += 1;                          break;                        case 'B':                          //"-mb"' e.g"' "dumb"' already skipped over...                          metaphoneData.Add("P");                            if (workingString[current + 1] == 'B')                              current += 2;                          else                              current += 1;                          break;                        case 'Ã':                          metaphoneData.Add("S");                          current += 1;                          break;                        case 'C':                          //various germanic                          if (current > 1 && !IsVowel(workingString[current - 2]) && StringAt(workingString' current - 1' "ACH") && workingString[current + 2] != 'I' &&                              (workingString[current + 2] != 'E' || StringAt(workingString' current - 2' "BACHER"' "MACHER")))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            //special case 'caesar'                          if (current == 0 && StringAt(workingString' current' "CAESAR"))                          {                              metaphoneData.Add("S");                              current += 2;                              break;                          }                            //italian 'chianti'                          if (StringAt(workingString' current' "CHIA"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CH"))                          {                              //find 'michael'                              if (current > 0 && StringAt(workingString' current' "CHAE"))                              {                                  metaphoneData.Add("K"' "X");                                  current += 2;                                  break;                              }                                //greek roots e.g. 'chemistry'' 'chorus'                              if (current == 0 &&                                  (StringAt(workingString' current + 1' "HARAC"' "HARIS") ||                                   StringAt(workingString' current + 1' "HOR"' "HYM"' "HIA"' "HEM"))                                  && !StringAt(workingString' 0' "CHORE"))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                //germanic' greek' or otherwise 'ch' for 'kh' sound                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH")                                  // 'architect but not 'arch'' 'orchestra'' 'orchid'                                  || StringAt(workingString' current - 2' "ORCHES"' "ARCHIT"' "ORCHID") ||                                  StringAt(workingString' current + 2' "T"' "S")                                  ||                                  (StringAt(workingString' current - 1' "A"' "O"' "U"' "E") || current == 0)                                  //e.g.' 'wachtler'' 'wechsler'' but not 'tichner'                                  && StringAt(workingString' current + 2' "L"' "R"' "N"' "M"' "B"' "H"' "F"' "V"' "W"' " "))                                  metaphoneData.Add("K");                              else                              {                                  if (current > 0)                                  {                                      if (StringAt(workingString' 0' "MC"))                                          metaphoneData.Add("K");                                      else                                          metaphoneData.Add("X"' "K");                                  }                                  else                                      metaphoneData.Add("X");                              }                              current += 2;                              break;                          }                          //e.g' 'czerny'                          if (StringAt(workingString' current' "CZ") && !StringAt(workingString' current - 2' "WICZ"))                          {                              metaphoneData.Add("S"' "X");                              current += 2;                              break;                          }                            //e.g.' 'focaccia'                          if (StringAt(workingString' current + 1' "CIA"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            //double 'C'' but not if e.g. 'McClellan'                          if (StringAt(workingString' current' "CC") && !(current == 1 && workingString[0] == 'M'))                          {                              //'bellocchio' but not 'bacchus'                              if (StringAt(workingString' current + 2' "I"' "E"' "H") && !StringAt(workingString' current + 2' "HU"))                              {                                  //'accident'' 'accede' 'succeed'                                  if (current == 1 && workingString[current - 1] == 'A' ||                                      StringAt(workingString' current - 1' "UCCEE"' "UCCES"))                                      metaphoneData.Add("KS");                                  //'bacci'' 'bertucci'' other italian                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                              //Pierce's rule                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CK"' "CG"' "CQ"))                          {                              metaphoneData.Add("K");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "CI"' "CE"' "CY"))                          {                              //italian vs. english                              if (StringAt(workingString' current' "CIO"' "CIE"' "CIA"))                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("K");                            //name sent in 'mac caffrey'' 'mac gregor                          if (StringAt(workingString' current + 1' " C"' " Q"' " G"))                              current += 3;                          else if (StringAt(workingString' current + 1' "C"' "K"' "Q") && !StringAt(workingString' current + 1' "CE"' "CI"))                              current += 2;                          else                              current += 1;                          break;                        case 'D':                          if (StringAt(workingString' current' "DG"))                          {                              if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  //e.g. 'edge'                                  metaphoneData.Add("J");                                  current += 3;                                  break;                              }                              //e.g. 'edgar'                              metaphoneData.Add("TK");                              current += 2;                              break;                          }                            if (StringAt(workingString' current' "DT"' "DD"))                          {                              metaphoneData.Add("T");                              current += 2;                              break;                          }                            //else                          metaphoneData.Add("T");                          current += 1;                          break;                        case 'F':                          if (workingString[current + 1] == 'F')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'G':                          if (workingString[current + 1] == 'H')                          {                              if (current > 0 && !IsVowel(workingString[current - 1]))                              {                                  metaphoneData.Add("K");                                  current += 2;                                  break;                              }                                if (current < 3)                              {                                  if (current == 0)                                  {                                      if (workingString[current + 2] == 'I')                                          metaphoneData.Add("J");                                      else                                          metaphoneData.Add("K");                                      current += 2;                                      break;                                  }                              }                              //Parker's rule (with some further refinements) - e.g.' 'hugh'                              if (current > 1 && StringAt(workingString' current - 2' "B"' "H"' "D") //e.g.' 'bough'                                  || current > 2 && StringAt(workingString' current - 3' "B"' "H"' "D") //e.g.' 'broughton'                                  || current > 3 && StringAt(workingString' current - 4' "B"' "H"))                              {                                  current += 2;                                  break;                              }                              //e.g.' 'laugh'' 'McLaughlin'' 'cough'' 'gough'' 'rough'' 'tough'                              if (current > 2 && workingString[current - 1] == 'U' &&                                  StringAt(workingString' current - 3' "C"' "G"' "L"' "R"' "T"))                                  metaphoneData.Add("F");                              else if (current > 0 && workingString[current - 1] != 'I')                                  metaphoneData.Add("K");                                current += 2;                              break;                          }                            if (workingString[current + 1] == 'N')                          {                              if (current == 1 && IsVowel(workingString[0]) && !isSlavoGermanic)                                  metaphoneData.Add("KN"' "N");                              else                                  //not e.g. 'cagney'                              if (!StringAt(workingString' current + 2' "EY") && workingString[current + 1] != 'Y' && !isSlavoGermanic)                                  metaphoneData.Add("N"' "KN");                              else                                  metaphoneData.Add("KN");                              current += 2;                              break;                          }                            //'tagliaro'                          if (StringAt(workingString' current + 1' "LI") && !isSlavoGermanic)                          {                              metaphoneData.Add("KL"' "L");                              current += 2;                              break;                          }                            //-ges-'-gep-'-gel-' -gie- at beginning                          if (current == 0                              &&                              (workingString[current + 1] == 'Y' ||                               StringAt(workingString' current + 1' "ES"' "EP"' "EB"' "EL"' "EY"' "IB"' "IL"' "IN"' "IE"' "EI"' "ER")))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // -ger-'  -gy-                          if ((StringAt(workingString' current + 1' "ER") || workingString[current + 1] == 'Y') &&                              !StringAt(workingString' 0' "DANGER"' "RANGER"' "MANGER")                              && !StringAt(workingString' current - 1' "E"' "I") && !StringAt(workingString' current - 1' "RGY"' "OGY"))                          {                              metaphoneData.Add("K"' "J");                              current += 2;                              break;                          }                            // italian e.g' 'biaggi'                          if (StringAt(workingString' current + 1' "E"' "I"' "Y") ||                              StringAt(workingString' current - 1' "AGGI"' "OGGI"))                          {                              //obvious germanic                              if (StringAt(workingString' 0' "VAN "' "VON ") || StringAt(workingString' 0' "SCH") ||                                  StringAt(workingString' current + 1' "ET"))                                  metaphoneData.Add("K");                              else                                  //always soft if french ending                              if (StringAt(workingString' current + 1' "IER "))                                  metaphoneData.Add("J");                              else                                  metaphoneData.Add("J"' "K");                              current += 2;                              break;                          }                            if (workingString[current + 1] == 'G')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'H':                          //only keep if first & before vowel or btw. 2 vowels                          if ((current == 0 || IsVowel(workingString[current - 1])) && IsVowel(workingString[current + 1]))                          {                              metaphoneData.Add("H");                              current += 2;                          }                          else //also takes care of 'HH'                              current += 1;                          break;                        case 'J':                          //obvious spanish' 'jose'' 'san jacinto'                          if (StringAt(workingString' current' "JOSE") || StringAt(workingString' 0' "SAN "))                          {                              if (current == 0 && workingString[current + 4] == ' ' || StringAt(workingString' 0' "SAN "))                                  metaphoneData.Add("H");                              else                                  metaphoneData.Add("J"' "H");                              current += 1;                              break;                          }                            if (current == 0 && !StringAt(workingString' current' "JOSE"))                              metaphoneData.Add("J"' "A"); //Yankelovich/Jankelowicz                          else                              //spanish pron. of e.g. 'bajador'                          if (IsVowel(workingString[current - 1]) && !isSlavoGermanic &&                              (workingString[current + 1] == 'A' || workingString[current + 1] == 'O'))                              metaphoneData.Add("J"' "H");                          else if (current == last)                              metaphoneData.Add("J"' " ");                          else if (!StringAt(workingString' current + 1' "L"' "T"' "K"' "S"' "N"' "M"' "B"' "Z") &&                                   !StringAt(workingString' current - 1' "S"' "K"' "L"))                              metaphoneData.Add("J");                            if (workingString[current + 1] == 'J') //it could happen!                              current += 2;                          else                              current += 1;                          break;                        case 'K':                          if (workingString[current + 1] == 'K')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'L':                          if (workingString[current + 1] == 'L')                          {                              //spanish e.g. 'cabrillo'' 'gallegos'                              if (current == self.Length - 3 && StringAt(workingString' current - 1' "ILLO"' "ILLA"' "ALLE")                                  ||                                  (StringAt(workingString' last - 1' "AS"' "OS") || StringAt(workingString' last' "A"' "O")) &&                                  StringAt(workingString' current - 1' "ALLE"))                              {                                  metaphoneData.Add("L"' " ");                                  current += 2;                                  break;                              }                              current += 2;                          }                          else                              current += 1;                          metaphoneData.Add("L");                          break;                        case 'M':                          if (StringAt(workingString' current - 1' "UMB") &&                              (current + 1 == last || StringAt(workingString' current + 2' "ER")) //'dumb'''thumb'                              || workingString[current + 1] == 'M')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("M");                          break;                        case 'N':                          if (workingString[current + 1] == 'N')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("N");                          break;                        case 'Ð':                          current += 1;                          metaphoneData.Add("N");                          break;                        case 'P':                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("F");                              current += 2;                              break;                          }                            //also account for "campbell"' "raspberry"                          if (StringAt(workingString' current + 1' "P"' "B"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("P");                          break;                        case 'Q':                          if (workingString[current + 1] == 'Q')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("K");                          break;                        case 'R':                          //french e.g. 'rogier'' but exclude 'hochmeier'                          if (current == last && !isSlavoGermanic && StringAt(workingString' current - 2' "IE") &&                              !StringAt(workingString' current - 4' "ME"' "MA"))                              metaphoneData.Add(""' "R");                          else                              metaphoneData.Add("R");                            if (workingString[current + 1] == 'R')                              current += 2;                          else                              current += 1;                          break;                        case 'S':                          //special cases 'island'' 'isle'' 'carlisle'' 'carlysle'                          if (StringAt(workingString' current - 1' "ISL"' "YSL"))                          {                              current += 1;                              break;                          }                            //special case 'sugar-'                          if (current == 0 && StringAt(workingString' current' "SUGAR"))                          {                              metaphoneData.Add("X"' "S");                              current += 1;                              break;                          }                            if (StringAt(workingString' current' "SH"))                          {                              //germanic                              if (StringAt(workingString' current + 1' "HEIM"' "HOEK"' "HOLM"' "HOLZ"))                                  metaphoneData.Add("S");                              else                                  metaphoneData.Add("X");                              current += 2;                              break;                          }                            //italian & armenian                          if (StringAt(workingString' current' "SIO"' "SIA") || StringAt(workingString' current' "SIAN"))                          {                              if (!isSlavoGermanic)                                  metaphoneData.Add("S"' "X");                              else                                  metaphoneData.Add("S");                              current += 3;                              break;                          }                            //german & anglicisations' e.g. 'smith' match 'schmidt'' 'snider' match 'schneider'                          //also' -sz- in slavic language altho in hungarian it is pronounced 's'                          if (current == 0 && StringAt(workingString' current + 1' "M"' "N"' "L"' "W") ||                              StringAt(workingString' current + 1' "Z"))                          {                              metaphoneData.Add("S"' "X");                              if (StringAt(workingString' current + 1' "Z"))                                  current += 2;                              else                                  current += 1;                              break;                          }                            if (StringAt(workingString' current' "SC"))                          {                              //Schlesinger's rule                              if (workingString[current + 2] == 'H')                              {                                  //dutch origin' e.g. 'school'' 'schooner'                                  if (StringAt(workingString' current + 3' "OO"' "ER"' "EN"' "UY"' "ED"' "EM"))                                  {                                      //'schermerhorn'' 'schenker'                                      if (StringAt(workingString' current + 3' "ER"' "EN"))                                          metaphoneData.Add("X"' "SK");                                      else                                          metaphoneData.Add("SK");                                      current += 3;                                      break;                                  }                                  if (current == 0 && !IsVowel(workingString[3]) && workingString[3] != 'W')                                      metaphoneData.Add("X"' "S");                                  else                                      metaphoneData.Add("X");                                  current += 3;                                  break;                              }                                if (StringAt(workingString' current + 2' "I"' "E"' "Y"))                              {                                  metaphoneData.Add("S");                                  current += 3;                                  break;                              }                              //else                              metaphoneData.Add("SK");                              current += 3;                              break;                          }                            //french e.g. 'resnais'' 'artois'                          if (current == last && StringAt(workingString' current - 2' "AI"' "OI"))                              metaphoneData.Add(""' "S");                          else                              metaphoneData.Add("S");                            if (StringAt(workingString' current + 1' "S"' "Z"))                              current += 2;                          else                              current += 1;                          break;                        case 'T':                          if (StringAt(workingString' current' "TION"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TIA"' "TCH"))                          {                              metaphoneData.Add("X");                              current += 3;                              break;                          }                            if (StringAt(workingString' current' "TH") || StringAt(workingString' current' "TTH"))                          {                              //special case 'thomas'' 'thames' or germanic                              if (StringAt(workingString' current + 2' "OM"' "AM") || StringAt(workingString' 0' "VAN "' "VON ") ||                                  StringAt(workingString' 0' "SCH"))                                  metaphoneData.Add("T");                              else                                  metaphoneData.Add("O"' "T");                              current += 2;                              break;                          }                            if (StringAt(workingString' current + 1' "T"' "D"))                              current += 2;                          else                              current += 1;                          metaphoneData.Add("T");                          break;                        case 'V':                          if (workingString[current + 1] == 'V')                              current += 2;                          else                              current += 1;                          metaphoneData.Add("F");                          break;                        case 'W':                          //can also be in middle of word                          if (StringAt(workingString' current' "WR"))                          {                              metaphoneData.Add("R");                              current += 2;                              break;                          }                            if (current == 0 && (IsVowel(workingString[current + 1]) || StringAt(workingString' current' "WH")))                          {                              if (IsVowel(workingString[current + 1]))                                  metaphoneData.Add("A"' "F");                              else                                  metaphoneData.Add("A");                          }                            //Arnow should match Arnoff                          if (current == last && IsVowel(workingString[current - 1]) ||                              StringAt(workingString' current - 1' "EWSKI"' "EWSKY"' "OWSKI"' "OWSKY")                              || StringAt(workingString' 0' "SCH"))                          {                              metaphoneData.Add(""' "F");                              current += 1;                              break;                          }                            //polish e.g. 'filipowicz'                          if (StringAt(workingString' current' "WICZ"' "WITZ"))                          {                              metaphoneData.Add("TS"' "FX");                              current += 4;                              break;                          }                            //else skip it                          current += 1;                          break;                        case 'X':                          //french e.g. breaux                          if (                              !(current == last &&                                (StringAt(workingString' current - 3' "IAU"' "EAU") || StringAt(workingString' current - 2' "AU"' "OU"))))                              metaphoneData.Add("KS");                            if (StringAt(workingString' current + 1' "C"' "X"))                              current += 2;                          else                              current += 1;                          break;                        case 'Z':                          //chinese pinyin e.g. 'zhao'                          if (workingString[current + 1] == 'H')                          {                              metaphoneData.Add("J");                              current += 2;                              break;                          }                          if (StringAt(workingString' current + 1' "ZO"' "ZI"' "ZA") ||                              isSlavoGermanic && current > 0 && workingString[current - 1] != 'T')                              metaphoneData.Add("S"' "TS");                          else                              metaphoneData.Add("S");                            if (workingString[current + 1] == 'Z')                              current += 2;                          else                              current += 1;                          break;                        default:                          current += 1;                          break;                  }              }
Magic Number,Rant.Vocabulary.Utilities,MetaphoneData,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,ToString,The following statement contains a magic number: if (ret.Length > 4)                      ret = ret.Substring(0' 4);
Magic Number,Rant.Vocabulary.Utilities,MetaphoneData,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\DoubleMetaphoneStringExtension.cs,ToString,The following statement contains a magic number: if (ret.Length > 4)                      ret = ret.Substring(0' 4);
Magic Number,Rant.Vocabulary.Utilities,Rhymer,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\Rhymer.cs,Rhyme,The following statement contains a magic number: if (IsEnabled(RhymeFlags.Weak) && hasStress)              {                  if (                      term1.SyllableCount >= 2 &&                      term2.SyllableCount >= 2 &&                      term1.Syllables[term1.SyllableCount - 2].IndexOf('"') > -1 &&                      term2.Syllables[term2.SyllableCount - 2].IndexOf('"') > -1 &&                      GetFirstVowelSound(term1.Syllables.Last()) == GetFirstVowelSound(term2.Syllables.Last())                  )                      return true;              }
Magic Number,Rant.Vocabulary.Utilities,Rhymer,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\Rhymer.cs,Rhyme,The following statement contains a magic number: if (IsEnabled(RhymeFlags.Weak) && hasStress)              {                  if (                      term1.SyllableCount >= 2 &&                      term2.SyllableCount >= 2 &&                      term1.Syllables[term1.SyllableCount - 2].IndexOf('"') > -1 &&                      term2.Syllables[term2.SyllableCount - 2].IndexOf('"') > -1 &&                      GetFirstVowelSound(term1.Syllables.Last()) == GetFirstVowelSound(term2.Syllables.Last())                  )                      return true;              }
Magic Number,Rant.Vocabulary.Utilities,Rhymer,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\Rhymer.cs,Rhyme,The following statement contains a magic number: if (IsEnabled(RhymeFlags.Weak) && hasStress)              {                  if (                      term1.SyllableCount >= 2 &&                      term2.SyllableCount >= 2 &&                      term1.Syllables[term1.SyllableCount - 2].IndexOf('"') > -1 &&                      term2.Syllables[term2.SyllableCount - 2].IndexOf('"') > -1 &&                      GetFirstVowelSound(term1.Syllables.Last()) == GetFirstVowelSound(term2.Syllables.Last())                  )                      return true;              }
Magic Number,Rant.Vocabulary.Utilities,Rhymer,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\Rhymer.cs,Rhyme,The following statement contains a magic number: if (IsEnabled(RhymeFlags.Weak) && hasStress)              {                  if (                      term1.SyllableCount >= 2 &&                      term2.SyllableCount >= 2 &&                      term1.Syllables[term1.SyllableCount - 2].IndexOf('"') > -1 &&                      term2.Syllables[term2.SyllableCount - 2].IndexOf('"') > -1 &&                      GetFirstVowelSound(term1.Syllables.Last()) == GetFirstVowelSound(term2.Syllables.Last())                  )                      return true;              }
Magic Number,Rant.Vocabulary.Utilities,Rhymer,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\Rhymer.cs,Rhyme,The following statement contains a magic number: if (IsEnabled(RhymeFlags.Semirhyme))              {                  if (Math.Abs(term1.SyllableCount - term2.SyllableCount) == 1)                  {                      var longestWord = term1.SyllableCount > term2.SyllableCount ? term1 : term2;                      var shortestWord = term1.SyllableCount > term2.SyllableCount ? term2 : term1;                      if (                          GetFirstVowelSound(longestWord.Syllables[longestWord.SyllableCount - 2]) ==                          GetFirstVowelSound(shortestWord.Syllables.Last()))                          return true;                  }              }
Magic Number,Rant.Vocabulary.Utilities,Rhymer,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\Rhymer.cs,LevenshteinDistance,The following statement contains a magic number: var distance = new int[2' m + 1];
Duplicate Code,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,ParseDouble,The method contains a code clone-set at the following line numbers (starting from the method definition): ((19' 61)' (79' 121))
Duplicate Code,Rant.Vocabulary,Tools,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,ReadArg,The method contains a code clone-set at the following line numbers (starting from the method definition): ((24' 68)' (99' 143))
Missing Default,Rant.Core.Compiler.Parsing,QueryParser,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Parsing\QueryParser.cs,Parse,The following switch statement is missing a default case: switch (flag)                                  {                                      case 'i':                                          options |= RegexOptions.IgnoreCase;                                          break;                                      case 'm':                                          options |= RegexOptions.Multiline;                                          break;                                  }
Missing Default,Rant.Core.Compiler.Parsing,QueryParser,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Parsing\QueryParser.cs,ReadCarriers,The following switch statement is missing a default case: switch (carrierType)                              {                                  case CarrierComponentType.Associative:                                      carrierType = CarrierComponentType.MatchAssociative;                                      break;                                  case CarrierComponentType.Dissociative:                                      carrierType = CarrierComponentType.MatchDissociative;                                      break;                                  case CarrierComponentType.Divergent:                                      carrierType = CarrierComponentType.MatchDivergent;                                      break;                                  case CarrierComponentType.Relational:                                      carrierType = CarrierComponentType.MatchRelational;                                      break;                              }
Missing Default,Rant.Core.Compiler.Parsing,SequenceParser,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Parsing\SequenceParser.cs,Parse,The following switch statement is missing a default case: switch (context)  						{  							case CompileContext.ArgumentSequence:  							case CompileContext.SubroutineBody:  							case CompileContext.QueryComplement:  								compiler.LeaveContext();  								yield break;  						}
Missing Default,Rant.Core.Compiler.Parsing,SequenceParser,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Parsing\SequenceParser.cs,Parse,The following switch statement is missing a default case: switch (reader.PeekType())  								{  									case R.Pipe:  									case R.RightCurly:  										continue; // Ignore whitespace at the end of block elements  								}
Missing Default,Rant.Core.Compiler.Parsing,SequenceParser,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Parsing\SequenceParser.cs,Parse,The following switch statement is missing a default case: switch (reader.PeekType())  							{  								case R.EscapeSequenceChar:  									actionCallback(new RstEscape(token.ToLocation()' quantity' false' reader.ReadToken().Value[0]));  									break;  								case R.EscapeSequenceUnicode:  									{  										short codePoint;  										if (!short.TryParse(reader.ReadToken().Value' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out codePoint))  										{  											compiler.SyntaxError(reader.PrevToken' false' "err-compiler-invalid-escape-unicode"' reader.PrevToken.Value);  											break;  										}  										actionCallback(new RstEscape(token.ToLocation()' quantity' true' Convert.ToChar(codePoint)));  										break;  									}  								case R.EscapeSequenceSurrogatePair:  									{  										var pairToken = reader.ReadToken();  										uint surrogatePairCodePoint;  										if (!uint.TryParse(pairToken.Value' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture' out surrogatePairCodePoint)  											|| surrogatePairCodePoint < 0x10000)  										{  											compiler.SyntaxError(reader.PrevToken' false' "err-compiler-invalid-escape-surrogate"' pairToken.Value);  											break;  										}    										surrogatePairCodePoint -= 0x10000;  										ushort highCodePoint = (ushort)(0xD800 + ((surrogatePairCodePoint & 0xFFC00) >> 10));  										ushort lowCodePoint = (ushort)(0xDC00 + (surrogatePairCodePoint & 0x3FF));  										char low' high;  										if (!char.IsSurrogatePair(high = Convert.ToChar(highCodePoint)' low = Convert.ToChar(lowCodePoint)))  										{  											compiler.SyntaxError(reader.PrevToken' false' "err-compiler-invalid-escape-surrogate"' pairToken.Value);  											break;  										}  										actionCallback(new RstEscape(token.ToLocation()' quantity' true' high' low));  										break;  									}  							}
Missing Default,Rant.Core.Compiler.Parsing,TagParser,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Parsing\TagParser.cs,Parse,The following switch statement is missing a default case: switch (flag)  								{  									case 'i':  										options |= RegexOptions.IgnoreCase;  										break;  									case 'm':  										options |= RegexOptions.Multiline;  										break;  								}
Missing Default,Rant.Core.Compiler.Syntax,RstFunction,C:\repos\TheBerkin_Rant\Rant\Core\Compiler\Syntax\RstFunction.cs,Run,The following switch statement is missing a default case: switch (p.RantType)                  {                      // Patterns are passed right to the method                      case RantFunctionParameterType.Pattern:                          args[i] = _args[i];                          break;                        // Strings are evaluated                      case RantFunctionParameterType.String:                          sb.AddOutputWriter();                          yield return _args[i];                          args[i] = sb.Return().Main;                          break;                        // RantObjects are evaluated and fetched by name                      case RantFunctionParameterType.RantObject:  	                {  		                sb.AddOutputWriter();  		                yield return _args[i];  		                var name = sb.Return().Main;  		                args[i] = sb.Objects[name] ?? throw new RantRuntimeException(sb' _args[i]' "err-runtime-missing-var"' name);  		                break;  	                }    	                // Numbers are evaluated' verified' and converted                      case RantFunctionParameterType.Number:                      {                          sb.AddOutputWriter();                          yield return _args[i];                          string strNum = sb.Return().Main;                          if (!Util.ParseDouble(strNum' out double d))                          {                              d = 0;  							if (Util.ParseInt(strNum' out int n))  							{  								d = n;  							}  							else  							{  								throw new RantRuntimeException(sb' _args[i]' "err-runtime-invalid-arg"' strNum' p.Name' p.RantType.ToString().ToLower());  							}  						}                          args[i] = Convert.ChangeType(d' p.NativeType);                          break;                      }                        case RantFunctionParameterType.Boolean:                      {                          sb.AddOutputWriter();                          yield return _args[i];                          var val = sb.Return().Main;                          if (val.Equals("true"' StringComparison.InvariantCultureIgnoreCase))                          {                              args[i] = true;                          }                          else if (val.Equals("false"' StringComparison.InvariantCultureIgnoreCase))                          {                              args[i] = false;                          }                          else                          {                              throw new RantRuntimeException(sb' _args[i]' "err-runtime-invalid-arg"' val' p.Name' p.RantType.ToString().ToLower());                          }                          break;                      }                        // Modes are parsed into enumeration members                      case RantFunctionParameterType.Mode:                      {                          sb.AddOutputWriter();                          yield return _args[i];                          string strMode = sb.Return().Main;                          if (!Util.TryParseEnum(p.NativeType' strMode' out object value))                          {                              throw new RantRuntimeException(sb' _args[i].Location' "err-runtime-unknown-mode"' strMode' Util.GetEnumListString(p.NativeType));                          }                          args[i] = value;                          break;                      }                        // Flags are parsed from strings to enum members and combined with OR.                      case RantFunctionParameterType.Flags:                      {                          var enumType = p.NativeType;                          sb.AddOutputWriter();                          yield return _args[i];                          long flags = 0;                          string strFlags = sb.Return().Main;                          foreach (string flag in strFlags.Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries))                          {                              if (!Util.TryParseEnum(enumType' flag' out object value))                              {                                  throw new RantRuntimeException(sb' _args[i].Location' "err-runtime-unknown-flag"' flag' Util.GetEnumListString(enumType));                              }                              flags |= Convert.ToInt64(value);                          }                          args[i] = Enum.ToObject(enumType' flags);                          break;                      }                  }
Missing Default,Rant.Core.Constructs,Synchronizer,C:\repos\TheBerkin_Rant\Rant\Core\Constructs\Synchronizer.cs,FillSlots,The following switch statement is missing a default case: switch (Type)              {                  case SyncType.Forward:                  case SyncType.Ping:  				case SyncType.NoRepeat:                      for (int i = 0; i < _state.Length; _state[i] = i++)                      {                      }  	                if (Type == SyncType.NoRepeat) Index = _rng.Next(_state.Length);                      break;                  case SyncType.Reverse:                  case SyncType.Pong:                      for (int i = 0; i < _state.Length; _state[_state.Length - 1 - i] = i++)                      {                      }                      break;                  case SyncType.Locked:                  case SyncType.Deck:                  case SyncType.Cdeck:                      for (int i = 0; i < _state.Length; _state[i] = i++)                      {                      }                      ScrambleSlots();                      break;              }
Missing Default,Rant.Core.Formatting,NumberFormatter,C:\repos\TheBerkin_Rant\Rant\Core\Formatting\NumberFormatter.cs,FormatNumber,The following switch statement is missing a default case: switch (NumberFormat)              {                  case NumberFormat.Normal:                      return number.ToString(CultureInfo.InvariantCulture);                  case NumberFormat.Group:                      return $"{number:n0}";                  case NumberFormat.GroupCommas:                      return number.ToString("n0"' CommaGroupFormat);                  case NumberFormat.GroupDots:                      return number.ToString("n0"' DotGroupFormat);                  case NumberFormat.Roman:                  case NumberFormat.RomanUpper:                      return Numerals.ToRoman(number);                  case NumberFormat.RomanLower:                      return Numerals.ToRoman(number' true);                  case NumberFormat.Verbal:                      return number % 1 > 0 ? "?" : sb.Format.NumberVerbalizer.Verbalize((long)number);                  case NumberFormat.Hex:                  case NumberFormat.HexUpper:                      return GetHex((long)number' true);                  case NumberFormat.HexLower:                      return GetHex((long)number' false);                  case NumberFormat.Binary:                      return GetBinary((long)number);              }
Missing Default,Rant.Core.Utilities,Util,C:\repos\TheBerkin_Rant\Rant\Core\Utilities\Util.cs,GetRegexOptionsFromString,The following switch statement is missing a default case: switch (optionsString[i])  				{  					case 'i':  						options |= RegexOptions.IgnoreCase;  						break;  					case 'm':  						options |= RegexOptions.Multiline;  						break;  				}
Missing Default,Rant.Core.Output,OutputChainBuffer,C:\repos\TheBerkin_Rant\Rant\Core\Output\OutputChainBuffer.cs,Format,The following switch statement is missing a default case: switch (_charType)  			{  				case CharConversion.Fullwidth:  				value = new string(value.Select(CharConverter.ToFullwidth).ToArray());  				break;  				case CharConversion.Cursive:  				{  					var sb = new StringBuilder();  					foreach (char c in value)  					{  						sb.Append(CharConverter.ToScript(c));  					}  					value = sb.ToString();  					break;  				}  				case CharConversion.BoldCursive:  				{  					var sb = new StringBuilder();  					foreach (char c in value)  					{  						sb.Append(CharConverter.ToBoldScript(c));  					}  					value = sb.ToString();  					break;  				}    			}
Missing Default,Rant.Core.Output,OutputChainBuffer,C:\repos\TheBerkin_Rant\Rant\Core\Output\OutputChainBuffer.cs,Format,The following switch statement is missing a default case: switch (_caps)  			{  				case Capitalization.Upper:  				value = value.ToUpperInvariant();  				break;  				case Capitalization.Lower:  				value = value.ToLowerInvariant();  				break;  				case Capitalization.Word:  				{  					char lastChar = _buffer.Length > 0  						? _buffer[_buffer.Length - 1]  						: Prev?.LastChar ?? '\0';  					if (char.IsWhiteSpace(lastChar) || _wordSepChars.Contains(lastChar) || lastChar == '\0')  						CapitalizeFirstLetter(ref value);  				}  				break;  				case Capitalization.Sentence:  				{  					var b = _buffer;    					// Capitalize sentences in input value  					CapitalizeSentences(ref value);    					// If the buffer's empty' check previous buffer  					if (_buffer.Length == 0)  					{  						// Check if we're at the start  						if (Prev == null || Prev.Prev == null && Prev.Length == 0)  						{  							CapitalizeFirstLetter(ref value);  							break;  						}  						// If there is a previous buffer' scan the end.  						b = Prev._buffer;  					}  					else if (Prev == null || Prev.Length == 0)  					{  						for (int i = b.Length - 1; i >= 0; i--)  						{  							if (char.IsLetterOrDigit(b[i])) break;  							if (_sentenceTerminators.Contains(b[i])) break;  							if (i == 0)  								CapitalizeFirstLetter(ref value);  						}  					}    					// Scan buffer end to determine if capitalization is needed  					for (int i = b.Length - 1; i >= 0; i--)  					{  						if (char.IsLetterOrDigit(b[i])) break;  						if (!_sentenceTerminators.Contains(b[i])) continue;  						CapitalizeFirstLetter(ref value);  						break;  					}  				}  				break;  				case Capitalization.Title:  				{  					CapitalizeTitleString(ref value' _sandbox.Format' !PrintedSinceCapsChange);  				}  				break;  				case Capitalization.First:  				if (CapitalizeFirstLetter(ref value) && !(this is OutputChainArticleBuffer)) _caps = Capitalization.None;  				break;  			}
Missing Default,Rant.Core.Output,OutputWriter,C:\repos\TheBerkin_Rant\Rant\Core\Output\OutputWriter.cs,Do,The following switch statement is missing a default case: switch (chain.Visibility)                  {                      case ChannelVisibility.Public:                          if (fInternal) return;                          if (chain != mainChain)                              chainAction(mainChain);                          return;                      case ChannelVisibility.Private:                          return;                      case ChannelVisibility.Internal:                          fInternal = true;                          break;                  }
Missing Default,Rant.Core.ObjectModel,RantObject,C:\repos\TheBerkin_Rant\Rant\Core\ObjectModel\RantObject.cs,ConvertTo,The following switch statement is missing a default case: switch (targetType)  			{  				case RantObjectType.String:  					{  						switch (_value)  						{  							case bool b:  								return new RantObject(b.ToString());  							case double d:  								return new RantObject(d.ToString(CultureInfo.InvariantCulture));  							case List<RantObject> lst:  								{  									var sb = new StringBuilder();  									bool first = true;  									sb.Append("(");  									foreach (var rantObject in lst)  									{  										if (first)  										{  											first = false;  											sb.Append("' ");  										}    										sb.Append(rantObject);  									}  									sb.Append(")");  									return new RantObject(sb.ToString());  								}  						}  						break;  					}  				case RantObjectType.Number:  					{  						switch (_value)  						{  							case bool b:  								return new RantObject(b ? 1 : 0);  							case string str:  								{  									return Util.ParseDouble(str' out double num) ? new RantObject(num) : Null;  								}  						}  						break;  					}  				case RantObjectType.Boolean:  					{  						switch (_value)  						{  							case string s:  								{  									switch (s)  									{  										case "True":  											return new RantObject(true);  										case "False":  											return new RantObject(false);  									}  									break;  								}  							case double d:  								// ReSharper disable once CompareOfFloatsByEqualityOperator  								return new RantObject(d != 0.0);  						}  						break;  					}  				case RantObjectType.List:  					{  						return new RantObject(new List<RantObject> { this });  					}  			}
Missing Default,Rant.Core.ObjectModel,RantObject,C:\repos\TheBerkin_Rant\Rant\Core\ObjectModel\RantObject.cs,ConvertTo,The following switch statement is missing a default case: switch (_value)  						{  							case bool b:  								return new RantObject(b.ToString());  							case double d:  								return new RantObject(d.ToString(CultureInfo.InvariantCulture));  							case List<RantObject> lst:  								{  									var sb = new StringBuilder();  									bool first = true;  									sb.Append("(");  									foreach (var rantObject in lst)  									{  										if (first)  										{  											first = false;  											sb.Append("' ");  										}    										sb.Append(rantObject);  									}  									sb.Append(")");  									return new RantObject(sb.ToString());  								}  						}
Missing Default,Rant.Core.ObjectModel,RantObject,C:\repos\TheBerkin_Rant\Rant\Core\ObjectModel\RantObject.cs,ConvertTo,The following switch statement is missing a default case: switch (_value)  						{  							case bool b:  								return new RantObject(b ? 1 : 0);  							case string str:  								{  									return Util.ParseDouble(str' out double num) ? new RantObject(num) : Null;  								}  						}
Missing Default,Rant.Core.ObjectModel,RantObject,C:\repos\TheBerkin_Rant\Rant\Core\ObjectModel\RantObject.cs,ConvertTo,The following switch statement is missing a default case: switch (_value)  						{  							case string s:  								{  									switch (s)  									{  										case "True":  											return new RantObject(true);  										case "False":  											return new RantObject(false);  									}  									break;  								}  							case double d:  								// ReSharper disable once CompareOfFloatsByEqualityOperator  								return new RantObject(d != 0.0);  						}
Missing Default,Rant.Core.ObjectModel,RantObject,C:\repos\TheBerkin_Rant\Rant\Core\ObjectModel\RantObject.cs,ConvertTo,The following switch statement is missing a default case: switch (s)  									{  										case "True":  											return new RantObject(true);  										case "False":  											return new RantObject(false);  									}
Missing Default,Rant.Core.ObjectModel,RantObject,C:\repos\TheBerkin_Rant\Rant\Core\ObjectModel\RantObject.cs,ToString,The following switch statement is missing a default case: switch (_value)  			{  				case bool b:  					return b ? "true" : "false";  				case string str:  					return str;  				case null:  					return "null";  				case double d:  					return d.ToString(CultureInfo.InvariantCulture);  				case List<RantObject> list:  					{  						var sb = new StringBuilder();  						bool first = true;  						sb.Append("(");  						foreach (var rantObject in list)  						{  							if (!first) sb.Append("' ");  							first = false;  							sb.Append(rantObject);  						}  						sb.Append(")");  						return sb.ToString();  					}  				case Subroutine sub:  					return sub.Name;  			}
Missing Default,Rant.Vocabulary,RantDictionaryTable,C:\repos\TheBerkin_Rant\Rant\Vocabulary\RantDictionaryTable.Importer.cs,FromStream,The following switch statement is missing a default case: switch (directiveName.ToLowerInvariant())                              {                                  // Table name definition                                  case "name":                                  {                                      // Do not allow this to appear anywhere except at the top of the file                                      if (table != null)                                          throw new RantTableLoadException(origin' line' dPos + 1' "err-table-misplaced-header-directive");                                      // Do not allow multiple @name directives                                      if (name != null)                                          throw new RantTableLoadException(origin' line' dPos + 1' "err-table-multiple-names");                                      // One argument required                                      if (args.Count != 1)                                          throw new RantTableLoadException(origin' line' dPos + 1' "err-table-name-args");                                      // Must meet standard identifier requirements                                      if (!Util.ValidateName(args[0].Value))                                          throw new RantTableLoadException(origin' line' args[0].CharIndex + 1' "err-table-invalid-name"' args[0].Value);                                      name = args[0].Value;                                      break;                                  }                                    // Subtype definition                                  case "sub":                                  {                                      // Do not allow this to appear anywhere except at the top of the file                                      if (table != null)                                          throw new RantTableLoadException(origin' line' dPos + 1' "err-table-misplaced-header-directive");                                      // @sub requires at least one argument                                      if (args.Count == 0)                                          throw new RantTableLoadException(origin' line' dPos + 1' "err-table-subtype-args");                                        // If the first argument is a number' use it as the subtype index.                                      if (Util.ParseInt(args[0].Value' out int termIndex))                                      {                                          // Disallow negative term indices                                          if (termIndex < 0)                                              throw new RantTableLoadException(origin' line' dPos + 1' "err-table-sub-index-negative"' termIndex);                                          // Requires at least one name                                          if (args.Count < 2)                                              throw new RantTableLoadException(origin' line' dPos + 1' "err-table-sub-missing-name");                                          // If the index is outside the current term index range' increase the number.                                          if (termIndex >= termsPerEntry)                                              termsPerEntry = termIndex + 1;                                          // Assign all following names to the index                                          for (int j = 1; j < args.Count; j++)                                          {                                              // Validate subtype name                                              if (!Util.ValidateName(args[j].Value))                                                  throw new RantTableLoadException(origin' line' args[j].CharIndex + 1' "err-table-bad-subtype"' args[j].Value);                                              subtypes[args[j].Value] = termIndex;                                          }                                      }                                      else                                      {                                          // Add to last index                                          termIndex = termsPerEntry++;                                          // Assign all following names to the index                                          foreach (var a in args)                                          {                                              // Validate subtype name                                              if (!Util.ValidateName(a.Value))                                                  throw new RantTableLoadException(origin' line' a.CharIndex + 1' "err-table-bad-subtype"' a.Value);                                              subtypes[a.Value] = termIndex;                                          }                                      }                                      break;                                  }                                  case "hide":                                      if (args.Count == 0) break;                                      foreach (var a in args)                                      {                                          if (!Util.ValidateName(a.Value))                                              throw new RantTableLoadException(origin' line' i' "err-table-invalid-class"' a.Value);                                          hidden.Add(String.Intern(a.Value));                                      }                                      break;                                  case "dummy":                                      if (args.Count != 0)                                          throw new RantTableLoadException(origin' line' i' "err-table-argc-mismatch"' directiveName' 0' args.Count);                                      dummy = true;                                      break;                                  case "id":                                      if (args.Count != 1)                                          throw new RantTableLoadException(origin' line' i' "err-table-argc-mismatch"' directiveName' 1' args.Count);                                      if (!Util.ValidateName(args[0].Value))                                          throw new RantTableLoadException(origin' line' args[0].CharIndex + 1' "err-table-bad-template-id"' args[0].Value);                                      tId = args[0].Value;                                      break;                                  case "using":                                      if (args.Count != 1)                                          throw new RantTableLoadException(origin' line' i' "err-table-argc-mismatch"' directiveName' 1' args.Count);                                      if (!Util.ValidateName(args[0].Value))                                          throw new RantTableLoadException(origin' line' args[0].CharIndex + 1' "err-table-bad-template-id"' args[0].Value);                                      if (!templates.TryGetValue(args[0].Value' out activeTemplate))                                          throw new RantTableLoadException(origin' line' args[0].CharIndex + 1' "err-table-template-not-found"' args[0].Value);                                      break;                                  case "class":                                  {                                      var cList = new List<string>();                                      if (args.Count == 0)                                          throw new RantTableLoadException(origin' line' i' "err-table-args-expected"' directiveName);                                      foreach (var cArg in args)                                      {                                          if (!Tools.ValidateClassName(cArg.Value))                                              throw new RantTableLoadException(origin' line' cArg.CharIndex + 1' "err-table-invalid-class"' cArg.Value);                                          cList.Add(cArg.Value);                                          autoClasses.Add(cArg.Value);                                      }                                      autoClassStack.Push(cList);                                      break;                                  }                                  case "endclass":                                  {                                      if (args.Count == 0)                                      {                                          if (autoClassStack.Count > 0)                                          {                                              foreach (string cName in autoClassStack.Pop())                                                  autoClasses.Remove(cName);                                          }                                      }                                      break;                                  }                              }
Missing Default,Rant.Vocabulary.Utilities,Diff,C:\repos\TheBerkin_Rant\Rant\Vocabulary\Utilities\Diff.cs,Mark,The following switch statement is missing a default case: switch (rule.Type)                  {                      case DiffRuleType.Add:                          baseString = rule.Prepend                              ? rule.ConcatString + baseString                              : baseString + rule.ConcatString;                          continue;                      case DiffRuleType.Subtract:                          baseString = Cut(baseString' rule.Factor' rule.Prepend);                          baseString = rule.Prepend                              ? rule.ConcatString + baseString                              : baseString + rule.ConcatString;                          continue;                      case DiffRuleType.ReplaceWord:                          baseString = ReplaceWord(baseString' rule.ConcatString' rule.Factor' rule.Prepend);                          continue;                  }
