Implementation smell,Namespace,Class,File,Method,Description
Long Method,Azure.Security.KeyVault.Keys.Tests,CryptographyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientLiveTests.cs,CreateTestKeyWithKeyMaterial,The method has 124 lines of code.
Complex Method,Azure.Security.KeyVault.Keys.Tests,JsonWebKeyComparer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\JsonWebKeyTests.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,Azure.Core.Testing,RecordEntry,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordEntry.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Azure.Core.Tests,ClientDiagnosticListener,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientDiagnosticListener.cs,OnNext,Cyclomatic complexity of the method is 9
Long Parameter List,Azure.Security.KeyVault.Keys.Tests,JsonWebKeyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\JsonWebKeyTests.cs,ToECDsaInvalidKey,The method has 5 parameters. Parameters: curveName' x' y' name' nullOnError
Long Parameter List,Azure.Core.Testing,SyncAsyncPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\SyncAsyncPolicyTestBase.cs,SendRequestAsync,The method has 5 parameters. Parameters: transport' requestAction' policy' responseClassifier' bufferResponse
Long Parameter List,Azure.Core.Testing,SyncAsyncPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\SyncAsyncPolicyTestBase.cs,SendGetRequest,The method has 5 parameters. Parameters: transport' policy' responseClassifier' bufferResponse' uri
Long Parameter List,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,Combine,The method has 5 parameters. Parameters: value1' value2' value3' value4' value5
Long Parameter List,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,Combine,The method has 6 parameters. Parameters: value1' value2' value3' value4' value5' value6
Long Parameter List,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,Combine,The method has 7 parameters. Parameters: value1' value2' value3' value4' value5' value6' value7
Long Parameter List,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,Combine,The method has 8 parameters. Parameters: value1' value2' value3' value4' value5' value6' value7' value8
Long Identifier,Azure.Security.KeyVault.Keys.Tests,KeysTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysTestBase.cs,,The length of the parameter AzureKeyVaultUrlEnvironmentVariable is 35.
Long Identifier,Azure.Core.Testing,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientTestBase.cs,,The length of the parameter s_diagnosticScopeValidatingInterceptor is 38.
Long Statement,Azure.Security.KeyVault.Keys.Tests,AesCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\AesCryptographyProviderTests.cs,WrapKeyBeforeValidDate,The length of the statement  "            byte[] ek = { 0x64' 0xE8' 0xC3' 0xF9' 0xCE' 0x0F' 0x5B' 0xA2' 0x63' 0xE9' 0x77' 0x79' 0x05' 0x81' 0x8A' 0x2A' 0x93' 0xC8' 0x19' 0x1E' 0x7D' 0x6E' 0x8A' 0xE7 }; " is 159.
Long Statement,Azure.Security.KeyVault.Keys.Tests,AesCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\AesCryptographyProviderTests.cs,WrapKeyBeforeValidDate,The length of the statement  "            InvalidOperationException ex = Assert.Throws<InvalidOperationException>(() => provider.WrapKey(KeyWrapAlgorithm.A128KW' ek' default)); " is 134.
Long Statement,Azure.Security.KeyVault.Keys.Tests,AesCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\AesCryptographyProviderTests.cs,WrapKeyAfterValidDate,The length of the statement  "            byte[] ek = { 0x64' 0xE8' 0xC3' 0xF9' 0xCE' 0x0F' 0x5B' 0xA2' 0x63' 0xE9' 0x77' 0x79' 0x05' 0x81' 0x8A' 0x2A' 0x93' 0xC8' 0x19' 0x1E' 0x7D' 0x6E' 0x8A' 0xE7 }; " is 159.
Long Statement,Azure.Security.KeyVault.Keys.Tests,AesCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\AesCryptographyProviderTests.cs,WrapKeyAfterValidDate,The length of the statement  "            InvalidOperationException ex = Assert.Throws<InvalidOperationException>(() => provider.WrapKey(KeyWrapAlgorithm.A128KW' ek' default)); " is 134.
Long Statement,Azure.Security.KeyVault.Keys.Tests,AesKwTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\AesKwTests.cs,AesKw128,The length of the statement  "            byte[] EK = { 0x1F' 0xA6' 0x8B' 0x0A' 0x81' 0x12' 0xB4' 0x47' 0xAE' 0xF3' 0x4B' 0xD8' 0xFB' 0x5A' 0x7B' 0x82' 0x9D' 0x3E' 0x86' 0x23' 0x71' 0xD2' 0xCF' 0xE5 }; " is 159.
Long Statement,Azure.Security.KeyVault.Keys.Tests,AesKwTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\AesKwTests.cs,AesKw192,The length of the statement  "            byte[] KEK = { 0x00' 0x01' 0x02' 0x03' 0x04' 0x05' 0x06' 0x07' 0x08' 0x09' 0x0A' 0x0B' 0x0C' 0x0D' 0x0E' 0x0F' 0x10' 0x11' 0x12' 0x13' 0x14' 0x15' 0x16' 0x17 }; " is 160.
Long Statement,Azure.Security.KeyVault.Keys.Tests,AesKwTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\AesKwTests.cs,AesKw192,The length of the statement  "            byte[] EK = { 0x96' 0x77' 0x8B' 0x25' 0xAE' 0x6C' 0xA4' 0x35' 0xF9' 0x2B' 0x5B' 0x97' 0xC0' 0x50' 0xAE' 0xD2' 0x46' 0x8A' 0xB8' 0xA1' 0x7A' 0xD8' 0x4E' 0x5D }; " is 159.
Long Statement,Azure.Security.KeyVault.Keys.Tests,AesKwTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\AesKwTests.cs,AesKw256,The length of the statement  "            byte[] KEK = { 0x00' 0x01' 0x02' 0x03' 0x04' 0x05' 0x06' 0x07' 0x08' 0x09' 0x0A' 0x0B' 0x0C' 0x0D' 0x0E' 0x0F' 0x10' 0x11' 0x12' 0x13' 0x14' 0x15' 0x16' 0x17' 0x18' 0x19' 0x1A' 0x1B' 0x1C' 0x1D' 0x1E' 0x1F }; " is 208.
Long Statement,Azure.Security.KeyVault.Keys.Tests,AesKwTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\AesKwTests.cs,AesKw256,The length of the statement  "            byte[] EK = { 0x64' 0xE8' 0xC3' 0xF9' 0xCE' 0x0F' 0x5B' 0xA2' 0x63' 0xE9' 0x77' 0x79' 0x05' 0x81' 0x8A' 0x2A' 0x93' 0xC8' 0x19' 0x1E' 0x7D' 0x6E' 0x8A' 0xE7 }; " is 159.
Long Statement,Azure.Security.KeyVault.Keys.Tests,CryptographyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientLiveTests.cs,LocalSignVerifyRoundTripOnFramework,The length of the statement  "            Assert.Ignore("RSA-PSS is supported on .NET Core so local tests will pass. This test method is to test that on .NET Framework RSA-PSS sign/verify attempts fall back to the remote client."); " is 189.
Long Statement,Azure.Security.KeyVault.Keys.Tests,CryptographyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientLiveTests.cs,SignLocalVerifyRoundTripFramework,The length of the statement  "            Assert.Ignore("RSA-PSS is supported on .NET Core so local tests will pass. This test method is to test that on .NET Framework RSA-PSS sign/verify attempts fall back to the remote client."); " is 189.
Long Statement,Azure.Security.KeyVault.Keys.Tests,CryptographyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientLiveTests.cs,GetCryptoClient,The length of the statement  "            CryptographyClient client = new CryptographyClient(keyId' recording.GetCredential(new DefaultAzureCredential())' recording.InstrumentClientOptions(new CryptographyClientOptions())' forceRemote); " is 194.
Long Statement,Azure.Security.KeyVault.Keys.Tests,CryptographyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientLiveTests.cs,GetCryptoClient,The length of the statement  "            CryptographyClient client = new CryptographyClient(key' recording.GetCredential(new DefaultAzureCredential())' recording.InstrumentClientOptions(new CryptographyClientOptions())); " is 179.
Long Statement,Azure.Security.KeyVault.Keys.Tests,CryptographyClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientTests.cs,VerifyDataAsyncArgumentValidation,The length of the statement  "            Assert.ThrowsAsync<ArgumentNullException>(() => Client.VerifyDataAsync(SignatureAlgorithm.ES256Value' (byte[])null' new byte[0])); " is 130.
Long Statement,Azure.Security.KeyVault.Keys.Tests,CryptographyClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientTests.cs,VerifyDataAsyncArgumentValidation,The length of the statement  "            Assert.ThrowsAsync<ArgumentNullException>(() => Client.VerifyDataAsync(SignatureAlgorithm.ES256Value' (Stream)null' new byte[0])); " is 130.
Long Statement,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,SupportsOperation,The length of the statement  "            JsonWebKey jwk = KeyModelFactory.JsonWebKey(KeyType.Ec' curveName: KeyCurveName.P256' keyOps: new[] { KeyOperation.Sign' KeyOperation.Verify }); " is 144.
Long Statement,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,SupportsOperationUnsupportedCurve,The length of the statement  "            JsonWebKey jwk = KeyModelFactory.JsonWebKey(KeyType.Ec' curveName: "invalid"' keyOps: new[] { KeyOperation.Sign' KeyOperation.Verify }); " is 136.
Long Statement,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,SupportsOperationUnsupportedCurve,The length of the statement  "            // The provider caches the original allow key operations to facilitate tracing. Operation will still be sent to the service. " is 124.
Long Statement,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,Sign,The length of the statement  "            byte[] digest = new byte[] { 0x9f' 0x86' 0xd0' 0x81' 0x88' 0x4c' 0x7d' 0x65' 0x9a' 0x2f' 0xea' 0xa0' 0xc5' 0x5a' 0xd0' 0x15' 0xa3' 0xbf' 0x4f' 0x1b' 0x2b' 0x0b' 0x82' 0x2c' 0xd1' 0x5d' 0x6c' 0x15' 0xb0' 0xf0' 0x0a' 0x08 }; " is 222.
Long Statement,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,SignThrowsOnInvalidKey,The length of the statement  "            Assert.Throws<ArgumentException>(() => client.Sign(algorithm' digest' default)' "Expected exception with wrong key length"); " is 124.
Long Statement,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,Verify,The length of the statement  "            byte[] digest = new byte[] { 0x9f' 0x86' 0xd0' 0x81' 0x88' 0x4c' 0x7d' 0x65' 0x9a' 0x2f' 0xea' 0xa0' 0xc5' 0x5a' 0xd0' 0x15' 0xa3' 0xbf' 0x4f' 0x1b' 0x2b' 0x0b' 0x82' 0x2c' 0xd1' 0x5d' 0x6c' 0x15' 0xb0' 0xf0' 0x0a' 0x08 }; " is 222.
Long Statement,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,VerifyThrowsOnInvalidKey,The length of the statement  "            Assert.Throws<ArgumentException>(() => client.Verify(algorithm' digest' signature' default)' "Expected exception with wrong key length"); " is 137.
Long Statement,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,SignBeforeValidDate,The length of the statement  "            byte[] digest = new byte[] { 0x9f' 0x86' 0xd0' 0x81' 0x88' 0x4c' 0x7d' 0x65' 0x9a' 0x2f' 0xea' 0xa0' 0xc5' 0x5a' 0xd0' 0x15' 0xa3' 0xbf' 0x4f' 0x1b' 0x2b' 0x0b' 0x82' 0x2c' 0xd1' 0x5d' 0x6c' 0x15' 0xb0' 0xf0' 0x0a' 0x08 }; " is 222.
Long Statement,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,SignBeforeValidDate,The length of the statement  "            InvalidOperationException ex = Assert.Throws<InvalidOperationException>(() => client.Sign(GetSignatureAlgorithm(key.Key)' digest' default)); " is 140.
Long Statement,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,SignAfterValidDate,The length of the statement  "            byte[] digest = new byte[] { 0x9f' 0x86' 0xd0' 0x81' 0x88' 0x4c' 0x7d' 0x65' 0x9a' 0x2f' 0xea' 0xa0' 0xc5' 0x5a' 0xd0' 0x15' 0xa3' 0xbf' 0x4f' 0x1b' 0x2b' 0x0b' 0x82' 0x2c' 0xd1' 0x5d' 0x6c' 0x15' 0xb0' 0xf0' 0x0a' 0x08 }; " is 222.
Long Statement,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,SignAfterValidDate,The length of the statement  "            InvalidOperationException ex = Assert.Throws<InvalidOperationException>(() => client.Sign(GetSignatureAlgorithm(key.Key)' digest' default)); " is 140.
Long Statement,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,GetInvalidKeys,The length of the statement  "                yield return ("1.2.840.10045.3.1.7"' new[] { SignatureAlgorithm.ES256K' SignatureAlgorithm.ES384' SignatureAlgorithm.ES512 }); // P-256 " is 135.
Long Statement,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,GetInvalidKeys,The length of the statement  "                yield return ("1.3.132.0.10"' new[] { SignatureAlgorithm.ES256' SignatureAlgorithm.ES384' SignatureAlgorithm.ES512 }); // P-256K " is 128.
Long Statement,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,GetInvalidKeys,The length of the statement  "                yield return ("1.3.132.0.34"' new[] { SignatureAlgorithm.ES256' SignatureAlgorithm.ES256K' SignatureAlgorithm.ES512 }); // P-384 " is 128.
Long Statement,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,GetInvalidKeys,The length of the statement  "                yield return ("1.3.132.0.35"' new[] { SignatureAlgorithm.ES256' SignatureAlgorithm.ES256K' SignatureAlgorithm.ES384 }); // P-521 " is 128.
Long Statement,Azure.Security.KeyVault.Keys.Tests,JsonWebKeyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\JsonWebKeyTests.cs,AesDefaultsKeyOps,The length of the statement  "            CollectionAssert.AreEqual(new[] { KeyOperation.Encrypt' KeyOperation.Decrypt' KeyOperation.WrapKey' KeyOperation.UnwrapKey }' jwk.KeyOps); " is 138.
Long Statement,Azure.Security.KeyVault.Keys.Tests,JsonWebKeyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\JsonWebKeyTests.cs,ToECDsaInvalidKey,The length of the statement  "            Assert.Throws<InvalidOperationException>(() => jwk.ToECDsa()' "Expected exception not thrown for data named '{0}'"' name); " is 122.
Long Statement,Azure.Security.KeyVault.Keys.Tests,JsonWebKeyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\JsonWebKeyTests.cs,RSADefaultsKeyOps,The length of the statement  "                CollectionAssert.AreEqual(new[] { KeyOperation.Encrypt' KeyOperation.Decrypt' KeyOperation.Sign' KeyOperation.Verify' KeyOperation.WrapKey' KeyOperation.UnwrapKey }' jwk.KeyOps); " is 178.
Long Statement,Azure.Security.KeyVault.Keys.Tests,JsonWebKeyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\JsonWebKeyTests.cs,ToRSAInvalidKey,The length of the statement  "            Assert.Throws<InvalidOperationException>(() => jwk.ToRSA()' "Expected exception not thrown for data named '{0}'"' name); " is 120.
Long Statement,Azure.Security.KeyVault.Keys.Tests,JsonWebKeyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\JsonWebKeyTests.cs,GetECDSaInvalidTestData,The length of the statement  "            byte[] x = { 0x34' 0x64' 0xc8' 0x7e' 0x68' 0xc5' 0x62' 0xa6' 0x09' 0xe4' 0x72' 0xd4' 0xd5' 0xa2' 0x75' 0xec' 0x7a' 0x9f' 0x12' 0x73' 0x4a' 0xe1' 0x00' 0x5c' 0x27' 0x40' 0x0d' 0x90' 0x61' 0x4b' 0xe8' 0x58 }; " is 206.
Long Statement,Azure.Security.KeyVault.Keys.Tests,JsonWebKeyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\JsonWebKeyTests.cs,GetECDSaInvalidTestData,The length of the statement  "            byte[] y = { 0xbe' 0x85' 0xa3' 0x9a' 0xc9' 0x8f' 0xa8' 0xf3' 0x18' 0xc8' 0xfc' 0x33' 0x74' 0xff' 0x75' 0x6b' 0x0d' 0xe3' 0xf9' 0x66' 0x52' 0xff' 0x8b' 0x40' 0x61' 0x24' 0xd5' 0x1e' 0x7c' 0xd2' 0x79' 0x14 }; " is 206.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeyResolverLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeyResolverLiveTests.cs,GetResolver,The length of the statement  "            return InstrumentClient(new KeyResolver(recording.GetCredential(new DefaultAzureCredential())' recording.InstrumentClientOptions(new CryptographyClientOptions()))); " is 164.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeyResolverLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeyResolverLiveTests.cs,GetSecretClient,The length of the statement  "            return InstrumentClient(new SecretClient(VaultUri' recording.GetCredential(new DefaultAzureCredential())' recording.InstrumentClientOptions(new SecretClientOptions()))); " is 169.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,CryptographicException,The length of the statement  "            StringAssert.StartsWith("System.Security.Cryptography.CryptographicException (0x80092006):"' e.GetProperty<string>("message")); " is 127.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,GetAesOperations,The length of the statement  "            yield return new TestCaseData("WrapKey"' new Func<CryptographyClient' string' Task<object>>(async (client' algorithm) => await client.WrapKeyAsync(algorithm' s_buffer))); " is 170.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,GetAesOperations,The length of the statement  "            yield return new TestCaseData("UnwrapKey"' new Func<CryptographyClient' string' Task<object>>(async (client' algorithm) => await client.UnwrapKeyAsync(algorithm' s_buffer))); " is 174.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,GetEcOperations,The length of the statement  "            yield return new TestCaseData("Sign"' null' new Func<CryptographyClient' string' Task<object>>(async (client' algorithm) => await client.SignAsync(algorithm' s_buffer))); " is 170.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,GetEcOperations,The length of the statement  "            yield return new TestCaseData("SignData"' null' new Func<CryptographyClient' string' Task<object>>(async (client' algorithm) => await client.SignDataAsync(algorithm' s_buffer))) " is 177.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,GetEcOperations,The length of the statement  "                yield return new TestCaseData("Verify"' "true"' new Func<CryptographyClient' string' Task<object>>(async (client' algorithm) => await client.VerifyAsync(algorithm' s_buffer' s_buffer))); " is 186.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,GetEcOperations,The length of the statement  "                yield return new TestCaseData("VerifyData"' "true"' new Func<CryptographyClient' string' Task<object>>(async (client' algorithm) => await client.VerifyDataAsync(algorithm' s_buffer' s_buffer))) " is 193.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,GetRsaOperations,The length of the statement  "            yield return new TestCaseData("Decrypt"' null' new Func<CryptographyClient' string' Task<object>>(async (client' algorithm) => await client.DecryptAsync(algorithm ?? EncryptionAlgorithm.RsaOaep' s_buffer))); " is 207.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,GetRsaOperations,The length of the statement  "            yield return new TestCaseData("Sign"' null' new Func<CryptographyClient' string' Task<object>>(async (client' algorithm) => await client.SignAsync(algorithm ?? SignatureAlgorithm.RS256' s_buffer))); " is 198.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,GetRsaOperations,The length of the statement  "            yield return new TestCaseData("SignData"' null' new Func<CryptographyClient' string' Task<object>>(async (client' algorithm) => await client.SignDataAsync(algorithm ?? SignatureAlgorithm.RS256' s_buffer))) " is 205.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,GetRsaOperations,The length of the statement  "            yield return new TestCaseData("UnwrapKey"' null' new Func<CryptographyClient' string' Task<object>>(async (client' algorithm) => await client.UnwrapKeyAsync(algorithm ?? KeyWrapAlgorithm.RsaOaep' s_buffer))); " is 208.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,GetRsaOperations,The length of the statement  "                yield return new TestCaseData("Encrypt"' null' new Func<CryptographyClient' string' Task<object>>(async (client' algorithm) => await client.EncryptAsync(algorithm ?? EncryptionAlgorithm.RsaOaep' s_buffer))); " is 207.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,GetRsaOperations,The length of the statement  "                yield return new TestCaseData("Verify"' "true"' new Func<CryptographyClient' string' Task<object>>(async (client' algorithm) => await client.VerifyAsync(algorithm ?? SignatureAlgorithm.RS256' s_buffer' s_buffer))); " is 214.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,GetRsaOperations,The length of the statement  "                yield return new TestCaseData("VerifyData"' "true"' new Func<CryptographyClient' string' Task<object>>(async (client' algorithm) => await client.VerifyDataAsync(algorithm ?? SignatureAlgorithm.RS256' s_buffer' s_buffer))) " is 221.
Long Statement,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,GetRsaOperations,The length of the statement  "                yield return new TestCaseData("WrapKey"' null' new Func<CryptographyClient' string' Task<object>>(async (client' algorithm) => await client.WrapKeyAsync(algorithm ?? KeyWrapAlgorithm.RsaOaep' s_buffer))); " is 204.
Long Statement,Azure.Security.KeyVault.Keys.Tests,LocalCryptographyProviderFactoryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\LocalCryptographyProviderFactoryTests.cs,Create,The length of the statement  "            Assert.IsInstanceOf(clientType' provider' "Key {0} of type {1} did not yield client type {2}"' jwk.Id' jwk.KeyType' clientType.Name); " is 133.
Long Statement,Azure.Security.KeyVault.Keys.Tests,RsaCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\RsaCryptographyProviderTests.cs,EncryptBeforeValidDate,The length of the statement  "            InvalidOperationException ex = Assert.Throws<InvalidOperationException>(() => provider.Encrypt(EncryptionAlgorithm.RsaOaep256' plaintext' default)); " is 148.
Long Statement,Azure.Security.KeyVault.Keys.Tests,RsaCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\RsaCryptographyProviderTests.cs,EncryptAfterValidDate,The length of the statement  "            InvalidOperationException ex = Assert.Throws<InvalidOperationException>(() => provider.Encrypt(EncryptionAlgorithm.RsaOaep256' plaintext' default)); " is 148.
Long Statement,Azure.Security.KeyVault.Keys.Tests,RsaCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\RsaCryptographyProviderTests.cs,SignBeforeValidDate,The length of the statement  "            byte[] digest = new byte[] { 0x9f' 0x86' 0xd0' 0x81' 0x88' 0x4c' 0x7d' 0x65' 0x9a' 0x2f' 0xea' 0xa0' 0xc5' 0x5a' 0xd0' 0x15' 0xa3' 0xbf' 0x4f' 0x1b' 0x2b' 0x0b' 0x82' 0x2c' 0xd1' 0x5d' 0x6c' 0x15' 0xb0' 0xf0' 0x0a' 0x08 }; " is 222.
Long Statement,Azure.Security.KeyVault.Keys.Tests,RsaCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\RsaCryptographyProviderTests.cs,SignBeforeValidDate,The length of the statement  "            InvalidOperationException ex = Assert.Throws<InvalidOperationException>(() => provider.Sign(SignatureAlgorithm.PS256' digest' default)); " is 136.
Long Statement,Azure.Security.KeyVault.Keys.Tests,RsaCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\RsaCryptographyProviderTests.cs,SignAfterValidDate,The length of the statement  "            byte[] digest = new byte[] { 0x9f' 0x86' 0xd0' 0x81' 0x88' 0x4c' 0x7d' 0x65' 0x9a' 0x2f' 0xea' 0xa0' 0xc5' 0x5a' 0xd0' 0x15' 0xa3' 0xbf' 0x4f' 0x1b' 0x2b' 0x0b' 0x82' 0x2c' 0xd1' 0x5d' 0x6c' 0x15' 0xb0' 0xf0' 0x0a' 0x08 }; " is 222.
Long Statement,Azure.Security.KeyVault.Keys.Tests,RsaCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\RsaCryptographyProviderTests.cs,SignAfterValidDate,The length of the statement  "            InvalidOperationException ex = Assert.Throws<InvalidOperationException>(() => provider.Sign(SignatureAlgorithm.PS256' digest' default)); " is 136.
Long Statement,Azure.Security.KeyVault.Keys.Tests,RsaCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\RsaCryptographyProviderTests.cs,WrapKeyBeforeValidDate,The length of the statement  "            byte[] ek = { 0x64' 0xE8' 0xC3' 0xF9' 0xCE' 0x0F' 0x5B' 0xA2' 0x63' 0xE9' 0x77' 0x79' 0x05' 0x81' 0x8A' 0x2A' 0x93' 0xC8' 0x19' 0x1E' 0x7D' 0x6E' 0x8A' 0xE7 }; " is 159.
Long Statement,Azure.Security.KeyVault.Keys.Tests,RsaCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\RsaCryptographyProviderTests.cs,WrapKeyBeforeValidDate,The length of the statement  "            InvalidOperationException ex = Assert.Throws<InvalidOperationException>(() => provider.WrapKey(KeyWrapAlgorithm.RsaOaep256' ek' default)); " is 138.
Long Statement,Azure.Security.KeyVault.Keys.Tests,RsaCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\RsaCryptographyProviderTests.cs,WrapKeyAfterValidDate,The length of the statement  "            byte[] ek = { 0x64' 0xE8' 0xC3' 0xF9' 0xCE' 0x0F' 0x5B' 0xA2' 0x63' 0xE9' 0x77' 0x79' 0x05' 0x81' 0x8A' 0x2A' 0x93' 0xC8' 0x19' 0x1E' 0x7D' 0x6E' 0x8A' 0xE7 }; " is 159.
Long Statement,Azure.Security.KeyVault.Keys.Tests,RsaCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\RsaCryptographyProviderTests.cs,WrapKeyAfterValidDate,The length of the statement  "            InvalidOperationException ex = Assert.Throws<InvalidOperationException>(() => provider.WrapKey(KeyWrapAlgorithm.RsaOaep256' ek' default)); " is 138.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample4_EncryptDecypt,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample4_EncryptDecrypt.cs,EncryptDecryptSync,The length of the statement  "            Debug.WriteLine($"Encrypted data using the algorithm {encryptResult.Algorithm}' with key {encryptResult.KeyId}. The resulting encrypted data is {Convert.ToBase64String(encryptResult.Ciphertext)}"); " is 197.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample4_EncryptDecypt,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample4_EncryptDecrypt.cs,EncryptDecryptSync,The length of the statement  "            Debug.WriteLine($"Decrypted data using the algorithm {decryptResult.Algorithm}' with key {decryptResult.KeyId}. The resulting decrypted data is {Encoding.UTF8.GetString(decryptResult.Plaintext)}"); " is 197.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample4_EncryptDecypt,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample4_EncryptDecrypt.cs,EncryptDecryptAsync,The length of the statement  "            // Then we create the CryptographyClient which can perform cryptographic operations with the key we just created using the same credential created above. " is 153.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample4_EncryptDecypt,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample4_EncryptDecrypt.cs,EncryptDecryptAsync,The length of the statement  "            Debug.WriteLine($"Encrypted data using the algorithm {encryptResult.Algorithm}' with key {encryptResult.KeyId}. The resulting encrypted data is {Convert.ToBase64String(encryptResult.Ciphertext)}"); " is 197.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample4_EncryptDecypt,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample4_EncryptDecrypt.cs,EncryptDecryptAsync,The length of the statement  "            Debug.WriteLine($"Decrypted data using the algorithm {decryptResult.Algorithm}' with key {decryptResult.KeyId}. The resulting decrypted data is {Encoding.UTF8.GetString(decryptResult.Plaintext)}"); " is 197.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifySync,The length of the statement  "            Debug.WriteLine($"Signed digest using the algorithm {rsaSignResult.Algorithm}' with key {rsaSignResult.KeyId}. The resulting signature is {Convert.ToBase64String(rsaSignResult.Signature)}"); " is 190.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifySync,The length of the statement  "            Debug.WriteLine($"Signed digest using the algorithm {ecSignResult.Algorithm}' with key {ecSignResult.KeyId}. The resulting signature is {Convert.ToBase64String(ecSignResult.Signature)}"); " is 187.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifySync,The length of the statement  "            Debug.WriteLine($"Verified the signature using the algorithm {rsaVerifyResult.Algorithm}' with key {rsaVerifyResult.KeyId}. Signature is valid: {rsaVerifyResult.IsValid}"); " is 172.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifySync,The length of the statement  "            Debug.WriteLine($"Verified the signature using the algorithm {ecVerifyResult.Algorithm}' with key {ecVerifyResult.KeyId}. Signature is valid: {ecVerifyResult.IsValid}"); " is 169.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifySync,The length of the statement  "            Debug.WriteLine($"Signed data using the algorithm {rsaSignDataResult.Algorithm}' with key {rsaSignDataResult.KeyId}. The resulting signature is {Convert.ToBase64String(rsaSignDataResult.Signature)}"); " is 200.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifySync,The length of the statement  "            Debug.WriteLine($"Signed data using the algorithm {ecSignDataResult.Algorithm}' with key {ecSignDataResult.KeyId}. The resulting signature is {Convert.ToBase64String(ecSignDataResult.Signature)}"); " is 197.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifySync,The length of the statement  "            VerifyResult rsaVerifyDataResult = rsaCryptoClient.VerifyData(SignatureAlgorithm.RS256' data' rsaSignDataResult.Signature); " is 123.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifySync,The length of the statement  "            Debug.WriteLine($"Verified the signature using the algorithm {rsaVerifyDataResult.Algorithm}' with key {rsaVerifyDataResult.KeyId}. Signature is valid: {rsaVerifyDataResult.IsValid}"); " is 184.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifySync,The length of the statement  "            VerifyResult ecVerifyDataResult = ecCryptoClient.VerifyData(SignatureAlgorithm.ES256K' data' ecSignDataResult.Signature); " is 121.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifySync,The length of the statement  "            Debug.WriteLine($"Verified the signature using the algorithm {ecVerifyDataResult.Algorithm}' with key {ecVerifyDataResult.KeyId}. Signature is valid: {ecVerifyDataResult.IsValid}"); " is 181.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            // Let's create the CryptographyClient which can perform cryptographic operations with the keys we just created using the same credential created above.. " is 153.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            // Next we'll sign some arbitrary data and verify the signatures using the CryptographyClient with both the EC and RSA keys we created. " is 135.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            // The SignAsync and VerifyAsync methods expect a precalculated digest' and the digest needs to be calculated using the hash algorithm which matches the " is 152.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            // signature algorithm being used. SHA256 is the hash algorithm used for both RS256 and ES256K which are the algorithms we'll be using in this sample " is 149.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            // Get the signature for the computed digest with both keys. Note that the signature algorithm specified must be a valid algorithm for the key type' " is 148.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            Debug.WriteLine($"Signed digest using the algorithm {rsaSignResult.Algorithm}' with key {rsaSignResult.KeyId}. The resulting signature is {Convert.ToBase64String(rsaSignResult.Signature)}"); " is 190.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            Debug.WriteLine($"Signed digest using the algorithm {ecSignResult.Algorithm}' with key {ecSignResult.KeyId}. The resulting signature is {Convert.ToBase64String(ecSignResult.Signature)}"); " is 187.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            VerifyResult rsaVerifyResult = await rsaCryptoClient.VerifyAsync(SignatureAlgorithm.RS256' digest' rsaSignResult.Signature); " is 124.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            Debug.WriteLine($"Verified the signature using the algorithm {rsaVerifyResult.Algorithm}' with key {rsaVerifyResult.KeyId}. Signature is valid: {rsaVerifyResult.IsValid}"); " is 172.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            VerifyResult ecVerifyResult = await ecCryptoClient.VerifyAsync(SignatureAlgorithm.ES256K' digest' ecSignResult.Signature); " is 122.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            Debug.WriteLine($"Verified the signature using the algorithm {ecVerifyResult.Algorithm}' with key {ecVerifyResult.KeyId}. Signature is valid: {ecVerifyResult.IsValid}"); " is 169.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            // The SignDataAsync and VerifyDataAsync methods take the raw data which is to be signed.  The calculate the digest for the user so there is no need to compute the digest " is 170.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            // Get the signature for the data with both keys. Note that the signature algorithm specified must be a valid algorithm for the key type' " is 137.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            Debug.WriteLine($"Signed data using the algorithm {rsaSignDataResult.Algorithm}' with key {rsaSignDataResult.KeyId}. The resulting signature is {Convert.ToBase64String(rsaSignDataResult.Signature)}"); " is 200.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            Debug.WriteLine($"Signed data using the algorithm {ecSignDataResult.Algorithm}' with key {ecSignDataResult.KeyId}. The resulting signature is {Convert.ToBase64String(ecSignDataResult.Signature)}"); " is 197.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            VerifyResult rsaVerifyDataResult = await rsaCryptoClient.VerifyDataAsync(SignatureAlgorithm.RS256' data' rsaSignDataResult.Signature); " is 134.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            Debug.WriteLine($"Verified the signature using the algorithm {rsaVerifyDataResult.Algorithm}' with key {rsaVerifyDataResult.KeyId}. Signature is valid: {rsaVerifyDataResult.IsValid}"); " is 184.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            VerifyResult ecVerifyDataResult = await ecCryptoClient.VerifyDataAsync(SignatureAlgorithm.ES256K' data' ecSignDataResult.Signature); " is 132.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The length of the statement  "            Debug.WriteLine($"Verified the signature using the algorithm {ecVerifyDataResult.Algorithm}' with key {ecVerifyDataResult.KeyId}. Signature is valid: {ecVerifyDataResult.IsValid}"); " is 181.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample6_WrapUnwrap,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample6_WrapUnwrap.cs,WrapUnwrapSync,The length of the statement  "            Debug.WriteLine($"Encrypted data using the algorithm {wrapResult.Algorithm}' with key {wrapResult.KeyId}. The resulting encrypted data is {Convert.ToBase64String(wrapResult.EncryptedKey)}"); " is 190.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample6_WrapUnwrap,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample6_WrapUnwrap.cs,WrapUnwrapSync,The length of the statement  "            Debug.WriteLine($"Decrypted data using the algorithm {unwrapResult.Algorithm}' with key {unwrapResult.KeyId}. The resulting decrypted data is {Encoding.UTF8.GetString(unwrapResult.Key)}"); " is 188.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample6_WrapUnwrap,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample6_WrapUnwrap.cs,WrapUnwrapAsync,The length of the statement  "            // Let's create the CryptographyClient which can perform cryptographic operations with the key we just created using the same credential created above. " is 151.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample6_WrapUnwrap,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample6_WrapUnwrap.cs,WrapUnwrapAsync,The length of the statement  "            Debug.WriteLine($"Encrypted data using the algorithm {wrapResult.Algorithm}' with key {wrapResult.KeyId}. The resulting encrypted data is {Convert.ToBase64String(wrapResult.EncryptedKey)}"); " is 190.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Sample6_WrapUnwrap,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample6_WrapUnwrap.cs,WrapUnwrapAsync,The length of the statement  "            Debug.WriteLine($"Decrypted data using the algorithm {unwrapResult.Algorithm}' with key {unwrapResult.KeyId}. The resulting decrypted data is {Encoding.UTF8.GetString(unwrapResult.Key)}"); " is 188.
Long Statement,Azure.Security.KeyVault.Keys.Samples,Snippets,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\SampleSnippets.cs,CreateClient,The length of the statement  "            // Create a new certificate client using the default credential from Azure.Identity using environment variables previously set' " is 127.
Long Statement,Azure.Core.Testing,AsyncValidatingStream,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\AsyncValidatingStream.cs,Validate,The length of the statement  "                throw new InvalidOperationException("All stream calls were expected to be " + (_isAsync ? "async" : "sync") + " but were " + (isAsync ? "async" : "sync")); " is 155.
Long Statement,Azure.Core.Testing,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientTestBase.cs,InstrumentClient,The length of the statement  "                        ClientValidation<TClient>.ValidationException = new InvalidOperationException($"Client type contains public non-virtual async method {methodInfo.Name}"); " is 153.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                bool strict = !invocation.Method.GetCustomAttributes(true).Any(a => a.GetType().FullName == "Azure.Core.ForwardsClientCallsAttribute"); " is 135.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                        MethodInfo getResultMethod = getAwaiterMethod.ReturnType.GetMethod("GetResult"' BindingFlags.Instance | BindingFlags.Public); " is 125.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                            (string Key' object Value' DiagnosticListener Listener) e = diagnosticListener.Events.FirstOrDefault(e => e.Key == expectedEvent); " is 130.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                                throw new InvalidOperationException($"Expected diagnostic event not fired {expectedEvent} {Environment.NewLine}    fired events {string.Join("' "' diagnosticListener.Events)} {Environment.NewLine}    You may have forgotten to set your operationId to {expectedEvent} in {methodName} or applied the Azure.Core.ForwardsClientCallsAttribute to {methodName}."); " is 356.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                                throw new InvalidOperationException($"{e.Key} event was written into wrong DiagnosticSource {e.Listener.Name}' expected: {ns}"); " is 128.
Long Statement,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The length of the statement  "                    if (property.PropertyType == type && property.CanRead && !property.CanWrite && Includes(property.Name) && !Excludes(property.Name)) " is 131.
Long Statement,Azure.Core.Testing,RecordMatcher,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordMatcher.cs,IsEquivalentResponse,The length of the statement  "            IEnumerable<KeyValuePair<string' string[]>> entryHeaders = entry.ResponseHeaders.Where(h => !VolatileResponseHeaders.Contains(h.Key)); " is 134.
Long Statement,Azure.Core.Testing,RecordMatcher,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordMatcher.cs,IsEquivalentResponse,The length of the statement  "            IEnumerable<KeyValuePair<string' string[]>> otherEntryHeaders = otherEntry.ResponseHeaders.Where(h => !VolatileResponseHeaders.Contains(h.Key)); " is 144.
Long Statement,Azure.Core.Testing,RecordMatcher,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordMatcher.cs,CompareHeaderDictionaries,The length of the statement  "                        descriptionBuilder?.AppendLine($"    <{header.Key}> values differ' request <{JoinHeaderValues(header.Value)}>' record <{JoinHeaderValues(values)}>"); " is 149.
Long Statement,Azure.Core.Testing,RecordTransport,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordTransport.cs,CreateEntry,The length of the statement  "            if (!request.Headers.TryGetValue("Content-Length"' out _) && request.Content != null && request.Content.TryComputeLength(out long computedLength)) " is 146.
Long Statement,Azure.Core.Testing,UseSyncMethodsInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\UseSyncMethodsInterceptor.cs,Intercept,The length of the statement  "                throw new InvalidOperationException($"Unable to find a method with name {nonAsyncMethodName} and {string.Join<Type>("'"' parameterTypes)} parameters. " " is 151.
Long Statement,Azure.Core.Tests,ClientDiagnosticListener,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientDiagnosticListener.cs,AssertScopeStarted,The length of the statement  "                                throw new InvalidOperationException($"Attribute {expectedAttribute} not found' existing attributes: {string.Join("'"' producedDiagnosticScope.Activity.Tags)}"); " is 160.
Complex Conditional,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The conditional expression  "property.PropertyType == type && property.CanRead && !property.CanWrite && Includes(property.Name) && !Excludes(property.Name)"  is complex.
Complex Conditional,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The conditional expression  "field.FieldType == type && (field.IsInitOnly || field.IsLiteral) && Includes(field.Name) && !Excludes(field.Name)"  is complex.
Complex Conditional,Azure.Core.Pipeline,TestFrameworkContentTypeUtilities,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\ContentTypeUtilities.cs,TryGetTextEncoding,The conditional expression  "contentType.StartsWith(textContentTypePrefix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(jsonSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(xmlSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(urlEncodedSuffix' StringComparison.OrdinalIgnoreCase)"  is complex.
Virtual Method Call from Constructor,Azure.Security.KeyVault.Keys.Tests,CryptographyClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientTests.cs,CryptographyClientTests,The constructor "CryptographyClientTests" calls a virtual method "InstrumentClient".
Virtual Method Call from Constructor,Azure.Security.KeyVault.Keys.Tests,KeyClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeyClientTests.cs,KeyClientTests,The constructor "KeyClientTests" calls a virtual method "InstrumentClient".
Empty Catch Block,Azure.Security.KeyVault.Keys.Tests,KeysTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysTestBase.cs,CleanupKey,The method has an empty catch block.
Empty Catch Block,Azure.Security.KeyVault.Keys.Tests,KeysTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysTestBase.cs,CleanupKey,The method has an empty catch block.
Empty Catch Block,Azure.Security.KeyVault.Keys.Tests,KeysTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysTestBase.cs,CleanupKey,The method has an empty catch block.
Empty Catch Block,Azure.Security.KeyVault.Keys.Samples,Snippets,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\SampleSnippets.cs,DeleteAndPurgeKey,The method has an empty catch block.
Empty Catch Block,Azure.Core.Testing,RecordEntry,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordEntry.cs,SerializeBody,The method has an empty catch block.
Empty Catch Block,Azure.Core.Testing,TestRecording,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRecording.cs,TestRecording,The method has an empty catch block.
Magic Number,Azure.Security.KeyVault.Keys.Tests,CryptographyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientLiveTests.cs,EncryptDecryptRoundTrip,The following statement contains a magic number: byte[] data = new byte[32];
Magic Number,Azure.Security.KeyVault.Keys.Tests,CryptographyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientLiveTests.cs,WrapUnwrapRoundTrip,The following statement contains a magic number: byte[] data = new byte[32];
Magic Number,Azure.Security.KeyVault.Keys.Tests,CryptographyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientLiveTests.cs,SignVerifyDataRoundTrip,The following statement contains a magic number: byte[] data = new byte[32];
Magic Number,Azure.Security.KeyVault.Keys.Tests,CryptographyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientLiveTests.cs,SignVerifyDataStreamRoundTrip,The following statement contains a magic number: byte[] data = new byte[8000];
Magic Number,Azure.Security.KeyVault.Keys.Tests,CryptographyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientLiveTests.cs,LocalSignVerifyRoundTrip,The following statement contains a magic number: byte[] data = new byte[32];
Magic Number,Azure.Security.KeyVault.Keys.Tests,CryptographyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientLiveTests.cs,LocalSignVerifyRoundTripOnFramework,The following statement contains a magic number: byte[] data = new byte[32];
Magic Number,Azure.Security.KeyVault.Keys.Tests,CryptographyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientLiveTests.cs,SignLocalVerifyRoundTrip,The following statement contains a magic number: byte[] data = new byte[32];
Magic Number,Azure.Security.KeyVault.Keys.Tests,CryptographyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\CryptographyClientLiveTests.cs,SignLocalVerifyRoundTripFramework,The following statement contains a magic number: byte[] data = new byte[32];
Magic Number,Azure.Security.KeyVault.Keys.Tests,EcCryptographyProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\EcCryptographyProviderTests.cs,Sign,The following statement contains a magic number: Assert.AreEqual(64' result.Signature.Length);
Magic Number,Azure.Security.KeyVault.Keys.Tests,JsonWebKeyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\JsonWebKeyTests.cs,ToRSA,The following statement contains a magic number: int bitLength = jwk.N.Length * 8;
Magic Number,Azure.Security.KeyVault.Keys.Tests,KeyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeyClientLiveTests.cs,CreateKeyWithOptions,The following statement contains a magic number: var exp = new DateTimeOffset(new DateTime(637027248120000000' DateTimeKind.Utc));
Magic Number,Azure.Security.KeyVault.Keys.Tests,KeyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeyClientLiveTests.cs,CreateKeyWithOptions,The following statement contains a magic number: DateTimeOffset nbf = exp.AddDays(-30);
Magic Number,Azure.Security.KeyVault.Keys.Tests,KeyClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeyClientLiveTests.cs,CreateRsaWithSizeKey,The following statement contains a magic number: var rsaSizeKey = new CreateRsaKeyOptions(name: Recording.GenerateId()' hardwareProtected: false)              {                  KeySize = 2048'              };
Magic Number,Azure.Security.KeyVault.Keys.Tests,KeyResolverLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeyResolverLiveTests.cs,ResolveKeyId,The following statement contains a magic number: byte[] toWrap = new byte[32];
Magic Number,Azure.Security.KeyVault.Keys.Tests,KeyResolverLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeyResolverLiveTests.cs,ResolveSecretId,The following statement contains a magic number: byte[] key = new byte[32];
Magic Number,Azure.Security.KeyVault.Keys.Tests,KeyResolverLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeyResolverLiveTests.cs,ResolveSecretId,The following statement contains a magic number: byte[] toWrap = new byte[32];
Magic Number,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,AlgorithmNotSupportedAes,The following statement contains a magic number: MockResponse response = new MockResponse(200);
Magic Number,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,AlgorithmNotSupportedEc,The following statement contains a magic number: MockResponse response = new MockResponse(200);
Magic Number,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,AlgorithmNotSupportedRsa,The following statement contains a magic number: MockResponse response = new MockResponse(200);
Magic Number,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,KeyTypeNotSupported,The following statement contains a magic number: MockResponse keyResponse = new MockResponse(200);
Magic Number,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,KeyTypeNotSupported,The following statement contains a magic number: MockResponse resultResponse = new MockResponse(200);
Magic Number,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,PrivateKeyRequiredEc,The following statement contains a magic number: MockResponse response = new MockResponse(200);
Magic Number,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,PrivateKeyRequiredRsa,The following statement contains a magic number: MockResponse response = new MockResponse(200);
Magic Number,Azure.Security.KeyVault.Keys.Tests,KeysEventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysEventSourceTests.cs,CryptographicException,The following statement contains a magic number: MockResponse response = new MockResponse(200);
Magic Number,Azure.Security.KeyVault.Keys.Tests,KeysTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\KeysTestBase.cs,WaitForPurgedKey,The following statement contains a magic number: return TestRetryHelper.RetryAsync(async () => {                      try                      {                          await Client.GetDeletedKeyAsync(name).ConfigureAwait(false);                          throw new InvalidOperationException($"Key {name} still exists");                      }                      catch (RequestFailedException ex) when (ex.Status == 404)                      {                          return (Response)null;                      }                  });
Magic Number,Azure.Security.KeyVault.Keys.Samples,HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample1_HelloWorld.cs,HelloWorldSync,The following statement contains a magic number: var rsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 2048'                  ExpiresOn = DateTimeOffset.Now.AddYears(1)              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample1_HelloWorld.cs,HelloWorldSync,The following statement contains a magic number: var newRsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 4096'                  ExpiresOn = DateTimeOffset.Now.AddYears(1)              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample1_HelloWorld.cs,HelloWorldSync,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Azure.Security.KeyVault.Keys.Samples,HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample1_HelloWorld.cs,HelloWorldAsync,The following statement contains a magic number: var rsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 2048'                  ExpiresOn = DateTimeOffset.Now.AddYears(1)              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample1_HelloWorld.cs,HelloWorldAsync,The following statement contains a magic number: var newRsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 4096'                  ExpiresOn = DateTimeOffset.Now.AddYears(1)              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,BackupAndRestore,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample2_BackupAndRestore.cs,BackupAndRestoreSync,The following statement contains a magic number: var rsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 2048'                  ExpiresOn = DateTimeOffset.Now.AddYears(1)              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,BackupAndRestore,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample2_BackupAndRestore.cs,BackupAndRestoreSync,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Azure.Security.KeyVault.Keys.Samples,BackupAndRestore,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample2_BackupAndRestore.cs,BackupAndRestoreSync,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Azure.Security.KeyVault.Keys.Samples,BackupAndRestore,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample2_BackupAndRestore.cs,BackupAndRestoreAsync,The following statement contains a magic number: var rsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 2048'                  ExpiresOn = DateTimeOffset.Now.AddYears(1)              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,GetKeys,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample3_GetKeys.cs,GetKeysSync,The following statement contains a magic number: var rsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 2048'                  ExpiresOn = DateTimeOffset.Now.AddYears(1)              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,GetKeys,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample3_GetKeys.cs,GetKeysSync,The following statement contains a magic number: var newRsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 4096'                  ExpiresOn = DateTimeOffset.Now.AddYears(1)              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,GetKeys,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample3_GetKeys.cs,GetKeysSync,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Azure.Security.KeyVault.Keys.Samples,GetKeys,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample3_GetKeys.cs,GetKeysAsync,The following statement contains a magic number: var rsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 2048'                  ExpiresOn = DateTimeOffset.Now.AddYears(1)              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,GetKeys,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample3_GetKeys.cs,GetKeysAsync,The following statement contains a magic number: var newRsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 4096'                  ExpiresOn = DateTimeOffset.Now.AddYears(1)              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,Sample4_EncryptDecypt,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample4_EncryptDecrypt.cs,EncryptDecryptSync,The following statement contains a magic number: var rsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 2048'              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,Sample4_EncryptDecypt,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample4_EncryptDecrypt.cs,EncryptDecryptSync,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Azure.Security.KeyVault.Keys.Samples,Sample4_EncryptDecypt,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample4_EncryptDecrypt.cs,EncryptDecryptAsync,The following statement contains a magic number: var rsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 2048'              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifySync,The following statement contains a magic number: var rsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 2048'              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifySync,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Azure.Security.KeyVault.Keys.Samples,Sample5_SignVerify,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample5_SignVerify.cs,SignVerifyAsync,The following statement contains a magic number: var rsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 2048'              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,Sample6_WrapUnwrap,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample6_WrapUnwrap.cs,WrapUnwrapSync,The following statement contains a magic number: var rsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 2048'              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,Sample6_WrapUnwrap,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample6_WrapUnwrap.cs,WrapUnwrapSync,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Azure.Security.KeyVault.Keys.Samples,Sample6_WrapUnwrap,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\Sample6_WrapUnwrap.cs,WrapUnwrapAsync,The following statement contains a magic number: var rsaKey = new CreateRsaKeyOptions(rsaKeyName' hardwareProtected: false)              {                  KeySize = 2048'              };
Magic Number,Azure.Security.KeyVault.Keys.Samples,Snippets,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\tests\samples\SampleSnippets.cs,DeleteAndPurge,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The following statement contains a magic number: var expectedEventPrefix = declaringType.FullName + "." + methodName.Substring(0' methodName.Length - 5);
Magic Number,Azure.Core.Testing,RandomExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RandomExtensions.cs,NewGuid,The following statement contains a magic number: var bytes = new byte[16];
Magic Number,Azure.Core.Testing,TestRetryHelper,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRetryHelper.cs,RetryAsync,The following statement contains a magic number: delay = TimeSpan.FromSeconds(5);
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,Combine,The following statement contains a magic number: hash += 4;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,Combine,The following statement contains a magic number: hash += 8;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,Combine,The following statement contains a magic number: hash += 12;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,Combine,The following statement contains a magic number: hash += 16;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,Combine,The following statement contains a magic number: hash += 20;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,Combine,The following statement contains a magic number: hash += 24;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,Combine,The following statement contains a magic number: hash += 28;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,Combine,The following statement contains a magic number: hash += 32;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,Round,The following statement contains a magic number: return RotateLeft(hash + input * Prime2' 13) * Prime1;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,QueueRound,The following statement contains a magic number: return RotateLeft(hash + queuedValue * Prime3' 17) * Prime4;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,MixState,The following statement contains a magic number: return RotateLeft(v1' 1) + RotateLeft(v2' 7) + RotateLeft(v3' 12) + RotateLeft(v4' 18);
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,MixState,The following statement contains a magic number: return RotateLeft(v1' 1) + RotateLeft(v2' 7) + RotateLeft(v3' 12) + RotateLeft(v4' 18);
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,MixState,The following statement contains a magic number: return RotateLeft(v1' 1) + RotateLeft(v2' 7) + RotateLeft(v3' 12) + RotateLeft(v4' 18);
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,MixFinal,The following statement contains a magic number: hash ^= hash >> 15;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,MixFinal,The following statement contains a magic number: hash ^= hash >> 13;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,MixFinal,The following statement contains a magic number: hash ^= hash >> 16;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,Add,The following statement contains a magic number: uint position = previousLength % 4;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,ToHashCode,The following statement contains a magic number: uint position = length % 4;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,ToHashCode,The following statement contains a magic number: uint hash = length < 4 ? MixEmptyState() : MixState(_v1' _v2' _v3' _v4);
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,ToHashCode,The following statement contains a magic number: hash += length * 4;
Magic Number,Azure.Core,HashCodeBuilder,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\HashCodeBuilder.cs,ToHashCode,The following statement contains a magic number: position > 2
Missing Default,Azure.Core.Testing,TestRecording,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRecording.cs,TestRecording,The following switch statement is missing a default case: switch (Mode)              {                  case RecordedTestMode.Record:                      _session = new RecordSession();                      if (File.Exists(_sessionFile))                      {                          try                          {                              _previousSession = Load();                          }                          catch (Exception)                          {                              // ignore                          }                      }                      break;                  case RecordedTestMode.Playback:                      _session = Load();                      break;              }
