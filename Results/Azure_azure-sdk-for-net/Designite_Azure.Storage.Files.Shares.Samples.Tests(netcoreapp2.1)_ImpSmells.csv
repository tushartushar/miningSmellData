Implementation smell,Namespace,Class,File,Method,Description
Long Method,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,ParseCore,The method has 123 lines of code.
Complex Method,Azure.Core.Testing,RecordEntry,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordEntry.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Azure.Core.Tests,ClientDiagnosticListener,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientDiagnosticListener.cs,OnNext,Cyclomatic complexity of the method is 9
Complex Method,Azure.Storage.Test.Shared,StorageRecordedTestSanitizer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageRecordedTestSanitizer.cs,SanitizeTextBody,Cyclomatic complexity of the method is 10
Complex Method,Azure.Storage,TestExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExtensions.cs,ToString,Cyclomatic complexity of the method is 14
Long Parameter List,Azure.Core.Testing,SyncAsyncPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\SyncAsyncPolicyTestBase.cs,SendRequestAsync,The method has 5 parameters. Parameters: transport' requestAction' policy' responseClassifier' bufferResponse
Long Parameter List,Azure.Core.Testing,SyncAsyncPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\SyncAsyncPolicyTestBase.cs,SendGetRequest,The method has 5 parameters. Parameters: transport' policy' responseClassifier' bufferResponse' uri
Long Parameter List,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,StorageConnectionString,The method has 5 parameters. Parameters: storageCredentials' blobEndpoint' queueEndpoint' tableEndpoint' fileEndpoint
Long Parameter List,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,StorageConnectionString,The method has 5 parameters. Parameters: storageCredentials' blobStorageUri' queueStorageUri' tableStorageUri' fileStorageUri
Long Parameter List,Azure.Storage,StorageExceptionExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageExceptionExtensions.cs,CreateException,The method has 5 parameters. Parameters: response' message' innerException' errorCode' additionalInfo
Long Identifier,Azure.Core.Testing,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientTestBase.cs,,The length of the parameter s_diagnosticScopeValidatingInterceptor is 38.
Long Identifier,Azure.Storage,ConnectionStrings,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\Constants.cs,,The length of the parameter DefaultEndpointsProtocolSetting is 31.
Long Identifier,Azure.Storage,ConnectionStrings,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\Constants.cs,,The length of the parameter SecondaryLocationAccountSuffix is 30.
Long Identifier,Azure.Storage,Append,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\Constants.cs,,The length of the parameter CreateIfNotExistsOperationName is 30.
Long Identifier,Azure.Storage,Block,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\Constants.cs,,The length of the parameter DefaultConcurrentTransfersCount is 31.
Long Identifier,Azure.Storage,Block,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\Constants.cs,,The length of the parameter StageBlockFromUriOperationName is 30.
Long Identifier,Azure.Storage,Container,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\Constants.cs,,The length of the parameter CreateIfNotExistsOperationName is 30.
Long Identifier,Azure.Storage,Page,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\Constants.cs,,The length of the parameter CreateIfNotExistsOperationName is 30.
Long Identifier,Azure.Storage,Page,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\Constants.cs,,The length of the parameter GetPageRangesDiffOperationName is 30.
Long Identifier,Azure.Storage,Page,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\Constants.cs,,The length of the parameter UpdateSequenceNumberOperationName is 33.
Long Identifier,Azure.Storage,Page,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\Constants.cs,,The length of the parameter StartCopyIncrementalOperationName is 33.
Long Identifier,Azure.Storage,Page,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\Constants.cs,,The length of the parameter UploadPagesFromUriOperationName is 31.
Long Identifier,Azure.Storage,Service,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\Constants.cs,,The length of the parameter GetUserDelegationKeyOperationName is 33.
Long Identifier,Azure.Storage,File,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\Constants.cs,,The length of the parameter ForceCloseAllHandlesOperationName is 33.
Long Identifier,Azure.Storage,Directory,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\Constants.cs,,The length of the parameter ListFilesAndDirectoriesSegmentOperationName is 43.
Long Identifier,Azure.Storage,Directory,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\Constants.cs,,The length of the parameter ForceCloseAllHandlesOperationName is 33.
Long Identifier,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,,The length of the parameter s_useDevelopmentStorageSetting is 30.
Long Identifier,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,,The length of the parameter s_developmentStorageProxyUriSetting is 35.
Long Identifier,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,,The length of the parameter s_defaultEndpointsProtocolSetting is 33.
Long Identifier,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,,The length of the parameter s_blobSecondaryEndpointSetting is 30.
Long Identifier,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,,The length of the parameter s_queueSecondaryEndpointSetting is 31.
Long Identifier,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,,The length of the parameter s_tableSecondaryEndpointSetting is 31.
Long Identifier,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,,The length of the parameter s_fileSecondaryEndpointSetting is 30.
Long Identifier,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,,The length of the parameter s_sharedAccessSignatureSetting is 30.
Long Identifier,Azure.Storage.Test,TestConfigurations,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestConfigurations.cs,,The length of the parameter DefaultTestConfigPathEnvironmentVariable is 40.
Long Identifier,Azure.Storage.Test,TestExceptionPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExceptionPolicy.cs,TestExceptionPolicy,The length of the parameter numberOfReadFailuresToSimulate is 30.
Long Statement,Azure.Core.Testing,AsyncValidatingStream,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\AsyncValidatingStream.cs,Validate,The length of the statement  "                throw new InvalidOperationException("All stream calls were expected to be " + (_isAsync ? "async" : "sync") + " but were " + (isAsync ? "async" : "sync")); " is 155.
Long Statement,Azure.Core.Testing,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientTestBase.cs,InstrumentClient,The length of the statement  "                        ClientValidation<TClient>.ValidationException = new InvalidOperationException($"Client type contains public non-virtual async method {methodInfo.Name}"); " is 153.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                bool strict = !invocation.Method.GetCustomAttributes(true).Any(a => a.GetType().FullName == "Azure.Core.ForwardsClientCallsAttribute"); " is 135.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                        MethodInfo getResultMethod = getAwaiterMethod.ReturnType.GetMethod("GetResult"' BindingFlags.Instance | BindingFlags.Public); " is 125.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                            (string Key' object Value' DiagnosticListener Listener) e = diagnosticListener.Events.FirstOrDefault(e => e.Key == expectedEvent); " is 130.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                                throw new InvalidOperationException($"Expected diagnostic event not fired {expectedEvent} {Environment.NewLine}    fired events {string.Join("' "' diagnosticListener.Events)} {Environment.NewLine}    You may have forgotten to set your operationId to {expectedEvent} in {methodName} or applied the Azure.Core.ForwardsClientCallsAttribute to {methodName}."); " is 356.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                                throw new InvalidOperationException($"{e.Key} event was written into wrong DiagnosticSource {e.Listener.Name}' expected: {ns}"); " is 128.
Long Statement,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The length of the statement  "                    if (property.PropertyType == type && property.CanRead && !property.CanWrite && Includes(property.Name) && !Excludes(property.Name)) " is 131.
Long Statement,Azure.Core.Testing,RecordMatcher,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordMatcher.cs,IsEquivalentResponse,The length of the statement  "            IEnumerable<KeyValuePair<string' string[]>> entryHeaders = entry.ResponseHeaders.Where(h => !VolatileResponseHeaders.Contains(h.Key)); " is 134.
Long Statement,Azure.Core.Testing,RecordMatcher,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordMatcher.cs,IsEquivalentResponse,The length of the statement  "            IEnumerable<KeyValuePair<string' string[]>> otherEntryHeaders = otherEntry.ResponseHeaders.Where(h => !VolatileResponseHeaders.Contains(h.Key)); " is 144.
Long Statement,Azure.Core.Testing,RecordMatcher,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordMatcher.cs,CompareHeaderDictionaries,The length of the statement  "                        descriptionBuilder?.AppendLine($"    <{header.Key}> values differ' request <{JoinHeaderValues(header.Value)}>' record <{JoinHeaderValues(values)}>"); " is 149.
Long Statement,Azure.Core.Testing,RecordTransport,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordTransport.cs,CreateEntry,The length of the statement  "            if (!request.Headers.TryGetValue("Content-Length"' out _) && request.Content != null && request.Content.TryComputeLength(out long computedLength)) " is 146.
Long Statement,Azure.Core.Testing,UseSyncMethodsInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\UseSyncMethodsInterceptor.cs,Intercept,The length of the statement  "                throw new InvalidOperationException($"Unable to find a method with name {nonAsyncMethodName} and {string.Join<Type>("'"' parameterTypes)} parameters. " " is 151.
Long Statement,Azure.Core.Tests,ClientDiagnosticListener,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientDiagnosticListener.cs,AssertScopeStarted,The length of the statement  "                                throw new InvalidOperationException($"Attribute {expectedAttribute} not found' existing attributes: {string.Join("'"' producedDiagnosticScope.Activity.Tags)}"); " is 160.
Long Statement,Azure.Storage,TestExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExtensions.cs,ToString,The length of the statement  "            var listOfSettings = conn.Settings.Select(pair => string.Format(CultureInfo.InvariantCulture' "{0}={1}"' pair.Key' pair.Value)).ToList(); " is 137.
Long Statement,Azure.Storage,TestExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExtensions.cs,ToString,The length of the statement  "            if (!string.IsNullOrWhiteSpace(conn._accountName) && (conn.Credentials is StorageSharedKeyCredential sharedKeyCredentials ? string.IsNullOrWhiteSpace(sharedKeyCredentials.AccountName) : true)) " is 192.
Long Statement,Azure.Storage,TestExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExtensions.cs,ToString,The length of the statement  "                listOfSettings.Add(string.Format(CultureInfo.InvariantCulture' "{0}={1}"' Constants.ConnectionStrings.AccountNameSetting' conn._accountName)); " is 142.
Long Statement,Azure.Storage,TestExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExtensions.cs,ToString,The length of the statement  "                return string.Format(CultureInfo.InvariantCulture' "{0}={1}"' Constants.ConnectionStrings.SharedAccessSignatureSetting' exportSecrets ? sasCredentials.SasToken : "[signature hidden]"); " is 184.
Long Statement,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,GetDevelopmentStorageAccount,The length of the statement  "            builder.Path = Constants.ConnectionStrings.DevStoreAccountName + Constants.ConnectionStrings.SecondaryLocationAccountSuffix; " is 124.
Long Statement,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,GetDevelopmentStorageAccount,The length of the statement  "            var credentials = new StorageSharedKeyCredential(Constants.ConnectionStrings.DevStoreAccountName' Constants.ConnectionStrings.DevStoreAccountKey); " is 146.
Long Statement,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,ParseCore,The length of the statement  "                if (matchesAutomaticEndpointsSpec && !settings.ContainsKey(Constants.ConnectionStrings.DefaultEndpointsProtocolSetting)) " is 120.
Long Statement,Azure.Storage,UriQueryParamsCollection,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\UriQueryParamsCollection.cs,ToString,The length of the statement  "                sb.Append(WebUtility.UrlEncode(kv.Key)).Append('=').Append(WebUtility.UrlEncode(kv.Value));   // Query param strings are url-encoded " is 132.
Long Statement,Azure.Storage.Test,TestConfigurations,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestConfigurations.cs,GetTenant,The length of the statement  "                Assert.Inconclusive($"Live test configuration tenant type '{type}' named '{name}' was not found in file {TestConfigurationsPath}!"); " is 132.
Long Statement,Azure.Storage.Test,TestHelper,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestHelper.cs,AssertSequenceEqual,The length of the statement  "            (int index' T expected' T actual)[] firstErrors = expected.Zip(actual' (e' a) => (expected: e' actual: a)).Select((x' i) => (index: i' x.expected' x.actual)).Where(x => !x.expected.Equals(x.actual)).Take(5).ToArray(); " is 217.
Long Statement,Azure.Storage.Test,TestHelper,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestHelper.cs,AssertSequenceEqual,The length of the statement  "            Assert.IsFalse(firstErrors.Any()' $"Actual sequence does not match expected sequence at locations\n{string.Join("\n"' firstErrors.Select(e => $"{e.index} => expected = {e.expected}' actual = {e.actual}"))}"); " is 208.
Complex Conditional,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The conditional expression  "property.PropertyType == type && property.CanRead && !property.CanWrite && Includes(property.Name) && !Excludes(property.Name)"  is complex.
Complex Conditional,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The conditional expression  "field.FieldType == type && (field.IsInitOnly || field.IsLiteral) && Includes(field.Name) && !Excludes(field.Name)"  is complex.
Complex Conditional,Azure.Core.Pipeline,TestFrameworkContentTypeUtilities,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\ContentTypeUtilities.cs,TryGetTextEncoding,The conditional expression  "contentType.StartsWith(textContentTypePrefix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(jsonSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(xmlSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(urlEncodedSuffix' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,ParseCore,The conditional expression  "s_isValidEndpointPair(blobEndpoint' blobSecondaryEndpoint)                      && s_isValidEndpointPair(queueEndpoint' queueSecondaryEndpoint)                      && s_isValidEndpointPair(tableEndpoint' tableSecondaryEndpoint)                      && s_isValidEndpointPair(fileEndpoint' fileSecondaryEndpoint)"  is complex.
Empty Catch Block,Azure.Core.Testing,RecordEntry,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordEntry.cs,SerializeBody,The method has an empty catch block.
Empty Catch Block,Azure.Core.Testing,TestRecording,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRecording.cs,TestRecording,The method has an empty catch block.
Empty Catch Block,Azure.Storage.Files.Shares.Samples,Sample01a_HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Files.Shares\samples\Sample01a_HelloWorld.cs,Errors,The method has an empty catch block.
Empty Catch Block,Azure.Storage.Files.Shares.Samples,Sample01b_HelloWorldAsync,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Files.Shares\samples\Sample01b_HelloWorldAsync.cs,ErrorsAsync,The method has an empty catch block.
Empty Catch Block,Azure.Storage.Test.Shared,StorageRecordedTestSanitizer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageRecordedTestSanitizer.cs,SanitizeTextBody,The method has an empty catch block.
Empty Catch Block,Azure.Storage.Test.Shared,StorageRecordedTestSanitizer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageRecordedTestSanitizer.cs,SanitizeTextBody,The method has an empty catch block.
Magic Number,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The following statement contains a magic number: var expectedEventPrefix = declaringType.FullName + "." + methodName.Substring(0' methodName.Length - 5);
Magic Number,Azure.Core.Testing,RandomExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RandomExtensions.cs,NewGuid,The following statement contains a magic number: var bytes = new byte[16];
Magic Number,Azure.Core.Testing,TestRetryHelper,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRetryHelper.cs,RetryAsync,The following statement contains a magic number: delay = TimeSpan.FromSeconds(5);
Magic Number,Azure.Storage.Files.Shares.Samples,Sample02_Auth,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Files.Shares\samples\Sample02_Auth.cs,SharedAccessSignatureAuthAsync,The following statement contains a magic number: Assert.AreEqual(403' ex.Status);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,GetNewString,The following statement contains a magic number: buffer[i] = (char)('a' + Recording.Random.Next(0' 25));
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,GetIPAddress,The following statement contains a magic number: var a = Recording.Random.Next(0' 256);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,GetIPAddress,The following statement contains a magic number: var b = Recording.Random.Next(0' 256);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,GetIPAddress,The following statement contains a magic number: var c = Recording.Random.Next(0' 256);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,GetIPAddress,The following statement contains a magic number: var d = Recording.Random.Next(0' 256);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,WaitForProgressAsync,The following statement contains a magic number: await Delay(500' 100).ConfigureAwait(false);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,WaitForProgressAsync,The following statement contains a magic number: await Delay(500' 100).ConfigureAwait(false);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,WaitForProgressAsync,The following statement contains a magic number: attempts < 10
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,AssertSecondaryStorageSecondRetrySuccessful,The following statement contains a magic number: Assert.AreEqual(primaryHost' testExceptionPolicy.HostsSetInRequests[2]);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,AssertSecondaryStorageThirdRetrySuccessful,The following statement contains a magic number: Assert.AreEqual(primaryHost' testExceptionPolicy.HostsSetInRequests[2]);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,AssertSecondaryStorageThirdRetrySuccessful,The following statement contains a magic number: Assert.AreEqual(secondaryHost' testExceptionPolicy.HostsSetInRequests[3]);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,AssertSecondaryStorage404OnSecondary,The following statement contains a magic number: Assert.AreEqual(primaryHost' testExceptionPolicy.HostsSetInRequests[2]);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,AssertSecondaryStorage404OnSecondary,The following statement contains a magic number: Assert.AreEqual(primaryHost' testExceptionPolicy.HostsSetInRequests[3]);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,EnsurePropagatedAsync,The following statement contains a magic number: int delayDuration = 10000;
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,EnsurePropagatedAsync,The following statement contains a magic number: DateTimeOffset endTime = DateTimeOffset.Now.AddMinutes(16);
Magic Number,Azure.Storage,TestExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExtensions.cs,ToHttp,The following statement contains a magic number: var builder = new UriBuilder(uri)              {                  Scheme = "http"'                  Port = 80              };
Magic Number,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,ParseStringIntoSettings,The following statement contains a magic number: var splittedNameValue = nameValue.Split(new char[] { '=' }' 2);
Magic Number,Azure.Storage,StorageConnectionString,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\StorageConnectionString.cs,ParseStringIntoSettings,The following statement contains a magic number: splittedNameValue.Length != 2
Magic Number,Azure.Storage,UriExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\UriExtensions.cs,GetQueryParameters,The following statement contains a magic number: var parts = param.Split(new[] { '=' }' 2);
Magic Number,Azure.Storage,UriQueryParamsCollection,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\src\Shared\UriQueryParamsCollection.cs,UriQueryParamsCollection,The following statement contains a magic number: var keyAndValue = qp.Split(new[] { '=' }' 2);
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: values == null || values.Length != 21
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestConstants.cs,TestConstants,The following statement contains a magic number: ContentMD5 = MD5.Create().ComputeHash(test.GetRandomBuffer(16));
Magic Number,Azure.Storage.Test,TestExceptionPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExceptionPolicy.cs,SimulateFailure,The following statement contains a magic number: message.Response = new MockResponse(Simulate404 && message.Request.Uri.Host == SecondaryUri.Host ? 404 : 429);
Magic Number,Azure.Storage.Test,TestExceptionPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExceptionPolicy.cs,SimulateFailure,The following statement contains a magic number: message.Response = new MockResponse(Simulate404 && message.Request.Uri.Host == SecondaryUri.Host ? 404 : 429);
Magic Number,Azure.Storage.Test,TestHelper,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestHelper.cs,AssertSequenceEqual,The following statement contains a magic number: (int index' T expected' T actual)[] firstErrors = expected.Zip(actual' (e' a) => (expected: e' actual: a)).Select((x' i) => (index: i' x.expected' x.actual)).Where(x => !x.expected.Equals(x.actual)).Take(5).ToArray();
Magic Number,Azure.Storage.Test,TestResponseClassifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestResponseClassifier.cs,IsRetriableResponse,The following statement contains a magic number: message.Response.Status >= 400 &&                  message.Response.Headers.TryGetValue("x-ms-error-code"' out var error)
Missing Default,Azure.Core.Testing,TestRecording,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRecording.cs,TestRecording,The following switch statement is missing a default case: switch (Mode)              {                  case RecordedTestMode.Record:                      _session = new RecordSession();                      if (File.Exists(_sessionFile))                      {                          try                          {                              _previousSession = Load();                          }                          catch (Exception)                          {                              // ignore                          }                      }                      break;                  case RecordedTestMode.Playback:                      _session = Load();                      break;              }
Missing Default,Azure.Storage.Test.Shared,StorageRecordedTestSanitizer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageRecordedTestSanitizer.cs,SanitizeTextBody,The following switch statement is missing a default case: switch (doc.RootElement.GetProperty(property.Name).ValueKind)                                      {                                          case JsonValueKind.Null:                                              writer.WriteNull(property.Name);                                              break;                                          case JsonValueKind.True:                                              writer.WriteBoolean(property.Name' true);                                              break;                                          case JsonValueKind.False:                                              writer.WriteBoolean(property.Name' false);                                              break;                                          case JsonValueKind.Number:                                              writer.WriteNumber(property.Name' property.Value.GetDouble());                                              break;                                          case JsonValueKind.String:                                              writer.WriteString(                                                  property.Name'                                                  property.Name == "access_token" ?                                                      SanitizeValue :                                                      property.Value.GetString());                                              break;                                              // Ignore nested objects and arrays...                                      }
Missing Default,Azure.Storage.Test,TestResponseClassifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestResponseClassifier.cs,IsRetriableResponse,The following switch statement is missing a default case: switch (error)                  {                      case "InternalError":                      case "OperationTimedOut":                      case "ServerBusy":                      case "CannotVerifyCopySource":                          return true;                  }
