Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitions,Cyclomatic complexity of the method is 8
Complex Method,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadAllPartitionsFromLatest,Cyclomatic complexity of the method is 11
Complex Method,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerDoesNotSendToSpecificPartitionWhenPartitionIdIsNotSpecified,Cyclomatic complexity of the method is 8
Complex Method,Azure.Messaging.EventHubs.Tests,EventDataExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventDataExtensions.cs,IsEquivalentTo,Cyclomatic complexity of the method is 13
Complex Method,Azure.Core.Tests,ClientDiagnosticListener,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientDiagnosticListener.cs,OnNext,Cyclomatic complexity of the method is 9
Long Parameter List,Azure.Messaging.EventHubs.Tests,InjectableMockClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,InjectableMockClient,The method has 6 parameters. Parameters: host' eventHubName' credential' clientOptions' connectionScope' messageConverter
Long Parameter List,Azure.Messaging.EventHubs.Tests,MockConnection,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,CreateTransportConsumer,The method has 7 parameters. Parameters: consumerGroup' partitionId' eventPosition' retryPolicy' trackLastEnqueuedEventProperties' ownerLevel' prefetchCount
Long Parameter List,Azure.Messaging.EventHubs.Tests,InjectableTransportClientMock,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,InjectableTransportClientMock,The method has 5 parameters. Parameters: transportClient' fullyQualifiedNamespace' eventHubName' credential' clientOptions
Long Parameter List,Azure.Messaging.EventHubs.Tests,ObservableTransportClientMock,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumer,The method has 7 parameters. Parameters: consumerGroup' partitionId' eventPosition' retryPolicy' trackLastEnqueuedEventProperties' ownerLevel' prefetchCount
Long Parameter List,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ReadNothingAsync,The method has 5 parameters. Parameters: consumer' partition' startingPosition' readOptions' iterationCount
Long Parameter List,Azure.Core.Testing,SyncAsyncPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\SyncAsyncPolicyTestBase.cs,SendRequestAsync,The method has 5 parameters. Parameters: transport' requestAction' policy' responseClassifier' bufferResponse
Long Parameter List,Azure.Core.Testing,SyncAsyncPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\SyncAsyncPolicyTestBase.cs,SendGetRequest,The method has 5 parameters. Parameters: transport' policy' responseClassifier' bufferResponse' uri
Long Identifier,Azure.Messaging.EventHubs.Tests,InjectableMockConverter,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,,The length of the parameter CreateBatchFromMessagesHandler is 30.
Long Identifier,Azure.Messaging.EventHubs.Tests,MockConnection,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,CreateTransportConsumer,The length of the parameter trackLastEnqueuedEventProperties is 32.
Long Identifier,Azure.Messaging.EventHubs.Tests,MockConnection,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,,The length of the parameter GetPartitionPropertiesInvokedWith is 33.
Long Identifier,Azure.Messaging.EventHubs.Tests,MockConnection,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,,The length of the parameter GetPartitionPropertiesInvokedWith is 33.
Long Identifier,Azure.Messaging.EventHubs.Tests,ObservableTransportClientMock,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumer,The length of the parameter trackLastEnqueuedEventProperties is 32.
Long Identifier,Azure.Messaging.EventHubs.Tests,ObservableTransportClientMock,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,,The length of the parameter GetPartitionPropertiesCalledForId is 33.
Long Identifier,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The length of the parameter differentConsumerGroupConsumer is 30.
Long Identifier,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The length of the parameter differentGroupAndPartitionConsumer is 34.
Long Identifier,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidConsumerGroupConsumerDoesNotCompromiseReadBehavior,The length of the parameter otherInvalidConsumerGroupConsumer is 33.
Long Identifier,Azure.Messaging.EventHubs.Tests,LiveResourceManager,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\LiveResourceManager.cs,,The length of the parameter RetryExponentialBackoffSeconds is 30.
Long Identifier,Azure.Messaging.EventHubs.Tests,TestCategory,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\TestCategory.cs,,The length of the parameter DisallowVisualStudioLiveUnitTesting is 35.
Long Identifier,Azure.Messaging.EventHubs.Tests,TestEnvironment,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\TestEnvironment.cs,,The length of the parameter EventHubsResourceGroupInstance is 30.
Long Identifier,Azure.Messaging.EventHubs.Tests,TestEnvironment,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\TestEnvironment.cs,,The length of the parameter FullyQualifiedNamespaceInstance is 31.
Long Identifier,Azure.Messaging.EventHubs.Tests,TestEnvironment,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\TestEnvironment.cs,,The length of the parameter EventHubsDefaultSharedAccessKey is 31.
Long Identifier,Azure.Core.Testing,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientTestBase.cs,,The length of the parameter s_diagnosticScopeValidatingInterceptor is 38.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,RetryOptionTestCases,The length of the statement  "            yield return new object[] { new EventHubsRetryOptions { MaximumRetries = 3' Delay = TimeSpan.FromMilliseconds(1)' MaximumDelay = TimeSpan.FromMilliseconds(10)' Mode = EventHubsRetryMode.Fixed } }; " is 196.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,RetryOptionTestCases,The length of the statement  "            yield return new object[] { new EventHubsRetryOptions { MaximumRetries = 0' Delay = TimeSpan.FromMilliseconds(1)' MaximumDelay = TimeSpan.FromMilliseconds(10)' Mode = EventHubsRetryMode.Fixed } }; " is 196.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,ConstructorRequiresTheHost,The length of the statement  "            Assert.That(() => new AmqpClient(host' "test-path"' Mock.Of<EventHubTokenCredential>()' new EventHubConnectionOptions())' Throws.InstanceOf<ArgumentException>()); " is 162.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,ConstructorRequiresTheEventHubName,The length of the statement  "            Assert.That(() => new AmqpClient("my.eventhub.com"' path' Mock.Of<EventHubTokenCredential>()' new EventHubConnectionOptions())' Throws.InstanceOf<ArgumentException>()); " is 168.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,ConstructorRequiresTheCredential,The length of the statement  "            Assert.That(() => new AmqpClient("my.eventhub.com"' "somePath"' null' new EventHubConnectionOptions())' Throws.InstanceOf<ArgumentException>()); " is 144.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,ConstructorRequiresTheOptions,The length of the statement  "            Assert.That(() => new AmqpClient("my.eventhub.com"' "somePath"' credential.Object' null)' Throws.InstanceOf<ArgumentException>()); " is 130.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPropertiesAsyncRespectsTheCancellationTokenIfSetWhenCalled,The length of the statement  "            Assert.That(async () => await client.GetPropertiesAsync(Mock.Of<EventHubsRetryPolicy>()' cancellationSource.Token)' Throws.InstanceOf<TaskCanceledException>()); " is 160.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPropertiesAsyncRespectsClosed,The length of the statement  "            Assert.That(async () => await client.GetPropertiesAsync(Mock.Of<EventHubsRetryPolicy>()' cancellationSource.Token)' Throws.InstanceOf<EventHubsClientClosedException>()); " is 169.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPropertiesAsyncCreatesTheRequest,The length of the statement  "            var mockCredential = new Mock<EventHubTokenCredential>(Mock.Of<TokenCredential>()' "{namespace}.servicebus.windows.net"); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPropertiesAsyncCreatesTheRequest,The length of the statement  "                .Setup(credential => credential.GetTokenAsync(It.IsAny<TokenRequestContext>()' It.Is<CancellationToken>(value => value == cancellationSource.Token))) " is 149.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPropertiesAsyncCreatesTheRequest,The length of the statement  "                .Setup(converter => converter.CreateEventHubPropertiesRequest(It.Is<string>(value => value == eventHubName)' It.Is<string>(value => value == tokenValue))) " is 154.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPropertiesAsyncCreatesTheRequest,The length of the statement  "            var client = new InjectableMockClient("my.eventhub.com"' eventHubName' mockCredential.Object' new EventHubConnectionOptions()' null' mockConverter.Object); " is 155.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPropertiesAsyncCreatesTheRequest,The length of the statement  "            Assert.That(async () => await client.GetPropertiesAsync(Mock.Of<EventHubsRetryPolicy>()' cancellationSource.Token)' Throws.InstanceOf<TaskCanceledException>()); " is 160.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPropertiesAsyncRespectsTheRetryPolicy,The length of the statement  "            var mockCredential = new Mock<EventHubTokenCredential>(Mock.Of<TokenCredential>()' "{namespace}.servicebus.windows.net"); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPropertiesAsyncRespectsTheRetryPolicy,The length of the statement  "                .Setup(credential => credential.GetTokenAsync(It.IsAny<TokenRequestContext>()' It.Is<CancellationToken>(value => value == cancellationSource.Token))) " is 149.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPropertiesAsyncRespectsTheRetryPolicy,The length of the statement  "                .Setup(converter => converter.CreateEventHubPropertiesRequest(It.Is<string>(value => value == eventHubName)' It.Is<string>(value => value == tokenValue))) " is 154.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPropertiesAsyncRespectsTheRetryPolicy,The length of the statement  "            var client = new InjectableMockClient("my.eventhub.com"' eventHubName' mockCredential.Object' new EventHubConnectionOptions()' mockScope.Object' mockConverter.Object); " is 167.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPropertiesAsyncRespectsTheRetryPolicy,The length of the statement  "            Assert.That(async () => await client.GetPropertiesAsync(retryPolicy' cancellationSource.Token)' Throws.InstanceOf(retriableException.GetType())); " is 145.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPropertiesAsyncRespectsTheRetryPolicy,The length of the statement  "            mockScope.Verify(scope => scope.OpenManagementLinkAsync(It.IsAny<TimeSpan>()' It.IsAny<CancellationToken>())' Times.Exactly(1 + retryOptions.MaximumRetries)); " is 158.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPartitionPropertiesAsyncValidatesThePartition,The length of the statement  "            Assert.That(async () => await client.GetPartitionPropertiesAsync(partition' Mock.Of<EventHubsRetryPolicy>()' CancellationToken.None)' typeConstraint); " is 150.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPartitionPropertiesAsyncValidatesTheRetryPolicy,The length of the statement  "            Assert.That(async () => await client.GetPartitionPropertiesAsync("1"' null' CancellationToken.None)' Throws.ArgumentNullException); " is 131.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPartitionPropertiesAsyncRespectsTheCancellationTokenIfSetWhenCalled,The length of the statement  "            Assert.That(async () => await client.GetPartitionPropertiesAsync("Fred"' Mock.Of<EventHubsRetryPolicy>()' cancellationSource.Token)' Throws.InstanceOf<TaskCanceledException>()); " is 177.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPartitionPropertiesAsyncValidatesClosed,The length of the statement  "            Assert.That(async () => await client.GetPartitionPropertiesAsync("Fred"' Mock.Of<EventHubsRetryPolicy>()' cancellationSource.Token)' Throws.InstanceOf<EventHubsClientClosedException>()); " is 186.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPartitionPropertiesAsyncCreatesTheRequest,The length of the statement  "            var mockCredential = new Mock<EventHubTokenCredential>(Mock.Of<TokenCredential>()' "{namespace}.servicebus.windows.net"); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPartitionPropertiesAsyncCreatesTheRequest,The length of the statement  "                .Setup(credential => credential.GetTokenAsync(It.IsAny<TokenRequestContext>()' It.Is<CancellationToken>(value => value == cancellationSource.Token))) " is 149.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPartitionPropertiesAsyncCreatesTheRequest,The length of the statement  "                .Setup(converter => converter.CreatePartitionPropertiesRequest(It.Is<string>(value => value == eventHubName)' It.Is<string>(value => value == partitionId)' It.Is<string>(value => value == tokenValue))) " is 201.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPartitionPropertiesAsyncCreatesTheRequest,The length of the statement  "            var client = new InjectableMockClient("my.eventhub.com"' eventHubName' mockCredential.Object' new EventHubConnectionOptions()' null' mockConverter.Object); " is 155.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPartitionPropertiesAsyncCreatesTheRequest,The length of the statement  "            Assert.That(async () => await client.GetPartitionPropertiesAsync(partitionId' Mock.Of<EventHubsRetryPolicy>()' cancellationSource.Token)' Throws.InstanceOf<TaskCanceledException>()); " is 182.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPartitionPropertiesAsyncRespectsTheRetryPolicy,The length of the statement  "            var mockCredential = new Mock<EventHubTokenCredential>(Mock.Of<TokenCredential>()' "{namespace}.servicebus.windows.net"); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPartitionPropertiesAsyncRespectsTheRetryPolicy,The length of the statement  "                .Setup(credential => credential.GetTokenAsync(It.IsAny<TokenRequestContext>()' It.Is<CancellationToken>(value => value == cancellationSource.Token))) " is 149.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPartitionPropertiesAsyncRespectsTheRetryPolicy,The length of the statement  "                .Setup(converter => converter.CreatePartitionPropertiesRequest(It.Is<string>(value => value == eventHubName)' It.Is<string>(value => value == partitionId)' It.Is<string>(value => value == tokenValue))) " is 201.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPartitionPropertiesAsyncRespectsTheRetryPolicy,The length of the statement  "            var client = new InjectableMockClient("my.eventhub.com"' eventHubName' mockCredential.Object' new EventHubConnectionOptions()' mockScope.Object' mockConverter.Object); " is 167.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPartitionPropertiesAsyncRespectsTheRetryPolicy,The length of the statement  "            Assert.That(async () => await client.GetPartitionPropertiesAsync(partitionId' retryPolicy' cancellationSource.Token)' Throws.InstanceOf(retriableException.GetType())); " is 167.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,GetPartitionPropertiesAsyncRespectsTheRetryPolicy,The length of the statement  "            mockScope.Verify(scope => scope.OpenManagementLinkAsync(It.IsAny<TimeSpan>()' It.IsAny<CancellationToken>())' Times.Exactly(1 + retryOptions.MaximumRetries)); " is 158.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,CreateConsumerValidatesClosed,The length of the statement  "            Assert.That(() => client.CreateConsumer("group"' "0"' EventPosition.Earliest' Mock.Of<EventHubsRetryPolicy>()' false' null' null)' Throws.InstanceOf<EventHubsClientClosedException>()); " is 184.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,CreateProducerValidatesClosed,The length of the statement  "            Assert.That(() => client.CreateProducer(null' Mock.Of<EventHubsRetryPolicy>())' Throws.InstanceOf<EventHubsClientClosedException>()); " is 133.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,ConstructorValidatesTheEndpoint,The length of the statement  "            Assert.That(() => new AmqpConnectionScope(null' "hub"' credential.Object' EventHubsTransportType.AmqpTcp' null)' Throws.ArgumentNullException); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,ConstructorValidatesTheEventHubName,The length of the statement  "            Assert.That(() => new AmqpConnectionScope(new Uri("amqp://some.place.com")' null' credential.Object' EventHubsTransportType.AmqpWebSockets' Mock.Of<IWebProxy>())' Throws.ArgumentNullException); " is 193.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,ConstructorValidatesTheCredential,The length of the statement  "            Assert.That(() => new AmqpConnectionScope(new Uri("amqp://some.place.com")' "hub"' null' EventHubsTransportType.AmqpWebSockets' null)' Throws.ArgumentNullException); " is 165.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,ConstructorValidatesTheTransport,The length of the statement  "            Assert.That(() => new AmqpConnectionScope(new Uri("amqp://some.place.com")' "hun"' credential.Object' invalidTransport' Mock.Of<IWebProxy>())' Throws.ArgumentException); " is 169.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenManagementLinkAsyncRespectsTokenCancellation,The length of the statement  "            Assert.That(() => scope.OpenManagementLinkAsync(TimeSpan.FromDays(1)' cancellationSource.Token)' Throws.InstanceOf<TaskCanceledException>()); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenManagementLinkAsyncRespectsDisposal,The length of the statement  "            Assert.That(() => scope.OpenManagementLinkAsync(TimeSpan.FromDays(1)' CancellationToken.None)' Throws.InstanceOf<ObjectDisposedException>()); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncValidatesTheConsumerGroup,The length of the statement  "            Assert.That(() => scope.OpenConsumerLinkAsync(consumerGroup' partitionId' position' TimeSpan.FromDays(1)' 0' null' false' CancellationToken.None)' Throws.InstanceOf<ArgumentException>()); " is 187.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncValidatesThePartitionId,The length of the statement  "            Assert.That(() => scope.OpenConsumerLinkAsync(consumerGroup' partitionId' position' TimeSpan.FromDays(1)' 0' null' false' CancellationToken.None)' Throws.InstanceOf<ArgumentException>()); " is 187.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRespectsTokenCancellation,The length of the statement  "            Assert.That(() => scope.OpenConsumerLinkAsync(consumerGroup' partitionId' position' TimeSpan.FromDays(1)' 0' null' false' cancellationSource.Token)' Throws.InstanceOf<TaskCanceledException>()); " is 193.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRespectsDisposal,The length of the statement  "            Assert.That(() => scope.OpenConsumerLinkAsync(consumerGroup' partitionId' position' TimeSpan.FromDays(1)' 0' null' false' CancellationToken.None)' Throws.InstanceOf<ObjectDisposedException>()); " is 193.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRequestsTheLink,The length of the statement  "            var link = await mockScope.Object.OpenConsumerLinkAsync(consumerGroup' partitionId' position' TimeSpan.FromDays(1)' prefetchCount' ownerLevel' trackLastEvent' cancellationSource.Token); " is 185.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresTheLink,The length of the statement  "            var link = await mockScope.Object.OpenConsumerLinkAsync(consumerGroup' partitionId' position' TimeSpan.FromDays(1)' prefetchCount' ownerLevel' trackLastEvent' cancellationSource.Token); " is 185.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresTheLink,The length of the statement  "            Assert.That(linkSource.FilterSet.Any(item => item.Key.Key.ToString() == AmqpFilter.ConsumerFilterName)' Is.True' "There should have been a producer filter set."); " is 162.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresTheLink,The length of the statement  "            Assert.That(linkSource.Address.ToString()' Contains.Substring($"/{ partitionId }")' "The partition identifier should have been part of the link address."); " is 155.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresTheLink,The length of the statement  "            Assert.That(linkSource.Address.ToString()' Contains.Substring($"/{ consumerGroup }")' "The consumer group should have been part of the link address."); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresTheLink,The length of the statement  "            Assert.That(link.Settings.TotalLinkCredit' Is.EqualTo(prefetchCount)' "The prefetch count should have been used to set the credits."); " is 134.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresTheLink,The length of the statement  "            Assert.That(link.Settings.Properties.Any(item => item.Key.Key.ToString() == AmqpProperty.EntityType.ToString())' Is.True' "There should be an entity type specified."); " is 167.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresTheLink,The length of the statement  "            Assert.That(link.GetSettingPropertyOrDefault<long>(AmqpProperty.OwnerLevel' -1)' Is.EqualTo(ownerLevel)' "The owner level should have been used."); " is 147.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresTheLink,The length of the statement  "            Assert.That(link.Settings.DesiredCapabilities' Is.Not.Null' "There should have been a set of desired capabilities created."); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresTheLink,The length of the statement  "            Assert.That(link.Settings.DesiredCapabilities.Contains(AmqpProperty.TrackLastEnqueuedEventProperties)' Is.True' "Last event tracking should be requested."); " is 156.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRespectsTheOwnerLevelOption,The length of the statement  "            var link = await mockScope.Object.OpenConsumerLinkAsync(consumerGroup' partitionId' position' TimeSpan.FromDays(1)' prefetchCount' ownerLevel' trackLastEvent' cancellationSource.Token); " is 185.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRespectsTheOwnerLevelOption,The length of the statement  "            Assert.That(link.GetSettingPropertyOrDefault<long>(AmqpProperty.OwnerLevel' long.MinValue)' Is.EqualTo(long.MinValue)' "The owner level should have been used."); " is 161.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRespectsTheTrackLastEventOption,The length of the statement  "            var link = await mockScope.Object.OpenConsumerLinkAsync(consumerGroup' partitionId' position' TimeSpan.FromDays(1)' prefetchCount' ownerLevel' trackLastEvent' cancellationSource.Token); " is 185.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRespectsTheTrackLastEventOption,The length of the statement  "            Assert.That(link.Settings.DesiredCapabilities' Is.Null' "There should have not have been a set of desired capabilities created' as we're not tracking the last event."); " is 168.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncManagesActiveLinks,The length of the statement  "            var link = await mockScope.Object.OpenConsumerLinkAsync(consumerGroup' partitionId' position' TimeSpan.FromDays(1)' prefetchCount' ownerLevel' trackLastEvent' cancellationSource.Token); " is 185.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresAuthorizationRefresh,The length of the statement  "            var link = await mockScope.Object.OpenConsumerLinkAsync(consumerGroup' partitionId' position' TimeSpan.FromDays(1)' 0' null' false' cancellationSource.Token); " is 158.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresAuthorizationRefresh,The length of the statement  "            Assert.That(timerCallbackInvoked' Is.True' "The timer should have been configured and running when the link was created."); " is 123.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRefreshesAuthorization,The length of the statement  "            var link = await mockScope.Object.OpenConsumerLinkAsync(consumerGroup' partitionId' position' TimeSpan.FromDays(1)' 0' null' false' cancellationSource.Token); " is 158.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenProducerLinkAsyncRespectsTokenCancellation,The length of the statement  "            Assert.That(() => scope.OpenProducerLinkAsync(partitionId' TimeSpan.FromDays(1)' cancellationSource.Token)' Throws.InstanceOf<TaskCanceledException>()); " is 152.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenProducerLinkAsyncRespectsDisposal,The length of the statement  "            Assert.That(() => scope.OpenProducerLinkAsync(null' TimeSpan.FromDays(1)' CancellationToken.None)' Throws.InstanceOf<ObjectDisposedException>()); " is 145.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenProducerLinkAsyncConfiguresTheLink,The length of the statement  "            Assert.That(linkTarget.Address.ToString()' Contains.Substring($"/{ partitionId }")' "The partition identifier should have been part of the link address."); " is 155.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenProducerLinkAsyncConfiguresTheLink,The length of the statement  "            Assert.That(link.Settings.Properties.Any(item => item.Key.Key.ToString() == AmqpProperty.EntityType.ToString())' Is.True' "There should be an entity type specified."); " is 167.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenProducerLinkAsyncConfiguresAuthorizationRefresh,The length of the statement  "            Assert.That(timerCallbackInvoked' Is.True' "The timer should have been configured and running when the link was created."); " is 123.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,DisposeCancelsOperations,The length of the statement  "            Assert.That(cancellation.IsCancellationRequested' Is.False' "The cancellation source should not be canceled before disposal"); " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,DisposeClosesActiveLinks,The length of the statement  "            var producerLink = await mockScope.Object.OpenConsumerLinkAsync(consumerGroup' partitionId' position' TimeSpan.FromDays(1)' 0' null' false' cancellationSource.Token); " is 166.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,DisposeStopsManagingLinkAuthorizations,The length of the statement  "            Assert.That(managedAuthorizations.Count' Is.Zero' "There should be no managed authorizations when none have been created."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,DisposeStopsManagingLinkAuthorizations,The length of the statement  "            var link = await mockScope.Object.OpenConsumerLinkAsync(consumerGroup' partitionId' position' TimeSpan.FromDays(1)' 12' 555' true' cancellationSource.Token); " is 157.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,DisposeStopsManagingLinkAuthorizations,The length of the statement  "            Assert.That(managedAuthorizations.ContainsKey(link)' Is.True' "The producer link should be tracked for authorization."); " is 120.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,DisposeStopsManagingLinkAuthorizations,The length of the statement  "            Assert.That(() => refreshTimer.Change(Timeout.InfiniteTimeSpan' Timeout.InfiniteTimeSpan)' Throws.InstanceOf<ObjectDisposedException>()' "The timer should have been disposed."); " is 177.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,RetryOptionTestCases,The length of the statement  "            yield return new object[] { new EventHubsRetryOptions { MaximumRetries = 3' Delay = TimeSpan.FromMilliseconds(1)' MaximumDelay = TimeSpan.FromMilliseconds(10)' Mode = EventHubsRetryMode.Fixed } }; " is 196.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,RetryOptionTestCases,The length of the statement  "            yield return new object[] { new EventHubsRetryOptions { MaximumRetries = 0' Delay = TimeSpan.FromMilliseconds(1)' MaximumDelay = TimeSpan.FromMilliseconds(10)' Mode = EventHubsRetryMode.Fixed } }; " is 196.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ConstructorRequiresTheEventHubName,The length of the statement  "            Assert.That(() => new AmqpConsumer(eventHub' "$DEFAULT"' "0"' EventPosition.Earliest' true' null' null' Mock.Of<AmqpConnectionScope>()' Mock.Of<AmqpMessageConverter>()' Mock.Of<EventHubsRetryPolicy>())' Throws.InstanceOf<ArgumentException>()); " is 243.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ConstructorRequiresTheConsumerGroup,The length of the statement  "            Assert.That(() => new AmqpConsumer("myHub"' group' "0"' EventPosition.Earliest' true' null' null' Mock.Of<AmqpConnectionScope>()' Mock.Of<AmqpMessageConverter>()' Mock.Of<EventHubsRetryPolicy>())' Throws.InstanceOf<ArgumentException>()); " is 237.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ConstructorRequiresThePartition,The length of the statement  "            Assert.That(() => new AmqpConsumer("aHub"' "$DEFAULT"' partition' EventPosition.Earliest' true' null' null' Mock.Of<AmqpConnectionScope>()' Mock.Of<AmqpMessageConverter>()' Mock.Of<EventHubsRetryPolicy>())' Throws.InstanceOf<ArgumentException>()); " is 247.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ConstructorRequiresTheConnectionScope,The length of the statement  "            Assert.That(() => new AmqpConsumer("theMostAwesomeHubEvar"' "$DEFAULT"' "0"' EventPosition.FromSequenceNumber(123)' true' null' null' null' Mock.Of<AmqpMessageConverter>()' Mock.Of<EventHubsRetryPolicy>())' Throws.ArgumentNullException); " is 237.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ConstructorRequiresTheMessageConverter,The length of the statement  "            Assert.That(() => new AmqpConsumer("theMostAwesomeHubEvar"' "$DEFAULT"' "0"' EventPosition.FromSequenceNumber(123)' true' null' null' Mock.Of<AmqpConnectionScope>()' null' Mock.Of<EventHubsRetryPolicy>())' Throws.ArgumentNullException); " is 236.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ConstructorRequiresTheRetryPolicy,The length of the statement  "            Assert.That(() => new AmqpConsumer("theMostAwesomeHubEvar"' "$DEFAULT"' "0"' EventPosition.Latest' true' null' null' Mock.Of<AmqpConnectionScope>()' Mock.Of<AmqpMessageConverter>()' null)' Throws.ArgumentNullException); " is 219.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,CloseMarksTheConsumerAsClosed,The length of the statement  "            var consumer = new AmqpConsumer("aHub"' "$DEFAULT"' "0"' EventPosition.Earliest' true' null' null' Mock.Of<AmqpConnectionScope>()' Mock.Of<AmqpMessageConverter>()' Mock.Of<EventHubsRetryPolicy>()); " is 197.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,CloseRespectsTheCancellationToken,The length of the statement  "            var consumer = new AmqpConsumer("aHub"' "$DEFAULT"' "0"' EventPosition.Earliest' true' null' null' Mock.Of<AmqpConnectionScope>()' Mock.Of<AmqpMessageConverter>()' Mock.Of<EventHubsRetryPolicy>()); " is 197.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,CloseRespectsTheCancellationToken,The length of the statement  "            Assert.That(async () => await consumer.CloseAsync(cancellationSource.Token)' Throws.InstanceOf<TaskCanceledException>()' "Cancellation should trigger the appropriate exception."); " is 179.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,CloseRespectsTheCancellationToken,The length of the statement  "            Assert.That(consumer.IsClosed' Is.False' "Cancellation should have interrupted closing and left the consumer in an open state."); " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncValidatesTheMaximumMessageCount,The length of the statement  "            var consumer = new AmqpConsumer(eventHub' consumerGroup' partition' eventPosition' true' null' null' mockScope.Object' Mock.Of<AmqpMessageConverter>()' retryPolicy); " is 165.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncValidatesTheMaximumMessageCount,The length of the statement  "            Assert.That(async () => await consumer.ReceiveAsync(count' null' cancellationSource.Token)' Throws.InstanceOf<ArgumentException>()); " is 132.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncRespectsTheCancellationTokenIfSetWhenCalled,The length of the statement  "            var consumer = new AmqpConsumer(eventHub' consumerGroup' partition' eventPosition' true' null' null' mockScope.Object' Mock.Of<AmqpMessageConverter>()' retryPolicy); " is 165.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncRespectsTheCancellationTokenIfSetWhenCalled,The length of the statement  "            Assert.That(async () => await consumer.ReceiveAsync(100' null' cancellationSource.Token)' Throws.InstanceOf<TaskCanceledException>()); " is 134.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncRespectsTheRetryPolicy,The length of the statement  "                .Setup(credential => credential.GetTokenAsync(It.IsAny<TokenRequestContext>()' It.Is<CancellationToken>(value => value == cancellationSource.Token))) " is 149.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncRespectsTheRetryPolicy,The length of the statement  "            var consumer = new AmqpConsumer(eventHub' consumerGroup' partition' eventPosition' trackLastEnqueued' ownerLevel' null' mockScope.Object' Mock.Of<AmqpMessageConverter>()' retryPolicy); " is 184.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncRespectsTheRetryPolicy,The length of the statement  "            Assert.That(async () => await consumer.ReceiveAsync(100' null' cancellationSource.Token)' Throws.InstanceOf(retriableException.GetType())); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncValidatesClosed,The length of the statement  "            var consumer = new AmqpConsumer(eventHub' consumerGroup' partition' eventPosition' true' null' null' mockScope.Object' Mock.Of<AmqpMessageConverter>()' retryPolicy); " is 165.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncValidatesClosed,The length of the statement  "            Assert.That(async () => await consumer.ReceiveAsync(100' null' cancellationSource.Token)' Throws.InstanceOf<EventHubsClientClosedException>()); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpErrorTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpErrorTests.cs,CreateExceptionForResponseWithNoResponse,The length of the statement  "            Assert.That(exception.Message' Is.EqualTo(Resources.UnknownCommunicationException)' "The exception message should indicate an unknown failure"); " is 144.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpErrorTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpErrorTests.cs,CreateExceptionForResponseWitStatus,The length of the statement  "                Assert.That(((EventHubsException)exception).EventHubName' Is.EqualTo(resourceName)' "The exception should report the proper resource"); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpErrorTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpErrorTests.cs,CreateExceptionForResponseWithCondition,The length of the statement  "                Assert.That(((EventHubsException)exception).EventHubName' Is.EqualTo(resourceName)' "The exception should report the proper resource"); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpErrorTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpErrorTests.cs,CreateExceptionForErrorWithNoResponse,The length of the statement  "            Assert.That(exception.Message' Is.EqualTo(Resources.UnknownCommunicationException)' "The exception message should indicate an unknown failure"); " is 144.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpErrorTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpErrorTests.cs,CreateExceptionForErrorWithCondition,The length of the statement  "                Assert.That(((EventHubsException)exception).EventHubName' Is.EqualTo(resourceName)' "The exception should report the proper resource"); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,ConstructorValidatesTheMessageConverter,The length of the statement  "            Assert.That(() => new AmqpEventBatch(null' new CreateBatchOptions { MaximumSizeInBytes = 31 })' Throws.ArgumentNullException); " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,ConstructorValidatesTheMaximumSize,The length of the statement  "            Assert.That(() => new AmqpEventBatch(mockConverter' new CreateBatchOptions { MaximumSizeInBytes = null })' Throws.ArgumentNullException); " is 137.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,TryAddDoesNotAcceptAnEventBiggerThanTheMaximumSize,The length of the statement  "            Assert.That(batch.TryAdd(new EventData(new byte[0]))' Is.False' "An event of the maximum size is too large due to the reserved overhead."); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,TryAddAcceptEventsUntilTheMaximumSizeIsReached,The length of the statement  "                    Assert.That(batch.TryAdd(new EventData(new byte[0]))' Is.False' "The final addition should not fit in the available space."); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,TryAddAcceptEventsUntilTheMaximumSizeIsReached,The length of the statement  "                    Assert.That(batch.TryAdd(new EventData(new byte[0]))' Is.True' $"The addition for index: { index } should fit and be accepted."); " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,TryAddSetsTheCount,The length of the statement  "                Assert.That(batch.TryAdd(new EventData(new byte[0]))' Is.True' $"The addition for index: { index } should fit and be accepted."); " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,TryAddSetsTheCount,The length of the statement  "            Assert.That(batch.Count' Is.EqualTo(eventMessages.Length)' "The count should have been set when the batch was updated."); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,AsEnumerableReturnsTheMessages,The length of the statement  "                Assert.That(batchEnumerableList.Contains(eventMessages[index])' $"The event message at index: { index } was not in the enumerable."); " is 133.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,DisposeCleansUpBatchMessages,The length of the statement  "                Assert.That(batch.TryAdd(new EventData(new byte[0]))' Is.True' $"The addition for index: { index } should fit and be accepted."); " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,DisposeCleansUpBatchMessages,The length of the statement  "                Assert.That(() => eventMessages[index].ThrowIfDisposed()' Throws.InstanceOf<ObjectDisposedException>()' $"The message at index: { index } should have been disposed."); " is 167.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,DisposeClearsTheCount,The length of the statement  "                Assert.That(batch.TryAdd(new EventData(new byte[0]))' Is.True' $"The addition for index: { index } should fit and be accepted."); " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpFilterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpFilterTests.cs,BuildFilterExpressionPrefersSequenceNumberToEnqueuedTime,The length of the statement  "            Assert.That(filter' Contains.Substring(AmqpFilter.SequenceNumberName)' "The sequence number should have precedence over the enqueued time for filtering."); " is 155.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpFilterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpFilterTests.cs,BuildFilterExpressionPrefersSequenceNumberToEnqueuedTime,The length of the statement  "            Assert.That(filter' Contains.Substring(sequence.ToString())' "The sequence number value should be present in the filter."); " is 123.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpFilterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpFilterTests.cs,BuildFilterExpressionUsesEnqueuedTime,The length of the statement  "            Assert.That(filter' Contains.Substring(enqueuedTime.ToUnixTimeMilliseconds().ToString())' "The enqueued time value should be present in the filter."); " is 150.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpFilterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpFilterTests.cs,CreateConsumerFilterCreatesTheFilter,The length of the statement  "            Assert.That(filter.DescriptorName' Is.EqualTo((AmqpSymbol)AmqpFilter.ConsumerFilterName)' "The filter name should have been populated"); " is 136.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpFilterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpFilterTests.cs,CreateConsumerFilterCreatesTheFilter,The length of the statement  "            Assert.That(filter.DescriptorCode' Is.EqualTo(AmqpFilter.ConsumerFilterCode)' "The filter code should have been populated"); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpFilterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpFilterTests.cs,CreateConsumerFilterCreatesTheFilter,The length of the statement  "            Assert.That(filter.Value' Is.EqualTo(expression)' "The filter expression should have been used as the body of the filter"); " is 123.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,DescribedTypePropertyTestCases,The length of the statement  "            yield return new object[] { AmqpProperty.Descriptor.DateTimeOffset' DateTimeOffset.Parse("2015-10-27T12:00:00Z")' TranslateValue }; " is 131.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventPopulatesTheBody,The length of the statement  "            Assert.That(messageData[0].Value' Is.EqualTo(eventData.Body.ToArray())' "The AMQP message data should match the event body."); " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventProperlySetsThePartitionKeyAnnotation,The length of the statement  "            Assert.That(message.MessageAnnotations.Map.TryGetValue(AmqpProperty.PartitionKey' out object annotationPartionKey)' Is.EqualTo(!string.IsNullOrEmpty(partitionKey))' "The partition key annotation was not correctly set."); " is 220.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventPopulatesSimpleApplicationProperties,The length of the statement  "            Assert.That(message.ApplicationProperties' Is.Not.Null' "The AMQP message should have a set of application properties."); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventPopulatesSimpleApplicationProperties,The length of the statement  "                Assert.That(value' Is.EqualTo(eventData.Properties[property])' $"The property value did not match for: [{ property }]"); " is 120.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventTranslatesDescribedApplicationProperties,The length of the statement  "            Assert.That(message.ApplicationProperties' Is.Not.Null' "The AMQP message should have a set of application properties."); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventTranslatesStreamApplicationProperties,The length of the statement  "            Assert.That(message.ApplicationProperties' Is.Not.Null' "The AMQP message should have a set of application properties."); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventFailsForUnknownApplicationPropertyType,The length of the statement  "            Assert.That(() => new AmqpMessageConverter().CreateMessageFromEvent(eventData)' Throws.InstanceOf<SerializationException>()); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromEventsWithOneMessagePopulatesEnvelopeProperties,The length of the statement  "            Assert.That(message.MessageFormat' Is.Null' "The batch envelope should be not be marked with a batchable format when created from one event."); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromEventsWithOneMessagePopulatesEnvelopeProperties,The length of the statement  "            Assert.That(message.DataBody.ToList().Count' Is.EqualTo(1)' "The batch envelope should contain a single event in the body."); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromEventsWithOneMessagePopulatesEnvelopeProperties,The length of the statement  "            Assert.That(message.MessageAnnotations.Map.TryGetValue(AmqpProperty.PartitionKey' out string partitionKeyAnnotation)' Is.EqualTo(!string.IsNullOrEmpty(partitionKey))' "There should be an annotation if a partition key was present."); " is 232.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromEventsWithMultipleEventsMessagePopulatesEnvelopeProperties,The length of the statement  "            Assert.That(message.MessageFormat' Is.EqualTo(AmqpConstants.AmqpBatchedMessageFormat)' "The batch envelope should be marked with a batchable format."); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromEventsWithMultipleEventsMessagePopulatesEnvelopeProperties,The length of the statement  "            Assert.That(message.DataBody.ToList().Count' Is.EqualTo(events.Length)' "The batch envelope should contain each batch event in the body."); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromEventsWithMultipleEventsMessagePopulatesEnvelopeProperties,The length of the statement  "            Assert.That(message.MessageAnnotations.Map.TryGetValue(AmqpProperty.PartitionKey' out string partitionKeyAnnotation)' Is.EqualTo(!string.IsNullOrEmpty(partitionKey))' "There should be an annotation if a partition key was present."); " is 232.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromEventWithOneEventUsesItForTheEnvelope,The length of the statement  "            Assert.That(messageData[0].Value' Is.EqualTo(eventData.Body.ToArray())' "The batch envelope data should match the event body."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromEventWithOneEventUsesItForTheEnvelope,The length of the statement  "            Assert.That(message.ApplicationProperties.Map.TryGetValue(nameof(property)' out object propertyValue)' Is.True' "The application property should exist in the batch."); " is 167.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromEventsWithMultipleEventsPopulatesTheEnvelopeBody,The length of the statement  "            Assert.That(messageData.Count' Is.EqualTo(events.Length)' "The batch envelope should contain each batch event in the body."); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromEventsWithMultipleEventsAssignsThePartitionKeyToBodyMessages,The length of the statement  "            Assert.That(messageData.Count' Is.EqualTo(events.Length)' "The batch envelope should contain each batch event in the body."); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromMessagesWithOneMessagePopulatesEnvelopeProperties,The length of the statement  "            Assert.That(batchEnvelope.MessageFormat' Is.Null' "The batch envelope should be not be marked with a batchable format when created from one event."); " is 149.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromMessagesWithOneMessagePopulatesEnvelopeProperties,The length of the statement  "            Assert.That(batchEnvelope.DataBody.ToList().Count' Is.EqualTo(1)' "The batch envelope should contain a single event in the body."); " is 131.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromMessagesWithOneMessagePopulatesEnvelopeProperties,The length of the statement  "            Assert.That(batchEnvelope.MessageAnnotations.Map.TryGetValue(AmqpProperty.PartitionKey' out string partitionKeyAnnotation)' Is.EqualTo(!string.IsNullOrEmpty(partitionKey))' "There should be an annotation if a partition key was present."); " is 238.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromMessagesWithMultipleEventsMessagePopulatesEnvelopeProperties,The length of the statement  "            Assert.That(batchEnvelope.MessageFormat' Is.EqualTo(AmqpConstants.AmqpBatchedMessageFormat)' "The batch envelope should be marked with a batchable format."); " is 157.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromMessagesWithMultipleEventsMessagePopulatesEnvelopeProperties,The length of the statement  "            Assert.That(batchEnvelope.DataBody.ToList().Count' Is.EqualTo(source.Length)' "The batch envelope should contain each batch event in the body."); " is 145.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromMessagesWithMultipleEventsMessagePopulatesEnvelopeProperties,The length of the statement  "            Assert.That(batchEnvelope.MessageAnnotations.Map.TryGetValue(AmqpProperty.PartitionKey' out string partitionKeyAnnotation)' Is.EqualTo(!string.IsNullOrEmpty(partitionKey))' "There should be an annotation if a partition key was present."); " is 238.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromMessagesWithOneEventUsesItForTheEnvelope,The length of the statement  "            Assert.That(messageData[0].Value' Is.EqualTo(eventData.Body.ToArray())' "The batch envelope data should match the event body."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromMessagesWithOneEventUsesItForTheEnvelope,The length of the statement  "            Assert.That(batchEnvelope.ApplicationProperties.Map.TryGetValue(nameof(property)' out object propertyValue)' Is.True' "The application property should exist in the batch."); " is 173.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromMessagesWithMultipleEventsPopulatesTheEnvelopeBody,The length of the statement  "            Assert.That(messageData.Count' Is.EqualTo(source.Length)' "The batch envelope should contain each batch event in the body."); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromMessagesWithMultipleEventsAssignsThePartitionKeyToBodyMessages,The length of the statement  "            Assert.That(messageData.Count' Is.EqualTo(source.Length)' "The batch envelope should contain each batch event in the body."); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesSimpleApplicationProperties,The length of the statement  "                Assert.That(value' Is.EqualTo(applicationProperties[property])' $"The property value did not match for: [{ property }]"); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesTypedSystemProperties,The length of the statement  "            Assert.That(eventData.Properties.Count' Is.EqualTo(message.ApplicationProperties.Map.Count())' "The event should have a set of properties."); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesTypedSystemProperties,The length of the statement  "            Assert.That(eventData.LastPartitionPropertiesRetrievalTime.HasValue' Is.False' "The last retrieval time should not be set."); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesMappedSystemProperties,The length of the statement  "            Assert.That(eventData.Properties.Count' Is.EqualTo(message.ApplicationProperties.Map.Count())' "The event should have a set of properties."); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesMappedSystemProperties,The length of the statement  "            Assert.That(eventData.SystemProperties.ContainsKey(nameof(firstMessageAnnotation))' Is.True' "The first annotation should be in the system properties."); " is 153.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesMappedSystemProperties,The length of the statement  "            Assert.That(eventData.SystemProperties.ContainsKey(nameof(secondMessageAnnotation))' Is.True' "The second annotation should be in the system properties."); " is 155.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesMappedSystemProperties,The length of the statement  "            Assert.That(eventData.SystemProperties.ContainsKey(Properties.SubjectName)' Is.True' "The message subject should be in the system properties."); " is 144.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesMappedSystemProperties,The length of the statement  "            Assert.That(eventData.SystemProperties[nameof(firstMessageAnnotation)]' Is.EqualTo(firstMessageAnnotation)' "The first annotation should match."); " is 146.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesMappedSystemProperties,The length of the statement  "            Assert.That(eventData.SystemProperties[nameof(secondMessageAnnotation)]' Is.EqualTo(secondMessageAnnotation)' "The second annotation should match."); " is 149.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesMappedSystemProperties,The length of the statement  "            Assert.That(eventData.SystemProperties[Properties.SubjectName]' Is.EqualTo(subjectValue)' "The message subject should match."); " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesTypedSystemPropertiesAndMetrics,The length of the statement  "            Assert.That(eventData.Properties.Count' Is.EqualTo(message.ApplicationProperties.Map.Count())' "The event should have a set of properties."); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesTypedSystemPropertiesAndMetrics,The length of the statement  "            Assert.That(eventData.LastPartitionSequenceNumber' Is.EqualTo(lastSequenceNumber)' "The last sequence number should match."); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesTypedSystemPropertiesAndMetrics,The length of the statement  "            Assert.That(eventData.LastPartitionPropertiesRetrievalTime' Is.EqualTo(lastRetrievalTime)' "The last retrieval time should match."); " is 132.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesLastRetrievalTimeFromDateTime,The length of the statement  "            Assert.That(eventData.LastPartitionPropertiesRetrievalTime' Is.EqualTo(lastRetrieval)' "The last retrieval time should match."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesLastRetrievalTimeFromTicks,The length of the statement  "            Assert.That(eventData.LastPartitionPropertiesRetrievalTime' Is.EqualTo(lastRetrieval)' "The last retrieval time should match."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessageAllowsAnEmptyMessageWithProperties,The length of the statement  "            Assert.That(eventData.Properties.Count' Is.EqualTo(message.ApplicationProperties.Map.Count())' "There should have been properties present."); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessageAllowsAnEmptyMessageWithProperties,The length of the statement  "            Assert.That(eventData.Properties.First().Value' Is.EqualTo(propertyValue)' "The application property should have been populated."); " is 131.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventHubPropertiesRequestCreatesTheRequest,The length of the statement  "            Assert.That(request.ApplicationProperties.Map.TryGetValue<string>(AmqpManagement.ResourceNameKey' out var resourceName)' Is.True' "The resource name should be specified"); " is 171.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventHubPropertiesRequestCreatesTheRequest,The length of the statement  "            Assert.That(request.ApplicationProperties.Map.TryGetValue<string>(AmqpManagement.SecurityTokenKey' out var securityToken)' Is.True' "The security token should be specified"); " is 174.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventHubPropertiesRequestCreatesTheRequest,The length of the statement  "            Assert.That(request.ApplicationProperties.Map.TryGetValue<string>(AmqpManagement.OperationKey' out var operation)' Is.True' "The operation should be specified"); " is 161.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventHubPropertiesRequestCreatesTheRequest,The length of the statement  "            Assert.That(request.ApplicationProperties.Map.TryGetValue<string>(AmqpManagement.ResourceTypeKey' out var resourceScope)' Is.True' "The resource scope be specified"); " is 166.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventHubPropertiesFromResponseValidatesTheResponseDataIsPresent,The length of the statement  "            Assert.That(() => converter.CreateEventHubPropertiesFromResponse(response)' Throws.InstanceOf<InvalidOperationException>()); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventHubPropertiesFromResponseValidatesTheResponseDataType,The length of the statement  "            Assert.That(() => converter.CreateEventHubPropertiesFromResponse(response)' Throws.InstanceOf<InvalidOperationException>()); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreatePartitionPropertiesRequestRequestCreatesTheRequest,The length of the statement  "            Assert.That(request.ApplicationProperties.Map.TryGetValue<string>(AmqpManagement.ResourceNameKey' out var resourceName)' Is.True' "The resource name should be specified"); " is 171.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreatePartitionPropertiesRequestRequestCreatesTheRequest,The length of the statement  "            Assert.That(request.ApplicationProperties.Map.TryGetValue<string>(AmqpManagement.PartitionNameKey' out var partitionId)' Is.True' "The resource name should be specified"); " is 171.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreatePartitionPropertiesRequestRequestCreatesTheRequest,The length of the statement  "            Assert.That(request.ApplicationProperties.Map.TryGetValue<string>(AmqpManagement.SecurityTokenKey' out var securityToken)' Is.True' "The security token should be specified"); " is 174.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreatePartitionPropertiesRequestRequestCreatesTheRequest,The length of the statement  "            Assert.That(request.ApplicationProperties.Map.TryGetValue<string>(AmqpManagement.OperationKey' out var operation)' Is.True' "The operation should be specified"); " is 161.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreatePartitionPropertiesRequestRequestCreatesTheRequest,The length of the statement  "            Assert.That(request.ApplicationProperties.Map.TryGetValue<string>(AmqpManagement.ResourceTypeKey' out var resourceScope)' Is.True' "The resource scope be specified"); " is 166.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreatePartitionPropertiesFromResponseValidatesTheResponseDataIsPresent,The length of the statement  "            Assert.That(() => converter.CreatePartitionPropertiesFromResponse(response)' Throws.InstanceOf<InvalidOperationException>()); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreatePartitionPropertiesFromResponseValidatesTheResponseDataType,The length of the statement  "            Assert.That(() => converter.CreatePartitionPropertiesFromResponse(response)' Throws.InstanceOf<InvalidOperationException>()); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreatePartitionPropertiesFromResponseCreatesTheProperties,The length of the statement  "            Assert.That(properties.BeginningSequenceNumber' Is.EqualTo(beginSequenceNumber)' "The beginning sequence number should match"); " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreatePartitionPropertiesFromResponseCreatesTheProperties,The length of the statement  "            Assert.That(properties.LastEnqueuedSequenceNumber' Is.EqualTo(lastSequenceNumber)' "The last sequence number should match"); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,RetryOptionTestCases,The length of the statement  "            yield return new object[] { new EventHubsRetryOptions { MaximumRetries = 3' Delay = TimeSpan.FromMilliseconds(1)' MaximumDelay = TimeSpan.FromMilliseconds(10)' Mode = EventHubsRetryMode.Fixed } }; " is 196.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,RetryOptionTestCases,The length of the statement  "            yield return new object[] { new EventHubsRetryOptions { MaximumRetries = 0' Delay = TimeSpan.FromMilliseconds(1)' MaximumDelay = TimeSpan.FromMilliseconds(10)' Mode = EventHubsRetryMode.Fixed } }; " is 196.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,ConstructorRequiresTheEventHubName,The length of the statement  "            Assert.That(() => new AmqpProducer(eventHub' null' Mock.Of<AmqpConnectionScope>()' Mock.Of<AmqpMessageConverter>()' Mock.Of<EventHubsRetryPolicy>())' Throws.InstanceOf<ArgumentException>()); " is 190.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,ConstructorRequiresTheConnectionScope,The length of the statement  "            Assert.That(() => new AmqpProducer("theMostAwesomeHubEvar"' "0"' null' Mock.Of<AmqpMessageConverter>()' Mock.Of<EventHubsRetryPolicy>())' Throws.ArgumentNullException); " is 168.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,ConstructorRequiresTheRetryPolicy,The length of the statement  "            Assert.That(() => new AmqpProducer("theMostAwesomeHubEvar"' null' Mock.Of<AmqpConnectionScope>()' Mock.Of<AmqpMessageConverter>()' null)' Throws.ArgumentNullException); " is 168.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CloseMarksTheProducerAsClosed,The length of the statement  "            var producer = new AmqpProducer("aHub"' "0"' Mock.Of<AmqpConnectionScope>()' Mock.Of<AmqpMessageConverter>()' Mock.Of<EventHubsRetryPolicy>()); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CloseRespectsTheCancellationToken,The length of the statement  "            var producer = new AmqpProducer("aHub"' null' Mock.Of<AmqpConnectionScope>()' Mock.Of<AmqpMessageConverter>()' Mock.Of<EventHubsRetryPolicy>()); " is 144.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CloseRespectsTheCancellationToken,The length of the statement  "            Assert.That(async () => await producer.CloseAsync(cancellationSource.Token)' Throws.InstanceOf<TaskCanceledException>()' "Cancellation should trigger the appropriate exception."); " is 179.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CloseRespectsTheCancellationToken,The length of the statement  "            Assert.That(producer.IsClosed' Is.False' "Cancellation should have interrupted closing and left the producer in an open state."); " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncValidatesTheOptions,The length of the statement  "            var producer = new AmqpProducer("aHub"' null' Mock.Of<AmqpConnectionScope>()' Mock.Of<AmqpMessageConverter>()' Mock.Of<EventHubsRetryPolicy>()); " is 144.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncEnsuresMaximumMessageSizeIsPopulated,The length of the statement  "            var producer = new Mock<AmqpProducer>("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' retryPolicy) " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncDefaultsTheMaximumSizeWhenNotProvided,The length of the statement  "            var producer = new Mock<AmqpProducer>("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' retryPolicy) " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncRespectsTheMaximumSizeWhenProvided,The length of the statement  "            var producer = new Mock<AmqpProducer>("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' retryPolicy) " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncVerifiesTheMaximumSize,The length of the statement  "            var producer = new Mock<AmqpProducer>("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' retryPolicy) " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncVerifiesTheMaximumSize,The length of the statement  "            Assert.That(async () => await producer.Object.CreateBatchAsync(options' default)' Throws.InstanceOf<ArgumentOutOfRangeException>()); " is 132.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncBuildsAnAmqpEventBatchWithTheOptions,The length of the statement  "            var producer = new Mock<AmqpProducer>("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' retryPolicy) " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncBuildsAnAmqpEventBatchWithTheOptions,The length of the statement  "            Assert.That(GetEventBatchOptions((AmqpEventBatch)batch)' Is.SameAs(options)' "The provided options should have been used."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendEnumerableValidatesTheEvents,The length of the statement  "            var producer = new AmqpProducer("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' Mock.Of<EventHubsRetryPolicy>()); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendEnumerableValidatesTheEvents,The length of the statement  "            Assert.That(async () => await producer.SendAsync(null' new SendEventOptions()' CancellationToken.None)' Throws.ArgumentNullException); " is 134.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendEnumerableEnsuresNotClosed,The length of the statement  "            var producer = new AmqpProducer("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' Mock.Of<EventHubsRetryPolicy>()); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendEnumerableEnsuresNotClosed,The length of the statement  "            Assert.That(async () => await producer.SendAsync(Enumerable.Empty<EventData>()' new SendEventOptions()' CancellationToken.None)' Throws.InstanceOf<EventHubsClientClosedException>()); " is 182.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendEnumerableUsesThePartitionKey,The length of the statement  "            var producer = new Mock<AmqpProducer>("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' retryPolicy) " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendEnumerableCreatesTheAmqpMessageFromTheEnumerable,The length of the statement  "            var producer = new Mock<AmqpProducer>("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' Mock.Of<EventHubsRetryPolicy>()) " is 144.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendEnumerableCreatesTheAmqpMessageFromTheEnumerable,The length of the statement  "            Assert.That(factoryMessage.SerializedMessageSize' Is.EqualTo(batchMessage.SerializedMessageSize)' "The serialized size of the messages should match."); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendEnumerableRespectsTheCancellationTokenIfSetWhenCalled,The length of the statement  "            var producer = new AmqpProducer("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' Mock.Of<EventHubsRetryPolicy>()); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendEnumerableRespectsTheCancellationTokenIfSetWhenCalled,The length of the statement  "            Assert.That(async () => await producer.SendAsync(new[] { new EventData(new byte[] { 0x15 }) }' new SendEventOptions()' cancellationSource.Token)' Throws.InstanceOf<TaskCanceledException>()); " is 190.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendEnumerableRespectsTheRetryPolicy,The length of the statement  "            var producer = new Mock<AmqpProducer>("aHub"' partitionId' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' retryPolicy) " is 131.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendEnumerableRespectsTheRetryPolicy,The length of the statement  "            Assert.That(async () => await producer.Object.SendAsync(new[] { new EventData(new byte[] { 0x65 }) }' new SendEventOptions()' cancellationSource.Token)' Throws.InstanceOf(retriableException.GetType())); " is 202.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchValidatesTheBatch,The length of the statement  "            var producer = new AmqpProducer("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' Mock.Of<EventHubsRetryPolicy>()); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchEnsuresNotClosed,The length of the statement  "            var producer = new Mock<AmqpProducer>("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' retryPolicy) " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchEnsuresNotClosed,The length of the statement  "            Assert.That(async () => await producer.Object.SendAsync(new EventDataBatch(batch' new SendEventOptions())' CancellationToken.None)' Throws.InstanceOf<EventHubsClientClosedException>()); " is 185.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchUsesThePartitionKey,The length of the statement  "            var producer = new Mock<AmqpProducer>("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' retryPolicy) " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchCreatesTheAmqpMessageFromTheBatch,The length of the statement  "            var producer = new Mock<AmqpProducer>("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' retryPolicy) " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchCreatesTheAmqpMessageFromTheBatch,The length of the statement  "            using var batchMessage = new AmqpMessageConverter().CreateBatchFromMessages(batch.AsEnumerable<AmqpMessage>()' partitonKey); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchCreatesTheAmqpMessageFromTheBatch,The length of the statement  "            Assert.That(factoryMessage.SerializedMessageSize' Is.EqualTo(batchMessage.SerializedMessageSize)' "The serialized size of the messages should match."); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchDoesNotDisposeTheEventDataBatch,The length of the statement  "            var producer = new Mock<AmqpProducer>("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' retryPolicy) " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchDoesNotDisposeTheEventDataBatch,The length of the statement  "            Assert.That(() => batch.TryAdd(new EventData(new byte[] { 0x23 }))' Throws.Nothing' "The batch should not have been disposed."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchDoesNotDisposeTheEventsInTheSourceBatch,The length of the statement  "            var producer = new Mock<AmqpProducer>("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' retryPolicy) " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchDoesNotDisposeTheEventsInTheSourceBatch,The length of the statement  "            Assert.That(() => batch.AsEnumerable<AmqpMessage>().Single().ThrowIfDisposed()' Throws.Nothing' "The events within the source batch should not have been disposed."); " is 165.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchRespectsTheCancellationTokenIfSetWhenCalled,The length of the statement  "            var producer = new Mock<AmqpProducer>("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' retryPolicy) " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchRespectsTheCancellationTokenIfSetWhenCalled,The length of the statement  "            Assert.That(async () => await producer.Object.SendAsync(new EventDataBatch(batch' options.ToSendOptions())' cancellationSource.Token)' Throws.InstanceOf<TaskCanceledException>()); " is 179.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchRespectsTheRetryPolicy,The length of the statement  "            var producer = new Mock<AmqpProducer>("aHub"' null' Mock.Of<AmqpConnectionScope>()' new AmqpMessageConverter()' retryPolicy) " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchRespectsTheRetryPolicy,The length of the statement  "            Assert.That(async () => await producer.Object.SendAsync(batch' cancellationSource.Token)' Throws.InstanceOf(retriableException.GetType())); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,CbsTokenProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\CbsTokenProviderTests.cs,GetTokenAsyncSetsTheCorrectTypeForSharedAccessSignatureTokens,The length of the statement  "            var signature = new SharedAccessSignature("hub"' "keyName"' "key"' value' DateTimeOffset.Parse("2015-10-27T00:00:00Z")); " is 120.
Long Statement,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelValidatesTheReader,The length of the statement  "            await using IAsyncEnumerator<int> enumerator = ChannelReaderExtensions.EnumerateChannel<int>(null' TimeSpan.FromSeconds(1)' CancellationToken.None).GetAsyncEnumerator(); " is 169.
Long Statement,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelValidatesTheWaitTime,The length of the statement  "            await using IAsyncEnumerator<int> enumerator = ChannelReaderExtensions.EnumerateChannel<int>(Mock.Of<ChannelReader<int>>()' TimeSpan.FromSeconds(-1)' CancellationToken.None).GetAsyncEnumerator(); " is 195.
Long Statement,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelAllowsNullWaitTime,The length of the statement  "            await using IAsyncEnumerator<int> enumerator = ChannelReaderExtensions.EnumerateChannel<int>(Mock.Of<ChannelReader<int>>()' null' CancellationToken.None).GetAsyncEnumerator(); " is 175.
Long Statement,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelAllowsZeroWaitTime,The length of the statement  "            await using IAsyncEnumerator<int> enumerator = ChannelReaderExtensions.EnumerateChannel<int>(Mock.Of<ChannelReader<int>>()' TimeSpan.Zero' CancellationToken.None).GetAsyncEnumerator(); " is 184.
Long Statement,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsTheCancellationToken,The length of the statement  "            Assert.That(readIndex' Is.EqualTo(maxReadItems)' "The number of items read should have stopped increasing when cancellation was requested."); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsTheMaximumWaitTime,The length of the statement  "            Assert.That(readCount' Is.EqualTo(maxReadItems)' "The number of items read should have stopped increasing when cancellation was requested."); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsTheMaximumWaitTime,The length of the statement  "            Assert.That(iterateCount' Is.GreaterThan(readCount)' "There should have been default items returned due to the wait time expiring."); " is 133.
Long Statement,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsWhenThereIsNoMaximumWaitTime,The length of the statement  "            Assert.That(readCount' Is.EqualTo(maxReadItems)' "The number of items read should have stopped increasing when cancellation was requested."); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsWhenThereIsNoMaximumWaitTime,The length of the statement  "            Assert.That(iterateCount' Is.EqualTo(readCount)' "There should have been no items returned; all iterations should have been reading actual values."); " is 149.
Long Statement,Azure.Messaging.EventHubs.Tests,ClientLibraryInformationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ClientLibraryInformationTests.cs,PropertiesCanBeEnumerated,The length of the statement  "                .ToDictionary(property => property.GetCustomAttribute<System.ComponentModel.DescriptionAttribute>(false)?.Description ?? property.Name' property => property.Name); " is 163.
Long Statement,Azure.Messaging.EventHubs.Tests,ClientLibraryInformationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ClientLibraryInformationTests.cs,PropertiesCanBeEnumerated,The length of the statement  "                Assert.That((string)matchingProperty.GetValue(ClientLibraryInformation.Current' null)' Is.EqualTo(property.Value)' $"The value for { property.Key } should match."); " is 164.
Long Statement,Azure.Messaging.EventHubs.Tests,ClientLibraryInformationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ClientLibraryInformationTests.cs,EnumeratedPropertiesUseDescriptionsWhenPresent,The length of the statement  "                    .Select(property => property.GetCustomAttribute<System.ComponentModel.DescriptionAttribute>(false)?.Description ?? property.Name)); " is 131.
Long Statement,Azure.Messaging.EventHubs.Tests,EventDataTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventDataTests.cs,BodyAsStreamReturnsTheBody,The length of the statement  "            Assert.That(streamData' Is.EqualTo(eventData.Body.ToArray())' "The body data and the data read from the stream should agree."); " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,PartitionContextTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\PartitionContextTests.cs,ConstructorValidatesThePartition,The length of the statement  "            Assert.That(() => new PartitionContext(value)' Throws.InstanceOf<ArgumentException>()' "The constructor with consumer should validate."); " is 137.
Long Statement,Azure.Messaging.EventHubs.Tests,PartitionContextTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\PartitionContextTests.cs,ConstructorValidatesThePartition,The length of the statement  "            Assert.That(() => new PartitionContext(value' Mock.Of<TransportConsumer>())' Throws.InstanceOf<ArgumentException>()' "The constructor with no consumer should validate."); " is 170.
Long Statement,Azure.Messaging.EventHubs.Tests,PartitionContextTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\PartitionContextTests.cs,ReadLastEnqueuedEventPropertiesDelegatesToTheConsumer,The length of the statement  "            Assert.That(information.SequenceNumber' Is.EqualTo(lastEvent.LastPartitionSequenceNumber)' "The sequence number should match."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,PartitionContextTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\PartitionContextTests.cs,ReadLastEnqueuedEventPropertiesDelegatesToTheConsumer,The length of the statement  "            Assert.That(information.EnqueuedTime' Is.EqualTo(lastEvent.LastPartitionEnqueuedTime)' "The last enqueue time should match."); " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,PartitionContextTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\PartitionContextTests.cs,ReadLastEnqueuedEventPropertiesDelegatesToTheConsumer,The length of the statement  "            Assert.That(information.LastReceivedTime' Is.EqualTo(lastEvent.LastPartitionPropertiesRetrievalTime)' "The retrieval time should match."); " is 138.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerCreatesDiagnosticScopeOnSend,The length of the statement  "                .Setup(m => m.SendAsync(It.IsAny<IEnumerable<EventData>>()' It.IsAny<SendEventOptions>()' It.IsAny<CancellationToken>())) " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerCreatesDiagnosticScopeOnSend,The length of the statement  "            ClientDiagnosticListener.ProducedDiagnosticScope sendScope = testListener.AssertScope(DiagnosticProperty.ProducerActivityName' " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerCreatesDiagnosticScopeOnSend,The length of the statement  "                new KeyValuePair<string' string>(DiagnosticProperty.ServiceContextAttribute' DiagnosticProperty.EventHubsServiceContext)' " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerCreatesDiagnosticScopeOnSend,The length of the statement  "            ClientDiagnosticListener.ProducedDiagnosticScope messageScope = testListener.AssertScope(DiagnosticProperty.EventActivityName); " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerCreatesDiagnosticScopeOnSend,The length of the statement  "            Assert.That(eventData.Properties[DiagnosticProperty.DiagnosticIdAttribute]' Is.EqualTo(messageScope.Activity.Id)' "The diagnostics identifier should match."); " is 158.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerCreatesDiagnosticScopeOnSend,The length of the statement  "            Assert.That(messageScope.Activity.Tags' Has.One.EqualTo(new KeyValuePair<string' string>(DiagnosticProperty.KindAttribute' DiagnosticProperty.InternalKind))' "The activities tag should be internal."); " is 200.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerCreatesDiagnosticScopeOnSend,The length of the statement  "            Assert.That(messageScope.Activity' Is.Not.SameAs(sendScope.Activity)' "The activities should not be the same instance."); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerCreatesDiagnosticScopeOnBatchSend,The length of the statement  "                .Setup(m => m.SendAsync(It.IsAny<IEnumerable<EventData>>()' It.IsAny<SendEventOptions>()' It.IsAny<CancellationToken>())) " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerCreatesDiagnosticScopeOnBatchSend,The length of the statement  "            ClientDiagnosticListener.ProducedDiagnosticScope sendScope = testListener.AssertScope(DiagnosticProperty.ProducerActivityName' " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerCreatesDiagnosticScopeOnBatchSend,The length of the statement  "                new KeyValuePair<string' string>(DiagnosticProperty.ServiceContextAttribute' DiagnosticProperty.EventHubsServiceContext)' " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerCreatesDiagnosticScopeOnBatchSend,The length of the statement  "            ClientDiagnosticListener.ProducedDiagnosticScope messageScope = testListener.AssertScope(DiagnosticProperty.EventActivityName); " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerCreatesDiagnosticScopeOnBatchSend,The length of the statement  "            Assert.That(eventData.Properties[DiagnosticProperty.DiagnosticIdAttribute]' Is.EqualTo(messageScope.Activity.Id)' "The diagnostics identifier should match."); " is 158.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerCreatesDiagnosticScopeOnBatchSend,The length of the statement  "            Assert.That(messageScope.Activity' Is.Not.SameAs(sendScope.Activity)' "The activities should not be the same instance."); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerAppliesDiagnosticIdToEventsOnSend,The length of the statement  "                .Setup(m => m.SendAsync(It.IsAny<IEnumerable<EventData>>()' It.IsAny<SendEventOptions>()' It.IsAny<CancellationToken>())) " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerAppliesDiagnosticIdToEventsOnSend,The length of the statement  "                Assert.That(eventData.Properties.TryGetValue(DiagnosticProperty.DiagnosticIdAttribute' out object value)' Is.True' "The events should have a diagnostic identifier property."); " is 175.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerAppliesDiagnosticIdToEventsOnSend,The length of the statement  "                Assert.That(value' Is.EqualTo(activity.Id)' "The diagnostics identifier should match the activity in the active scope."); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerAppliesDiagnosticIdToEventsOnBatchSend,The length of the statement  "                .Setup(m => m.SendAsync(It.IsAny<IEnumerable<EventData>>()' It.IsAny<SendEventOptions>()' It.IsAny<CancellationToken>())) " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerAppliesDiagnosticIdToEventsOnBatchSend,The length of the statement  "                Assert.That(eventData.Properties.TryGetValue(DiagnosticProperty.DiagnosticIdAttribute' out object value)' Is.True' "The events should have a diagnostic identifier property."); " is 175.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerAppliesDiagnosticIdToEventsOnBatchSend,The length of the statement  "                Assert.That(value' Is.EqualTo(activity.Id)' "The diagnostics identifier should match the activity in the active scope."); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerAppliesDiagnosticIdToEventsOnBatchSend,The length of the statement  "            Assert.That(eventData3.Properties.ContainsKey(DiagnosticProperty.DiagnosticIdAttribute)' Is.False' "Events that were not accepted into the batch should not have been instrumented."); " is 182.
Long Statement,Azure.Messaging.EventHubs.Tests,MockConnection,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,GetPropertiesAsync,The length of the statement  "                return Task.FromResult(new EventHubProperties(EventHubName' DateTimeOffset.Parse("2015-10-27T00:00:00Z")' new string[] { "0"' "1" })); " is 134.
Long Statement,Azure.Messaging.EventHubs.Tests,MockConnection,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,GetPropertiesAsync,The length of the statement  "                return Task.FromResult(new EventHubProperties(EventHubName' DateTimeOffset.Parse("2015-10-27T00:00:00Z")' new string[] { "0"' "1" })); " is 134.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubsExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Errors\EventHubsExceptionTests.cs,ConstructorPropertyTestCases,The length of the statement  "            yield return new object[] { constructor' true' "bobl"' "constructor with transient' resource' message' and exception" }; " is 120.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubsExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Errors\EventHubsExceptionTests.cs,ConstructorSetsCustomProperties,The length of the statement  "            Assert.That(instance.IsTransient' Is.EqualTo(expectedIsTransient)' $"IsTransient should be set for the { constructorDescription }"); " is 132.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubsExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Errors\EventHubsExceptionTests.cs,ConstructorSetsCustomProperties,The length of the statement  "            Assert.That(instance.EventHubName' Is.EqualTo(expectedResourceName)' $"EventHubsNamespace should be set for the { constructorDescription }"); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubsExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Errors\EventHubsExceptionTests.cs,DerrivedExceptionsHaveTheCorrectTransientValues,The length of the statement  "            Assert.That(exception.IsTransient' Is.EqualTo(expectedTransient)' $"The { exception.GetType().Name } has an incorrect IsTransient value."); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubsExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Errors\EventHubsExceptionTests.cs,DerrivedExceptionsAreWellKnown,The length of the statement  "            Assert.That(allDerrivedTypes' Is.EquivalentTo(knownDerrivedTypes)' "All exceptions derived from EventHubsException in the client library should have a matching IsTransient test case."); " is 185.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionCanConnectToEventHubsUsingSharedKeyCredential,The length of the statement  "                await using (var connection = new TestConnectionWithTransport(properties.Endpoint.Host' scope.EventHubName' credential)) " is 120.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionCanConnectToEventHubsUsingArguments,The length of the statement  "                        $"{ options.TransportType.GetUriScheme() }://{ connectionProperties.Endpoint.Host }/{ connectionProperties.EventHubName }".ToLowerInvariant()' " is 142.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionCanConnectToEventHubsUsingArguments,The length of the statement  "                await using (var connection = new TestConnectionWithTransport(connectionProperties.Endpoint.Host' connectionProperties.EventHubName' credential)) " is 145.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionCanConnectToEventHubsUsingAnIdentityCredential,The length of the statement  "                var credential = new ClientSecretCredential(TestEnvironment.EventHubsTenant' TestEnvironment.EventHubsClient' TestEnvironment.EventHubsSecret); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionCanConnectToEventHubsUsingAnIdentityCredential,The length of the statement  "                await using (var connection = new TestConnectionWithTransport(TestEnvironment.FullyQualifiedNamespace' scope.EventHubName' credential)) " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCanRetrieveProperties,The length of the statement  "                await using (var connection = new TestConnectionWithTransport(connectionString' scope.EventHubName' new EventHubConnectionOptions { TransportType = transportType })) " is 165.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCanRetrieveProperties,The length of the statement  "                    Assert.That(properties.PartitionIds.Length' Is.EqualTo(partitionCount)' "The properties should have the requested number of partitions."); " is 138.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCanRetrieveProperties,The length of the statement  "                    Assert.That(properties.CreatedOn' Is.EqualTo(DateTimeOffset.UtcNow).Within(TimeSpan.FromSeconds(60))' "The Event Hub should have been created just about now."); " is 160.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCanRetrievePartitionProperties,The length of the statement  "                        $"{ options.TransportType.GetUriScheme() }://{ connectionProperties.Endpoint.Host }/{ connectionProperties.EventHubName }".ToLowerInvariant()' " is 142.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCanRetrievePartitionProperties,The length of the statement  "                await using (var connection = new TestConnectionWithTransport(connectionProperties.Endpoint.Host' connectionProperties.EventHubName' credential' new EventHubConnectionOptions { TransportType = transportType })) " is 210.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCanRetrievePartitionProperties,The length of the statement  "                    Assert.That(partitionProperties.EventHubName' Is.EqualTo(connectionProperties.EventHubName).Using((IEqualityComparer<string>)StringComparer.InvariantCultureIgnoreCase)' "The Event Hub path should match."); " is 205.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCanRetrievePartitionProperties,The length of the statement  "                    Assert.That(partitionProperties.BeginningSequenceNumber' Is.Not.EqualTo(default(long))' "The beginning sequence number should have been populated."); " is 149.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCanRetrievePartitionProperties,The length of the statement  "                    Assert.That(partitionProperties.LastEnqueuedSequenceNumber' Is.Not.EqualTo(default(long))' "The last sequence number should have been populated."); " is 147.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCanRetrievePartitionProperties,The length of the statement  "                    Assert.That(partitionProperties.LastEnqueuedOffset' Is.Not.EqualTo(default(long))' "The last offset should have been populated."); " is 130.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportPartitionIdsMatchPartitionProperties,The length of the statement  "                    Assert.That(properties.PartitionIds' Is.Not.Null' "A set of partition identifiers for the properties should have been returned."); " is 130.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportPartitionIdsMatchPartitionProperties,The length of the statement  "                    Assert.That(partitions' Is.EquivalentTo(properties.PartitionIds)' "The partition identifiers returned directly should match those returned with properties."); " is 158.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCannotRetrieveMetadataWhenClosed,The length of the statement  "                    Assert.That(async () => await connection.GetPartitionPropertiesAsync(partition)' Throws.TypeOf<EventHubsClientClosedException>()); " is 130.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCannotRetrievePartitionPropertiesWhenPartitionIdIsInvalid,The length of the statement  "                    Assert.That(async () => await connection.GetPartitionPropertiesAsync(invalidPartition)' Throws.TypeOf<ArgumentOutOfRangeException>()); " is 134.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCannotRetrieveMetadataWhenProxyIsInvalid,The length of the statement  "                    Assert.That(async () => await invalidProxyConnection.GetPartitionIdsAsync()' Throws.InstanceOf<WebSocketException>().Or.InstanceOf<TimeoutException>()); " is 152.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCannotRetrieveMetadataWhenProxyIsInvalid,The length of the statement  "                    Assert.That(async () => await invalidProxyConnection.GetPropertiesAsync()' Throws.InstanceOf<WebSocketException>().Or.InstanceOf<TimeoutException>()); " is 150.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCannotRetrieveMetadataWhenProxyIsInvalid,The length of the statement  "                    Assert.That(async () => await invalidProxyConnection.GetPartitionPropertiesAsync(partition)' Throws.InstanceOf<WebSocketException>().Or.InstanceOf<TimeoutException>()); " is 168.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorCreatesDefaultOptionsCases,The length of the statement  "            var fakeConnection = "Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath=fake"; " is 142.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorCreatesDefaultOptionsCases,The length of the statement  "            yield return new object[] { new ReadableOptionsMock("fullyQualifiedNamespace"' "path"' credential.Object)' "expanded argument" }; " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorClonesOptionsCases,The length of the statement  "            var fakeConnection = "Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath=fake"; " is 142.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorClonesOptionsCases,The length of the statement  "            yield return new object[] { new ReadableOptionsMock("fullyQualifiedNamespace"' "path"' credential.Object' options)' options' "expanded argument" }; " is 147.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorRequiresConnectionString,The length of the statement  "            ExactTypeConstraint TypeConstraint() => connectionString is null ? Throws.ArgumentNullException : Throws.ArgumentException; " is 123.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorRequiresConnectionString,The length of the statement  "            Assert.That(() => new EventHubConnection(connectionString)' TypeConstraint()' "The constructor without options should perform validation."); " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorRequiresConnectionString,The length of the statement  "            Assert.That(() => new EventHubConnection(connectionString' "eventHub")' TypeConstraint()' "The constructor with the event hub without options should perform validation."); " is 171.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorRequiresConnectionString,The length of the statement  "            Assert.That(() => new EventHubConnection(connectionString' "eventHub"' new EventHubConnectionOptions())' TypeConstraint()' "The constructor with the event hub and options should perform validation."); " is 200.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorRequiresConnectionString,The length of the statement  "            Assert.That(() => new EventHubConnection(connectionString' new EventHubConnectionOptions())' TypeConstraint()' "The constructor with options and no event hub should perform validation."); " is 187.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorDoesNotRequireOptionsWithConnectionString,The length of the statement  "            var fakeConnection = "Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath=fake"; " is 142.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorDoesNotRequireOptionsWithConnectionString,The length of the statement  "            Assert.That(() => new EventHubConnection(fakeConnection' default(EventHubConnectionOptions))' Throws.Nothing' "The constructor without the event hub should not require options"); " is 178.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorDoesNotRequireOptionsWithConnectionString,The length of the statement  "            Assert.That(() => new EventHubConnection(fakeConnection' null' default(EventHubConnectionOptions))' Throws.Nothing' "The constructor with the event hub should not require options"); " is 181.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorDoesNotRequireEventHubInConnectionStringWhenPassedSeparate,The length of the statement  "            var fakeConnection = "Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real]"; " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorDoesNotRequireEventHubInConnectionStringWhenPassedSeparate,The length of the statement  "            Assert.That(() => new EventHubConnection(fakeConnection' "eventHub")' Throws.Nothing' "The constructor without options should not require the connection string event hub"); " is 172.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorDoesNotRequireEventHubInConnectionStringWhenPassedSeparate,The length of the statement  "            Assert.That(() => new EventHubConnection(fakeConnection' "eventHub"' new EventHubConnectionOptions())' Throws.Nothing' "The constructor with options should not require the connection string event hub"); " is 202.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorDoesNotAllowTheEventHubToBePassedTwiceIfDifferent,The length of the statement  "            var fakeConnection = "Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath=fake"; " is 142.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorDoesNotAllowTheEventHubToBePassedTwiceIfDifferent,The length of the statement  "            Assert.That(() => new EventHubConnection(fakeConnection' "eventHub")' Throws.InstanceOf<ArgumentException>()' "The constructor without options should detect multiple different Event Hubs"); " is 189.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorDoesNotAllowTheEventHubToBePassedTwiceIfDifferent,The length of the statement  "            Assert.That(() => new EventHubConnection(fakeConnection' "eventHub"' new EventHubConnectionOptions())' Throws.InstanceOf<ArgumentException>()' "The constructor with options should detect multiple different Event Hubs"); " is 219.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorAllowsTheEventHubToBePassedTwiceIfEqual,The length of the statement  "            var fakeConnection = $"Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath={ eventHubName }"; " is 155.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorAllowsTheEventHubToBePassedTwiceIfEqual,The length of the statement  "            Assert.That(() => new EventHubConnection(fakeConnection' eventHubName)' Throws.Nothing' "The constructor without options should allow the same Event Hub in multiple places"); " is 174.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorAllowsTheEventHubToBePassedTwiceIfEqual,The length of the statement  "            Assert.That(() => new EventHubConnection(fakeConnection' eventHubName' new EventHubConnectionOptions())' Throws.Nothing' "The constructor with options should allow the same Event Hub in multiple places"); " is 204.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorValidatesExpandedArguments,The length of the statement  "            Assert.That(() => new EventHubConnection(fullyQualifiedNamespace' eventHubName' credential)' Throws.InstanceOf<ArgumentException>()); " is 133.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorCreatesDefaultOptions,The length of the statement  "            Assert.That(options' Is.Not.SameAs(defaultOptions)' $"The { constructorDescription } constructor should not have the same options instance."); " is 142.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorCreatesDefaultOptions,The length of the statement  "            Assert.That(options.TransportType' Is.EqualTo(defaultOptions.TransportType)' $"The { constructorDescription } constructor should have the correct connection type."); " is 165.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorCreatesDefaultOptions,The length of the statement  "            Assert.That(options.Proxy' Is.EqualTo(defaultOptions.Proxy)' $"The { constructorDescription } constructor should have the correct proxy."); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorClonesOptions,The length of the statement  "            Assert.That(options' Is.Not.SameAs(constructorOptions)' $"The { constructorDescription } constructor should have cloned the options."); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorClonesOptions,The length of the statement  "            Assert.That(options.TransportType' Is.EqualTo(constructorOptions.TransportType)' $"The { constructorDescription } constructor should have the correct connection type."); " is 169.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorClonesOptions,The length of the statement  "            Assert.That(options.Proxy' Is.EqualTo(constructorOptions.Proxy)' $"The { constructorDescription } constructor should have the correct proxy."); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorWithFullConnectionStringInitializesProperties,The length of the statement  "            var fakeConnection = $"Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath={ entityPath }"; " is 153.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorWithConnectionStringAndEventHubInitializesProperties,The length of the statement  "            var fakeConnection = $"Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real]"; " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorWithConnectionStringValidatesOptions,The length of the statement  "            var fakeConnection = "Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath=fake"; " is 142.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorWithConnectionStringValidatesOptions,The length of the statement  "            var invalidOptions = new EventHubConnectionOptions { TransportType = EventHubsTransportType.AmqpTcp' Proxy = Mock.Of<IWebProxy>() }; " is 132.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorWithConnectionStringValidatesOptions,The length of the statement  "            Assert.That(() => new EventHubConnection(fakeConnection' invalidOptions)' Throws.ArgumentException' "The connection string constructor should validate client options"); " is 168.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorWithExpandedArgumentsValidatesOptions,The length of the statement  "            var invalidOptions = new EventHubConnectionOptions { TransportType = EventHubsTransportType.AmqpTcp' Proxy = Mock.Of<IWebProxy>() }; " is 132.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ConstructorWithExpandedArgumentsValidatesOptions,The length of the statement  "            Assert.That(() => new EventHubConnection("fullyQualifiedNamespace"' "path"' Mock.Of<TokenCredential>()' invalidOptions)' Throws.ArgumentException' "The expanded argument constructor should validate client options"); " is 215.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ContructorWithConnectionStringCreatesTheTransportClient,The length of the statement  "            var client = new EventHubConnection("Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real]"' "fake"' new EventHubConnectionOptions()); " is 183.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,ContructorWithExpandedArgumentsCreatesTheTransportClient,The length of the statement  "            var client = new EventHubConnection(fullyQualifiedNamespace' path' new SharedAccessSignatureCredential(signature)' options); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,TransportClientReceivesDefaultOptions,The length of the statement  "            Assert.That(options' Is.Not.SameAs(defaultOptions)' $"The { constructorDescription } constructor should not have the same options instance."); " is 142.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,TransportClientReceivesDefaultOptions,The length of the statement  "            Assert.That(options.TransportType' Is.EqualTo(defaultOptions.TransportType)' $"The { constructorDescription } constructor should have the correct connection type."); " is 165.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,TransportClientReceivesDefaultOptions,The length of the statement  "            Assert.That(options.Proxy' Is.EqualTo(defaultOptions.Proxy)' $"The { constructorDescription } constructor should have the correct proxy."); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,TransportClientReceivesClonedOptions,The length of the statement  "            Assert.That(options' Is.Not.SameAs(constructorOptions)' $"The { constructorDescription } constructor should have cloned the options."); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,TransportClientReceivesClonedOptions,The length of the statement  "            Assert.That(options.TransportType' Is.EqualTo(constructorOptions.TransportType)' $"The { constructorDescription } constructor should have the correct connection type."); " is 169.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,TransportClientReceivesClonedOptions,The length of the statement  "            Assert.That(options.Proxy' Is.EqualTo(constructorOptions.Proxy)' $"The { constructorDescription } constructor should have the correct proxy."); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,BuildTransportClientAllowsLegalConnectionTypes,The length of the statement  "            Assert.That(() => client.CreateTransportClient(fullyQualifiedNamespace' path' eventHubCredential' options)' Throws.Nothing); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,BuildTransportClientRejectsInvalidConnectionTypes,The length of the statement  "            Assert.That(() => client.CreateTransportClient(fullyQualifiedNamespace' path' eventHubCredential' options)' Throws.InstanceOf<ArgumentException>()); " is 148.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumerRequiresConsumerGroup,The length of the statement  "            var client = new EventHubConnection("Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real]"' "fake"' new EventHubConnectionOptions()); " is 183.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumerRequiresConsumerGroup,The length of the statement  "            Assert.That(() => client.CreateTransportConsumer(consumerGroup' "partition1"' EventPosition.Earliest' Mock.Of<EventHubsRetryPolicy>())' Throws.InstanceOf<ArgumentException>()); " is 176.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumerRequiresPartition,The length of the statement  "            var client = new EventHubConnection("Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real]"' "fake"' new EventHubConnectionOptions()); " is 183.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumerRequiresPartition,The length of the statement  "            Assert.That(() => client.CreateTransportConsumer("someGroup"' partition' EventPosition.Earliest' Mock.Of<EventHubsRetryPolicy>())' Throws.InstanceOf<ArgumentException>()); " is 171.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumerRequiresRetryPolicy,The length of the statement  "            var client = new EventHubConnection("Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real]"' "fake"' new EventHubConnectionOptions()); " is 183.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumerRequiresRetryPolicy,The length of the statement  "            Assert.That(() => client.CreateTransportConsumer("someGroup"' "0"' EventPosition.Earliest' null)' Throws.InstanceOf<ArgumentException>()); " is 138.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CloseDelegatesToCloseAsync,The length of the statement  "            var client = new ObservableOperationsMock("Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath=fake"); " is 164.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,DisposeAsyncDelegatesToCloseAsync,The length of the statement  "            await using (var client = new ObservableOperationsMock("Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath=fake")) " is 177.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,GetPropertiesAsyncInvokesTheTransportClient,The length of the statement  "            var client = new InjectableTransportClientMock(transportClient' "Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath=fake"); " is 186.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,GetPartitionPropertiesAsyncInvokesTheTransportClient,The length of the statement  "            var client = new InjectableTransportClientMock(transportClient' "Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath=fake"); " is 186.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateProducerInvokesTheTransportClient,The length of the statement  "            var client = new InjectableTransportClientMock(transportClient' "Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath=fake"); " is 186.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateProducerInvokesTheTransportClient,The length of the statement  "            var options = new EventHubProducerClientOptions { RetryOptions = new EventHubsRetryOptions { MaximumRetries = 6' TryTimeout = TimeSpan.FromMinutes(4) } }; " is 154.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateProducerInvokesTheTransportClient,The length of the statement  "            Assert.That(transportClient.CreateProducerCalledWith.PartitionId' Is.Null' "There should have been no partition specified."); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateProducerInvokesTheTransportClient,The length of the statement  "            Assert.That(transportClient.CreateProducerCalledWith.RetryPolicy' Is.Not.Null' "The retry policy should have been specified."); " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateProducerInvokesTheTransportClient,The length of the statement  "            Assert.That(transportClient.CreateProducerCalledWith.RetryPolicy' Is.SameAs(expectedRetry)' "The retry policies should match."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumerInvokesTheTransportClient,The length of the statement  "            var client = new InjectableTransportClientMock(transportClient' "Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath=fake"); " is 186.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumerInvokesTheTransportClient,The length of the statement  "            client.CreateTransportConsumer(expectedConsumerGroup' expectedPartition' expectedPosition' expectedRetryPolicy' expectedTrackLastEnqueued' expectedOwnerLevel' expectedPrefetch); " is 177.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumerInvokesTheTransportClient,The length of the statement  "            (var actualConsumerGroup' var actualPartition' EventPosition actualPosition' var actualRetry' var actualTrackLastEnqueued' var actualOwnerLevel' var actualPrefetch) = transportClient.CreateConsumerCalledWith; " is 208.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumerInvokesTheTransportClient,The length of the statement  "            Assert.That(actualTrackLastEnqueued' Is.EqualTo(expectedTrackLastEnqueued)' "The flag for tracking the last enqueued event should match."); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CloseAsyncClosesTheTransportClient,The length of the statement  "            var client = new InjectableTransportClientMock(transportClient' "Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath=fake"); " is 186.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CloseClosesTheTransportClient,The length of the statement  "            var client = new InjectableTransportClientMock(transportClient' "Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath=fake"); " is 186.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,BuildResourceNormalizesTheResource,The length of the statement  "            var client = new InjectableTransportClientMock(transportClient' "Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath=fake"); " is 186.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,BuildResourceNormalizesTheResource,The length of the statement  "            Assert.That(resource' Is.EqualTo(resource.ToLowerInvariant())' "The resource should have been normalized to lower case."); " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,BuildResourceNormalizesTheResource,The length of the statement  "            Assert.That(uri.AbsolutePath.StartsWith("/")' Is.True' "The resource path have been normalized to begin with a trailing slash."); " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,BuildResourceNormalizesTheResource,The length of the statement  "            Assert.That(uri.AbsolutePath.EndsWith("/")' Is.False' "The resource path have been normalized to not end with a trailing slash."); " is 130.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,BuildResourceConstructsFromNamespaceAndPath,The length of the statement  "            var client = new InjectableTransportClientMock(transportClient' "Endpoint=sb://not-real.servicebus.windows.net/;SharedAccessKeyName=DummyKey;SharedAccessKey=[not_real];EntityPath=fake"); " is 186.
Long Statement,Azure.Messaging.EventHubs.Tests,ObservableTransportClientMock,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumer,The length of the statement  "                CreateConsumerCalledWith = (consumerGroup' partitionId' eventPosition' retryPolicy' trackLastEnqueuedEventProperties' ownerLevel' prefetchCount); " is 145.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerWithNoOptionsCanReceive,The length of the statement  "                await using (var connection = new EventHubConnection(connectionString' new EventHubConnectionOptions { TransportType = transportType })) " is 136.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerWithOptionsCanReceive,The length of the statement  "                await using (var connection = new EventHubConnection(connectionString' new EventHubConnectionOptions { TransportType = transportType })) " is 136.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerWithOptionsCanReceive,The length of the statement  "                    await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connection' options)) " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadSingleEvent,The length of the statement  "                    await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadSingleEvent,The length of the statement  "                        await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' DefaultReadOptions)) " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadSingleEvent,The length of the statement  "                        // Validate the events; once nulls have been removed' they should have been received in the order they were added to the batch. " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadSingleEvent,The length of the statement  "                            Assert.That(receivedEvent.IsEquivalentTo(eventBatch[index])' Is.True' $"The received event at index: { index } did not match the sent batch."); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadSingleZeroLengthEvent,The length of the statement  "                    await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadSingleZeroLengthEvent,The length of the statement  "                        await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' DefaultReadOptions)) " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadSingleZeroLengthEvent,The length of the statement  "                        // Validate the events; once nulls have been removed' they should have been received in the order they were added to the batch. " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadSingleZeroLengthEvent,The length of the statement  "                            Assert.That(receivedEvent.IsEquivalentTo(eventBatch[index])' Is.True' $"The received event at index: { index } did not match the sent batch."); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadOneZeroLengthEventSet,The length of the statement  "                        await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' DefaultReadOptions)) " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadOneZeroLengthEventSet,The length of the statement  "                        // Validate the events; once nulls have been removed' they should have been received in the order they were added to the batch. " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadOneZeroLengthEventSet,The length of the statement  "                            Assert.That(receivedEvent.IsEquivalentTo(eventSet[index])' Is.True' $"The received event at index: { index } did not match the sent batch."); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadLargeEvent,The length of the statement  "                    await using (var producer = new EventHubProducerClient(connection' new EventHubProducerClientOptions { RetryOptions = retryOptions })) " is 134.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadLargeEvent,The length of the statement  "                    await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connection' new EventHubConsumerClientOptions { RetryOptions = retryOptions })) " is 183.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadLargeEvent,The length of the statement  "                        await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' readOptions)) " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadLargeEvent,The length of the statement  "                        // Validate the events; once nulls have been removed' they should have been received in the order they were added to the batch. " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadLargeEvent,The length of the statement  "                            Assert.That(receivedEvent.IsEquivalentTo(eventBatch[index])' Is.True' $"The received event at index: { index } did not match the sent batch."); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadEventWithCustomProperties,The length of the statement  "                        await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' DefaultReadOptions)) " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadEventWithCustomProperties,The length of the statement  "                        // Validate the events; once nulls have been removed' they should have been received in the order they were added to the batch. " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadEventWithCustomProperties,The length of the statement  "                            Assert.That(receivedEvent.IsEquivalentTo(eventBatch[index])' Is.True' $"The received event at index: { index } did not match the sent batch."); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromLatestEvent,The length of the statement  "                        await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' DefaultReadOptions)) " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromLatestEvent,The length of the statement  "                        Assert.That(receivedEvents.Count' Is.EqualTo(expectedEventsCount)' $"The number of received events should be { expectedEventsCount }."); " is 136.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromLatestEvent,The length of the statement  "                        Assert.That(receivedEvents.Single().IsEquivalentTo(stampEvent)' Is.True' "The received event did not match the sent event."); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromEarliestEvent,The length of the statement  "                        await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Earliest' DefaultReadOptions)) " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromEarliestEvent,The length of the statement  "                        Assert.That(receivedEvents.Count' Is.EqualTo(expectedEventsCount)' $"The number of received events should be { expectedEventsCount }."); " is 136.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromOffset,The length of the statement  "                            await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.FromOffset(offset)' readOptions)) " is 133.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromOffset,The length of the statement  "                            Assert.That(receivedEvents.Count' Is.EqualTo(expectedEventsCount)' $"The number of received events should be { expectedEventsCount }."); " is 136.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromOffset,The length of the statement  "                            Assert.That(receivedEvents.Last().IsEquivalentTo(stampEvent)' Is.True' "The received event did not match the sent event."); " is 123.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromEnqueuedTime,The length of the statement  "                            await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.FromEnqueuedTime(enqueuedTime)' readOptions)) " is 145.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromEnqueuedTime,The length of the statement  "                            Assert.That(receivedEvents.Count' Is.EqualTo(expectedEventsCount)' $"The number of received events should be { expectedEventsCount }."); " is 136.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromEnqueuedTime,The length of the statement  "                            Assert.That(receivedEvents.Single().IsEquivalentTo(stampEvent)' Is.True' "The received event did not match the sent event."); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromSequenceNumber,The length of the statement  "                            await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.FromSequenceNumber(sequenceNumber' isInclusive)' readOptions)) " is 162.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromSequenceNumber,The length of the statement  "                            Assert.That(receivedEvents.Count' Is.EqualTo(expectedEventsCount)' $"The number of received events should be { expectedEventsCount }."); " is 136.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromSequenceNumber,The length of the statement  "                            Assert.That(receivedEvents.Last().IsEquivalentTo(stampEvent)' Is.True' "The received event did not match the sent event."); " is 123.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitions,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitions,The length of the statement  "                            using var batch = await producer.CreateBatchAsync(new CreateBatchOptions { PartitionId = partition }' cancellationSource.Token); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitions,The length of the statement  "                    Assert.That(cancellationSource.IsCancellationRequested' Is.False' "The publishing and reading should have completed normally."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitions,The length of the statement  "                    Assert.That(consecutiveEmpties' Is.LessThan(maximumConsecutiveEmpties)' "Reading should have ended because the events were all read."); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitions,The length of the statement  "                        Assert.That(receivedEvents[partition]' Is.EqualTo(eventsPerPartition)' $"The wrong number of events was received for Partition: { partition }."); " is 145.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadAllPartitionsFromLatest,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadAllPartitionsFromLatest,The length of the statement  "                            using var batch = await producer.CreateBatchAsync(new CreateBatchOptions { PartitionId = partition }' cancellationSource.Token); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadAllPartitionsFromLatest,The length of the statement  "                    await foreach (var partitionEvent in consumer.ReadEventsAsync(false' new ReadEventOptions { MaximumWaitTime = TimeSpan.FromMilliseconds(50) }' cancellationSource.Token)) " is 169.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadAllPartitionsFromLatest,The length of the statement  "                    Assert.That(consecutiveEmpties' Is.GreaterThanOrEqualTo(maximumConsecutiveEmpties)' "The empty events should have caused reading to stop."); " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadAllPartitionsFromLatest,The length of the statement  "                    Assert.That(cancellationSource.IsCancellationRequested' Is.False' "The publishing and reading should have completed normally."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadAllPartitionsFromLatest,The length of the statement  "                    Assert.That(consecutiveEmpties' Is.LessThan(maximumConsecutiveEmpties)' "Reading should have ended because the events were all read."); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadAllPartitionsFromLatest,The length of the statement  "                        Assert.That(receivedEvents[partition]' Is.EqualTo(eventsPerPartition)' $"The wrong number of events was received for Partition: { partition }."); " is 145.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsWhenUsingPartitionKeys,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsWhenUsingPartitionKeys,The length of the statement  "                            using var batch = await producer.CreateBatchAsync(new CreateBatchOptions { PartitionKey = $"Key{ partition.GetHashCode() }" }' cancellationSource.Token); " is 153.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsWhenUsingPartitionKeys,The length of the statement  "                    Assert.That(cancellationSource.IsCancellationRequested' Is.False' "The publishing and reading should have completed normally."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsWhenUsingPartitionKeys,The length of the statement  "                    Assert.That(consecutiveEmpties' Is.LessThan(maximumConsecutiveEmpties)' "Reading should have ended because the events were all read."); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsWhenUsingAutomaticRouting,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsWhenUsingAutomaticRouting,The length of the statement  "                                batch.TryAdd(new EventData(Encoding.UTF8.GetBytes($"Event: { index } of this batch.  Number: { ++eventsBatched } overall."))); " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsWhenUsingAutomaticRouting,The length of the statement  "                    Assert.That(cancellationSource.IsCancellationRequested' Is.False' "The publishing and reading should have completed normally."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsWhenUsingAutomaticRouting,The length of the statement  "                    Assert.That(consecutiveEmpties' Is.LessThan(maximumConsecutiveEmpties)' "Reading should have ended because the events were all read."); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadUsingAnIdentityCredential,The length of the statement  "                var credential = new ClientSecretCredential(TestEnvironment.EventHubsTenant' TestEnvironment.EventHubsClient' TestEnvironment.EventHubsSecret); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadUsingAnIdentityCredential,The length of the statement  "                await using (var producer = new EventHubProducerClient(TestEnvironment.FullyQualifiedNamespace' scope.EventHubName' credential)) " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadUsingAnIdentityCredential,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' TestEnvironment.FullyQualifiedNamespace' scope.EventHubName' credential)) " is 177.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadUsingAnIdentityCredential,The length of the statement  "                    await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Earliest' DefaultReadOptions)) " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadUsingAnIdentityCredential,The length of the statement  "                    Assert.That(receivedEvents.Count' Is.EqualTo(expectedEventsCount)' $"The number of received events should be { expectedEventsCount }."); " is 136.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsUsingAnIdentityCredential,The length of the statement  "                var credential = new ClientSecretCredential(TestEnvironment.EventHubsTenant' TestEnvironment.EventHubsClient' TestEnvironment.EventHubsSecret); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsUsingAnIdentityCredential,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' TestEnvironment.FullyQualifiedNamespace' scope.EventHubName' credential)) " is 177.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsUsingAnIdentityCredential,The length of the statement  "                    await using (var producer = new EventHubProducerClient(TestEnvironment.FullyQualifiedNamespace' scope.EventHubName' credential)) " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsUsingAnIdentityCredential,The length of the statement  "                            using var batch = await producer.CreateBatchAsync(new CreateBatchOptions { PartitionId = partition }' cancellationSource.Token); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsUsingAnIdentityCredential,The length of the statement  "                    Assert.That(cancellationSource.IsCancellationRequested' Is.False' "The publishing and reading should have completed normally."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsUsingAnIdentityCredential,The length of the statement  "                    Assert.That(consecutiveEmpties' Is.LessThan(maximumConsecutiveEmpties)' "Reading should have ended because the events were all read."); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReadWhenClosed,The length of the statement  "                            await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' DefaultReadOptions)) " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReceiveFromInvalidPartition,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReceiveFromInvalidPartition,The length of the statement  "                    Assert.That(async () => await ReadNothingAsync(consumer' invalidPartition' EventPosition.Latest)' Throws.InstanceOf<ArgumentOutOfRangeException>()); " is 148.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReceiveFromNonExistentConsumerGroup,The length of the statement  "                        Assert.That(async () => await ReadNothingAsync(consumer' partition' EventPosition.Latest)' Throws.InstanceOf<EventHubsResourceNotFoundException>()); " is 148.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,NoOwnerLevelConsumerCannotStartReading,The length of the statement  "                    await using var exclusiveConsumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connection); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,NoOwnerLevelConsumerCannotStartReading,The length of the statement  "                    await foreach (var exclusiveEvent in exclusiveConsumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' exclusiveReadOptions' cancellationSource.Token)) " is 165.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,NoOwnerLevelConsumerCannotStartReading,The length of the statement  "                            await using var nonExclusiveConsumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connection); " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,NoOwnerLevelConsumerCannotStartReading,The length of the statement  "                            Assert.That(async () => await ReadNothingAsync(nonExclusiveConsumer' partition' EventPosition.Latest)' Throws.InstanceOf<ConsumerDisconnectedException>()); " is 155.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOwnerLevelConsumerCannotStartReading,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOwnerLevelConsumerCannotStartReading,The length of the statement  "                    await foreach (var higherEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' higherExclusiveReadOptions' cancellationSource.Token)) " is 159.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOwnerLevelConsumerCannotStartReading,The length of the statement  "                            Assert.That(async () => await ReadNothingAsync(consumer' partition' EventPosition.Latest' lowerExclusiveReadOptions)' Throws.InstanceOf<ConsumerDisconnectedException>()); " is 170.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReceivingFromOtherPartitions,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReceivingFromOtherPartitions,The length of the statement  "                    await foreach (var higherEvent in consumer.ReadEventsFromPartitionAsync(partitionIds[0]' EventPosition.Latest' higherExclusiveReadOptions' cancellationSource.Token)) " is 165.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReceivingFromOtherPartitions,The length of the statement  "                            Assert.That(async () => await ReadNothingAsync(consumer' partitionIds[1]' EventPosition.Latest' lowerExclusiveReadOptions)' Throws.Nothing); " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReceivingFromOtherPartitions,The length of the statement  "                            Assert.That(async () => await ReadNothingAsync(consumer' partitionIds[2]' EventPosition.Latest' DefaultReadOptions)' Throws.Nothing); " is 133.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReadingFromOtherConsumerGroups,The length of the statement  "                    await foreach (var higherEvent in higherExclusiveConsumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' higherExclusiveReadOptions' cancellationSource.Token)) " is 174.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReadingFromOtherConsumerGroups,The length of the statement  "                            Assert.That(async () => await ReadNothingAsync(lowerExclusiveConsumer' partition' EventPosition.Latest' lowerExclusiveReadOptions)' Throws.Nothing); " is 148.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReadingFromOtherConsumerGroups,The length of the statement  "                            await using var nonExclusiveConsumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connection); " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesNoOwnerLevelConsumer,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesNoOwnerLevelConsumer,The length of the statement  "                    Assert.That(async () => await ReadNothingAsync(consumer' partition' EventPosition.Latest' exclusiveReadOptions)' Throws.Nothing); " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesNoOwnerLevelConsumer,The length of the statement  "                    await foreach (var exclusiveEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' exclusiveReadOptions' cancellationSource.Token)) " is 156.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesNoOwnerLevelConsumer,The length of the statement  "                            Assert.That(async () => await ReadNothingAsync(consumer' partition' EventPosition.Latest)' Throws.InstanceOf<ConsumerDisconnectedException>()); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesLowerOwnerLevelConsumer,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesLowerOwnerLevelConsumer,The length of the statement  "                    Assert.That(async () => await ReadNothingAsync(consumer' partition' EventPosition.Latest' lowerExclusiveReadOptions)' Throws.Nothing); " is 134.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesLowerOwnerLevelConsumer,The length of the statement  "                    Assert.That(async () => await ReadNothingAsync(consumer' partition' EventPosition.Latest' higherExclusiveReadOptions)' Throws.Nothing); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesLowerOwnerLevelConsumer,The length of the statement  "                    await foreach (var higherEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' higherExclusiveReadOptions' cancellationSource.Token)) " is 159.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesLowerOwnerLevelConsumer,The length of the statement  "                            Assert.That(async () => await ReadNothingAsync(consumer' partition' EventPosition.Latest' lowerExclusiveReadOptions)' Throws.InstanceOf<ConsumerDisconnectedException>()); " is 170.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherPartitions,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherPartitions,The length of the statement  "                    await foreach (var nonExclusiveEvent in consumer.ReadEventsFromPartitionAsync(partitionIds[0]' EventPosition.Latest' DefaultReadOptions' cancellationSource.Token)) " is 163.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherPartitions,The length of the statement  "                            // Begin reading with the lower-level exclusive consumer so that it is active connected when the higher level exclusive consumer reads. " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherPartitions,The length of the statement  "                            await foreach (var lowerExclusiveEvent in consumer.ReadEventsFromPartitionAsync(partitionIds[1]' EventPosition.Latest' lowerExclusiveReadOptions' cancellationSource.Token)) " is 172.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherPartitions,The length of the statement  "                                    Assert.That(async () => await ReadNothingAsync(consumer' partitionIds[2]' EventPosition.Latest' higherExclusiveReadOptions)' Throws.Nothing); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherConsumerGroups,The length of the statement  "                    await foreach (var nonExclusiveEvent in nonExclusiveConsumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' DefaultReadOptions' cancellationSource.Token)) " is 169.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherConsumerGroups,The length of the statement  "                            await foreach (var lowerEvent in lowerExclusiveConsumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' lowerExclusiveReadOptions' cancellationSource.Token)) " is 171.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherConsumerGroups,The length of the statement  "                                    await using var higherExclusiveConsumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connection); " is 130.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherConsumerGroups,The length of the statement  "                                    Assert.That(async () => await ReadNothingAsync(higherExclusiveConsumer' partition' EventPosition.Latest' higherExclusiveReadOptions)' Throws.Nothing); " is 150.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                await using (var defaultGroupConsumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 134.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                    // Create an exclusive consumer with low priority; this consumer should block a non-exclusive consumer but be trumped by the " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                        await foreach (var lowerEvent in defaultGroupConsumer.ReadEventsFromPartitionAsync(partitionIds[0]' EventPosition.Latest' lowerExclusiveReadOptions' cancellationSource.Token)) " is 175.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                                Assert.That(async () => await ReadNothingAsync(defaultGroupConsumer' partitionIds[0]' EventPosition.Latest)' Throws.InstanceOf<ConsumerDisconnectedException>()); " is 161.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                                await foreach (var higherEvent in defaultGroupConsumer.ReadEventsFromPartitionAsync(partitionIds[0]' EventPosition.Latest' higherExclusiveReadOptions' cancellationSource.Token)) " is 177.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                                        Assert.That(async () => await ReadNothingAsync(differentConsumerGroupConsumer' partitionIds[0]' EventPosition.Latest)' Throws.Nothing); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                                        Assert.That(async () => await ReadNothingAsync(differentGroupAndPartitionConsumer' partitionIds[1]' EventPosition.Latest)' Throws.Nothing); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                                        Assert.That(async () => await ReadNothingAsync(invalidConsumerGroupConsumer' partitionIds[0]' EventPosition.Latest)' Throws.InstanceOf<EventHubsResourceNotFoundException>()); " is 174.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                                        await using var invalidPartitionConsumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString); " is 137.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                                        Assert.That(async () => await ReadNothingAsync(invalidPartitionConsumer' "ABC"' EventPosition.Latest)' Throws.InstanceOf<ArgumentOutOfRangeException>()); " is 153.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                    Assert.That(scenariosComplete' Is.True' "The lower exclusive consumer should not have been disconnected before the scenarios were completed."); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidPartitionConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidPartitionConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                    Assert.That(async () => await ReadNothingAsync(consumer' "XYZ"' EventPosition.Latest)' Throws.InstanceOf<ArgumentOutOfRangeException>()); " is 137.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidPartitionConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                    Assert.That(async () => await ReadNothingAsync(consumer' partition' EventPosition.Latest' exclusiveReadOptions)' Throws.Nothing); " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidPartitionConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                    await foreach (var exclusiveItem in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' exclusiveReadOptions' cancellationSource.Token)) " is 155.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidPartitionConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                        Assert.That(async () => await ReadNothingAsync(invalidConsumerGroupConsumer' partition' EventPosition.Latest)' Throws.InstanceOf<EventHubsResourceNotFoundException>()); " is 168.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidPartitionConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                        await using var otherInvalidPartitionConsumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString); " is 142.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidPartitionConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                        Assert.That(async () => await ReadNothingAsync(otherInvalidPartitionConsumer' "ABC"' EventPosition.Latest)' Throws.InstanceOf<ArgumentOutOfRangeException>()); " is 158.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidPartitionConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                        await using var nonExclusiveConsumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString); " is 133.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidPartitionConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                        Assert.That(async () => await ReadNothingAsync(nonExclusiveConsumer' partition' EventPosition.Latest)' Throws.InstanceOf<ConsumerDisconnectedException>()); " is 155.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidConsumerGroupConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                    Assert.That(async () => await ReadNothingAsync(invalidConsumerGroupConsumer' partition' EventPosition.Latest)' Throws.InstanceOf<EventHubsResourceNotFoundException>()); " is 168.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidConsumerGroupConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                    await using var exclusiveConsumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connection); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidConsumerGroupConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                    Assert.That(async () => await ReadNothingAsync(exclusiveConsumer' partition' EventPosition.Latest' exclusiveReadOptions)' Throws.Nothing); " is 138.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidConsumerGroupConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                    await foreach (var exclusiveItem in exclusiveConsumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' exclusiveReadOptions' cancellationSource.Token)) " is 164.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidConsumerGroupConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                            Assert.That(async () => await ReadNothingAsync(otherInvalidConsumerGroupConsumer' partition' EventPosition.Latest)' Throws.InstanceOf<EventHubsResourceNotFoundException>()); " is 173.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidConsumerGroupConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                            await using var invalidPartitionConsumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connection); " is 131.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidConsumerGroupConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                            Assert.That(async () => await ReadNothingAsync(invalidPartitionConsumer' "ABC"' EventPosition.Latest)' Throws.InstanceOf<ArgumentOutOfRangeException>()); " is 153.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidConsumerGroupConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                            await using var nonExclusiveConsumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connection); " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidConsumerGroupConsumerDoesNotCompromiseReadBehavior,The length of the statement  "                            Assert.That(async () => await ReadNothingAsync(nonExclusiveConsumer' partition' EventPosition.Latest)' Throws.InstanceOf<ConsumerDisconnectedException>()); " is 155.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReadEventsSentToAnotherPartition,The length of the statement  "                    await using var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReadEventsSentToAnotherPartition,The length of the statement  "                    await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partitionIds[1]' EventPosition.Latest' DefaultReadOptions' cancellationSource.Token)) " is 160.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumersInDifferentConsumerGroupsShouldAllReadEvents,The length of the statement  "                    await using var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumersInDifferentConsumerGroupsShouldAllReadEvents,The length of the statement  "                    await foreach (var consumerEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Earliest' readOptions' cancellationSource.Token)) " is 148.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumersInDifferentConsumerGroupsShouldAllReadEvents,The length of the statement  "                    await foreach (var anotherEvent in anotherConsumer.ReadEventsFromPartitionAsync(partition' EventPosition.Earliest' readOptions' cancellationSource.Token)) " is 154.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumersInDifferentConsumerGroupsShouldAllReadEvents,The length of the statement  "                    Assert.That(consumerReceivedEvents.Count' Is.EqualTo(eventBatch.Length)' $"The number of received events in consumer group { consumer.ConsumerGroup } did not match the batch size."); " is 182.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumersInDifferentConsumerGroupsShouldAllReadEvents,The length of the statement  "                    Assert.That(anotherReceivedEvents.Count' Is.EqualTo(eventBatch.Length)' $"The number of received events in consumer group { anotherConsumer.ConsumerGroup } did not match the batch size."); " is 188.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ReadStopsWhenMaximumWaitTimeIsReached,The length of the statement  "                    await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' readOptions' cancellationSource.Token)) " is 147.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReadWhenProxyIsInvalid,The length of the statement  "                    await using (var invalidProxyConsumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString' options)) " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReadWhenProxyIsInvalid,The length of the statement  "                        Assert.That(async () => await ReadNothingAsync(invalidProxyConsumer' partition' EventPosition.Latest' readOptions' 25)' Throws.InstanceOf<WebSocketException>().Or.InstanceOf<TimeoutException>()); " is 195.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanRetrieveEventHubProperties,The length of the statement  "                var consumerOptions = new EventHubConsumerClientOptions { ConnectionOptions = new EventHubConnectionOptions { TransportType = transportType } }; " is 144.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanRetrieveEventHubProperties,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString' scope.EventHubName' consumerOptions)) " is 159.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanRetrieveEventHubProperties,The length of the statement  "                    Assert.That(properties.PartitionIds.Length' Is.EqualTo(partitionCount)' "The properties should have the requested number of partitions."); " is 138.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanRetrieveEventHubProperties,The length of the statement  "                    Assert.That(properties.CreatedOn' Is.EqualTo(DateTimeOffset.UtcNow).Within(TimeSpan.FromSeconds(60))' "The Event Hub should have been created just about now."); " is 160.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanRetrievePartitionProperties,The length of the statement  "                var consumerOptions = new EventHubConsumerClientOptions { ConnectionOptions = new EventHubConnectionOptions { TransportType = transportType } }; " is 144.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanRetrievePartitionProperties,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString' scope.EventHubName' consumerOptions)) " is 159.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanRetrievePartitionProperties,The length of the statement  "                    Assert.That(partitionProperties.EventHubName' Is.EqualTo(scope.EventHubName).Using((IEqualityComparer<string>)StringComparer.InvariantCultureIgnoreCase)' "The Event Hub path should match."); " is 190.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanRetrievePartitionProperties,The length of the statement  "                    Assert.That(partitionProperties.BeginningSequenceNumber' Is.Not.EqualTo(default(long))' "The beginning sequence number should have been populated."); " is 149.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanRetrievePartitionProperties,The length of the statement  "                    Assert.That(partitionProperties.LastEnqueuedSequenceNumber' Is.Not.EqualTo(default(long))' "The last sequence number should have been populated."); " is 147.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanRetrievePartitionProperties,The length of the statement  "                    Assert.That(partitionProperties.LastEnqueuedOffset' Is.Not.EqualTo(default(long))' "The last offset should have been populated."); " is 130.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConnectionTransportPartitionIdsMatchPartitionProperties,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConnectionTransportPartitionIdsMatchPartitionProperties,The length of the statement  "                    Assert.That(properties.PartitionIds' Is.Not.Null' "A set of partition identifiers for the properties should have been returned."); " is 130.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConnectionTransportPartitionIdsMatchPartitionProperties,The length of the statement  "                    Assert.That(partitions' Is.EquivalentTo(properties.PartitionIds)' "The partition identifiers returned directly should match those returned with properties."); " is 158.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotRetrieveMetadataWhenClosed,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotRetrieveMetadataWhenClosed,The length of the statement  "                    Assert.That(async () => await consumer.GetPartitionPropertiesAsync(partition)' Throws.TypeOf<EventHubsClientClosedException>()); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotRetrievePartitionPropertiesWhenPartitionIdIsInvalid,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotRetrievePartitionPropertiesWhenPartitionIdIsInvalid,The length of the statement  "                    Assert.That(async () => await consumer.GetPartitionPropertiesAsync(invalidPartition)' Throws.TypeOf<ArgumentOutOfRangeException>()); " is 132.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotRetrieveMetadataWhenProxyIsInvalid,The length of the statement  "                await using (var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)) " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotRetrieveMetadataWhenProxyIsInvalid,The length of the statement  "                await using (var invalidProxyConsumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString' invalidProxyOptions)) " is 155.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotRetrieveMetadataWhenProxyIsInvalid,The length of the statement  "                    Assert.That(async () => await invalidProxyConsumer.GetPartitionIdsAsync()' Throws.InstanceOf<WebSocketException>().Or.InstanceOf<TimeoutException>()); " is 150.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotRetrieveMetadataWhenProxyIsInvalid,The length of the statement  "                    Assert.That(async () => await invalidProxyConsumer.GetEventHubPropertiesAsync()' Throws.InstanceOf<WebSocketException>().Or.InstanceOf<TimeoutException>()); " is 156.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotRetrieveMetadataWhenProxyIsInvalid,The length of the statement  "                    Assert.That(async () => await invalidProxyConsumer.GetPartitionPropertiesAsync(partition)' Throws.InstanceOf<WebSocketException>().Or.InstanceOf<TimeoutException>()); " is 166.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientOptionsTests.cs,CloneProducesACopy,The length of the statement  "            Assert.That(clone.ConnectionOptions.TransportType' Is.EqualTo(options.ConnectionOptions.TransportType)' "The connection options of the clone should copy properties."); " is 167.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientOptionsTests.cs,CloneProducesACopy,The length of the statement  "            Assert.That(clone.ConnectionOptions' Is.Not.SameAs(options.ConnectionOptions)' "The connection options of the clone should be a copy' not the same instance."); " is 159.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientOptionsTests.cs,CloneProducesACopy,The length of the statement  "            Assert.That(clone.RetryOptions.IsEquivalentTo(options.RetryOptions)' Is.True' "The retry options of the clone should be considered equal."); " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientOptionsTests.cs,CloneProducesACopy,The length of the statement  "            Assert.That(clone.RetryOptions' Is.Not.SameAs(options.RetryOptions)' "The retry options of the clone should be a copy' not the same instance."); " is 144.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ConstructorValidatesTheConsumerGroup,The length of the statement  "            Assert.That(() => new EventHubConsumerClient(consumerGroup' "dummyConnection"' new EventHubConsumerClientOptions())' Throws.InstanceOf<ArgumentException>()' "The connection string constructor should validate the consumer group."); " is 230.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ConstructorValidatesTheConsumerGroup,The length of the statement  "            Assert.That(() => new EventHubConsumerClient(consumerGroup' "dummyNamespace"' "dummyEventHub"' credential.Object' new EventHubConsumerClientOptions())' Throws.InstanceOf<ArgumentException>()' "The namespace constructor should validate the consumer group."); " is 257.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ConstructorValidatesTheConnectionString,The length of the statement  "            Assert.That(() => new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString)' Throws.InstanceOf<ArgumentException>()' "The constructor without options should ensure a connection string."); " is 223.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ConstructorValidatesTheConnectionString,The length of the statement  "            Assert.That(() => new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString' "dummy"' new EventHubConsumerClientOptions())' Throws.InstanceOf<ArgumentException>()' "The constructor with options should ensure a connection string."); " is 266.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ConstructorValidatesTheNamespace,The length of the statement  "            Assert.That(() => new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' constructorArgument' "dummy"' credential.Object)' Throws.InstanceOf<ArgumentException>()); " is 184.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ConstructorValidatesTheEventHub,The length of the statement  "            Assert.That(() => new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' "namespace"' constructorArgument' credential.Object)' Throws.InstanceOf<ArgumentException>()); " is 188.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ConstructorValidatesTheCredential,The length of the statement  "            Assert.That(() => new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' "namespace"' "hubName"' default(TokenCredential))' Throws.ArgumentNullException); " is 175.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ConstructorValidatesTheConnection,The length of the statement  "            Assert.That(() => new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' default(EventHubConnection))' Throws.ArgumentNullException); " is 154.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ConnectionStringConstructorSetsTheRetryPolicy,The length of the statement  "            var options = new EventHubConsumerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = expected } }; " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ExpandedConstructorSetsTheRetryPolicy,The length of the statement  "            var options = new EventHubConsumerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = expected } }; " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ExpandedConstructorSetsTheRetryPolicy,The length of the statement  "            var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' "namespace"' "hub"' credential.Object' options); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ConnectionConstructorSetsTheRetryPolicy,The length of the statement  "            var options = new EventHubConsumerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = expected } }; " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ConnectionStringConstructorCreatesDefaultOptions,The length of the statement  "            Assert.That(actual.IsEquivalentTo(expected)' Is.True' "The default retry policy should be based on the default retry options."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ExpandedConstructorCreatesDefaultOptions,The length of the statement  "            var consumer = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' "some-namespace"' "hubName"' credential.Object); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ExpandedConstructorCreatesDefaultOptions,The length of the statement  "            Assert.That(actual.IsEquivalentTo(expected)' Is.True' "The default retry policy should be based on the default retry options."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ConnectionConstructorCreatesDefaultOptions,The length of the statement  "            Assert.That(actual.IsEquivalentTo(expected)' Is.True' "The default retry policy should be based on the default retry options."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,GetEventHubPropertiesAsyncUsesTheRetryPolicy,The length of the statement  "            var options = new EventHubConsumerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = retryPolicy } }; " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,GetEventHubPropertiesAsyncUsesTheRetryPolicy,The length of the statement  "            Assert.That(mockConnection.GetPropertiesInvokedWith' Is.SameAs(retryPolicy)' "Either the call was not delegated or the retry policy was not passed."); " is 150.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,GetPartitionIdsUsesTheRetryPolicy,The length of the statement  "            var options = new EventHubConsumerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = retryPolicy } }; " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,GetPartitionIdsUsesTheRetryPolicy,The length of the statement  "            Assert.That(mockConnection.GetPartitionIdsInvokedWith' Is.SameAs(retryPolicy)' "Either the call was not delegated or the retry policy was not passed."); " is 152.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,GetPartitionPropertiesUsesTheRetryPolicy,The length of the statement  "            var options = new EventHubConsumerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = retryPolicy } }; " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,GetPartitionPropertiesUsesTheRetryPolicy,The length of the statement  "            Assert.That(mockConnection.GetPartitionPropertiesInvokedWith' Is.SameAs(retryPolicy)' "Either the call was not delegated or the retry policy was not passed."); " is 159.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,CloseAsyncClosesActiveTransportConsumers,The length of the statement  "            await using var firstIterator = consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(23)' options).GetAsyncEnumerator(); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,CloseAsyncClosesActiveTransportConsumers,The length of the statement  "            await using var secondIterator = consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(23)' options).GetAsyncEnumerator(); " is 136.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,CloseAsyncSurfacesExceptionsForActiveTransportConsumers,The length of the statement  "                await using var iterator = consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(23)' options).GetAsyncEnumerator(); " is 130.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncWithNoOptionsReturnsAnEnumerable,The length of the statement  "            Assert.That(enumerable' Is.InstanceOf<IAsyncEnumerable<PartitionEvent>>()' "The enumerable should be of the correct type."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncWithNoOptionsReturnsAnEnumerable,The length of the statement  "                Assert.That(enumerator' Is.InstanceOf<IAsyncEnumerator<PartitionEvent>>()' "The enumerator should be of the correct type."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncWithOptionsReturnsAnEnumerable,The length of the statement  "            Assert.That(enumerable' Is.InstanceOf<IAsyncEnumerable<PartitionEvent>>()' "The enumerable should be of the correct type."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncWithOptionsReturnsAnEnumerable,The length of the statement  "                Assert.That(enumerator' Is.InstanceOf<IAsyncEnumerator<PartitionEvent>>()' "The enumerator should be of the correct type."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncThrowsIfConsumerClosedBeforeRead,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token)) " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncThrowsIfCancelledBeforeRead,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token)) " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncThrowsIfCancelledDuringRead,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token)) " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncDoesNotThrowIfNotCancelled,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token)) " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenCanceled,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token)) " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenCanceled,The length of the statement  "            // There is a fair amount of non-determinism during background processing.  Pause a moment to allow additional events to build if publishing " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenCanceled,The length of the statement  "            // has not stopped.  Allow for a fairly wide buffer for range checking to combat buffering and the potential that additional receive pumps " is 138.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenCanceled,The length of the statement  "            Assert.That(transportConsumer.PublishIndex' Is.EqualTo(expectedEvents).Within(transportConsumer.LastMaximumMessageCount * 5)' "Publishing should have stopped when the iterator was canceled."); " is 192.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenIterationStops,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token)) " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenIterationStops,The length of the statement  "            // There is a fair amount of non-determinism during background processing.  Pause a moment to allow additional events to build if publishing " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenIterationStops,The length of the statement  "            // has not stopped.  Allow for a fairly wide buffer for range checking to combat buffering and the potential that additional receive pumps " is 138.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenIterationStops,The length of the statement  "            Assert.That(transportConsumer.PublishIndex' Is.EqualTo(expectedEvents).Within(transportConsumer.LastMaximumMessageCount * 5)' "Publishing should have stopped when the iterator was canceled."); " is 192.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingOnException,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token)) " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingOnException,The length of the statement  "            // There is a fair amount of non-determinism during background processing.  Pause a moment to allow additional events to build if publishing " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingOnException,The length of the statement  "            // has not stopped.  Allow for a fairly wide buffer for range checking to combat the potential that an additional receive pump took place " is 137.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingOnException,The length of the statement  "            Assert.That(iteration' Is.EqualTo(expectedEvents).Within(lastMaximumCount * 2)' "Publishing should have stopped when the exception was thrown."); " is 145.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithOneIteratorAndSingleBatch,The length of the statement  "            await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token)) " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndSingleBatch,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' position' options' cancellation.Token).ConfigureAwait(false)) " is 158.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndSingleBatch,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' position' options' cancellation.Token).ConfigureAwait(false)) " is 158.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndSingleBatch,The length of the statement  "            await Task.WhenAll(firstSubscriberTask' secondSubscriberTask' firstCompletionSource.Task' secondCompletionSource.Task).ConfigureAwait(false); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndSingleBatch,The length of the statement  "            Assert.That(firstSubscriberEvents' Is.EquivalentTo(events)' "The received events for the first subscriber should match the published events."); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndSingleBatch,The length of the statement  "            Assert.That(secondSubscriberEvents' Is.EquivalentTo(events)' "The received events for the second subscriber should match the published events."); " is 145.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithOneIteratorAndMultipleBatches,The length of the statement  "            await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromSequenceNumber(123)' cancellation.Token)) " is 150.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndMultipleBatches,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' position' options' cancellation.Token).ConfigureAwait(false)) " is 158.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndMultipleBatches,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' position' options' cancellation.Token).ConfigureAwait(false)) " is 158.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndMultipleBatches,The length of the statement  "            await Task.WhenAll(firstSubscriberTask' secondSubscriberTask' firstCompletionSource.Task' secondCompletionSource.Task).ConfigureAwait(false); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndMultipleBatches,The length of the statement  "            Assert.That(firstSubscriberEvents' Is.EquivalentTo(events)' "The received events for the first subscriber should match the published events."); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndMultipleBatches,The length of the statement  "            Assert.That(secondSubscriberEvents' Is.EquivalentTo(events)' "The received events for the second subscriber should match the published events."); " is 145.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRespectsWaitTimeWhenPublishingEvents,The length of the statement  "            await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' options' cancellation.Token)) " is 150.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRespectsWaitTimeWhenPublishingEvents,The length of the statement  "            Assert.That(receivedEvents.Count' Is.AtLeast(events.Count + 1).And.LessThanOrEqualTo(events.Count * 2)' "There should be empty events present due to the wait time."); " is 166.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRespectsWaitTimeWhenPublishingEvents,The length of the statement  "            Assert.That(receivedEvents.Where(item => item != null)' Is.EquivalentTo(events)' "The received events should match the published events when empty events are removed."); " is 169.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPropagatesException,The length of the statement  "            var transportConsumer = new ReceiveCallbackTransportConsumerMock((_max' _time) => throw (Exception)Activator.CreateInstance(exceptionType)); " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPropagatesException,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(2)' cancellation.Token)) " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncSurfacesCancelation,The length of the statement  "            var transportConsumer = new ReceiveCallbackTransportConsumerMock((_max' _time) => throw (Exception)Activator.CreateInstance(exceptionType)); " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncSurfacesCancelation,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.Earliest' cancellation.Token)) " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncSurfacesNonRetriableExceptions,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(120)' cancellation.Token)) " is 142.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncSurfacesNonRetriableExceptions,The length of the statement  "            Assert.That(async () => await invoke()' Throws.TypeOf(exception.GetType())' "The enumerator should surface the exception."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRetriesAndSurfacesRetriableExceptions,The length of the statement  "            var options = new EventHubConsumerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = mockRetryPolicy.Object } }; " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRetriesAndSurfacesRetriableExceptions,The length of the statement  "                .Setup(policy => policy.CalculateRetryDelay(It.Is<Exception>(value => value == exception)' It.Is<int>(value => value <= maximumRetries))) " is 137.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRetriesAndSurfacesRetriableExceptions,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromSequenceNumber(123)' cancellation.Token)) " is 150.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRetriesAndSurfacesRetriableExceptions,The length of the statement  "            Assert.That(async () => await invoke()' Throws.TypeOf(exception.GetType())' "The enumerator should surface the exception."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncHonorsRetryPolicyForRetriableExceptions,The length of the statement  "            var options = new EventHubConsumerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = mockRetryPolicy.Object } }; " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncHonorsRetryPolicyForRetriableExceptions,The length of the statement  "                await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(888)' cancellation.Token)) " is 142.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncHonorsRetryPolicyForRetriableExceptions,The length of the statement  "            Assert.That(async () => await invoke()' Throws.TypeOf(exception.GetType())' "The enumerator should surface the exception."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncWithNoOptionsReturnsAnEnumerable,The length of the statement  "            Assert.That(enumerable' Is.InstanceOf<IAsyncEnumerable<PartitionEvent>>()' "The enumerable should be of the correct type."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncWithNoOptionsReturnsAnEnumerable,The length of the statement  "                Assert.That(enumerator' Is.InstanceOf<IAsyncEnumerator<PartitionEvent>>()' "The enumerator should be of the correct type."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncWithOptionsReturnsAnEnumerable,The length of the statement  "            Assert.That(enumerable' Is.InstanceOf<IAsyncEnumerable<PartitionEvent>>()' "The enumerable should be of the correct type."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncWithOptionsReturnsAnEnumerable,The length of the statement  "                Assert.That(enumerator' Is.InstanceOf<IAsyncEnumerator<PartitionEvent>>()' "The enumerator should be of the correct type."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenCanceled,The length of the statement  "            // There is a fair amount of non-determinism during background processing.  Pause a moment to allow additional events to build if publishing " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenCanceled,The length of the statement  "            // has not stopped.  Allow for a fairly wide buffer for range checking to combat buffering and the potential that additional receive pumps " is 138.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenCanceled,The length of the statement  "            Assert.That(receivedEvents' Is.EqualTo(expectedEvents).Within(2)' "There should have been the expected number events received."); " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenCanceled,The length of the statement  "            Assert.That(transportConsumer.PublishIndex' Is.EqualTo(expectedEvents).Within(transportConsumer.LastMaximumMessageCount * thresholdModifier)' "Publishing should have stopped when the iterator was canceled."); " is 208.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenIterationStops,The length of the statement  "            // There is a fair amount of non-determinism during background processing.  Pause a moment to allow additional events to build if publishing " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenIterationStops,The length of the statement  "            // has not stopped.  Allow for a fairly wide buffer for range checking to combat buffering and the potential that additional receive pumps " is 138.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenIterationStops,The length of the statement  "            Assert.That(transportConsumer.PublishIndex' Is.EqualTo(expectedEvents).Within(transportConsumer.LastMaximumMessageCount * thresholdModifier)' "Publishing should have stopped when the iterator was canceled."); " is 208.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingOnException,The length of the statement  "            // There is a fair amount of non-determinism during background processing.  Pause a moment to allow additional events to build if publishing " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingOnException,The length of the statement  "            // has not stopped.  Allow for a fairly wide buffer for range checking to combat the potential that an additional receive pump took place " is 137.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingOnException,The length of the statement  "            Assert.That(receivedEvents' Is.EqualTo(expectedEvents).Within(2)' "There should have been the expected number events received."); " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingOnException,The length of the statement  "            Assert.That(iteration' Is.EqualTo(expectedEvents).Within(lastMaximumCount * 2)' "Publishing should have stopped when the exception was thrown."); " is 145.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncPublishesEventsWithOneIterator,The length of the statement  "            Assert.That(actualCount' Is.EqualTo(expectedEventCount)' "The received event count should match the published events."); " is 120.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncPublishesEventsWithOneIterator,The length of the statement  "            Assert.That(receivedEvents.OrderBy(item => item)' Is.EquivalentTo(expectedEvents)' "The received events should match the published events."); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncPublishesEventsWithMultipleIterators,The length of the statement  "            await Task.WhenAll(firstSubscriberTask' secondSubscriberTask' firstCompletionSource.Task' secondCompletionSource.Task).ConfigureAwait(false); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncPublishesEventsWithMultipleIterators,The length of the statement  "            Assert.That(firstSubscriberCount' Is.EqualTo(expectedEventCount)' "The received event count for the first subscriber should match the published events."); " is 154.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncPublishesEventsWithMultipleIterators,The length of the statement  "            Assert.That(secondSubcriberCount' Is.EqualTo(expectedEventCount)' "The received event count for the second subscriber should match the published events."); " is 155.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncPublishesEventsWithMultipleIterators,The length of the statement  "            Assert.That(firstSubscriberEvents' Is.EquivalentTo(expectedEvents)' "The received events for the first subscriber should match the published events."); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncPublishesEventsWithMultipleIterators,The length of the statement  "            Assert.That(secondSubscriberEvents' Is.EquivalentTo(expectedEvents)' "The received events for the second subscriber should match the published events."); " is 153.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncRespectsWaitTimeWhenPublishingEvents,The length of the statement  "            Assert.That(receivedEvents.Count' Is.AtLeast(events.Count + 1).And.LessThanOrEqualTo(events.Count * thresholdModifier)' "There should be empty events present due to the wait time."); " is 182.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncRespectsWaitTimeWhenPublishingEvents,The length of the statement  "            Assert.That(receivedEvents.Where(item => item != null)' Is.EquivalentTo(events)' "The received events should match the published events when empty events are removed."); " is 169.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncReadsEventsFromAllPartitions,The length of the statement  "            Assert.That(receivedEvents.Keys.Count' Is.EqualTo(partitions.Length)' "The number of partitions should match those returned by the connection."); " is 145.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncReadsEventsFromAllPartitions,The length of the statement  "                Assert.That(receivedEvents[partition]' Is.EqualTo(events.Count)' $"The received event count for partition: { partition } should match the published events."); " is 158.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncPropagatesException,The length of the statement  "            var transportConsumer = new ReceiveCallbackTransportConsumerMock((_max' _time) => throw (Exception)Activator.CreateInstance(exceptionType)); " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncSurfacesCancelation,The length of the statement  "            var transportConsumer = new ReceiveCallbackTransportConsumerMock((_max' _time) => throw (Exception)Activator.CreateInstance(exceptionType)); " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncSurfacesNonRetriableExceptions,The length of the statement  "            Assert.That(async () => await invoke()' Throws.TypeOf(exception.GetType())' "The enumerator should surface the exception."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncRetriesAndSurfacesRetriableExceptions,The length of the statement  "            var options = new EventHubConsumerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = mockRetryPolicy.Object } }; " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncRetriesAndSurfacesRetriableExceptions,The length of the statement  "                .Setup(policy => policy.CalculateRetryDelay(It.Is<Exception>(value => value == exception)' It.Is<int>(value => value <= maximumRetries))) " is 137.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncRetriesAndSurfacesRetriableExceptions,The length of the statement  "            Assert.That(async () => await invoke()' Throws.TypeOf(exception.GetType())' "The enumerator should surface the exception."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncRetriesAndSurfacesRetriableExceptions,The length of the statement  "            Assert.That(receiveCalls' Is.AtLeast(expectedReceiveCalls - partitions.Length).And.AtMost(expectedReceiveCalls)' "The retry policy should have been applied."); " is 159.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncHonorsRetryPolicyForRetriableExceptions,The length of the statement  "            var options = new EventHubConsumerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = mockRetryPolicy.Object } }; " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncHonorsRetryPolicyForRetriableExceptions,The length of the statement  "            Assert.That(async () => await invoke()' Throws.TypeOf(exception.GetType())' "The enumerator should surface the exception."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,ReadOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\ReadOptionsTests.cs,CloneProducesACopy,The length of the statement  "            Assert.That(clone.TrackLastEnqueuedEventProperties' Is.EqualTo(options.TrackLastEnqueuedEventProperties)' "The tracking of last event information of the clone should match."); " is 175.
Long Statement,Azure.Messaging.EventHubs.Tests,ReadOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\ReadOptionsTests.cs,CloneProducesACopy,The length of the statement  "            Assert.That(clone.MaximumWaitTime' Is.EqualTo(options.MaximumWaitTime)' "The default maximum wait time of the clone should match."); " is 132.
Long Statement,Azure.Messaging.EventHubs.Tests,ReadOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\ReadOptionsTests.cs,MaximumWaitTimeIsValidated,The length of the statement  "            Assert.That(() => new ReadEventOptions { MaximumWaitTime = TimeSpan.FromMilliseconds(-1) }' Throws.InstanceOf<ArgumentException>()); " is 132.
Long Statement,Azure.Messaging.EventHubs.Tests,CreateBatchOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\CreateBatchOptionsTests.cs,ToSendOptionsTranslatesProperly,The length of the statement  "            Assert.That(sendOptions.PartitionId' Is.EqualTo(options.PartitionId)' "The partition identifier of the send options should match."); " is 132.
Long Statement,Azure.Messaging.EventHubs.Tests,CreateBatchOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\CreateBatchOptionsTests.cs,ToSendOptionsTranslatesProperly,The length of the statement  "            Assert.That(sendOptions.PartitionKey' Is.EqualTo(options.PartitionKey)' "The partition key of the send options should match."); " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,CreateBatchOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\CreateBatchOptionsTests.cs,MaximumBatchSizeInBytesEnforcesMinimum,The length of the statement  "            Assert.That(() => options.MaximumSizeInBytes = (EventHubProducerClient.MinimumBatchSizeLimit - 1)' Throws.InstanceOf<ArgumentException>()); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,EventDataBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventDataBatchTests.cs,PropertyAccessIsDelegatedToTheTransportClient,The length of the statement  "            Assert.That(batch.MaximumSizeInBytes' Is.EqualTo(mockBatch.MaximumSizeInBytes)' "The maximum size should have been delegated."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventDataBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventDataBatchTests.cs,TryAddIsDelegatedToTheTransportClient,The length of the statement  "            Assert.That(mockBatch.TryAddCalledWith' Is.SameAs(eventData)' "The event data should have been passed with delegation."); " is 121.
Long Statement,Azure.Messaging.EventHubs.Tests,EventDataBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventDataBatchTests.cs,AsEnumerableIsDelegatedToTheTransportClient,The length of the statement  "            Assert.That(mockBatch.AsEnumerableCalledWith' Is.EqualTo(typeof(string))' "The enumerable should delegated the requested type parameter."); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerWithNoOptionsCanSend,The length of the statement  "                await using (var connection = new EventHubConnection(connectionString' new EventHubConnectionOptions { TransportType = transportType })) " is 136.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendToASpecificPartition,The length of the statement  "                        Assert.That(async () => await producer.SendAsync(events' new SendEventOptions { PartitionId = partition })' Throws.Nothing); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendMultipleSetsOfEventsUsingAPartitionHashKey,The length of the statement  "                        Assert.That(async () => await producer.SendAsync(events' batchOptions)' Throws.Nothing' $"Batch { index } should not have thrown an exception."); " is 145.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendAnEventBatchUsingAPartitionHashKey,The length of the statement  "                        Assert.That(() => batch.TryAdd(eventData)' Is.True' "An event was rejected by the batch; all events should be accepted."); " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendSingleLargeEvent,The length of the statement  "                await using (var producer = new EventHubProducerClient(connectionString' new EventHubProducerClientOptions { RetryOptions = new EventHubsRetryOptions { TryTimeout = TimeSpan.FromMinutes(5) } })) " is 194.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendSingleLargeEventInASet,The length of the statement  "                await using (var producer = new EventHubProducerClient(connectionString' new EventHubProducerClientOptions { RetryOptions = new EventHubsRetryOptions { TryTimeout = TimeSpan.FromMinutes(5) } })) " is 194.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendLargeSet,The length of the statement  "                await using (var producer = new EventHubProducerClient(connectionString' new EventHubProducerClientOptions { RetryOptions = new EventHubsRetryOptions { TryTimeout = TimeSpan.FromMinutes(5) } })) " is 194.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendAnEventBatchUsingAnIdentityCredential,The length of the statement  "                var credential = new ClientSecretCredential(TestEnvironment.EventHubsTenant' TestEnvironment.EventHubsClient' TestEnvironment.EventHubsSecret); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendAnEventBatchUsingAnIdentityCredential,The length of the statement  "                await using (var producer = new EventHubProducerClient(TestEnvironment.FullyQualifiedNamespace' scope.EventHubName' credential)) " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendLargeEventBatch,The length of the statement  "                await using (var producer = new EventHubProducerClient(connectionString' new EventHubProducerClientOptions { RetryOptions = new EventHubsRetryOptions { TryTimeout = TimeSpan.FromMinutes(5) } })) " is 194.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendSetToASpecificPartition,The length of the statement  "                        Assert.That(async () => await producer.SendAsync(events' new SendEventOptions { PartitionId = partition })' Throws.Nothing); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotSendToInvalidPartition,The length of the statement  "                        Assert.That(async () => await producer.SendAsync(events' new SendEventOptions { PartitionId = invalidPartition })' Throws.TypeOf<ArgumentOutOfRangeException>()); " is 161.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,SendSetUpdatesPartitionProperties,The length of the statement  "                        Assert.That(newPartitionProperties.BeginningSequenceNumber' Is.EqualTo(oldPartitionProperties.BeginningSequenceNumber)); " is 120.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,SendSetUpdatesPartitionProperties,The length of the statement  "                        Assert.That(newPartitionProperties.LastEnqueuedSequenceNumber' Is.GreaterThan(oldPartitionProperties.LastEnqueuedSequenceNumber)); " is 130.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,SendBatchUpdatesPartitionProperties,The length of the statement  "                        Assert.That(newPartitionProperties.BeginningSequenceNumber' Is.EqualTo(oldPartitionProperties.BeginningSequenceNumber)); " is 120.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,SendBatchUpdatesPartitionProperties,The length of the statement  "                        Assert.That(newPartitionProperties.LastEnqueuedSequenceNumber' Is.GreaterThan(oldPartitionProperties.LastEnqueuedSequenceNumber)); " is 130.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,SendDoesNotUpdatePartitionPropertiesWhenSendingToDifferentPartition,The length of the statement  "                        Assert.That(newPartitionProperties.BeginningSequenceNumber' Is.EqualTo(oldPartitionProperties.BeginningSequenceNumber)); " is 120.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,SendDoesNotUpdatePartitionPropertiesWhenSendingToDifferentPartition,The length of the statement  "                        Assert.That(newPartitionProperties.LastEnqueuedSequenceNumber' Is.EqualTo(oldPartitionProperties.LastEnqueuedSequenceNumber)); " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerDoesNotSendToSpecificPartitionWhenPartitionIdIsNotSpecified,The length of the statement  "                            await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Earliest' DefaultReadOptions' cancellationSource.Token)) " is 156.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerSendsEventsInTheSameSetToTheSamePartition,The length of the statement  "                        await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Earliest' DefaultReadOptions' cancellationSource.Token)) " is 156.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerSendsEventsWithTheSamePartitionHashKeyToTheSamePartition,The length of the statement  "                        await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Earliest' DefaultReadOptions' cancellationSource.Token)) " is 156.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotSendWhenProxyIsInvalid,The length of the statement  "                    Assert.That(async () => await invalidProxyProducer.SendAsync(new EventData(new byte[1]))' Throws.InstanceOf<WebSocketException>().Or.InstanceOf<TimeoutException>()); " is 165.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanRetrieveEventHubProperties,The length of the statement  "                var producerOptions = new EventHubProducerClientOptions { ConnectionOptions = new EventHubConnectionOptions { TransportType = transportType } }; " is 144.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanRetrieveEventHubProperties,The length of the statement  "                    Assert.That(properties.PartitionIds.Length' Is.EqualTo(partitionCount)' "The properties should have the requested number of partitions."); " is 138.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanRetrieveEventHubProperties,The length of the statement  "                    Assert.That(properties.CreatedOn' Is.EqualTo(DateTimeOffset.UtcNow).Within(TimeSpan.FromSeconds(60))' "The Event Hub should have been created just about now."); " is 160.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanRetrievePartitionProperties,The length of the statement  "                var producerOptions = new EventHubProducerClientOptions { ConnectionOptions = new EventHubConnectionOptions { TransportType = transportType } }; " is 144.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanRetrievePartitionProperties,The length of the statement  "                    Assert.That(partitionProperties.EventHubName' Is.EqualTo(scope.EventHubName).Using((IEqualityComparer<string>)StringComparer.InvariantCultureIgnoreCase)' "The Event Hub path should match."); " is 190.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanRetrievePartitionProperties,The length of the statement  "                    Assert.That(partitionProperties.BeginningSequenceNumber' Is.Not.EqualTo(default(long))' "The beginning sequence number should have been populated."); " is 149.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanRetrievePartitionProperties,The length of the statement  "                    Assert.That(partitionProperties.LastEnqueuedSequenceNumber' Is.Not.EqualTo(default(long))' "The last sequence number should have been populated."); " is 147.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanRetrievePartitionProperties,The length of the statement  "                    Assert.That(partitionProperties.LastEnqueuedOffset' Is.Not.EqualTo(default(long))' "The last offset should have been populated."); " is 130.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ConnectionTransportPartitionIdsMatchPartitionProperties,The length of the statement  "                    Assert.That(properties.PartitionIds' Is.Not.Null' "A set of partition identifiers for the properties should have been returned."); " is 130.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ConnectionTransportPartitionIdsMatchPartitionProperties,The length of the statement  "                    Assert.That(partitions' Is.EquivalentTo(properties.PartitionIds)' "The partition identifiers returned directly should match those returned with properties."); " is 158.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotRetrieveMetadataWhenClosed,The length of the statement  "                    Assert.That(async () => await producer.GetPartitionPropertiesAsync(partition)' Throws.TypeOf<EventHubsClientClosedException>()); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotRetrievePartitionPropertiesWhenPartitionIdIsInvalid,The length of the statement  "                    Assert.That(async () => await producer.GetPartitionPropertiesAsync(invalidPartition)' Throws.TypeOf<ArgumentOutOfRangeException>()); " is 132.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotRetrieveMetadataWhenProxyIsInvalid,The length of the statement  "                    Assert.That(async () => await invalidProxyProducer.GetPartitionIdsAsync()' Throws.InstanceOf<WebSocketException>().Or.InstanceOf<TimeoutException>()); " is 150.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotRetrieveMetadataWhenProxyIsInvalid,The length of the statement  "                    Assert.That(async () => await invalidProxyProducer.GetEventHubPropertiesAsync()' Throws.InstanceOf<WebSocketException>().Or.InstanceOf<TimeoutException>()); " is 156.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotRetrieveMetadataWhenProxyIsInvalid,The length of the statement  "                    Assert.That(async () => await invalidProxyProducer.GetPartitionPropertiesAsync(partition)' Throws.InstanceOf<WebSocketException>().Or.InstanceOf<TimeoutException>()); " is 166.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientOptionsTests.cs,CloneProducesACopy,The length of the statement  "            Assert.That(clone.ConnectionOptions.TransportType' Is.EqualTo(options.ConnectionOptions.TransportType)' "The connection options of the clone should copy properties."); " is 167.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientOptionsTests.cs,CloneProducesACopy,The length of the statement  "            Assert.That(clone.ConnectionOptions' Is.Not.SameAs(options.ConnectionOptions)' "The connection options of the clone should be a copy' not the same instance."); " is 159.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientOptionsTests.cs,CloneProducesACopy,The length of the statement  "            Assert.That(clone.RetryOptions.IsEquivalentTo(options.RetryOptions)' Is.True' "The retry options of the clone should be considered equal."); " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientOptionsTests.cs,CloneProducesACopy,The length of the statement  "            Assert.That(clone.RetryOptions' Is.Not.SameAs(options.RetryOptions)' "The retry options of the clone should be a copy' not the same instance."); " is 144.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,ConstructorValidatesTheConnectionString,The length of the statement  "            Assert.That(() => new EventHubProducerClient(connectionString' "dummy")' Throws.InstanceOf<ArgumentException>()' "The constructor without options should ensure a connection string."); " is 183.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,ConstructorValidatesTheConnectionString,The length of the statement  "            Assert.That(() => new EventHubProducerClient(connectionString' "dummy"' new EventHubProducerClientOptions())' Throws.InstanceOf<ArgumentException>()' "The constructor with options should ensure a connection string."); " is 217.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,ConstructorValidatesTheNamespace,The length of the statement  "            Assert.That(() => new EventHubProducerClient(constructorArgument' "dummy"' credential.Object)' Throws.InstanceOf<ArgumentException>()); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,ConstructorValidatesTheEventHub,The length of the statement  "            Assert.That(() => new EventHubProducerClient("namespace"' constructorArgument' credential.Object)' Throws.InstanceOf<ArgumentException>()); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,ConstructorValidatesTheCredential,The length of the statement  "            Assert.That(() => new EventHubProducerClient("namespace"' "hubName"' default(TokenCredential))' Throws.ArgumentNullException); " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,ConnectionStringConstructorSetsTheRetryPolicy,The length of the statement  "            var options = new EventHubProducerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = expected } }; " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,ExpandedConstructorSetsTheRetryPolicy,The length of the statement  "            var options = new EventHubProducerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = expected } }; " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,ConnectionConstructorSetsTheRetryPolicy,The length of the statement  "            var options = new EventHubProducerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = expected } }; " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,ConnectionStringConstructorCreatesDefaultOptions,The length of the statement  "            Assert.That(actual.IsEquivalentTo(expected)' Is.True' "The default retry policy should be based on the default retry options."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,ExpandedConstructorCreatesDefaultOptions,The length of the statement  "            Assert.That(actual.IsEquivalentTo(expected)' Is.True' "The default retry policy should be based on the default retry options."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,ConnectionConstructorCreatesDefaultOptions,The length of the statement  "            Assert.That(actual.IsEquivalentTo(expected)' Is.True' "The default retry policy should be based on the default retry options."); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,GetEventHubPropertiesAsyncUsesTheRetryPolicy,The length of the statement  "            var options = new EventHubProducerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = retryPolicy } }; " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,GetEventHubPropertiesAsyncUsesTheRetryPolicy,The length of the statement  "            Assert.That(mockConnection.GetPropertiesInvokedWith' Is.SameAs(retryPolicy)' "Either the call was not delegated or the retry policy was not passed."); " is 150.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,GetPartitionIdsUsesTheRetryPolicy,The length of the statement  "            var options = new EventHubProducerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = retryPolicy } }; " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,GetPartitionIdsUsesTheRetryPolicy,The length of the statement  "            Assert.That(mockConnection.GetPartitionIdsInvokedWith' Is.SameAs(retryPolicy)' "Either the call was not delegated or the retry policy was not passed."); " is 152.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,GetPartitionPropertiesUsesTheRetryPolicy,The length of the statement  "            var options = new EventHubProducerClientOptions { RetryOptions = new EventHubsRetryOptions { CustomRetryPolicy = retryPolicy } }; " is 129.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,GetPartitionPropertiesUsesTheRetryPolicy,The length of the statement  "            Assert.That(mockConnection.GetPartitionPropertiesInvokedWith' Is.SameAs(retryPolicy)' "Either the call was not delegated or the retry policy was not passed."); " is 159.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,SendSingleRequiresAnEvent,The length of the statement  "            Assert.That(async () => await producer.SendAsync(default(EventData)' new SendEventOptions())' Throws.ArgumentNullException); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,SendSingleWithoutOptionsDelegatesToBatchSend,The length of the statement  "                .Setup(instance => instance.SendAsync(It.Is<IEnumerable<EventData>>(value => value.Count() == 1)' It.IsAny<SendEventOptions>()' It.IsAny<CancellationToken>())) " is 159.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,SendSingleWitOptionsDelegatesToBatchSend,The length of the statement  "                .Setup(instance => instance.SendAsync(It.Is<IEnumerable<EventData>>(value => value.Count() == 1)' It.IsAny<SendEventOptions>()' It.IsAny<CancellationToken>())) " is 159.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,SendRequiresEvents,The length of the statement  "            Assert.That(async () => await producer.SendAsync(default(IEnumerable<EventData>)' new SendEventOptions())' Throws.ArgumentNullException); " is 137.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,CreateBatchInvokesTheTransportProducer,The length of the statement  "            Assert.That(transportProducer.CreateBatchCalledWith' Is.Not.SameAs(batchOptions)' "The options should have been cloned."); " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,CreateBatchInvokesTheTransportProducer,The length of the statement  "            Assert.That(transportProducer.CreateBatchCalledWith.PartitionKey' Is.EqualTo(batchOptions.PartitionKey)' "The partition key should match."); " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,CreateBatchInvokesTheTransportProducer,The length of the statement  "            Assert.That(transportProducer.CreateBatchCalledWith.MaximumSizeInBytes' Is.EqualTo(batchOptions.MaximumSizeInBytes)' "The maximum size should match."); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,CreateBatchDefaultsBatchOptions,The length of the statement  "            Assert.That(transportProducer.CreateBatchCalledWith' Is.Not.SameAs(expectedOptions)' "The options should have been cloned."); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,CreateBatchDefaultsBatchOptions,The length of the statement  "            Assert.That(transportProducer.CreateBatchCalledWith.PartitionKey' Is.EqualTo(expectedOptions.PartitionKey)' "The partition key should match."); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,CreateBatchDefaultsBatchOptions,The length of the statement  "            Assert.That(transportProducer.CreateBatchCalledWith.MaximumSizeInBytes' Is.EqualTo(expectedOptions.MaximumSizeInBytes)' "The maximum size should match."); " is 154.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,CreateBatchSetsTheSendOptionsForTheEventBatch,The length of the statement  "            Assert.That(eventBatch.SendOptions.PartitionId' Is.EqualTo(transportProducer.CreateBatchCalledWith.PartitionId)' "The batch options should have used for the send options' but the partition identifier didn't match."); " is 216.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,CreateBatchSetsTheSendOptionsForTheEventBatch,The length of the statement  "            Assert.That(eventBatch.SendOptions.PartitionKey' Is.EqualTo(transportProducer.CreateBatchCalledWith.PartitionKey)' "The batch options should have used for the send options' but the partition key didn't match."); " is 211.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\RetryPolicies\EventHubsRetryOptionsTests.cs,CloneProducesACopy,The length of the statement  "            Assert.That(clone.MaximumRetries' Is.EqualTo(options.MaximumRetries)' "The maximum retry limit of the clone should match."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\RetryPolicies\EventHubsRetryOptionsTests.cs,ToRetryPolicyWithoutCustomPolicyCreatesThePolicy,The length of the statement  "            Assert.That(((BasicRetryPolicy)policy).Options' Is.SameAs(options)' "The options should have been used for the retry policy."); " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\RetryPolicies\EventHubsRetryOptionsTests.cs,ToRetryPolicyWithoutCustomPolicyCreatesThePolicy,The length of the statement  "            Assert.That(policy' Is.Not.SameAs(options.CustomRetryPolicy)' "The custom retry policy should not have been used' since it was not populated."); " is 144.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventHubScope.cs,DisposeAsync,The length of the statement  "            var client = new EventHubManagementClient(new TokenCredentials(token)) { SubscriptionId = TestEnvironment.EventHubsSubscription }; " is 130.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventHubScope.cs,DisposeAsync,The length of the statement  "                await ResourceManager.CreateRetryPolicy().ExecuteAsync(() => client.EventHubs.DeleteAsync(resourceGroup' eventHubNamespace' EventHubName)); " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventHubScope.cs,CreateAsync,The length of the statement  "            using (var client = new EventHubManagementClient(new TokenCredentials(token)) { SubscriptionId = TestEnvironment.EventHubsSubscription }) " is 137.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventHubScope.cs,CreateAsync,The length of the statement  "                eventHub = await ResourceManager.CreateRetryPolicy<Eventhub>().ExecuteAsync(() => client.EventHubs.CreateOrUpdateAsync(resourceGroup' eventHubNamespace' CreateName()' eventHub)); " is 178.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventHubScope.cs,CreateAsync,The length of the statement  "                        return consumerPolicy.ExecuteAsync(() => client.ConsumerGroups.CreateOrUpdateAsync(resourceGroup' eventHubNamespace' eventHub.Name' groupName' group)); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventHubScope.cs,CreateNamespaceAsync,The length of the statement  "                var eventHubsNamespace = new EHNamespace(sku: new Sku("Standard"' "Standard"' 12)' tags: ResourceManager.GenerateTags()' isAutoInflateEnabled: true' maximumThroughputUnits: 20' location: location); " is 197.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventHubScope.cs,CreateNamespaceAsync,The length of the statement  "                eventHubsNamespace = await ResourceManager.CreateRetryPolicy<EHNamespace>().ExecuteAsync(() => client.Namespaces.CreateOrUpdateAsync(resourceGroup' CreateName()' eventHubsNamespace)); " is 183.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventHubScope.cs,CreateNamespaceAsync,The length of the statement  "                AccessKeys accessKey = await ResourceManager.CreateRetryPolicy<AccessKeys>().ExecuteAsync(() => client.Namespaces.ListKeysAsync(resourceGroup' eventHubsNamespace.Name' TestEnvironment.EventHubsDefaultSharedAccessKey)); " is 218.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventHubScope.cs,DeleteNamespaceAsync,The length of the statement  "                await ResourceManager.CreateRetryPolicy().ExecuteAsync(() => client.Namespaces.DeleteAsync(resourceGroup' namespaceName)); " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,LiveResourceManager,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\LiveResourceManager.cs,QueryResourceGroupLocationAsync,The length of the statement  "            using (var client = new ResourceManagementClient(new TokenCredentials(accessToken)) { SubscriptionId = subscriptionId }) " is 120.
Long Statement,Azure.Messaging.EventHubs.Tests,LiveResourceManager,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\LiveResourceManager.cs,QueryResourceGroupLocationAsync,The length of the statement  "                ResourceGroup resourceGroup = await CreateRetryPolicy<ResourceGroup>().ExecuteAsync(() => client.ResourceGroups.GetAsync(resourceGroupName)); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,TestEnvironment,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\TestEnvironment.cs,ReadAndVerifyEnvironmentVariable,The length of the statement  "                throw new InvalidOperationException($"The environment variable '{ variableName }' was not found or was not populated."); " is 120.
Long Statement,Azure.Core.Testing,AsyncValidatingStream,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\AsyncValidatingStream.cs,Validate,The length of the statement  "                throw new InvalidOperationException("All stream calls were expected to be " + (_isAsync ? "async" : "sync") + " but were " + (isAsync ? "async" : "sync")); " is 155.
Long Statement,Azure.Core.Testing,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientTestBase.cs,InstrumentClient,The length of the statement  "                        ClientValidation<TClient>.ValidationException = new InvalidOperationException($"Client type contains public non-virtual async method {methodInfo.Name}"); " is 153.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                bool strict = !invocation.Method.GetCustomAttributes(true).Any(a => a.GetType().FullName == "Azure.Core.ForwardsClientCallsAttribute"); " is 135.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                        MethodInfo getResultMethod = getAwaiterMethod.ReturnType.GetMethod("GetResult"' BindingFlags.Instance | BindingFlags.Public); " is 125.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                            (string Key' object Value' DiagnosticListener Listener) e = diagnosticListener.Events.FirstOrDefault(e => e.Key == expectedEvent); " is 130.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                                throw new InvalidOperationException($"Expected diagnostic event not fired {expectedEvent} {Environment.NewLine}    fired events {string.Join("' "' diagnosticListener.Events)} {Environment.NewLine}    You may have forgotten to set your operationId to {expectedEvent} in {methodName} or applied the Azure.Core.ForwardsClientCallsAttribute to {methodName}."); " is 356.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                                throw new InvalidOperationException($"{e.Key} event was written into wrong DiagnosticSource {e.Listener.Name}' expected: {ns}"); " is 128.
Long Statement,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The length of the statement  "                    if (property.PropertyType == type && property.CanRead && !property.CanWrite && Includes(property.Name) && !Excludes(property.Name)) " is 131.
Long Statement,Azure.Core.Testing,UseSyncMethodsInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\UseSyncMethodsInterceptor.cs,Intercept,The length of the statement  "                throw new InvalidOperationException($"Unable to find a method with name {nonAsyncMethodName} and {string.Join<Type>("'"' parameterTypes)} parameters. " " is 151.
Long Statement,Azure.Core.Tests,ClientDiagnosticListener,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientDiagnosticListener.cs,AssertScopeStarted,The length of the statement  "                                throw new InvalidOperationException($"Attribute {expectedAttribute} not found' existing attributes: {string.Join("'"' producedDiagnosticScope.Activity.Tags)}"); " is 160.
Complex Conditional,Azure.Messaging.EventHubs.Tests,EventDataExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventDataExtensions.cs,IsEquivalentTo,The conditional expression  "(instance.Offset != other.Offset)                      || (instance.EnqueuedTime != other.EnqueuedTime)                      || (instance.PartitionKey != other.PartitionKey)                      || (instance.SequenceNumber != other.SequenceNumber)"  is complex.
Complex Conditional,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The conditional expression  "property.PropertyType == type && property.CanRead && !property.CanWrite && Includes(property.Name) && !Excludes(property.Name)"  is complex.
Complex Conditional,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The conditional expression  "field.FieldType == type && (field.IsInitOnly || field.IsLiteral) && Includes(field.Name) && !Excludes(field.Name)"  is complex.
Complex Conditional,Azure.Core.Pipeline,TestFrameworkContentTypeUtilities,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\ContentTypeUtilities.cs,TryGetTextEncoding,The conditional expression  "contentType.StartsWith(textContentTypePrefix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(jsonSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(xmlSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(urlEncodedSuffix' StringComparison.OrdinalIgnoreCase)"  is complex.
Empty Catch Block,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRefreshesAuthorization,The method has an empty catch block.
Empty Catch Block,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenProducerLinkAsyncRefreshesAuthorization,The method has an empty catch block.
Empty Catch Block,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The method has an empty catch block.
Empty Catch Block,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,CloseAsyncSurfacesExceptionsForActiveTransportConsumers,The method has an empty catch block.
Empty Catch Block,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenCanceled,The method has an empty catch block.
Empty Catch Block,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenIterationStops,The method has an empty catch block.
Empty Catch Block,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingOnException,The method has an empty catch block.
Empty Catch Block,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenCanceled,The method has an empty catch block.
Empty Catch Block,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenIterationStops,The method has an empty catch block.
Empty Catch Block,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingOnException,The method has an empty catch block.
Empty Catch Block,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,CloseAsyncClosesTheTransportProducers,The method has an empty catch block.
Empty Catch Block,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,CloseAsyncClosesTheTransportProducers,The method has an empty catch block.
Empty Catch Block,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,CloseAsyncSurfacesExceptionsForTransportConsumers,The method has an empty catch block.
Empty Catch Block,Azure.Messaging.EventHubs.Tests,TestRunFixture,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Infrastructure\TestRunFixture.cs,Teardown,The method has an empty catch block.
Empty Catch Block,Azure.Messaging.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventHubScope.cs,DisposeAsync,The method has an empty catch block.
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,RetryOptionTestCases,The following statement contains a magic number: yield return new object[] { new EventHubsRetryOptions { MaximumRetries = 3' Delay = TimeSpan.FromMilliseconds(1)' MaximumDelay = TimeSpan.FromMilliseconds(10)' Mode = EventHubsRetryMode.Fixed } };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,RetryOptionTestCases,The following statement contains a magic number: yield return new object[] { new EventHubsRetryOptions { MaximumRetries = 3' Delay = TimeSpan.FromMilliseconds(1)' MaximumDelay = TimeSpan.FromMilliseconds(10)' Mode = EventHubsRetryMode.Fixed } };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpClientTests.cs,RetryOptionTestCases,The following statement contains a magic number: yield return new object[] { new EventHubsRetryOptions { MaximumRetries = 0' Delay = TimeSpan.FromMilliseconds(1)' MaximumDelay = TimeSpan.FromMilliseconds(10)' Mode = EventHubsRetryMode.Fixed } };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,ConstructorValidatesTheTransport,The following statement contains a magic number: var invalidTransport = (EventHubsTransportType)(-2);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRequestsTheLink,The following statement contains a magic number: var ownerLevel = 95;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRequestsTheLink,The following statement contains a magic number: var prefetchCount = 300U;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresTheLink,The following statement contains a magic number: var ownerLevel = 459;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresTheLink,The following statement contains a magic number: var prefetchCount = 697U;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRespectsTheOwnerLevelOption,The following statement contains a magic number: var prefetchCount = 697U;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRespectsTheTrackLastEventOption,The following statement contains a magic number: var ownerLevel = 9987;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRespectsTheTrackLastEventOption,The following statement contains a magic number: var prefetchCount = 697U;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncManagesActiveLinks,The following statement contains a magic number: var ownerLevel = 459;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncManagesActiveLinks,The following statement contains a magic number: var prefetchCount = 697U;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresAuthorizationRefresh,The following statement contains a magic number: mockScope                  .Protected()                  .Setup<Task<DateTime>>("RequestAuthorizationUsingCbsAsync"'                      ItExpr.IsAny<AmqpConnection>()'                      ItExpr.IsAny<CbsTokenProvider>()'                      ItExpr.IsAny<Uri>()'                      ItExpr.IsAny<string>()'                      ItExpr.IsAny<string>()'                      ItExpr.IsAny<string[]>()'                      ItExpr.IsAny<TimeSpan>())                  .Returns(Task.FromResult(DateTime.UtcNow.AddDays(5)));
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresAuthorizationRefresh,The following statement contains a magic number: var remainingAttempts = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncConfiguresAuthorizationRefresh,The following statement contains a magic number: await Task.Delay(250 * ++attemptCount).ConfigureAwait(false);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRefreshesAuthorization,The following statement contains a magic number: mockScope                  .Protected()                  .Setup<Task<DateTime>>("RequestAuthorizationUsingCbsAsync"'                      ItExpr.IsAny<AmqpConnection>()'                      ItExpr.IsAny<CbsTokenProvider>()'                      ItExpr.IsAny<Uri>()'                      ItExpr.IsAny<string>()'                      ItExpr.IsAny<string>()'                      ItExpr.IsAny<string[]>()'                      ItExpr.IsAny<TimeSpan>())                  .Returns(Task.FromResult(DateTime.UtcNow.AddDays(5)));
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRefreshesAuthorization,The following statement contains a magic number: var remainingAttempts = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRefreshesAuthorization,The following statement contains a magic number: await Task.Delay(250 * ++attemptCount).ConfigureAwait(false);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenConsumerLinkAsyncRefreshesAuthorization,The following statement contains a magic number: mockScope                          .Protected()                          .Verify("RequestAuthorizationUsingCbsAsync"'                              Times.Exactly(2)'                              ItExpr.Is<AmqpConnection>(value => value == mockConnection)'                              ItExpr.IsAny<CbsTokenProvider>()'                              ItExpr.Is<Uri>(value => value.AbsoluteUri.StartsWith(endpoint.AbsoluteUri))'                              ItExpr.IsAny<string>()'                              ItExpr.IsAny<string>()'                              ItExpr.Is<string[]>(value => value.SingleOrDefault() == EventHubsClaim.Listen)'                              ItExpr.IsAny<TimeSpan>());
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenProducerLinkAsyncConfiguresAuthorizationRefresh,The following statement contains a magic number: mockScope                  .Protected()                  .Setup<Task<DateTime>>("RequestAuthorizationUsingCbsAsync"'                      ItExpr.IsAny<AmqpConnection>()'                      ItExpr.IsAny<CbsTokenProvider>()'                      ItExpr.IsAny<Uri>()'                      ItExpr.IsAny<string>()'                      ItExpr.IsAny<string>()'                      ItExpr.IsAny<string[]>()'                      ItExpr.IsAny<TimeSpan>())                  .Returns(Task.FromResult(DateTime.UtcNow.AddDays(5)));
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenProducerLinkAsyncConfiguresAuthorizationRefresh,The following statement contains a magic number: var remainingAttempts = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenProducerLinkAsyncConfiguresAuthorizationRefresh,The following statement contains a magic number: await Task.Delay(250 * ++attemptCount).ConfigureAwait(false);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenProducerLinkAsyncRefreshesAuthorization,The following statement contains a magic number: mockScope                  .Protected()                  .Setup<Task<DateTime>>("RequestAuthorizationUsingCbsAsync"'                      ItExpr.IsAny<AmqpConnection>()'                      ItExpr.IsAny<CbsTokenProvider>()'                      ItExpr.IsAny<Uri>()'                      ItExpr.IsAny<string>()'                      ItExpr.IsAny<string>()'                      ItExpr.IsAny<string[]>()'                      ItExpr.IsAny<TimeSpan>())                  .Returns(Task.FromResult(DateTime.UtcNow.AddDays(5)));
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenProducerLinkAsyncRefreshesAuthorization,The following statement contains a magic number: var remainingAttempts = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenProducerLinkAsyncRefreshesAuthorization,The following statement contains a magic number: await Task.Delay(250 * ++attemptCount).ConfigureAwait(false);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,OpenProducerLinkAsyncRefreshesAuthorization,The following statement contains a magic number: mockScope                          .Protected()                          .Verify("RequestAuthorizationUsingCbsAsync"'                              Times.Exactly(2)'                              ItExpr.Is<AmqpConnection>(value => value == mockConnection)'                              ItExpr.IsAny<CbsTokenProvider>()'                              ItExpr.Is<Uri>(value => value.AbsoluteUri.StartsWith(endpoint.AbsoluteUri))'                              ItExpr.IsAny<string>()'                              ItExpr.IsAny<string>()'                              ItExpr.Is<string[]>(value => value.SingleOrDefault() == EventHubsClaim.Send)'                              ItExpr.IsAny<TimeSpan>());
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,DisposeClosesActiveLinks,The following statement contains a magic number: Assert.That(activeLinks.Count' Is.EqualTo(2)' "There should be active links being tracked.");
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,DisposeStopsManagingLinkAuthorizations,The following statement contains a magic number: var link = await mockScope.Object.OpenConsumerLinkAsync(consumerGroup' partitionId' position' TimeSpan.FromDays(1)' 12' 555' true' cancellationSource.Token);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConnectionScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConnectionScopeTests.cs,DisposeStopsManagingLinkAuthorizations,The following statement contains a magic number: var link = await mockScope.Object.OpenConsumerLinkAsync(consumerGroup' partitionId' position' TimeSpan.FromDays(1)' 12' 555' true' cancellationSource.Token);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,RetryOptionTestCases,The following statement contains a magic number: yield return new object[] { new EventHubsRetryOptions { MaximumRetries = 3' Delay = TimeSpan.FromMilliseconds(1)' MaximumDelay = TimeSpan.FromMilliseconds(10)' Mode = EventHubsRetryMode.Fixed } };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,RetryOptionTestCases,The following statement contains a magic number: yield return new object[] { new EventHubsRetryOptions { MaximumRetries = 3' Delay = TimeSpan.FromMilliseconds(1)' MaximumDelay = TimeSpan.FromMilliseconds(10)' Mode = EventHubsRetryMode.Fixed } };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,RetryOptionTestCases,The following statement contains a magic number: yield return new object[] { new EventHubsRetryOptions { MaximumRetries = 0' Delay = TimeSpan.FromMilliseconds(1)' MaximumDelay = TimeSpan.FromMilliseconds(10)' Mode = EventHubsRetryMode.Fixed } };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ConstructorRequiresTheConnectionScope,The following statement contains a magic number: Assert.That(() => new AmqpConsumer("theMostAwesomeHubEvar"' "$DEFAULT"' "0"' EventPosition.FromSequenceNumber(123)' true' null' null' null' Mock.Of<AmqpMessageConverter>()' Mock.Of<EventHubsRetryPolicy>())' Throws.ArgumentNullException);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ConstructorRequiresTheMessageConverter,The following statement contains a magic number: Assert.That(() => new AmqpConsumer("theMostAwesomeHubEvar"' "$DEFAULT"' "0"' EventPosition.FromSequenceNumber(123)' true' null' null' Mock.Of<AmqpConnectionScope>()' null' Mock.Of<EventHubsRetryPolicy>())' Throws.ArgumentNullException);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncValidatesTheMaximumMessageCount,The following statement contains a magic number: var eventPosition = EventPosition.FromOffset(123);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncRespectsTheCancellationTokenIfSetWhenCalled,The following statement contains a magic number: var eventPosition = EventPosition.FromOffset(123);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncRespectsTheCancellationTokenIfSetWhenCalled,The following statement contains a magic number: Assert.That(async () => await consumer.ReceiveAsync(100' null' cancellationSource.Token)' Throws.InstanceOf<TaskCanceledException>());
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncRespectsTheRetryPolicy,The following statement contains a magic number: var eventPosition = EventPosition.FromOffset(123);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncRespectsTheRetryPolicy,The following statement contains a magic number: var ownerLevel = 123L;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncRespectsTheRetryPolicy,The following statement contains a magic number: Assert.That(async () => await consumer.ReceiveAsync(100' null' cancellationSource.Token)' Throws.InstanceOf(retriableException.GetType()));
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncValidatesClosed,The following statement contains a magic number: var eventPosition = EventPosition.FromOffset(123);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpConsumerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpConsumerTests.cs,ReceiveAsyncValidatesClosed,The following statement contains a magic number: Assert.That(async () => await consumer.ReceiveAsync(100' null' cancellationSource.Token)' Throws.InstanceOf<EventHubsClientClosedException>());
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,ConstructorValidatesTheMessageConverter,The following statement contains a magic number: Assert.That(() => new AmqpEventBatch(null' new CreateBatchOptions { MaximumSizeInBytes = 31 })' Throws.ArgumentNullException);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,ConstructorSetsTheMaximumSize,The following statement contains a magic number: var maximumSize = 9943;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,ConstructorInitializesTheSizeToABatchEnvelope,The following statement contains a magic number: var batchEnvelopeSize = 767;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,ConstructorInitializesTheSizeToABatchEnvelope,The following statement contains a magic number: var batch = new AmqpEventBatch(mockConverter' new CreateBatchOptions { MaximumSizeInBytes = 27 });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,TryAddValidatesTheEvent,The following statement contains a magic number: var batch = new AmqpEventBatch(mockConverter' new CreateBatchOptions { MaximumSizeInBytes = 25 });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,TryAddValidatesNotDisposed,The following statement contains a magic number: var batch = new AmqpEventBatch(mockConverter' new CreateBatchOptions { MaximumSizeInBytes = 25 });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,TryAddDoesNotAcceptAnEventBiggerThanTheMaximumSize,The following statement contains a magic number: var maximumSize = 50;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,TryAddAcceptsAnEventSmallerThanTheMaximumSize,The following statement contains a magic number: var maximumSize = 50;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,TryAddAcceptsAnEventSmallerThanTheMaximumSize,The following statement contains a magic number: var eventMessageSize = 40;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,TryAddAcceptEventsUntilTheMaximumSizeIsReached,The following statement contains a magic number: var maximumSize = 50;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,TryAddAcceptEventsUntilTheMaximumSizeIsReached,The following statement contains a magic number: var eventMessages = new AmqpMessage[5];
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,TryAddAcceptEventsUntilTheMaximumSizeIsReached,The following statement contains a magic number: var size = (index == eventMessages.Length - 1)                      ? maximumSize                      : (maximumSize / eventMessages.Length) - 8;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,TryAddSetsTheCount,The following statement contains a magic number: var options = new CreateBatchOptions { MaximumSizeInBytes = 5000 };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,TryAddSetsTheCount,The following statement contains a magic number: var eventMessages = new AmqpMessage[5];
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,AsEnumerableValidatesTheTypeParameter,The following statement contains a magic number: var options = new CreateBatchOptions { MaximumSizeInBytes = 5000 };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,AsEnumerableReturnsTheMessages,The following statement contains a magic number: var maximumSize = 5000;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,AsEnumerableReturnsTheMessages,The following statement contains a magic number: var eventMessages = new AmqpMessage[5];
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,AsEnumerableReturnsTheMessages,The following statement contains a magic number: message.Setup(msg => msg.SerializedMessageSize).Returns(50);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,DisposeCleansUpBatchMessages,The following statement contains a magic number: var options = new CreateBatchOptions { MaximumSizeInBytes = 5000 };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,DisposeCleansUpBatchMessages,The following statement contains a magic number: var eventMessages = new AmqpMessage[5];
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,DisposeClearsTheCount,The following statement contains a magic number: var options = new CreateBatchOptions { MaximumSizeInBytes = 5000 };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,DisposeClearsTheCount,The following statement contains a magic number: var eventMessages = new AmqpMessage[5];
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,DisposeClearsTheSize,The following statement contains a magic number: mockMessage                  .Setup(message => message.SerializedMessageSize)                  .Returns(9959);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpEventBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpEventBatchTests.cs,DisposeClearsTheSize,The following statement contains a magic number: var batch = new AmqpEventBatch(mockConverter' new CreateBatchOptions { MaximumSizeInBytes = 99 });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpFilterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpFilterTests.cs,BuildFilterExpressionPrefersOffset,The following statement contains a magic number: position.SequenceNumber = 222;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpFilterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpFilterTests.cs,BuildFilterExpressionPrefersSequenceNumberToEnqueuedTime,The following statement contains a magic number: var sequence = 2345;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpFilterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpFilterTests.cs,BuildFilterExpressionHonorsInclusiveFlagForSequenceNumber,The following statement contains a magic number: var position = EventPosition.FromSequenceNumber(123' inclusive);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,DescribedTypePropertyTestCases,The following statement contains a magic number: yield return new object[] { AmqpProperty.Descriptor.TimeSpan' TimeSpan.FromHours(6)' TranslateValue };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,StreamPropertyTestCases,The following statement contains a magic number: yield return new object[] { new BufferedStream(new MemoryStream(contents' false)' 512)' contents };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventPopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventPopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventPopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventPopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventPopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventPopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventPopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventPopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateMessageFromEventPopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromEventWithOneEventUsesItForTheEnvelope,The following statement contains a magic number: var property = 65;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateBatchFromMessagesWithOneEventUsesItForTheEnvelope,The following statement contains a magic number: var property = 65;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesSimpleApplicationProperties,The following statement contains a magic number: var propertyValues = new object[]              {                  (byte)0x22'                  (sbyte)0x11'                  (short)5'                  (int)27'                  (long)1122334'                  (ushort)12'                  (uint)24'                  (ulong)9955'                  (float)4.3'                  (double)3.4'                  (decimal)7.893'                  Guid.NewGuid()'                  DateTime.Parse("2015-10-27T12:00:00Z")'                  true'                  'x''                  "hello"              };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesAnArraySegmentApplicationPropertyType,The following statement contains a magic number: message.ApplicationProperties.Map.Add(propertyKey' new ArraySegment<byte>(propertyValue' 1' 2));
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesAnArraySegmentApplicationPropertyType,The following statement contains a magic number: Assert.That(eventValue' Is.EquivalentTo(propertyValue.Skip(1).Take(2)));
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessageDoesNotIncludeUnknownApplicationPropertyType,The following statement contains a magic number: var describedProperty = new DescribedType(typeDescriptor' 1234);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesTypedSystemProperties,The following statement contains a magic number: var offset = 123;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesTypedSystemProperties,The following statement contains a magic number: var sequenceNumber = (long.MaxValue - 10);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesMappedSystemProperties,The following statement contains a magic number: var firstMessageAnnotation = 456;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesTypedSystemPropertiesAndMetrics,The following statement contains a magic number: var offset = 123;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesTypedSystemPropertiesAndMetrics,The following statement contains a magic number: var lastOffset = 987;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesTypedSystemPropertiesAndMetrics,The following statement contains a magic number: var sequenceNumber = (long.MaxValue - 10);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreateEventFromMessagePopulatesTypedSystemPropertiesAndMetrics,The following statement contains a magic number: var lastSequenceNumber = (long.MaxValue - 100);
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,AnEventCanBeTranslatedToItself,The following statement contains a magic number: var sourceEvent = new EventData(                  eventBody: new byte[] { 0x11' 0x22' 0x33 }'                  properties: new Dictionary<string' object> { { "Test"' 1234 } });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreatePartitionPropertiesFromResponseCreatesTheProperties,The following statement contains a magic number: var beginSequenceNumber = 555L;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreatePartitionPropertiesFromResponseCreatesTheProperties,The following statement contains a magic number: var lastSequenceNumber = 666L;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpMessageConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpMessageConverterTests.cs,CreatePartitionPropertiesFromResponseCreatesTheProperties,The following statement contains a magic number: var lastOffset = 777L;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,RetryOptionTestCases,The following statement contains a magic number: yield return new object[] { new EventHubsRetryOptions { MaximumRetries = 3' Delay = TimeSpan.FromMilliseconds(1)' MaximumDelay = TimeSpan.FromMilliseconds(10)' Mode = EventHubsRetryMode.Fixed } };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,RetryOptionTestCases,The following statement contains a magic number: yield return new object[] { new EventHubsRetryOptions { MaximumRetries = 3' Delay = TimeSpan.FromMilliseconds(1)' MaximumDelay = TimeSpan.FromMilliseconds(10)' Mode = EventHubsRetryMode.Fixed } };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,RetryOptionTestCases,The following statement contains a magic number: yield return new object[] { new EventHubsRetryOptions { MaximumRetries = 0' Delay = TimeSpan.FromMilliseconds(1)' MaximumDelay = TimeSpan.FromMilliseconds(10)' Mode = EventHubsRetryMode.Fixed } };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncEnsuresMaximumMessageSizeIsPopulated,The following statement contains a magic number: var retryPolicy = new BasicRetryPolicy(new EventHubsRetryOptions { TryTimeout = TimeSpan.FromSeconds(17) });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncEnsuresMaximumMessageSizeIsPopulated,The following statement contains a magic number: producer                  .Protected()                  .Setup<Task<SendingAmqpLink>>("CreateLinkAndEnsureProducerStateAsync"'                      ItExpr.IsAny<string>()'                      ItExpr.IsAny<TimeSpan>()'                      ItExpr.IsAny<CancellationToken>())                  .Callback(() => SetMaximumMessageSize(producer.Object' 512))                  .Returns(Task.FromResult(new SendingAmqpLink(new AmqpLinkSettings())))                  .Verifiable();
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncDefaultsTheMaximumSizeWhenNotProvided,The following statement contains a magic number: var expectedMaximumSize = 512;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncDefaultsTheMaximumSizeWhenNotProvided,The following statement contains a magic number: var retryPolicy = new BasicRetryPolicy(new EventHubsRetryOptions { TryTimeout = TimeSpan.FromSeconds(17) });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncRespectsTheMaximumSizeWhenProvided,The following statement contains a magic number: var expectedMaximumSize = 512;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncRespectsTheMaximumSizeWhenProvided,The following statement contains a magic number: var retryPolicy = new BasicRetryPolicy(new EventHubsRetryOptions { TryTimeout = TimeSpan.FromSeconds(17) });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncRespectsTheMaximumSizeWhenProvided,The following statement contains a magic number: producer                  .Protected()                  .Setup<Task<SendingAmqpLink>>("CreateLinkAndEnsureProducerStateAsync"'                      ItExpr.IsAny<string>()'                      ItExpr.IsAny<TimeSpan>()'                      ItExpr.IsAny<CancellationToken>())                  .Callback(() => SetMaximumMessageSize(producer.Object' expectedMaximumSize + 27))                  .Returns(Task.FromResult(new SendingAmqpLink(new AmqpLinkSettings())))                  .Verifiable();
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncVerifiesTheMaximumSize,The following statement contains a magic number: var linkMaximumSize = 512;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncVerifiesTheMaximumSize,The following statement contains a magic number: var options = new CreateBatchOptions { MaximumSizeInBytes = 1024 };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncVerifiesTheMaximumSize,The following statement contains a magic number: var retryPolicy = new BasicRetryPolicy(new EventHubsRetryOptions { TryTimeout = TimeSpan.FromSeconds(17) });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncBuildsAnAmqpEventBatchWithTheOptions,The following statement contains a magic number: var options = new CreateBatchOptions { MaximumSizeInBytes = 512 };
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncBuildsAnAmqpEventBatchWithTheOptions,The following statement contains a magic number: var retryPolicy = new BasicRetryPolicy(new EventHubsRetryOptions { TryTimeout = TimeSpan.FromSeconds(17) });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,CreateBatchAsyncBuildsAnAmqpEventBatchWithTheOptions,The following statement contains a magic number: producer                  .Protected()                  .Setup<Task<SendingAmqpLink>>("CreateLinkAndEnsureProducerStateAsync"'                      ItExpr.IsAny<string>()'                      ItExpr.IsAny<TimeSpan>()'                      ItExpr.IsAny<CancellationToken>())                  .Callback(() => SetMaximumMessageSize(producer.Object' options.MaximumSizeInBytes.Value + 982))                  .Returns(Task.FromResult(new SendingAmqpLink(new AmqpLinkSettings())))                  .Verifiable();
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendEnumerableUsesThePartitionKey,The following statement contains a magic number: var retryPolicy = new BasicRetryPolicy(new EventHubsRetryOptions { TryTimeout = TimeSpan.FromSeconds(17) });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchEnsuresNotClosed,The following statement contains a magic number: var expectedMaximumSize = 512;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchEnsuresNotClosed,The following statement contains a magic number: var retryPolicy = new BasicRetryPolicy(new EventHubsRetryOptions { TryTimeout = TimeSpan.FromSeconds(17) });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchUsesThePartitionKey,The following statement contains a magic number: var expectedMaximumSize = 512;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchUsesThePartitionKey,The following statement contains a magic number: var retryPolicy = new BasicRetryPolicy(new EventHubsRetryOptions { TryTimeout = TimeSpan.FromSeconds(17) });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchCreatesTheAmqpMessageFromTheBatch,The following statement contains a magic number: var expectedMaximumSize = 512;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchCreatesTheAmqpMessageFromTheBatch,The following statement contains a magic number: var retryPolicy = new BasicRetryPolicy(new EventHubsRetryOptions { TryTimeout = TimeSpan.FromSeconds(17) });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchDoesNotDisposeTheEventDataBatch,The following statement contains a magic number: var expectedMaximumSize = 512;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchDoesNotDisposeTheEventDataBatch,The following statement contains a magic number: var retryPolicy = new BasicRetryPolicy(new EventHubsRetryOptions { TryTimeout = TimeSpan.FromSeconds(17) });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchDoesNotDisposeTheEventsInTheSourceBatch,The following statement contains a magic number: var expectedMaximumSize = 512;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchDoesNotDisposeTheEventsInTheSourceBatch,The following statement contains a magic number: var retryPolicy = new BasicRetryPolicy(new EventHubsRetryOptions { TryTimeout = TimeSpan.FromSeconds(17) });
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchRespectsTheCancellationTokenIfSetWhenCalled,The following statement contains a magic number: var expectedMaximumSize = 512;
Magic Number,Azure.Messaging.EventHubs.Tests,AmqpProducerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Amqp\AmqpProducerTests.cs,SendBatchRespectsTheCancellationTokenIfSetWhenCalled,The following statement contains a magic number: var retryPolicy = new BasicRetryPolicy(new EventHubsRetryOptions { TryTimeout = TimeSpan.FromSeconds(17) });
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelReadsChannel,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelReadsChannel,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelReadsChannel,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelReadsChannel,The following statement contains a magic number: mockReader                .SetupGet(reader => reader.Completion)                .Returns(new Task(() => Thread.Sleep(5)));
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsTheCancellationToken,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsTheCancellationToken,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsTheCancellationToken,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsTheCancellationToken,The following statement contains a magic number: mockReader                .SetupGet(reader => reader.Completion)                .Returns(new Task(() => Thread.Sleep(5)));
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsTheMaximumWaitTime,The following statement contains a magic number: var maxReadItems = 2;
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsTheMaximumWaitTime,The following statement contains a magic number: var abortTimeout = TimeSpan.FromSeconds(15);
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsTheMaximumWaitTime,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsTheMaximumWaitTime,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsTheMaximumWaitTime,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsTheMaximumWaitTime,The following statement contains a magic number: mockReader                .SetupGet(reader => reader.Completion)                .Returns(new Task(async () => await Task.Delay(10)));
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsWhenThereIsNoMaximumWaitTime,The following statement contains a magic number: var maxReadItems = 3;
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsWhenThereIsNoMaximumWaitTime,The following statement contains a magic number: var cancelTimeout = TimeSpan.FromMilliseconds(300);
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsWhenThereIsNoMaximumWaitTime,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsWhenThereIsNoMaximumWaitTime,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsWhenThereIsNoMaximumWaitTime,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelRespectsWhenThereIsNoMaximumWaitTime,The following statement contains a magic number: mockReader                .SetupGet(reader => reader.Completion)                .Returns(new Task(() => Thread.Sleep(5)));
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelPropagatesChannelExceptions,The following statement contains a magic number: var maxReadItems = 2;
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelPropagatesChannelExceptions,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelPropagatesChannelExceptions,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelPropagatesChannelExceptions,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelPropagatesChannelExceptions,The following statement contains a magic number: mockReader                  .SetupGet(reader => reader.Completion)                  .Returns(new Task(async () => await Task.Delay(5)));
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelPropagatesChannelExceptions,The following statement contains a magic number: var readCancellation = new CancellationTokenSource(TimeSpan.FromSeconds(10));
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelSurfacesChannelCancellation,The following statement contains a magic number: var maxReadItems = 2;
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelSurfacesChannelCancellation,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelSurfacesChannelCancellation,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelSurfacesChannelCancellation,The following statement contains a magic number: var channelItems = new[] { 1' 4' 7' 9 };
Magic Number,Azure.Messaging.EventHubs.Tests,ChannelReaderExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\ChannelReaderExtensionsTests.cs,EnumerateChannelSurfacesChannelCancellation,The following statement contains a magic number: var readCancellation = new CancellationTokenSource(TimeSpan.FromSeconds(10));
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,AnInstanceIsEqualToItself,The following statement contains a magic number: var first = EventPosition.FromOffset(12);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,TheSameOffsetAreEqual,The following statement contains a magic number: var first = EventPosition.FromOffset(12);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,TheSameOffsetAreEqual,The following statement contains a magic number: var second = EventPosition.FromOffset(12);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,DifferentOffsetsAreNotEqual,The following statement contains a magic number: var first = EventPosition.FromOffset(12);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,DifferentOffsetsAreNotEqual,The following statement contains a magic number: var second = EventPosition.FromOffset(34);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,TheSameSequenceNumbersAreEqual,The following statement contains a magic number: var first = EventPosition.FromSequenceNumber(12);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,TheSameSequenceNumbersAreEqual,The following statement contains a magic number: var second = EventPosition.FromSequenceNumber(12);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,DifferentSequenceNumbersAreNotEqual,The following statement contains a magic number: var first = EventPosition.FromSequenceNumber(234234);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,DifferentSequenceNumbersAreNotEqual,The following statement contains a magic number: var second = EventPosition.FromSequenceNumber(234234234);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,TheSameInclusiveFlagsAreEqual,The following statement contains a magic number: var first = EventPosition.FromSequenceNumber(234234' isInclusive);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,TheSameInclusiveFlagsAreEqual,The following statement contains a magic number: var second = EventPosition.FromSequenceNumber(234234' isInclusive);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,DifferentInclusiveFlagsAreNotEqual,The following statement contains a magic number: var first = EventPosition.FromSequenceNumber(234234' true);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,DifferentInclusiveFlagsAreNotEqual,The following statement contains a magic number: var second = EventPosition.FromSequenceNumber(234234' false);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,DifferentMembersAreNotEqual,The following statement contains a magic number: var first = EventPosition.FromSequenceNumber(234234);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,DifferentMembersAreNotEqual,The following statement contains a magic number: var second = EventPosition.FromOffset(12);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,GetHashCodeReturnsDifferentValuesForDifferentMembers,The following statement contains a magic number: var first = EventPosition.FromOffset(12);
Magic Number,Azure.Messaging.EventHubs.Tests,EventPositionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\EventPositionTests.cs,GetHashCodeReturnsDifferentValuesForDifferentMembers,The following statement contains a magic number: var second = EventPosition.FromSequenceNumber(123);
Magic Number,Azure.Messaging.EventHubs.Tests,PartitionContextTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\PartitionContextTests.cs,ReadLastEnqueuedEventPropertiesDelegatesToTheConsumer,The following statement contains a magic number: var lastEvent = new EventData              (                  eventBody: Array.Empty<byte>()'                  lastPartitionSequenceNumber: 1234'                  lastPartitionOffset: 42'                  lastPartitionEnqueuedTime: DateTimeOffset.Parse("2015-10-27T00:00:00Z")'                  lastPartitionPropertiesRetrievalTime: DateTimeOffset.Parse("2012-03-04T08:42Z")              );
Magic Number,Azure.Messaging.EventHubs.Tests,PartitionContextTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\PartitionContextTests.cs,ReadLastEnqueuedEventPropertiesDelegatesToTheConsumer,The following statement contains a magic number: var lastEvent = new EventData              (                  eventBody: Array.Empty<byte>()'                  lastPartitionSequenceNumber: 1234'                  lastPartitionOffset: 42'                  lastPartitionEnqueuedTime: DateTimeOffset.Parse("2015-10-27T00:00:00Z")'                  lastPartitionPropertiesRetrievalTime: DateTimeOffset.Parse("2012-03-04T08:42Z")              );
Magic Number,Azure.Messaging.EventHubs.Tests,PartitionContextTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Core\PartitionContextTests.cs,TheConsumerIsNotKeptAlive,The following statement contains a magic number: var maxAttempts = 5;
Magic Number,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerCreatesDiagnosticScopeOnBatchSend,The following statement contains a magic number: batchTransportMock                  .Setup(m => m.TryAdd(It.IsAny<EventData>()))                  .Returns(() =>                  {                      eventCount++;                      return eventCount <= 3;                  });
Magic Number,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerAppliesDiagnosticIdToEventsOnSend,The following statement contains a magic number: Assert.That(writtenEventsData.Length' Is.EqualTo(2)' "All events should have been instrumented.");
Magic Number,Azure.Messaging.EventHubs.Tests,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\Diagnostics\DiagnosticsTests.cs,EventHubProducerAppliesDiagnosticIdToEventsOnBatchSend,The following statement contains a magic number: Assert.That(writtenEventsData.Count' Is.EqualTo(2)' "Each of the events in the batch should have been instrumented.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionCanConnectToEventHubsUsingArguments,The following statement contains a magic number: var credential = new SharedAccessSignatureCredential                  (                      new SharedAccessSignature                      (                          $"{ options.TransportType.GetUriScheme() }://{ connectionProperties.Endpoint.Host }/{ connectionProperties.EventHubName }".ToLowerInvariant()'                          connectionProperties.SharedAccessKeyName'                          connectionProperties.SharedAccessKey'                          TimeSpan.FromHours(4)                      )                  );
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCanRetrieveProperties,The following statement contains a magic number: var partitionCount = 4;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCanRetrieveProperties,The following statement contains a magic number: Assert.That(properties.CreatedOn' Is.EqualTo(DateTimeOffset.UtcNow).Within(TimeSpan.FromSeconds(60))' "The Event Hub should have been created just about now.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCanRetrievePartitionProperties,The following statement contains a magic number: var partitionCount = 4;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCanRetrievePartitionProperties,The following statement contains a magic number: var credential = new SharedAccessSignatureCredential                  (                      new SharedAccessSignature                      (                          $"{ options.TransportType.GetUriScheme() }://{ connectionProperties.Endpoint.Host }/{ connectionProperties.EventHubName }".ToLowerInvariant()'                          connectionProperties.SharedAccessKeyName'                          connectionProperties.SharedAccessKey'                          TimeSpan.FromHours(4)                      )                  );
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCanRetrievePartitionProperties,The following statement contains a magic number: var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(20));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCannotRetrieveMetadataWhenClosed,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConnectionLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionLiveTests.cs,ConnectionTransportCannotRetrieveMetadataWhenProxyIsInvalid,The following statement contains a magic number: var retryOptions = new EventHubsRetryOptions { TryTimeout = TimeSpan.FromMinutes(2) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateProducerInvokesTheTransportClient,The following statement contains a magic number: var options = new EventHubProducerClientOptions { RetryOptions = new EventHubsRetryOptions { MaximumRetries = 6' TryTimeout = TimeSpan.FromMinutes(4) } };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateProducerInvokesTheTransportClient,The following statement contains a magic number: var options = new EventHubProducerClientOptions { RetryOptions = new EventHubsRetryOptions { MaximumRetries = 6' TryTimeout = TimeSpan.FromMinutes(4) } };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumerInvokesTheTransportClient,The following statement contains a magic number: var expectedPosition = EventPosition.FromOffset(65);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumerInvokesTheTransportClient,The following statement contains a magic number: var expectedRetryPolicy = new EventHubsRetryOptions { MaximumRetries = 67 }.ToRetryPolicy();
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumerInvokesTheTransportClient,The following statement contains a magic number: var expectedPrefetch = 99U;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConnection\EventHubConnectionTests.cs,CreateConsumerInvokesTheTransportClient,The following statement contains a magic number: var expectedOwnerLevel = 123L;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerWithOptionsCanReceive,The following statement contains a magic number: var options = new EventHubConsumerClientOptions { RetryOptions = new EventHubsRetryOptions { MaximumRetries = 7 } };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadLargeEvent,The following statement contains a magic number: EventData[] eventBatch = new[]                  {                      new EventData(new byte[100000])                  };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadLargeEvent,The following statement contains a magic number: var retryOptions = new EventHubsRetryOptions { TryTimeout = TimeSpan.FromMinutes(5) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadLargeEvent,The following statement contains a magic number: var readOptions = new ReadEventOptions { MaximumWaitTime = TimeSpan.FromSeconds(2) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromEarliestEvent,The following statement contains a magic number: var expectedEventsCount = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromOffset,The following statement contains a magic number: i < 10
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromOffset,The following statement contains a magic number: var expectedEventsCount = 2;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromEnqueuedTime,The following statement contains a magic number: i < 10
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromSequenceNumber,The following statement contains a magic number: i < 10
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromSequenceNumber,The following statement contains a magic number: var expectedEventsCount = isInclusive ? 2 : 1;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitions,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromSeconds(90));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitions,The following statement contains a magic number: var eventsPerPartition = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitions,The following statement contains a magic number: var maximumConsecutiveEmpties = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadAllPartitionsFromLatest,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromSeconds(90));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadAllPartitionsFromLatest,The following statement contains a magic number: var eventsPerPartition = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadAllPartitionsFromLatest,The following statement contains a magic number: var maximumConsecutiveEmpties = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsWhenUsingPartitionKeys,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromSeconds(90));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsWhenUsingPartitionKeys,The following statement contains a magic number: var eventsPerPartition = 5;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsWhenUsingPartitionKeys,The following statement contains a magic number: var maximumConsecutiveEmpties = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsWhenUsingAutomaticRouting,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromSeconds(90));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsWhenUsingAutomaticRouting,The following statement contains a magic number: var eventsPerPartition = 5;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsWhenUsingAutomaticRouting,The following statement contains a magic number: var maximumConsecutiveEmpties = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadUsingAnIdentityCredential,The following statement contains a magic number: var expectedEventsCount = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsUsingAnIdentityCredential,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromSeconds(90));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsUsingAnIdentityCredential,The following statement contains a magic number: var eventsPerPartition = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanReadFromAllPartitionsUsingAnIdentityCredential,The following statement contains a magic number: var maximumConsecutiveEmpties = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReadWhenClosed,The following statement contains a magic number: Func<Task> readAfterClose = async () =>                          {                              var count = 0;                              var maximumCount = 25;                              var countBeforeClose = 3;                              var closeCalled = false;                                await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' DefaultReadOptions))                              {                                  ++count;                                    if ((count == countBeforeClose) && (!closeCalled))                                  {                                      await consumer.CloseAsync();                                  }                                    if (count >= maximumCount)                                  {                                      break;                                  }                              }                          };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReadWhenClosed,The following statement contains a magic number: Func<Task> readAfterClose = async () =>                          {                              var count = 0;                              var maximumCount = 25;                              var countBeforeClose = 3;                              var closeCalled = false;                                await foreach (var partitionEvent in consumer.ReadEventsFromPartitionAsync(partition' EventPosition.Latest' DefaultReadOptions))                              {                                  ++count;                                    if ((count == countBeforeClose) && (!closeCalled))                                  {                                      await consumer.CloseAsync();                                  }                                    if (count >= maximumCount)                                  {                                      break;                                  }                              }                          };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,NoOwnerLevelConsumerCannotStartReading,The following statement contains a magic number: exclusiveReadOptions.OwnerLevel = 20;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,NoOwnerLevelConsumerCannotStartReading,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,NoOwnerLevelConsumerCannotStartReading,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOwnerLevelConsumerCannotStartReading,The following statement contains a magic number: higherExclusiveReadOptions.OwnerLevel = 30;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOwnerLevelConsumerCannotStartReading,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOwnerLevelConsumerCannotStartReading,The following statement contains a magic number: lowerExclusiveReadOptions.OwnerLevel = 20;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOwnerLevelConsumerCannotStartReading,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReceivingFromOtherPartitions,The following statement contains a magic number: higherExclusiveReadOptions.OwnerLevel = 20;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReceivingFromOtherPartitions,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReceivingFromOtherPartitions,The following statement contains a magic number: lowerExclusiveReadOptions.OwnerLevel = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReceivingFromOtherPartitions,The following statement contains a magic number: Assert.That(async () => await ReadNothingAsync(consumer' partitionIds[2]' EventPosition.Latest' DefaultReadOptions)' Throws.Nothing);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReceivingFromOtherPartitions,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReadingFromOtherConsumerGroups,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReadingFromOtherConsumerGroups,The following statement contains a magic number: higherExclusiveReadOptions.OwnerLevel = 20;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReadingFromOtherConsumerGroups,The following statement contains a magic number: lowerExclusiveReadOptions.OwnerLevel = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,LowerOrNoOwnerLevelConsumerCanStartReadingFromOtherConsumerGroups,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesNoOwnerLevelConsumer,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesNoOwnerLevelConsumer,The following statement contains a magic number: exclusiveReadOptions.OwnerLevel = 20;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesNoOwnerLevelConsumer,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesLowerOwnerLevelConsumer,The following statement contains a magic number: higherExclusiveReadOptions.OwnerLevel = 30;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesLowerOwnerLevelConsumer,The following statement contains a magic number: lowerExclusiveReadOptions.OwnerLevel = 20;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesLowerOwnerLevelConsumer,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerClosesLowerOwnerLevelConsumer,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherPartitions,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherPartitions,The following statement contains a magic number: lowerExclusiveReadOptions.OwnerLevel = 20;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherPartitions,The following statement contains a magic number: higherExclusiveReadOptions.OwnerLevel = 30;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherPartitions,The following statement contains a magic number: Assert.That(async () => await ReadNothingAsync(consumer' partitionIds[2]' EventPosition.Latest' higherExclusiveReadOptions)' Throws.Nothing);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherPartitions,The following statement contains a magic number: await Task.Delay(150);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherPartitions,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherConsumerGroups,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherConsumerGroups,The following statement contains a magic number: lowerExclusiveReadOptions.OwnerLevel = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherConsumerGroups,The following statement contains a magic number: higherExclusiveReadOptions.OwnerLevel = 20;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherConsumerGroups,The following statement contains a magic number: await Task.Delay(150);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,OwnerConsumerDoesNotCloseLowerOrNoOwnerLevelConsumersFromOtherConsumerGroups,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The following statement contains a magic number: lowerExclusiveReadOptions.OwnerLevel = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The following statement contains a magic number: higherExclusiveReadOptions.OwnerLevel = 20;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The following statement contains a magic number: await Task.Delay(150);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateConsumerDoesNotCompromiseReadBehavior,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidPartitionConsumerDoesNotCompromiseReadBehavior,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidPartitionConsumerDoesNotCompromiseReadBehavior,The following statement contains a magic number: exclusiveReadOptions.OwnerLevel = 20;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidConsumerGroupConsumerDoesNotCompromiseReadBehavior,The following statement contains a magic number: exclusiveReadOptions.OwnerLevel = 20;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidConsumerGroupConsumerDoesNotCompromiseReadBehavior,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,FailingToCreateInvalidConsumerGroupConsumerDoesNotCompromiseReadBehavior,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReadEventsSentToAnotherPartition,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReadEventsSentToAnotherPartition,The following statement contains a magic number: var maximumConsecutiveEmpties = 5;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReadEventsSentToAnotherPartition,The following statement contains a magic number: var batches = 3;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumersInDifferentConsumerGroupsShouldAllReadEvents,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumersInDifferentConsumerGroupsShouldAllReadEvents,The following statement contains a magic number: var maximumConsecutiveEmpties = 5;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ReadStopsWhenMaximumWaitTimeIsReached,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ReadStopsWhenMaximumWaitTimeIsReached,The following statement contains a magic number: Assert.That(elapsedTime' Is.GreaterThan(maximumWaitTimeInSecs - 0.1));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ReadStopsWhenMaximumWaitTimeIsReached,The following statement contains a magic number: Assert.That(elapsedTime' Is.LessThan(maximumWaitTimeInSecs + 5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReadWhenProxyIsInvalid,The following statement contains a magic number: var options = new EventHubConsumerClientOptions                      {                          RetryOptions = new EventHubsRetryOptions { TryTimeout = TimeSpan.FromMinutes(2) }'                            ConnectionOptions = new EventHubConnectionOptions                          {                              Proxy = new WebProxy("http://1.2.3.4:9999")'                              TransportType = EventHubsTransportType.AmqpWebSockets                          }                      };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReadWhenProxyIsInvalid,The following statement contains a magic number: var readOptions = new ReadEventOptions { MaximumWaitTime = TimeSpan.FromMilliseconds(250) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotReadWhenProxyIsInvalid,The following statement contains a magic number: Assert.That(async () => await ReadNothingAsync(invalidProxyConsumer' partition' EventPosition.Latest' readOptions' 25)' Throws.InstanceOf<WebSocketException>().Or.InstanceOf<TimeoutException>());
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanRetrieveEventHubProperties,The following statement contains a magic number: var partitionCount = 4;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanRetrieveEventHubProperties,The following statement contains a magic number: Assert.That(properties.CreatedOn' Is.EqualTo(DateTimeOffset.UtcNow).Within(TimeSpan.FromSeconds(60))' "The Event Hub should have been created just about now.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanRetrievePartitionProperties,The following statement contains a magic number: var partitionCount = 4;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCanRetrievePartitionProperties,The following statement contains a magic number: var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(20));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotRetrieveMetadataWhenClosed,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ConsumerCannotRetrieveMetadataWhenProxyIsInvalid,The following statement contains a magic number: var invalidProxyOptions = new EventHubConsumerClientOptions                  {                      RetryOptions = new EventHubsRetryOptions { TryTimeout = TimeSpan.FromMinutes(2) }'                        ConnectionOptions = new EventHubConnectionOptions                      {                          Proxy = new WebProxy("http://1.2.3.4:9999")'                          TransportType = EventHubsTransportType.AmqpWebSockets                      }                  };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ReadNothingAsync,The following statement contains a magic number: readOptions ??= new ReadEventOptions { MaximumWaitTime = TimeSpan.FromMilliseconds(150) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ReadNothingAsync,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientLiveTests.cs,ReadNothingAsync,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,CloseAsyncClosesActiveTransportConsumers,The following statement contains a magic number: var options = new ReadEventOptions { MaximumWaitTime = TimeSpan.FromMilliseconds(25) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,CloseAsyncClosesActiveTransportConsumers,The following statement contains a magic number: await using var firstIterator = consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(23)' options).GetAsyncEnumerator();
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,CloseAsyncClosesActiveTransportConsumers,The following statement contains a magic number: await using var secondIterator = consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(23)' options).GetAsyncEnumerator();
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,CloseAsyncSurfacesExceptionsForActiveTransportConsumers,The following statement contains a magic number: var options = new ReadEventOptions { MaximumWaitTime = TimeSpan.FromMilliseconds(25) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,CloseAsyncSurfacesExceptionsForActiveTransportConsumers,The following statement contains a magic number: await using var iterator = consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(23)' options).GetAsyncEnumerator();
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncWithNoOptionsReturnsAnEnumerable,The following statement contains a magic number: IAsyncEnumerable<PartitionEvent> enumerable = consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncWithOptionsReturnsAnEnumerable,The following statement contains a magic number: var options = new ReadEventOptions { MaximumWaitTime = TimeSpan.FromMilliseconds(25) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncWithOptionsReturnsAnEnumerable,The following statement contains a magic number: var enumerable = consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' options);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncThrowsIfConsumerClosedBeforeRead,The following statement contains a magic number: cancellation.CancelAfter(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncThrowsIfConsumerClosedBeforeRead,The following statement contains a magic number: Assert.That(async () =>              {                  await consumer.CloseAsync(cancellation.Token);                    await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token))                  {                      if (partitionEvent.Data == null)                      {                          break;                      }                        ++receivedEvents;                  }              }' Throws.InstanceOf<EventHubsClientClosedException>()' "The iterator should have indicated the consumer was closed.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncThrowsIfCancelledBeforeRead,The following statement contains a magic number: Assert.That(async () =>              {                  await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token))                  {                      if (partitionEvent.Data == null)                      {                          break;                      }                        ++receivedEvents;                  }              }' Throws.InstanceOf<TaskCanceledException>()' "The iterator should have indicated the token was not active.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncThrowsIfCancelledDuringRead,The following statement contains a magic number: var expectedEvents = events.Count - 2;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncThrowsIfCancelledDuringRead,The following statement contains a magic number: cancellation.CancelAfter(TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncThrowsIfCancelledDuringRead,The following statement contains a magic number: Assert.That(async () =>              {                  await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token))                  {                      if (++receivedEvents >= expectedEvents)                      {                          cancellation.Cancel();                      }                  }              }' Throws.InstanceOf<TaskCanceledException>()' "The iterator should have indicated the token was not active.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncDoesNotThrowIfNotCancelled,The following statement contains a magic number: var expectedEvents = events.Count - 2;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncDoesNotThrowIfNotCancelled,The following statement contains a magic number: cancellation.CancelAfter(TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncDoesNotThrowIfNotCancelled,The following statement contains a magic number: Assert.That(async () =>              {                  await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token))                  {                      if (++receivedEvents >= expectedEvents)                      {                         break;                      }                  }              }' Throws.Nothing' "The iterator should not have been canceled.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenCanceled,The following statement contains a magic number: var events = Enumerable                  .Range(0' 1500)                  .Select(index => new EventData(Encoding.UTF8.GetBytes($"Event: { index }")))                  .ToList();
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenCanceled,The following statement contains a magic number: var expectedEvents = 100;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenCanceled,The following statement contains a magic number: cancellation.CancelAfter(TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenCanceled,The following statement contains a magic number: consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token)
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenCanceled,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenCanceled,The following statement contains a magic number: Assert.That(transportConsumer.PublishIndex' Is.EqualTo(expectedEvents).Within(transportConsumer.LastMaximumMessageCount * 5)' "Publishing should have stopped when the iterator was canceled.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenIterationStops,The following statement contains a magic number: var events = Enumerable                  .Range(0' 1500)                  .Select(index => new EventData(Encoding.UTF8.GetBytes($"Event: { index }")))                  .ToList();
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenIterationStops,The following statement contains a magic number: var expectedEvents = 100;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenIterationStops,The following statement contains a magic number: cancellation.CancelAfter(TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenIterationStops,The following statement contains a magic number: consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token)
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenIterationStops,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingWhenIterationStops,The following statement contains a magic number: Assert.That(transportConsumer.PublishIndex' Is.EqualTo(expectedEvents).Within(transportConsumer.LastMaximumMessageCount * 5)' "Publishing should have stopped when the iterator was canceled.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingOnException,The following statement contains a magic number: var expectedEvents = 5;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingOnException,The following statement contains a magic number: cancellation.CancelAfter(TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingOnException,The following statement contains a magic number: consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token)
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingOnException,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncStopsPublishingOnException,The following statement contains a magic number: Assert.That(iteration' Is.EqualTo(expectedEvents).Within(lastMaximumCount * 2)' "Publishing should have stopped when the exception was thrown.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithOneIteratorAndSingleBatch,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(60));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithOneIteratorAndSingleBatch,The following statement contains a magic number: consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' cancellation.Token)
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndSingleBatch,The following statement contains a magic number: var options = new ReadEventOptions { MaximumWaitTime = TimeSpan.FromMilliseconds(5) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndSingleBatch,The following statement contains a magic number: var position = EventPosition.FromOffset(22);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndSingleBatch,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(75));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithOneIteratorAndMultipleBatches,The following statement contains a magic number: events.AddRange(                  Enumerable.Range(0' (GetBackgroundPublishReceiveBatchSize(consumer) * 3))                      .Select(index => new EventData(Encoding.UTF8.GetBytes($"Event Number { index }")))              );
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithOneIteratorAndMultipleBatches,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(60));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithOneIteratorAndMultipleBatches,The following statement contains a magic number: consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromSequenceNumber(123)' cancellation.Token)
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndMultipleBatches,The following statement contains a magic number: var options = new ReadEventOptions { MaximumWaitTime = TimeSpan.FromMilliseconds(5) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndMultipleBatches,The following statement contains a magic number: var position = EventPosition.FromSequenceNumber(453);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndMultipleBatches,The following statement contains a magic number: events.AddRange(                  Enumerable.Range(0' (GetBackgroundPublishReceiveBatchSize(consumer) * 3))                      .Select(index => new EventData(Encoding.UTF8.GetBytes($"Event Number { index }")))              );
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPublishesEventsWithMultipleIteratorsAndMultipleBatches,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(75));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRespectsWaitTimeWhenPublishingEvents,The following statement contains a magic number: var maxWaitTime = TimeSpan.FromMilliseconds(50);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRespectsWaitTimeWhenPublishingEvents,The following statement contains a magic number: var publishDelay = maxWaitTime.Add(TimeSpan.FromMilliseconds(15));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRespectsWaitTimeWhenPublishingEvents,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(100));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRespectsWaitTimeWhenPublishingEvents,The following statement contains a magic number: consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(12)' options' cancellation.Token)
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRespectsWaitTimeWhenPublishingEvents,The following statement contains a magic number: Assert.That(receivedEvents.Count' Is.AtLeast(events.Count + 1).And.LessThanOrEqualTo(events.Count * 2)' "There should be empty events present due to the wait time.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPropagatesException,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(10));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncPropagatesException,The following statement contains a magic number: Assert.That(async () =>              {                  await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(2)' cancellation.Token))                  {                      ++receivedEvents;                      break;                  }              }' Throws.TypeOf(exceptionType)' "An exception during receive should be propagated by the iterator.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncSurfacesCancelation,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(10));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncSurfacesNonRetriableExceptions,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(10));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncSurfacesNonRetriableExceptions,The following statement contains a magic number: Func<Task> invoke = async () =>              {                  await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(120)' cancellation.Token))                  {                      ++receivedEvents;                      break;                  }              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRetriesAndSurfacesRetriableExceptions,The following statement contains a magic number: const int maximumRetries = 2;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRetriesAndSurfacesRetriableExceptions,The following statement contains a magic number: mockRetryPolicy                  .Setup(policy => policy.CalculateRetryDelay(It.Is<Exception>(value => value == exception)' It.Is<int>(value => value <= maximumRetries)))                  .Returns(TimeSpan.FromMilliseconds(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRetriesAndSurfacesRetriableExceptions,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(10));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncRetriesAndSurfacesRetriableExceptions,The following statement contains a magic number: Func<Task> invoke = async () =>              {                  await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromSequenceNumber(123)' cancellation.Token))                  {                      ++receivedEvents;                      break;                  }              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncHonorsRetryPolicyForRetriableExceptions,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(10));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsFromPartitionAsyncHonorsRetryPolicyForRetriableExceptions,The following statement contains a magic number: Func<Task> invoke = async () =>              {                  await foreach (PartitionEvent partitionEvent in consumer.ReadEventsFromPartitionAsync("0"' EventPosition.FromOffset(888)' cancellation.Token))                  {                      ++receivedEvents;                      break;                  }              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncWithOptionsReturnsAnEnumerable,The following statement contains a magic number: var options = new ReadEventOptions { MaximumWaitTime = TimeSpan.FromMilliseconds(25) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncThrowsIfConsumerClosedBeforeRead,The following statement contains a magic number: cancellation.CancelAfter(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncThrowsIfCancelledDuringRead,The following statement contains a magic number: var expectedEvents = events.Count - 2;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncThrowsIfCancelledDuringRead,The following statement contains a magic number: cancellation.CancelAfter(TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncDoesNotThrowIfNotCancelled,The following statement contains a magic number: var expectedEvents = events.Count - 2;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncDoesNotThrowIfNotCancelled,The following statement contains a magic number: cancellation.CancelAfter(TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenCanceled,The following statement contains a magic number: var events = Enumerable                  .Range(0' 1500)                  .Select(index => new EventData(Encoding.UTF8.GetBytes($"Event: { index }")))                  .ToList();
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenCanceled,The following statement contains a magic number: var expectedEvents = 400;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenCanceled,The following statement contains a magic number: var thresholdModifier = 5 * partitions.Length;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenCanceled,The following statement contains a magic number: cancellation.CancelAfter(TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenCanceled,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenCanceled,The following statement contains a magic number: Assert.That(receivedEvents' Is.EqualTo(expectedEvents).Within(2)' "There should have been the expected number events received.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenIterationStops,The following statement contains a magic number: var events = Enumerable                  .Range(0' 1500)                  .Select(index => new EventData(Encoding.UTF8.GetBytes($"Event: { index }")))                  .ToList();
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenIterationStops,The following statement contains a magic number: var expectedEvents = 100;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenIterationStops,The following statement contains a magic number: var thresholdModifier = 5 * partitions.Length;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenIterationStops,The following statement contains a magic number: cancellation.CancelAfter(TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingWhenIterationStops,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingOnException,The following statement contains a magic number: var expectedEvents = 5;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingOnException,The following statement contains a magic number: cancellation.CancelAfter(TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingOnException,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingOnException,The following statement contains a magic number: Assert.That(receivedEvents' Is.EqualTo(expectedEvents).Within(2)' "There should have been the expected number events received.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncStopsPublishingOnException,The following statement contains a magic number: Assert.That(iteration' Is.EqualTo(expectedEvents).Within(lastMaximumCount * 2)' "Publishing should have stopped when the exception was thrown.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncPublishesEventsWithOneIterator,The following statement contains a magic number: var events = Enumerable                  .Range(0' 150)                  .Select(index => new EventData(Encoding.UTF8.GetBytes($"Event: { index }")))                  .ToList();
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncPublishesEventsWithOneIterator,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(60));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncPublishesEventsWithMultipleIterators,The following statement contains a magic number: var events = Enumerable                  .Range(0' 150)                  .Select(index => new EventData(Encoding.UTF8.GetBytes($"Event: { index }")))                  .ToList();
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncPublishesEventsWithMultipleIterators,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(75));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncRespectsWaitTimeWhenPublishingEvents,The following statement contains a magic number: var events = Enumerable                  .Range(0' 150)                  .Select(index => new EventData(Encoding.UTF8.GetBytes($"Event: { index }")))                  .ToList();
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncRespectsWaitTimeWhenPublishingEvents,The following statement contains a magic number: var maxWaitTime = TimeSpan.FromMilliseconds(50);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncRespectsWaitTimeWhenPublishingEvents,The following statement contains a magic number: var publishDelay = maxWaitTime.Add(TimeSpan.FromMilliseconds(15));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncRespectsWaitTimeWhenPublishingEvents,The following statement contains a magic number: var thresholdModifier = 2 * partitions.Length;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncRespectsWaitTimeWhenPublishingEvents,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(100));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncRespectsWaitTimeWhenPublishingEvents,The following statement contains a magic number: consecutiveEmptyCount > 5
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncReadsEventsFromAllPartitions,The following statement contains a magic number: var events = Enumerable                  .Range(0' 500)                  .Select(index => new EventData(Encoding.UTF8.GetBytes($"Event: { index }")))                  .ToList();
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncReadsEventsFromAllPartitions,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(60));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncPropagatesException,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(10));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncSurfacesCancelation,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(10));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncSurfacesNonRetriableExceptions,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(10));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncRetriesAndSurfacesRetriableExceptions,The following statement contains a magic number: const int maximumRetries = 2;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncRetriesAndSurfacesRetriableExceptions,The following statement contains a magic number: mockRetryPolicy                  .Setup(policy => policy.CalculateRetryDelay(It.Is<Exception>(value => value == exception)' It.Is<int>(value => value <= maximumRetries)))                  .Returns(TimeSpan.FromMilliseconds(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncRetriesAndSurfacesRetriableExceptions,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubConsumerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\EventHubConsumerClientTests.cs,ReadEventsAsyncHonorsRetryPolicyForRetriableExceptions,The following statement contains a magic number: using var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(10));
Magic Number,Azure.Messaging.EventHubs.Tests,ReadOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\ReadOptionsTests.cs,CloneProducesACopy,The following statement contains a magic number: var options = new ReadEventOptions              {                  OwnerLevel = 99'                  TrackLastEnqueuedEventProperties = false'                  MaximumWaitTime = TimeSpan.FromMinutes(65)              };
Magic Number,Azure.Messaging.EventHubs.Tests,ReadOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubConsumerClient\ReadOptionsTests.cs,CloneProducesACopy,The following statement contains a magic number: var options = new ReadEventOptions              {                  OwnerLevel = 99'                  TrackLastEnqueuedEventProperties = false'                  MaximumWaitTime = TimeSpan.FromMinutes(65)              };
Magic Number,Azure.Messaging.EventHubs.Tests,CreateBatchOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\CreateBatchOptionsTests.cs,CloneProducesACopy,The following statement contains a magic number: var options = new CreateBatchOptions              {                  PartitionId = "0"'                  PartitionKey = "some_partition_123"'                  MaximumSizeInBytes = (int.MaxValue + 122L)              };
Magic Number,Azure.Messaging.EventHubs.Tests,CreateBatchOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\CreateBatchOptionsTests.cs,ToSendOptionsTranslatesProperly,The following statement contains a magic number: var options = new CreateBatchOptions              {                  PartitionId = "0"'                  PartitionKey = "some_partition_123"'                  MaximumSizeInBytes = (int.MaxValue + 122L)              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerWithOptionsCanSend,The following statement contains a magic number: var producerOptions = new EventHubProducerClientOptions                  {                      RetryOptions = new EventHubsRetryOptions { MaximumRetries = 5 }'                      ConnectionOptions = new EventHubConnectionOptions { TransportType = transportType }                  };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendEventsUsingAPartitionHashKey,The following statement contains a magic number: IEnumerable<EventData> events = Enumerable                      .Range(0' 25)                      .Select(index => new EventData(Encoding.UTF8.GetBytes(new string('X'' index + 5))));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendEventsUsingAPartitionHashKey,The following statement contains a magic number: IEnumerable<EventData> events = Enumerable                      .Range(0' 25)                      .Select(index => new EventData(Encoding.UTF8.GetBytes(new string('X'' index + 5))));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendMultipleSetsOfEventsUsingAPartitionHashKey,The following statement contains a magic number: IEnumerable<EventData> events = Enumerable                          .Range(0' 25)                          .Select(index => new EventData(Encoding.UTF8.GetBytes(new string((char)(65 + index)' index + 5))));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendMultipleSetsOfEventsUsingAPartitionHashKey,The following statement contains a magic number: IEnumerable<EventData> events = Enumerable                          .Range(0' 25)                          .Select(index => new EventData(Encoding.UTF8.GetBytes(new string((char)(65 + index)' index + 5))));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendMultipleSetsOfEventsUsingAPartitionHashKey,The following statement contains a magic number: IEnumerable<EventData> events = Enumerable                          .Range(0' 25)                          .Select(index => new EventData(Encoding.UTF8.GetBytes(new string((char)(65 + index)' index + 5))));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendMultipleSetsOfEventsUsingAPartitionHashKey,The following statement contains a magic number: index < 5
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendAnEventBatchUsingAPartitionHashKey,The following statement contains a magic number: IEnumerable<EventData> events = Enumerable                      .Range(0' 25)                      .Select(index => new EventData(Encoding.UTF8.GetBytes(new string('X'' index + 5))));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendAnEventBatchUsingAPartitionHashKey,The following statement contains a magic number: IEnumerable<EventData> events = Enumerable                      .Range(0' 25)                      .Select(index => new EventData(Encoding.UTF8.GetBytes(new string('X'' index + 5))));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendSingleLargeEvent,The following statement contains a magic number: var singleEvent = new EventData(new byte[100000]);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendSingleLargeEventInASet,The following statement contains a magic number: EventData[] eventSet = new[] { new EventData(new byte[100000]) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotSendSingleEventLargerThanMaximumSize,The following statement contains a magic number: var singleEvent = new EventData(new byte[1500000]);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotSendSingleEventLargerThanMaximumSize,The following statement contains a magic number: EventData[] eventBatch = new[] { new EventData(new byte[1500000]) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendLargeSet,The following statement contains a magic number: EventData[] events = new[]                      {                          new EventData(new byte[100000 / 3])'                          new EventData(new byte[100000 / 3])'                          new EventData(new byte[100000 / 3])                      };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendLargeSet,The following statement contains a magic number: EventData[] events = new[]                      {                          new EventData(new byte[100000 / 3])'                          new EventData(new byte[100000 / 3])'                          new EventData(new byte[100000 / 3])                      };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendLargeSet,The following statement contains a magic number: EventData[] events = new[]                      {                          new EventData(new byte[100000 / 3])'                          new EventData(new byte[100000 / 3])'                          new EventData(new byte[100000 / 3])                      };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendLargeSet,The following statement contains a magic number: EventData[] events = new[]                      {                          new EventData(new byte[100000 / 3])'                          new EventData(new byte[100000 / 3])'                          new EventData(new byte[100000 / 3])                      };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendLargeSet,The following statement contains a magic number: EventData[] events = new[]                      {                          new EventData(new byte[100000 / 3])'                          new EventData(new byte[100000 / 3])'                          new EventData(new byte[100000 / 3])                      };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendLargeSet,The following statement contains a magic number: EventData[] events = new[]                      {                          new EventData(new byte[100000 / 3])'                          new EventData(new byte[100000 / 3])'                          new EventData(new byte[100000 / 3])                      };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendAnEventBatch,The following statement contains a magic number: Assert.That(batch.Count' Is.EqualTo(3)' "The batch should contain all 3 events.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendAnEventBatchUsingAnIdentityCredential,The following statement contains a magic number: Assert.That(batch.Count' Is.EqualTo(5)' "The batch should contain all 5 events.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendLargeEventBatch,The following statement contains a magic number: batch.TryAdd(new EventData(new byte[100000 / 3]));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendLargeEventBatch,The following statement contains a magic number: batch.TryAdd(new EventData(new byte[100000 / 3]));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendLargeEventBatch,The following statement contains a magic number: batch.TryAdd(new EventData(new byte[100000 / 3]));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendLargeEventBatch,The following statement contains a magic number: batch.TryAdd(new EventData(new byte[100000 / 3]));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendLargeEventBatch,The following statement contains a magic number: batch.TryAdd(new EventData(new byte[100000 / 3]));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendLargeEventBatch,The following statement contains a magic number: batch.TryAdd(new EventData(new byte[100000 / 3]));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanSendLargeEventBatch,The following statement contains a magic number: Assert.That(batch.Count' Is.EqualTo(3)' "The batch should contain all 3 events.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotSendSetLargerThanMaximumSize,The following statement contains a magic number: EventData[] events = new[]                      {                          new EventData(new byte[1500000 / 3])'                          new EventData(new byte[1500000 / 3])'                          new EventData(new byte[1500000 / 3])                      };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotSendSetLargerThanMaximumSize,The following statement contains a magic number: EventData[] events = new[]                      {                          new EventData(new byte[1500000 / 3])'                          new EventData(new byte[1500000 / 3])'                          new EventData(new byte[1500000 / 3])                      };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotSendSetLargerThanMaximumSize,The following statement contains a magic number: EventData[] events = new[]                      {                          new EventData(new byte[1500000 / 3])'                          new EventData(new byte[1500000 / 3])'                          new EventData(new byte[1500000 / 3])                      };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotSendSetLargerThanMaximumSize,The following statement contains a magic number: EventData[] events = new[]                      {                          new EventData(new byte[1500000 / 3])'                          new EventData(new byte[1500000 / 3])'                          new EventData(new byte[1500000 / 3])                      };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotSendSetLargerThanMaximumSize,The following statement contains a magic number: EventData[] events = new[]                      {                          new EventData(new byte[1500000 / 3])'                          new EventData(new byte[1500000 / 3])'                          new EventData(new byte[1500000 / 3])                      };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotSendSetLargerThanMaximumSize,The following statement contains a magic number: EventData[] events = new[]                      {                          new EventData(new byte[1500000 / 3])'                          new EventData(new byte[1500000 / 3])'                          new EventData(new byte[1500000 / 3])                      };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerDoesNotSendToSpecificPartitionWhenPartitionIdIsNotSpecified,The following statement contains a magic number: var partitions = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerDoesNotSendToSpecificPartitionWhenPartitionIdIsNotSpecified,The following statement contains a magic number: var batches = 30;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerDoesNotSendToSpecificPartitionWhenPartitionIdIsNotSpecified,The following statement contains a magic number: var eventsPerBatch = 5;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerDoesNotSendToSpecificPartitionWhenPartitionIdIsNotSpecified,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerDoesNotSendToSpecificPartitionWhenPartitionIdIsNotSpecified,The following statement contains a magic number: var maximumConsecutiveEmpties = 5;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerSendsEventsInTheSameSetToTheSamePartition,The following statement contains a magic number: var partitions = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerSendsEventsInTheSameSetToTheSamePartition,The following statement contains a magic number: var eventBatch = Enumerable                          .Range(0' 30)                          .Select(index => new EventData(Encoding.UTF8.GetBytes("I'm getting used to this amount of messages")))                          .ToList();
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerSendsEventsInTheSameSetToTheSamePartition,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerSendsEventsInTheSameSetToTheSamePartition,The following statement contains a magic number: var maximumConsecutiveEmpties = 5;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerSendsEventsWithTheSamePartitionHashKeyToTheSamePartition,The following statement contains a magic number: var partitions = 10;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerSendsEventsWithTheSamePartitionHashKeyToTheSamePartition,The following statement contains a magic number: var batches = 5;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerSendsEventsWithTheSamePartitionHashKeyToTheSamePartition,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromMinutes(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerSendsEventsWithTheSamePartitionHashKeyToTheSamePartition,The following statement contains a magic number: var maximumConsecutiveEmpties = 5;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotSendWhenProxyIsInvalid,The following statement contains a magic number: var producerOptions = new EventHubProducerClientOptions                  {                      RetryOptions = new EventHubsRetryOptions { TryTimeout = TimeSpan.FromMinutes(2) }'                        ConnectionOptions = new EventHubConnectionOptions                      {                          Proxy = new WebProxy("http://1.2.3.4:9999")'                          TransportType = EventHubsTransportType.AmqpWebSockets                      }                  };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanRetrieveEventHubProperties,The following statement contains a magic number: var partitionCount = 4;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanRetrieveEventHubProperties,The following statement contains a magic number: Assert.That(properties.CreatedOn' Is.EqualTo(DateTimeOffset.UtcNow).Within(TimeSpan.FromSeconds(60))' "The Event Hub should have been created just about now.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanRetrievePartitionProperties,The following statement contains a magic number: var partitionCount = 4;
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCanRetrievePartitionProperties,The following statement contains a magic number: var cancellation = new CancellationTokenSource(TimeSpan.FromSeconds(20));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotRetrieveMetadataWhenClosed,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientLiveTests.cs,ProducerCannotRetrieveMetadataWhenProxyIsInvalid,The following statement contains a magic number: var invalidProxyOptions = new EventHubProducerClientOptions                  {                      RetryOptions = new EventHubsRetryOptions { TryTimeout = TimeSpan.FromMinutes(2) }'                        ConnectionOptions = new EventHubConnectionOptions                      {                          Proxy = new WebProxy("http://1.2.3.4:9999")'                          TransportType = EventHubsTransportType.AmqpWebSockets                      }                  };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientOptionsTests.cs,CloneProducesACopy,The following statement contains a magic number: var options = new EventHubProducerClientOptions              {                  ConnectionOptions = new EventHubConnectionOptions { TransportType = EventHubsTransportType.AmqpWebSockets }'                  RetryOptions = new EventHubsRetryOptions { TryTimeout = TimeSpan.FromMinutes(36) }              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,CreateBatchInvokesTheTransportProducer,The following statement contains a magic number: var batchOptions = new CreateBatchOptions { PartitionKey = "Hi"' MaximumSizeInBytes = 9999 };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,CreateBatchSetsTheSendOptionsForTheEventBatch,The following statement contains a magic number: var batchOptions = new CreateBatchOptions { PartitionKey = "Hi"' MaximumSizeInBytes = 9999 };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubProducerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\EventHubProducerClient\EventHubProducerClientTests.cs,CloseAsyncClosesTheTransportProducers,The following statement contains a magic number: Assert.That(transportProducer.CloseCallCount' Is.EqualTo(3));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\RetryPolicies\EventHubsRetryOptionsTests.cs,CloneProducesACopy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = Mock.Of<EventHubsRetryPolicy>()              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\RetryPolicies\EventHubsRetryOptionsTests.cs,CloneProducesACopy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = Mock.Of<EventHubsRetryPolicy>()              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\RetryPolicies\EventHubsRetryOptionsTests.cs,CloneProducesACopy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = Mock.Of<EventHubsRetryPolicy>()              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\RetryPolicies\EventHubsRetryOptionsTests.cs,ToRetryPolicyWithoutCustomPolicyCreatesThePolicy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = null              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\RetryPolicies\EventHubsRetryOptionsTests.cs,ToRetryPolicyWithoutCustomPolicyCreatesThePolicy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = null              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\RetryPolicies\EventHubsRetryOptionsTests.cs,ToRetryPolicyWithoutCustomPolicyCreatesThePolicy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = null              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\RetryPolicies\EventHubsRetryOptionsTests.cs,ToRetryPolicyWithCustomPolicyUsesTheCustomPolicy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = Mock.Of<EventHubsRetryPolicy>()              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\RetryPolicies\EventHubsRetryOptionsTests.cs,ToRetryPolicyWithCustomPolicyUsesTheCustomPolicy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = Mock.Of<EventHubsRetryPolicy>()              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\tests\RetryPolicies\EventHubsRetryOptionsTests.cs,ToRetryPolicyWithCustomPolicyUsesTheCustomPolicy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = Mock.Of<EventHubsRetryPolicy>()              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventHubScope.cs,CreateAsync,The following statement contains a magic number: caller = (caller.Length < 16) ? caller : caller.Substring(0' 15);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventHubScope.cs,CreateAsync,The following statement contains a magic number: caller = (caller.Length < 16) ? caller : caller.Substring(0' 15);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventHubScope.cs,CreateAsync,The following statement contains a magic number: string CreateName() => $"{ Guid.NewGuid().ToString("D").Substring(0' 13) }-{ caller }";
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventHubScope.cs,CreateNamespaceAsync,The following statement contains a magic number: var eventHubsNamespace = new EHNamespace(sku: new Sku("Standard"' "Standard"' 12)' tags: ResourceManager.GenerateTags()' isAutoInflateEnabled: true' maximumThroughputUnits: 20' location: location);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventHubScope.cs,CreateNamespaceAsync,The following statement contains a magic number: var eventHubsNamespace = new EHNamespace(sku: new Sku("Standard"' "Standard"' 12)' tags: ResourceManager.GenerateTags()' isAutoInflateEnabled: true' maximumThroughputUnits: 20' location: location);
Magic Number,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The following statement contains a magic number: var expectedEventPrefix = declaringType.FullName + "." + methodName.Substring(0' methodName.Length - 5);
Magic Number,Azure.Core.Testing,RandomExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RandomExtensions.cs,NewGuid,The following statement contains a magic number: var bytes = new byte[16];
Magic Number,Azure.Core.Testing,TestRetryHelper,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRetryHelper.cs,RetryAsync,The following statement contains a magic number: delay = TimeSpan.FromSeconds(5);
