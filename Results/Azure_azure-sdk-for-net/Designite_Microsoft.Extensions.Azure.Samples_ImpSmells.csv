Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Microsoft.Extensions.Azure.Samples,Startup,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Microsoft.Extensions.Azure\samples\Startup.cs,ConfigureServices,The length of the statement  "                builder.ConfigureDefaults((options' provider) =>  options.AddPolicy(provider.GetService<DependencyInjectionEnabledPolicy>()' HttpPipelinePosition.PerCall)); " is 156.
Magic Number,Microsoft.Extensions.Azure.Samples,Startup,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Microsoft.Extensions.Azure\samples\Startup.cs,ConfigureServices,The following statement contains a magic number: services.AddAzureClients(builder => {                  // Register blob service client and initialize it using the KeyVault section of configuration                  builder.AddSecretClient(Configuration.GetSection("KeyVault"))                      // Set the name for this client registration                      .WithName("NamedBlobClient")                      // Set the credential for this client registration                      .WithCredential(new ClientSecretCredential("<tenant_id>"' "<client_id>"' "<client_secret>"))                      // Configure the client options                      .ConfigureOptions(options => options.Retry.MaxRetries = 10);                    // Adds a secret client using the provided endpoint and default credential set later                  builder.AddSecretClient(new Uri("http://my.keyvault.com"));                    // Configures environment credential to be used by default for all clients that require TokenCredential                  // and doesn't override it on per registration level                  builder.UseCredential(new EnvironmentCredential());                    // This would use configuration for auth and client settings                  builder.ConfigureDefaults(Configuration.GetSection("Default"));                    // Configure global retry mode                  builder.ConfigureDefaults(options => options.Retry.Mode = RetryMode.Exponential);                    // Advanced configure global defaults                  builder.ConfigureDefaults((options' provider) =>  options.AddPolicy(provider.GetService<DependencyInjectionEnabledPolicy>()' HttpPipelinePosition.PerCall));                    // Register blob service client and initialize it using the Storage section of configuration                  builder.AddBlobServiceClient(Configuration.GetSection("Storage"))                          .WithVersion(BlobClientOptions.ServiceVersion.V2019_02_02);              });
