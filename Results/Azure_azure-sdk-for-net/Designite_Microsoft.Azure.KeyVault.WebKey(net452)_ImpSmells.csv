Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,FromEcdsa,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Azure.KeyVault.WebKey,BCRYPT_ECC_PARAMETER_HEADER,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,Equals,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Azure.KeyVault.WebKey,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKey.cs,Equals,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyVerifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,Verify,Cyclomatic complexity of the method is 16
Long Parameter List,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyVerifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,VerifyKeyParameters,The method has 6 parameters. Parameters: name' isCompleteProc' isValidProc' webKey' options' error
Long Parameter List,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyVerifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,VerifyEnum,The method has 6 parameters. Parameters: value' name' dictionary' item' options' error
Long Identifier,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,,The length of the parameter BCRYPT_ECDSA_PUBLIC_P256_MAGIC is 30.
Long Identifier,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,,The length of the parameter BCRYPT_ECDSA_PRIVATE_P256_MAGIC is 31.
Long Identifier,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,,The length of the parameter BCRYPT_ECDSA_PUBLIC_P384_MAGIC is 30.
Long Identifier,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,,The length of the parameter BCRYPT_ECDSA_PRIVATE_P384_MAGIC is 31.
Long Identifier,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,,The length of the parameter BCRYPT_ECDSA_PUBLIC_P521_MAGIC is 30.
Long Identifier,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,,The length of the parameter BCRYPT_ECDSA_PRIVATE_P521_MAGIC is 31.
Long Identifier,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,,The length of the parameter BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC is 33.
Long Identifier,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,,The length of the parameter BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC is 34.
Long Identifier,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,,The length of the parameter CngKeyBlobFormat_EccFullPublicBlob is 34.
Long Identifier,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,,The length of the parameter CngKeyBlobFormat_EccFullPrivateBlob is 35.
Long Identifier,Microsoft.Azure.KeyVault.WebKey,BCRYPT_ECC_PARAMETER_HEADER,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,,The length of the parameter BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE is 40.
Long Identifier,Microsoft.Azure.KeyVault.WebKey,BCRYPT_ECC_PARAMETER_HEADER,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,,The length of the parameter BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE is 38.
Long Identifier,Microsoft.Azure.KeyVault.WebKey,BCRYPT_ECC_PARAMETER_HEADER,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,,The length of the parameter BCRYPT_ECC_PRIME_MONTGOMERY_CURVE is 33.
Long Identifier,Microsoft.Azure.KeyVault.WebKey,BCRYPT_ECC_PARAMETER_HEADER,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,,The length of the parameter BCRYPT_NO_CURVE_GENERATION_ALG_ID is 33.
Long Statement,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,ToEcdsa,The length of the statement  "                    return ToNistCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDSA_PUBLIC_P256_MAGIC' 32' includePrivateParameters ); " is 149.
Long Statement,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,ToEcdsa,The length of the statement  "                    return ToNistCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_P384_MAGIC : BCRYPT_ECDSA_PUBLIC_P384_MAGIC' 48' includePrivateParameters ); " is 149.
Long Statement,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,ToEcdsa,The length of the statement  "                    return ToNistCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_P521_MAGIC : BCRYPT_ECDSA_PUBLIC_P521_MAGIC' 66' includePrivateParameters ); " is 149.
Long Statement,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,ToEcdsa,The length of the statement  "                    return ToGenericCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC : BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC' Secp256k1' includePrivateParameters ); " is 165.
Long Statement,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,ToNistCurveEcdsa,The length of the statement  "            var key = CngKey.Import( keyBlob' includePrivateParameters ? CngKeyBlobFormat.EccPrivateBlob : CngKeyBlobFormat.EccPublicBlob ); " is 128.
Long Statement,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,ToGenericCurveEcdsa,The length of the statement  "            var key = CngKey.Import( keyBlob' includePrivateParameters ? CngKeyBlobFormat_EccFullPrivateBlob : CngKeyBlobFormat_EccFullPublicBlob ); " is 136.
Long Statement,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,ThrowIfPrivateParametersNeeded,The length of the statement  "                throw new InvalidOperationException( $"CNG returned key blob without private parameters. Expected magic: 0x{expectedMagic:X}' Actual magic: 0x{actualMagic:X}" ); " is 161.
Long Statement,Microsoft.Azure.KeyVault.WebKey,BCRYPT_ECC_PARAMETER_HEADER,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,ReadFrom,The length of the statement  "                    ECC_CURVE_ALG_ID_ENUM   dwCurveGenerationAlgId; //For X.592 verification purposes' if we include Seed we will need to include the algorithm ID. " is 143.
Long Statement,Microsoft.Azure.KeyVault.WebKey,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKey.cs,ToRSAParameters,The length of the statement  "            // Length requirements defined by 2.2.2.9.1 RSA Private Key BLOB (https://msdn.microsoft.com/en-us/library/cc250013.aspx). " is 122.
Long Statement,Microsoft.Azure.KeyVault.WebKey,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKey.cs,ForceLength,The length of the statement  "                    throw new ArgumentException( $"Invalid length of \"{name}\": expected at most {requiredLength} bytes' found {value.Length - i} bytes." ); " is 137.
Long Statement,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyVerifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,ThrowDefaultForPublicKeyCrypto,The length of the statement  "                throw new NotImplementedException( $"Type {GetType().Name} is a bad implementation. If {nameof( IsPublicKeyCrypto )} returns true' then {methodName} must be overriden and the base must not be called." ); " is 203.
Long Statement,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyVerifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,ThrowDefaultForSymmetricKeyCrypto,The length of the statement  "                throw new NotImplementedException( $"Type {GetType().Name} is a bad implementation. If {nameof( IsSymmetricKeyCrypto )} returns true' then {methodName} must be overriden and the base must not be called." ); " is 206.
Long Statement,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyVerifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,ThrowDefaultForSecretKeyCrypto,The length of the statement  "                throw new NotImplementedException( $"Type {GetType().Name} is a bad implementation. If {nameof( HasSecretKey )} returns true' then {methodName} must be overriden and the base must not be called." ); " is 198.
Long Statement,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyVerifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,ThrowDefaultForSecretKeyCrypto,The length of the statement  "            throw new InvalidOperationException( $"Type {GetType().Name} is not intended to keys that have a secret component (for instance' HSM keys)." ); " is 143.
Long Statement,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyVerifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,Verify,The length of the statement  "                throw new ArgumentException( $"Cannot use {Options.DenyPrivateKey} and {Options.RequirePrivateKey} at same time."' nameof( options ) ); " is 135.
Long Statement,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyVerifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,Verify,The length of the statement  "                return SetError( options' ref error' $"Expected {JsonWebKey.Property_Kty} to be \"{Kty}\"' but found something else." ); " is 120.
Long Statement,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyVerifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,Verify,The length of the statement  "            if ( options.HasFlag( Options.DenyIncompatibleOperations ) && !VerifyOperationsAreCompatible( this' webKey' options' ref error ) ) " is 130.
Long Statement,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyVerifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,Verify,The length of the statement  "            if ( !options.HasFlag( Options.DenyIncompatibleOperations ) && !VerifyOperationsAreValid( webKey' options' ref error ) ) " is 120.
Long Statement,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyVerifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,VerifyNoPrivateKey,The length of the statement  "            return SetError( options' ref error' $"Private key parameters must not be specified: {SurroundWithQuotes( specifiedProps )}" ); " is 127.
Long Statement,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyVerifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,VerifyOperationsAreCompatible,The length of the statement  "                return SetError( options' ref error' $"Found invalid or incompatible operations: {incompatible}. Valid and compatible operations are: {compatibleOps}." ); " is 154.
Long Statement,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyVerifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,VerifyEnum,The length of the statement  "                return SetError( options' ref error' $"Expected {name} to be one of {SurroundWithQuotes( dictionary.Keys )}' but found something else." ); " is 138.
Long Statement,Microsoft.Azure.KeyVault.WebKey,EllipticCurveKeyVerifierBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,IsPublicKeyValid,The length of the statement  "                errorMsg = $"Unsupported curve: \"{webKey.CurveName}\". Supported curves are: {SurroundWithQuotes( JsonWebKeyCurveName.AllCurves )}."; " is 134.
Long Statement,Microsoft.Azure.KeyVault.WebKey,EllipticCurveKeyVerifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyVerifier.cs,IsPrivateKeyValid,The length of the statement  "                errorMsg = $"Unsupported curve: \"{webKey.CurveName}\". Supported curves are: {SurroundWithQuotes( JsonWebKeyCurveName.AllCurves )}."; " is 134.
Magic Number,Microsoft.Azure.KeyVault.WebKey,Base64UrlJsonConverter,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\Base64UrlJsonConverter.cs,Pad,The following statement contains a magic number: var count = 3 - ((input.Length + 3) % 4);
Magic Number,Microsoft.Azure.KeyVault.WebKey,Base64UrlJsonConverter,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\Base64UrlJsonConverter.cs,Pad,The following statement contains a magic number: var count = 3 - ((input.Length + 3) % 4);
Magic Number,Microsoft.Azure.KeyVault.WebKey,Base64UrlJsonConverter,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\Base64UrlJsonConverter.cs,Pad,The following statement contains a magic number: var count = 3 - ((input.Length + 3) % 4);
Magic Number,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,ToEcdsa,The following statement contains a magic number: switch ( Curve )              {                  case JsonWebKeyCurveName.P256:                      return ToNistCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDSA_PUBLIC_P256_MAGIC' 32' includePrivateParameters );                    case JsonWebKeyCurveName.P384:                      return ToNistCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_P384_MAGIC : BCRYPT_ECDSA_PUBLIC_P384_MAGIC' 48' includePrivateParameters );                    case JsonWebKeyCurveName.P521:                      return ToNistCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_P521_MAGIC : BCRYPT_ECDSA_PUBLIC_P521_MAGIC' 66' includePrivateParameters );                    case JsonWebKeyCurveName.P256K:                      return ToGenericCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC : BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC' Secp256k1' includePrivateParameters );                    default:                      var curveDesc = Curve == null ? "null" : $"\"{Curve}\"";                      throw new InvalidOperationException( $"Invalid curve: {curveDesc}" );              }
Magic Number,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,ToEcdsa,The following statement contains a magic number: switch ( Curve )              {                  case JsonWebKeyCurveName.P256:                      return ToNistCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDSA_PUBLIC_P256_MAGIC' 32' includePrivateParameters );                    case JsonWebKeyCurveName.P384:                      return ToNistCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_P384_MAGIC : BCRYPT_ECDSA_PUBLIC_P384_MAGIC' 48' includePrivateParameters );                    case JsonWebKeyCurveName.P521:                      return ToNistCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_P521_MAGIC : BCRYPT_ECDSA_PUBLIC_P521_MAGIC' 66' includePrivateParameters );                    case JsonWebKeyCurveName.P256K:                      return ToGenericCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC : BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC' Secp256k1' includePrivateParameters );                    default:                      var curveDesc = Curve == null ? "null" : $"\"{Curve}\"";                      throw new InvalidOperationException( $"Invalid curve: {curveDesc}" );              }
Magic Number,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,ToEcdsa,The following statement contains a magic number: switch ( Curve )              {                  case JsonWebKeyCurveName.P256:                      return ToNistCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDSA_PUBLIC_P256_MAGIC' 32' includePrivateParameters );                    case JsonWebKeyCurveName.P384:                      return ToNistCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_P384_MAGIC : BCRYPT_ECDSA_PUBLIC_P384_MAGIC' 48' includePrivateParameters );                    case JsonWebKeyCurveName.P521:                      return ToNistCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_P521_MAGIC : BCRYPT_ECDSA_PUBLIC_P521_MAGIC' 66' includePrivateParameters );                    case JsonWebKeyCurveName.P256K:                      return ToGenericCurveEcdsa( includePrivateParameters ? BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC : BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC' Secp256k1' includePrivateParameters );                    default:                      var curveDesc = Curve == null ? "null" : $"\"{Curve}\"";                      throw new InvalidOperationException( $"Invalid curve: {curveDesc}" );              }
Magic Number,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,FromEcdsa,The following statement contains a magic number: switch ( dwMagic )                  {                      case BCRYPT_ECDSA_PUBLIC_P256_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P256_MAGIC' dwMagic );                          ReadNistBlob( reader' 32' result' false );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PRIVATE_P256_MAGIC:                          ReadNistBlob( reader' 32' result' true );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PUBLIC_P384_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P384_MAGIC' dwMagic );                          ReadNistBlob( reader' 48' result' false );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PRIVATE_P384_MAGIC:                          ReadNistBlob( reader' 48' result' true );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PUBLIC_P521_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P521_MAGIC' dwMagic );                          ReadNistBlob( reader' 66' result' false );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PRIVATE_P521_MAGIC:                          ReadNistBlob( reader' 66' result' true );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC' dwMagic );                          ReadGenericBlob( reader' 32' result' false );                          break;                        case BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC:                          ReadGenericBlob( reader' 32' result' true );                          break;                        default:                          throw new NotSupportedException( $"Unexpected CNG key blob type. Magic number: 0x{dwMagic:X}." );                  }
Magic Number,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,FromEcdsa,The following statement contains a magic number: switch ( dwMagic )                  {                      case BCRYPT_ECDSA_PUBLIC_P256_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P256_MAGIC' dwMagic );                          ReadNistBlob( reader' 32' result' false );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PRIVATE_P256_MAGIC:                          ReadNistBlob( reader' 32' result' true );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PUBLIC_P384_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P384_MAGIC' dwMagic );                          ReadNistBlob( reader' 48' result' false );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PRIVATE_P384_MAGIC:                          ReadNistBlob( reader' 48' result' true );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PUBLIC_P521_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P521_MAGIC' dwMagic );                          ReadNistBlob( reader' 66' result' false );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PRIVATE_P521_MAGIC:                          ReadNistBlob( reader' 66' result' true );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC' dwMagic );                          ReadGenericBlob( reader' 32' result' false );                          break;                        case BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC:                          ReadGenericBlob( reader' 32' result' true );                          break;                        default:                          throw new NotSupportedException( $"Unexpected CNG key blob type. Magic number: 0x{dwMagic:X}." );                  }
Magic Number,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,FromEcdsa,The following statement contains a magic number: switch ( dwMagic )                  {                      case BCRYPT_ECDSA_PUBLIC_P256_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P256_MAGIC' dwMagic );                          ReadNistBlob( reader' 32' result' false );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PRIVATE_P256_MAGIC:                          ReadNistBlob( reader' 32' result' true );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PUBLIC_P384_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P384_MAGIC' dwMagic );                          ReadNistBlob( reader' 48' result' false );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PRIVATE_P384_MAGIC:                          ReadNistBlob( reader' 48' result' true );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PUBLIC_P521_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P521_MAGIC' dwMagic );                          ReadNistBlob( reader' 66' result' false );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PRIVATE_P521_MAGIC:                          ReadNistBlob( reader' 66' result' true );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC' dwMagic );                          ReadGenericBlob( reader' 32' result' false );                          break;                        case BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC:                          ReadGenericBlob( reader' 32' result' true );                          break;                        default:                          throw new NotSupportedException( $"Unexpected CNG key blob type. Magic number: 0x{dwMagic:X}." );                  }
Magic Number,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,FromEcdsa,The following statement contains a magic number: switch ( dwMagic )                  {                      case BCRYPT_ECDSA_PUBLIC_P256_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P256_MAGIC' dwMagic );                          ReadNistBlob( reader' 32' result' false );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PRIVATE_P256_MAGIC:                          ReadNistBlob( reader' 32' result' true );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PUBLIC_P384_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P384_MAGIC' dwMagic );                          ReadNistBlob( reader' 48' result' false );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PRIVATE_P384_MAGIC:                          ReadNistBlob( reader' 48' result' true );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PUBLIC_P521_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P521_MAGIC' dwMagic );                          ReadNistBlob( reader' 66' result' false );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PRIVATE_P521_MAGIC:                          ReadNistBlob( reader' 66' result' true );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC' dwMagic );                          ReadGenericBlob( reader' 32' result' false );                          break;                        case BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC:                          ReadGenericBlob( reader' 32' result' true );                          break;                        default:                          throw new NotSupportedException( $"Unexpected CNG key blob type. Magic number: 0x{dwMagic:X}." );                  }
Magic Number,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,FromEcdsa,The following statement contains a magic number: switch ( dwMagic )                  {                      case BCRYPT_ECDSA_PUBLIC_P256_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P256_MAGIC' dwMagic );                          ReadNistBlob( reader' 32' result' false );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PRIVATE_P256_MAGIC:                          ReadNistBlob( reader' 32' result' true );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PUBLIC_P384_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P384_MAGIC' dwMagic );                          ReadNistBlob( reader' 48' result' false );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PRIVATE_P384_MAGIC:                          ReadNistBlob( reader' 48' result' true );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PUBLIC_P521_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P521_MAGIC' dwMagic );                          ReadNistBlob( reader' 66' result' false );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PRIVATE_P521_MAGIC:                          ReadNistBlob( reader' 66' result' true );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC' dwMagic );                          ReadGenericBlob( reader' 32' result' false );                          break;                        case BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC:                          ReadGenericBlob( reader' 32' result' true );                          break;                        default:                          throw new NotSupportedException( $"Unexpected CNG key blob type. Magic number: 0x{dwMagic:X}." );                  }
Magic Number,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,FromEcdsa,The following statement contains a magic number: switch ( dwMagic )                  {                      case BCRYPT_ECDSA_PUBLIC_P256_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P256_MAGIC' dwMagic );                          ReadNistBlob( reader' 32' result' false );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PRIVATE_P256_MAGIC:                          ReadNistBlob( reader' 32' result' true );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PUBLIC_P384_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P384_MAGIC' dwMagic );                          ReadNistBlob( reader' 48' result' false );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PRIVATE_P384_MAGIC:                          ReadNistBlob( reader' 48' result' true );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PUBLIC_P521_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P521_MAGIC' dwMagic );                          ReadNistBlob( reader' 66' result' false );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PRIVATE_P521_MAGIC:                          ReadNistBlob( reader' 66' result' true );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC' dwMagic );                          ReadGenericBlob( reader' 32' result' false );                          break;                        case BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC:                          ReadGenericBlob( reader' 32' result' true );                          break;                        default:                          throw new NotSupportedException( $"Unexpected CNG key blob type. Magic number: 0x{dwMagic:X}." );                  }
Magic Number,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,FromEcdsa,The following statement contains a magic number: switch ( dwMagic )                  {                      case BCRYPT_ECDSA_PUBLIC_P256_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P256_MAGIC' dwMagic );                          ReadNistBlob( reader' 32' result' false );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PRIVATE_P256_MAGIC:                          ReadNistBlob( reader' 32' result' true );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PUBLIC_P384_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P384_MAGIC' dwMagic );                          ReadNistBlob( reader' 48' result' false );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PRIVATE_P384_MAGIC:                          ReadNistBlob( reader' 48' result' true );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PUBLIC_P521_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P521_MAGIC' dwMagic );                          ReadNistBlob( reader' 66' result' false );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PRIVATE_P521_MAGIC:                          ReadNistBlob( reader' 66' result' true );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC' dwMagic );                          ReadGenericBlob( reader' 32' result' false );                          break;                        case BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC:                          ReadGenericBlob( reader' 32' result' true );                          break;                        default:                          throw new NotSupportedException( $"Unexpected CNG key blob type. Magic number: 0x{dwMagic:X}." );                  }
Magic Number,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,FromEcdsa,The following statement contains a magic number: switch ( dwMagic )                  {                      case BCRYPT_ECDSA_PUBLIC_P256_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P256_MAGIC' dwMagic );                          ReadNistBlob( reader' 32' result' false );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PRIVATE_P256_MAGIC:                          ReadNistBlob( reader' 32' result' true );                          result.Curve = JsonWebKeyCurveName.P256;                          break;                        case BCRYPT_ECDSA_PUBLIC_P384_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P384_MAGIC' dwMagic );                          ReadNistBlob( reader' 48' result' false );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PRIVATE_P384_MAGIC:                          ReadNistBlob( reader' 48' result' true );                          result.Curve = JsonWebKeyCurveName.P384;                          break;                        case BCRYPT_ECDSA_PUBLIC_P521_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_P521_MAGIC' dwMagic );                          ReadNistBlob( reader' 66' result' false );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PRIVATE_P521_MAGIC:                          ReadNistBlob( reader' 66' result' true );                          result.Curve = JsonWebKeyCurveName.P521;                          break;                        case BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC:                          ThrowIfPrivateParametersNeeded( includePrivateParameters' BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC' dwMagic );                          ReadGenericBlob( reader' 32' result' false );                          break;                        case BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC:                          ReadGenericBlob( reader' 32' result' true );                          break;                        default:                          throw new NotSupportedException( $"Unexpected CNG key blob type. Magic number: 0x{dwMagic:X}." );                  }
Magic Number,Microsoft.Azure.KeyVault.WebKey,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKey.cs,GetHashCode,The following statement contains a magic number: var hashCode = 48313;
Magic Number,Microsoft.Azure.KeyVault.WebKey,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKey.cs,GetHashCode,The following statement contains a magic number: hashCode = ( hashCode << 3 ) | ( hashCode >> 29 ) ^ v;
Magic Number,Microsoft.Azure.KeyVault.WebKey,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKey.cs,GetHashCode,The following statement contains a magic number: hashCode = ( hashCode << 3 ) | ( hashCode >> 29 ) ^ v;
Magic Number,Microsoft.Azure.KeyVault.WebKey,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKey.cs,ToRSAParameters,The following statement contains a magic number: result.Exponent = ForceLength( nameof( E )' E' 4 );
Magic Number,Microsoft.Azure.KeyVault.WebKey,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKey.cs,ToRSAParameters,The following statement contains a magic number: var bitlen = result.Modulus.Length * 8;
Magic Number,Microsoft.Azure.KeyVault.WebKey,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKey.cs,ToRSAParameters,The following statement contains a magic number: result.D = ForceLength( nameof( D )' D' bitlen / 8 );
Magic Number,Microsoft.Azure.KeyVault.WebKey,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKey.cs,ToRSAParameters,The following statement contains a magic number: result.DP = ForceLength( nameof( DP )' DP' bitlen / 16 );
Magic Number,Microsoft.Azure.KeyVault.WebKey,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKey.cs,ToRSAParameters,The following statement contains a magic number: result.DQ = ForceLength( nameof( DQ )' DQ' bitlen / 16 );
Magic Number,Microsoft.Azure.KeyVault.WebKey,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKey.cs,ToRSAParameters,The following statement contains a magic number: result.InverseQ = ForceLength( nameof( QI )' QI' bitlen / 16 );
Magic Number,Microsoft.Azure.KeyVault.WebKey,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKey.cs,ToRSAParameters,The following statement contains a magic number: result.P = ForceLength( nameof( P )' P' bitlen / 16 );
Magic Number,Microsoft.Azure.KeyVault.WebKey,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKey.cs,ToRSAParameters,The following statement contains a magic number: result.Q = ForceLength( nameof( Q )' Q' bitlen / 16 );
Magic Number,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyCurveName,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyCurveName.cs,GetKeyParameterSize,The following statement contains a magic number: switch ( curve )              {                  case P256:                  case P256K:                      return 32;                    case P384:                      return 48;                    case P521:                      return 66;                    default:                      return -1;              }
Magic Number,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyCurveName,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyCurveName.cs,GetKeyParameterSize,The following statement contains a magic number: switch ( curve )              {                  case P256:                  case P256K:                      return 32;                    case P384:                      return 48;                    case P521:                      return 66;                    default:                      return -1;              }
Magic Number,Microsoft.Azure.KeyVault.WebKey,JsonWebKeyCurveName,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\JsonWebKeyCurveName.cs,GetKeyParameterSize,The following statement contains a magic number: switch ( curve )              {                  case P256:                  case P256K:                      return 32;                    case P384:                      return 48;                    case P521:                      return 66;                    default:                      return -1;              }
Missing Default,Microsoft.Azure.KeyVault.WebKey,ECParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.WebKey\src\ECParameters.cs,FromEcdsa,The following switch statement is missing a default case: switch ( dwMagic )              {                  case BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC:                      keyBlob = ecdsa.Key.Export( CngKeyBlobFormat_EccFullPublicBlob );                      break;                  case BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC:                      keyBlob = ecdsa.Key.Export( CngKeyBlobFormat_EccFullPrivateBlob );                      break;              }
