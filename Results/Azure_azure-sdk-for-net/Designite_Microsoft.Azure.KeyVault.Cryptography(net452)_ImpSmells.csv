Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Azure.KeyVault,EcKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,EcKey,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The method has 5 parameters. Parameters: algorithm' key' aes_key' hmac_key' hmac
Long Parameter List,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2Encryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2Decryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,AesCbcHmacSha2Decryptor,The method has 5 parameters. Parameters: name' key' iv' associatedData' authenticationTag
Long Parameter List,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2Decryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,NCryptImportKey,The method has 8 parameters. Parameters: hProvider' hImportKey' pszBlobType' pParameterList' phKey' pbData' cbData' dwFlags
Long Parameter List,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,NCryptSignHash,The method has 8 parameters. Parameters: hKey' pPaddingInfo' pbHashValue' cbHashValue' pbSignature' cbSignature' pcbResult' dwFlags
Long Parameter List,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,NCryptVerifySignature,The method has 7 parameters. Parameters: hKey' pPaddingInfo' pbHashValue' cbHashValue' pbSignature' cbSignature' dwFlags
Long Parameter List,Microsoft.Azure.KeyVault.Cryptography.Algorithms,Rsa15Decryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\Rsa15.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,Microsoft.Azure.KeyVault.Cryptography.Algorithms,Rsa15Encryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\Rsa15.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,Microsoft.Azure.KeyVault.Cryptography.Algorithms,RsaOaepDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\RsaOaep.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,Microsoft.Azure.KeyVault.Cryptography.Algorithms,RsaOaepEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\RsaOaep.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,Microsoft.Azure.KeyVault,EcKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,EcKey,The method has 5 parameters. Parameters: kid' curve' x' y' d
Long Parameter List,Microsoft.Azure.KeyVault,EcKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,ImportNistKey,The method has 6 parameters. Parameters: privateMagic' publicMagic' size' x' y' d
Long Parameter List,Microsoft.Azure.KeyVault,EcKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,ImportNistPrivateKey,The method has 5 parameters. Parameters: magic' sizeInBytes' x' y' d
Long Parameter List,Microsoft.Azure.KeyVault,EcKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,DecryptAsync,The method has 6 parameters. Parameters: ciphertext' iv' authenticationData' authenticationTag' algorithm' token
Long Parameter List,Microsoft.Azure.KeyVault,EcKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,EncryptAsync,The method has 5 parameters. Parameters: plaintext' iv' authenticationData' algorithm' token
Long Parameter List,Microsoft.Azure.KeyVault,RsaKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\RsaKey.cs,DecryptAsync,The method has 6 parameters. Parameters: ciphertext' iv' authenticationData' authenticationTag' algorithm' token
Long Parameter List,Microsoft.Azure.KeyVault,RsaKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\RsaKey.cs,EncryptAsync,The method has 5 parameters. Parameters: plaintext' iv' authenticationData' algorithm' token
Long Parameter List,Microsoft.Azure.KeyVault,SymmetricKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\SymmetricKey.cs,DecryptAsync,The method has 6 parameters. Parameters: ciphertext' iv' authenticationData' authenticationTag' algorithm' token
Long Parameter List,Microsoft.Azure.KeyVault,SymmetricKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\SymmetricKey.cs,EncryptAsync,The method has 5 parameters. Parameters: plaintext' iv' authenticationData' algorithm' token
Long Identifier,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,,The length of the parameter BCRYPT_ECDSA_PUBLIC_P256_MAGIC is 30.
Long Identifier,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,,The length of the parameter BCRYPT_ECDSA_PRIVATE_P256_MAGIC is 31.
Long Identifier,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,,The length of the parameter BCRYPT_ECDSA_PUBLIC_P384_MAGIC is 30.
Long Identifier,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,,The length of the parameter BCRYPT_ECDSA_PRIVATE_P384_MAGIC is 31.
Long Identifier,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,,The length of the parameter BCRYPT_ECDSA_PUBLIC_P521_MAGIC is 30.
Long Identifier,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,,The length of the parameter BCRYPT_ECDSA_PRIVATE_P521_MAGIC is 31.
Long Identifier,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,,The length of the parameter BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC is 33.
Long Identifier,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,,The length of the parameter BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC is 34.
Long Identifier,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,,The length of the parameter BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE is 40.
Long Identifier,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,,The length of the parameter BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE is 38.
Long Identifier,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,,The length of the parameter BCRYPT_ECC_PRIME_MONTGOMERY_CURVE is 33.
Long Identifier,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,,The length of the parameter BCRYPT_NO_CURVE_GENERATION_ALG_ID is 33.
Long Identifier,Microsoft.Azure.KeyVault,EcKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,,The length of the parameter CngKeyBlobFormat_Generic_Public is 31.
Long Identifier,Microsoft.Azure.KeyVault,EcKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,,The length of the parameter CngKeyBlobFormat_Generic_Private is 32.
Long Statement,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The length of the statement  "                            throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) ); " is 144.
Long Statement,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The length of the statement  "                            throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) ); " is 144.
Long Statement,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The length of the statement  "                            throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) ); " is 144.
Long Statement,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The length of the statement  "                        throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) ); " is 121.
Long Statement,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The length of the statement  "                    throw new ArgumentOutOfRangeException( "inputCount"' "The sum of inputCount and inputOffset parameters must not be larger than the length of inputBuffer" ); " is 156.
Long Statement,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The length of the statement  "                    throw new ArgumentOutOfRangeException( "inputCount"' "The sum of inputCount and inputOffset parameters must not be larger than the length of inputBuffer" ); " is 156.
Long Statement,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,NewNCryptPublicBlob,The length of the statement  "            // Builds a BCRYPT_RSAKEY_BLOB strucutre ( http://msdn.microsoft.com/en-us/library/windows/desktop/aa375531(v=vs.85).aspx ). " is 124.
Long Statement,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,NewNCryptPrivateBlob,The length of the statement  "            // Builds a BCRYPT_RSAKEY_BLOB strucutre ( http://msdn.microsoft.com/en-us/library/windows/desktop/aa375531(v=vs.85).aspx ). " is 124.
Long Statement,Microsoft.Azure.KeyVault,EcKeyCurveParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,WriteTo,The length of the statement  "                    ECC_CURVE_ALG_ID_ENUM   dwCurveGenerationAlgId; //For X.592 verification purposes' if we include Seed we will need to include the algorithm ID. " is 143.
Long Statement,Microsoft.Azure.KeyVault,RsaKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\RsaKey.cs,EncryptAsync,The length of the statement  "                    var result = new Tuple<byte[]' byte[]' string>( encryptor.TransformFinalBlock( plaintext' 0' plaintext.Length )' null' algorithm ); " is 131.
Complex Conditional,Microsoft.Azure.KeyVault,SymmetricKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\SymmetricKey.cs,SymmetricKey,The conditional expression  "keySize != KeySize128 && keySize != KeySize192 && keySize != KeySize256 && keySize != KeySize384 && keySize != KeySize512"  is complex.
Complex Conditional,Microsoft.Azure.KeyVault,SymmetricKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\SymmetricKey.cs,SymmetricKey,The conditional expression  "keyBytes.Length != KeySize128 && keyBytes.Length != KeySize192 && keyBytes.Length != KeySize256 && keyBytes.Length != KeySize384 && keyBytes.Length != KeySize512"  is complex.
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbc,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbc.cs,Create,The following statement contains a magic number: aes.KeySize = key.Length * 8;
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,Create,The following statement contains a magic number: aes.KeySize = key.Length * 8;
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,GetAlgorithmParameters,The following statement contains a magic number: switch ( algorithm )              {                  case Aes128CbcHmacSha256.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 256 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 256"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[128 >> 3];                          aes_key  = new byte[128 >> 3];                          Array.Copy( key' hmac_key' 128 >> 3 );                          Array.Copy( key' 128 >> 3' aes_key' 0' 128 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA256' hmac_key );                            break;                      }                    case Aes192CbcHmacSha384.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 384 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 384"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[192 >> 3];                          aes_key  = new byte[192 >> 3];                          Array.Copy( key' hmac_key' 192 >> 3 );                          Array.Copy( key' 192 >> 3' aes_key' 0' 192 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA384' hmac_key );                            break;                      }                    case Aes256CbcHmacSha512.AlgorithmName:                      {                          if ( ( key.Length << 3 ) < 512 )                              throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "{0} key length in bits {1} < 512"' algorithm' key.Length << 3 ) );                            hmac_key = new byte[256 >> 3];                          aes_key  = new byte[256 >> 3];                          Array.Copy( key' hmac_key' 256 >> 3 );                          Array.Copy( key' 256 >> 3' aes_key' 0' 256 >> 3 );                            hmac = IncrementalHash.CreateHMAC( HashAlgorithmName.SHA512' hmac_key );                            break;                      }                    default:                      {                          throw new CryptographicException( string.Format( CultureInfo.CurrentCulture' "Unsupported algorithm: {0}"' algorithm ) );                      }              }
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2Encryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,AesCbcHmacSha2Encryptor,The following statement contains a magic number: _associated_data_length = ConvertToBigEndian( associatedData.Length * 8 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesCbcHmacSha2Decryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesCbcHmacSha2.cs,AesCbcHmacSha2Decryptor,The following statement contains a magic number: _associated_data_length = ConvertToBigEndian( associatedData.Length * 8 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,Create,The following statement contains a magic number: aes.KeySize = key.Length * 8;
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,CreateEncryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,CreateEncryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,CreateEncryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,CreateEncryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,CreateEncryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,CreateEncryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,CreateEncryptor,The following statement contains a magic number: iv != null && iv.Length != 8
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,CreateDecryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,CreateDecryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,CreateDecryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,CreateDecryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,CreateDecryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,CreateDecryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,CreateDecryptor,The following statement contains a magic number: iv != null && iv.Length != 8
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,AesKwEncryptor,The following statement contains a magic number: var aesIv = new byte[_aes.BlockSize >> 3];
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: inputCount % 8 != 0
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: var      n  = inputCount >> 3;
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: byte[]  r  = new byte[n << 3];
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: byte[] block     = new byte[16];
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( r' i << 3' block' 64 >> 3' 64 >> 3 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( r' i << 3' block' 64 >> 3' 64 >> 3 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( r' i << 3' block' 64 >> 3' 64 >> 3 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( r' i << 3' block' 64 >> 3' 64 >> 3 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( r' i << 3' block' 64 >> 3' 64 >> 3 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: var b = encryptor.TransformFinalBlock( block' 0' 16 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( b' a' 64 >> 3 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( b' a' 64 >> 3 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( b' 64 >> 3' r' i << 3' 64 >> 3 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( b' 64 >> 3' r' i << 3' 64 >> 3 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( b' 64 >> 3' r' i << 3' 64 >> 3 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( b' 64 >> 3' r' i << 3' 64 >> 3 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( b' 64 >> 3' r' i << 3' 64 >> 3 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: j < 6
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: var c = new byte[( n + 1 ) << 3];
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( r' i << 3' c' ( i + 1 ) << 3' 8 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( r' i << 3' c' ( i + 1 ) << 3' 8 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( r' i << 3' c' ( i + 1 ) << 3' 8 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,AesKwDecryptor,The following statement contains a magic number: var aesIv = new byte[_aes.BlockSize >> 3];
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: inputCount % 8 != 0
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: var      n  = ( inputCount - BlockSizeInBytes ) >> 3;
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: byte[]   r  = new byte[n << 3];
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: byte[] block     = new byte[16];
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( r' ( i - 1 ) << 3' block' BlockSizeInBytes' BlockSizeInBytes );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: var b = encryptor.TransformFinalBlock( block' 0' 16 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( b' BlockSizeInBytes' r' ( i - 1 ) << 3' BlockSizeInBytes );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: var c = new byte[n << 3];
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( r' i << 3' c' i << 3' 8 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( r' i << 3' c' i << 3' 8 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy( r' i << 3' c' i << 3' 8 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,NewNCryptPublicBlob,The following statement contains a magic number: var size = 6 * 4 + rsaParams.Exponent.Length + rsaParams.Modulus.Length;
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,NewNCryptPublicBlob,The following statement contains a magic number: var size = 6 * 4 + rsaParams.Exponent.Length + rsaParams.Modulus.Length;
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,NewNCryptPublicBlob,The following statement contains a magic number: writer.Write( (int)rsaParams.Modulus.Length * 8 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,NewNCryptPrivateBlob,The following statement contains a magic number: var size = 6 * 4 + rsaParams.Exponent.Length + rsaParams.Modulus.Length + rsaParams.P.Length + rsaParams.Q.Length;
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,NewNCryptPrivateBlob,The following statement contains a magic number: var size = 6 * 4 + rsaParams.Exponent.Length + rsaParams.Modulus.Length + rsaParams.P.Length + rsaParams.Q.Length;
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,NativeMethods,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\NativeMethods.cs,NewNCryptPrivateBlob,The following statement contains a magic number: writer.Write( rsaParams.Modulus.Length * 8 );
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,Rs256SignatureTransform,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\Rs256.cs,Sign,The following statement contains a magic number: digest.Length != 32
Magic Number,Microsoft.Azure.KeyVault.Cryptography.Algorithms,Rs256SignatureTransform,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\Algorithms\Rs256.cs,Verify,The following statement contains a magic number: digest.Length != 32
Magic Number,Microsoft.Azure.KeyVault,EcKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,EcKey,The following statement contains a magic number: switch ( curve )              {                  case P256:                      key = ImportNistKey( NativeMethods.BCRYPT_ECDSA_PRIVATE_P256_MAGIC' NativeMethods.BCRYPT_ECDSA_PUBLIC_P256_MAGIC' 32' x' y' d );                      DefaultSignatureAlgorithm = Es256.AlgorithmName;                      break;                    case P384:                      key = ImportNistKey( NativeMethods.BCRYPT_ECDSA_PRIVATE_P384_MAGIC' NativeMethods.BCRYPT_ECDSA_PUBLIC_P384_MAGIC' 48' x' y' d );                      DefaultSignatureAlgorithm = Es384.AlgorithmName;                      break;                    case P521:                      key = ImportNistKey( NativeMethods.BCRYPT_ECDSA_PRIVATE_P521_MAGIC' NativeMethods.BCRYPT_ECDSA_PUBLIC_P521_MAGIC' 66' x' y' d );                      DefaultSignatureAlgorithm = Es512.AlgorithmName;                      break;                    case P256K:                      key = ImportGenericKey( Secp256k1Parameters' x' y' d );                      DefaultSignatureAlgorithm = ES256K.AlgorithmName;                      break;                    default:                      throw new ArgumentException( $"Invalid curve name: \"{curve}\""' nameof( curve ) );              }
Magic Number,Microsoft.Azure.KeyVault,EcKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,EcKey,The following statement contains a magic number: switch ( curve )              {                  case P256:                      key = ImportNistKey( NativeMethods.BCRYPT_ECDSA_PRIVATE_P256_MAGIC' NativeMethods.BCRYPT_ECDSA_PUBLIC_P256_MAGIC' 32' x' y' d );                      DefaultSignatureAlgorithm = Es256.AlgorithmName;                      break;                    case P384:                      key = ImportNistKey( NativeMethods.BCRYPT_ECDSA_PRIVATE_P384_MAGIC' NativeMethods.BCRYPT_ECDSA_PUBLIC_P384_MAGIC' 48' x' y' d );                      DefaultSignatureAlgorithm = Es384.AlgorithmName;                      break;                    case P521:                      key = ImportNistKey( NativeMethods.BCRYPT_ECDSA_PRIVATE_P521_MAGIC' NativeMethods.BCRYPT_ECDSA_PUBLIC_P521_MAGIC' 66' x' y' d );                      DefaultSignatureAlgorithm = Es512.AlgorithmName;                      break;                    case P256K:                      key = ImportGenericKey( Secp256k1Parameters' x' y' d );                      DefaultSignatureAlgorithm = ES256K.AlgorithmName;                      break;                    default:                      throw new ArgumentException( $"Invalid curve name: \"{curve}\""' nameof( curve ) );              }
Magic Number,Microsoft.Azure.KeyVault,EcKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,EcKey,The following statement contains a magic number: switch ( curve )              {                  case P256:                      key = ImportNistKey( NativeMethods.BCRYPT_ECDSA_PRIVATE_P256_MAGIC' NativeMethods.BCRYPT_ECDSA_PUBLIC_P256_MAGIC' 32' x' y' d );                      DefaultSignatureAlgorithm = Es256.AlgorithmName;                      break;                    case P384:                      key = ImportNistKey( NativeMethods.BCRYPT_ECDSA_PRIVATE_P384_MAGIC' NativeMethods.BCRYPT_ECDSA_PUBLIC_P384_MAGIC' 48' x' y' d );                      DefaultSignatureAlgorithm = Es384.AlgorithmName;                      break;                    case P521:                      key = ImportNistKey( NativeMethods.BCRYPT_ECDSA_PRIVATE_P521_MAGIC' NativeMethods.BCRYPT_ECDSA_PUBLIC_P521_MAGIC' 66' x' y' d );                      DefaultSignatureAlgorithm = Es512.AlgorithmName;                      break;                    case P256K:                      key = ImportGenericKey( Secp256k1Parameters' x' y' d );                      DefaultSignatureAlgorithm = ES256K.AlgorithmName;                      break;                    default:                      throw new ArgumentException( $"Invalid curve name: \"{curve}\""' nameof( curve ) );              }
Magic Number,Microsoft.Azure.KeyVault,EcKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,ImportNistPublicKey,The following statement contains a magic number: var keyBlob = new byte[4 + 4 + sizeInBytes + sizeInBytes];
Magic Number,Microsoft.Azure.KeyVault,EcKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,ImportNistPublicKey,The following statement contains a magic number: var keyBlob = new byte[4 + 4 + sizeInBytes + sizeInBytes];
Magic Number,Microsoft.Azure.KeyVault,EcKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,ImportNistPrivateKey,The following statement contains a magic number: var keyBlob = new byte[4 + 4 + sizeInBytes + sizeInBytes + sizeInBytes];
Magic Number,Microsoft.Azure.KeyVault,EcKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Microsoft.Azure.KeyVault.Cryptography\src\EcKey.cs,ImportNistPrivateKey,The following statement contains a magic number: var keyBlob = new byte[4 + 4 + sizeInBytes + sizeInBytes + sizeInBytes];
