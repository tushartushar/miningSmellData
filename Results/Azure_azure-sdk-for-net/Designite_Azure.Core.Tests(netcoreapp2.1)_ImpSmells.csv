Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Azure.Core.Tests,ClientDiagnosticListener,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientDiagnosticListener.cs,OnNext,Cyclomatic complexity of the method is 9
Complex Method,Azure.Core.Testing,RecordEntry,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordEntry.cs,Deserialize,Cyclomatic complexity of the method is 8
Long Parameter List,System.Net.Http.Tests,HttpEnvironmentProxyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpEnvironmentProxyTest.cs,HttpProxy_Uri_Parsing,The method has 5 parameters. Parameters: input' host' port' user' password
Long Parameter List,Azure.Core.Testing,SyncAsyncPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\SyncAsyncPolicyTestBase.cs,SendRequestAsync,The method has 5 parameters. Parameters: transport' requestAction' policy' responseClassifier' bufferResponse
Long Parameter List,Azure.Core.Testing,SyncAsyncPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\SyncAsyncPolicyTestBase.cs,SendGetRequest,The method has 5 parameters. Parameters: transport' policy' responseClassifier' bufferResponse' uri
Long Parameter List,Azure.Core.Pipeline,RetriableStream,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\RetriableStream.cs,Create,The method has 5 parameters. Parameters: initialResponse' streamFactory' asyncResponseFactory' responseClassifier' maxRetries
Long Parameter List,Azure.Core.Pipeline,RetriableStreamImpl,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\RetriableStream.cs,RetriableStreamImpl,The method has 5 parameters. Parameters: initialStream' streamFactory' asyncStreamFactory' responseClassifier' maxRetries
Long Identifier,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,,The length of the parameter ErrorResponseContentBlockEvent is 30.
Long Identifier,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,,The length of the parameter ErrorResponseContentTextBlockEvent is 34.
Long Identifier,Azure.Core.Tests,AsyncContent,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,,The length of the parameter CreateContentReadStreamAsyncCompletionSource is 44.
Long Identifier,Azure.Core.Testing,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientTestBase.cs,,The length of the parameter s_diagnosticScopeValidatingInterceptor is 38.
Long Statement,Azure.Core.Tests,AzureEventSourceListenerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\AzureEventSourceListenerTests.cs,FormatsByteArrays,The length of the statement  "            (EventWrittenEventArgs e' string message) = ExpectSingleEvent(() => TestSource.Log.LogWithByteArray(new byte[] { 0' 1' 233})); " is 126.
Long Statement,Azure.Core.Tests,BearerTokenAuthenticationPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BearerTokenAuthenticationPolicyTests.cs,ThrowsForNonTlsEndpoint,The length of the statement  "            Assert.ThrowsAsync<InvalidOperationException>(async () => await SendGetRequest(transport' policy' uri: new Uri("http://example.com"))); " is 135.
Long Statement,Azure.Core.Tests,ClientTestBaseDiagnosticScopeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ClientTestBaseDiagnosticScopeTests.cs,ThrowsWhenWrongDiagnosticScope,The length of the statement  "            InvalidOperationException ex = Assert.ThrowsAsync<InvalidOperationException>(async () => await client.WrongScopeAsync()); " is 121.
Long Statement,Azure.Core.Tests,ClientTestBaseTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ClientTestBaseTests.cs,ThrowsForInvalidClientTypes,The length of the statement  "            InvalidOperationException exception = Assert.Throws<InvalidOperationException>(() => InstrumentClient(new InvalidTestClient())); " is 128.
Long Statement,Azure.Core.Tests,ClientTestBaseTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ClientTestBaseTests.cs,ThrowsWhenSyncMethodIsNotAvailable,The length of the statement  "                Assert.AreEqual("Unable to find a method with name NoAlternative and System.Int32'System.Threading.CancellationToken parameters." + " is 131.
Long Statement,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The length of the statement  "            var pipeline = new HttpPipeline(mockTransport' new[] { new LoggingPolicy(logContent: true' int.MaxValue' s_allowedHeaders' s_allowedQueryParameters) }); " is 152.
Long Statement,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,GettingErrorRequestProducesEvents,The length of the statement  "            var pipeline = new HttpPipeline(mockTransport' new[] { new LoggingPolicy(logContent: true' int.MaxValue' s_allowedHeaders' s_allowedQueryParameters) }); " is 152.
Long Statement,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,RequestContentIsLoggedAsText,The length of the statement  "            var pipeline = new HttpPipeline(mockTransport' new[] { new LoggingPolicy(logContent: true' int.MaxValue' s_allowedHeaders' s_allowedQueryParameters) }); " is 152.
Long Statement,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,ContentIsNotLoggedAsTextWhenDisabled,The length of the statement  "            var pipeline = new HttpPipeline(mockTransport' new[] { new LoggingPolicy(logContent: false' int.MaxValue' s_allowedHeaders' s_allowedQueryParameters) }); " is 153.
Long Statement,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,ContentIsNotLoggedWhenDisabled,The length of the statement  "            var pipeline = new HttpPipeline(mockTransport' new[] { new LoggingPolicy(logContent: false' int.MaxValue' s_allowedHeaders' s_allowedQueryParameters) }); " is 153.
Long Statement,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,RequestContentIsNotLoggedWhenDisabled,The length of the statement  "            var pipeline = new HttpPipeline(mockTransport' new[] { new LoggingPolicy(logContent: false' int.MaxValue' s_allowedHeaders' s_allowedQueryParameters) }); " is 153.
Long Statement,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesErrorsAreLoggedInBlocks,The length of the statement  "            CollectionAssert.AreEqual(new byte[] { 72' 101' 108' 108' 111' 32 }' errorContentEvents[0].GetProperty<byte[]>("content")); " is 123.
Long Statement,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesErrorsAreLoggedInBlocks,The length of the statement  "            CollectionAssert.AreEqual(new byte[] { 119' 111' 114' 108' 100 }' errorContentEvents[1].GetProperty<byte[]>("content")); " is 120.
Long Statement,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,RequestContentLogsAreLimitedInLength,The length of the statement  "            var pipeline = new HttpPipeline(mockTransport' new[] { new LoggingPolicy(logContent: true' 5' s_allowedHeaders' s_allowedQueryParameters) }); " is 141.
Long Statement,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreSanitized,The length of the statement  "            var pipeline = new HttpPipeline(mockTransport' new[] { new LoggingPolicy(logContent: false' int.MaxValue' s_allowedHeaders' s_allowedQueryParameters) }); " is 153.
Long Statement,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreNotSanitizedWhenStars,The length of the statement  "            var pipeline = new HttpPipeline(mockTransport' new[] { new LoggingPolicy(logContent: false' int.MaxValue' new[] {"*"}' new[] {"*"}) }); " is 135.
Long Statement,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendRequest,The length of the statement  "            var pipeline = new HttpPipeline(mockTransport' new[] { new LoggingPolicy(logContent: true' maxLength' s_allowedHeaders' s_allowedQueryParameters) }); " is 149.
Long Statement,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsBetweenRetries,The length of the statement  "            var policy = new RetryPolicyMock(RetryMode.Exponential' delay: TimeSpan.FromSeconds(1)' maxDelay: TimeSpan.FromSeconds(10)); " is 124.
Long Statement,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsSameAmountEveryTime,The length of the statement  "            var policy = new RetryPolicyMock(RetryMode.Exponential' maxRetries: 4' delay: TimeSpan.FromSeconds(1)' maxDelay: TimeSpan.FromSeconds(10)); " is 139.
Long Statement,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,RespectsMaxDelay,The length of the statement  "            var policy = new RetryPolicyMock(RetryMode.Exponential' maxRetries: 6' delay: TimeSpan.FromSeconds(1)' maxDelay: TimeSpan.FromSeconds(5)); " is 138.
Long Statement,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,UsesLargerOfDelayAndServerDelay,The length of the statement  "            var policy = new RetryPolicyMock(RetryMode.Exponential' delay: TimeSpan.FromSeconds(delay)' maxDelay: TimeSpan.FromSeconds(5)); " is 127.
Long Statement,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,AssertExponentialDelay,The length of the statement  "            Assert.LessOrEqual(Math.Abs(expected.TotalMilliseconds / actual.TotalMilliseconds - 1)' 0.25' "Expected {0} to be around {1}"' actual' expected); " is 145.
Long Statement,Azure.Core.Tests,HttpClientTransportFunctionalTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportFunctionalTests.cs,TransportExceptionsAreWrapped,The length of the statement  "                RequestFailedException exception = Assert.ThrowsAsync<RequestFailedException>(async () => await ExecuteRequest(request' transport)); " is 132.
Long Statement,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,SettingContentHeaderDoesNotSetContent,The length of the statement  "            var mockHandler = new MockHttpClientHandler(httpRequestMessage => { httpMessageContent = httpRequestMessage.Content; }); " is 120.
Long Statement,Azure.Core.Tests,HttpPipelineBuilderTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineBuilderTest.cs,UsesAssemblyNameAndInformationalVersionForTelemetryPolicySettings,The length of the statement  "            var informationalVersion = typeof(TestOptions).Assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>().InformationalVersion; " is 137.
Long Statement,Azure.Core.Tests,HttpPipelineMessageTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineMessageTest.cs,PreserveSetsResponseContentToThrowingStream,The length of the statement  "            InvalidOperationException exception = Assert.Throws<InvalidOperationException>(() => response.ContentStream.Read(Array.Empty<byte>()' 0' 0)); " is 141.
Long Statement,Azure.Core.Tests,HttpPipelineMessageTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineMessageTest.cs,PreserveSetsResponseContentToThrowingStream,The length of the statement  "            Assert.AreEqual("The operation has called ExtractResponseContent and will provide the stream as part of its response type."' exception.Message); " is 144.
Long Statement,Azure.Core.Tests,PolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\PolicyTestBase.cs,SendGetRequest,The length of the statement  "            Assert.IsInstanceOf<HttpPipelineSynchronousPolicy>(policy' "Use SyncAsyncPolicyTestBase base type for non-sync policies"); " is 122.
Long Statement,Azure.Core.Tests,RecordSessionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RecordSessionTests.cs,RecordMatcherThrowsExceptionsWithDetails,The length of the statement  "            InvalidOperationException exception = Assert.Throws<InvalidOperationException>(() => matcher.FindMatch(mockRequest' entries)); " is 126.
Long Statement,Azure.Core.Tests,RecordSessionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RecordSessionTests.cs,RecordMatcherThrowsExceptionsWhenNoRecordsLeft,The length of the statement  "            InvalidOperationException exception = Assert.Throws<InvalidOperationException>(() => matcher.FindMatch(mockRequest' entries)); " is 126.
Long Statement,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The length of the statement  "            AggregateException aggregateException = Assert.ThrowsAsync<AggregateException>(() => ReadAsync(reliableStream' _buffer' 0' 4)); " is 127.
Long Statement,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetriesOnException,The length of the statement  "            var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 }' exceptionFilter: ex => ex is InvalidOperationException); " is 139.
Long Statement,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetriesOnlyFilteredException,The length of the statement  "            var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 }' exceptionFilter: ex => ex is InvalidOperationException); " is 139.
Long Statement,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetriesOnlyFilteredExceptionFirst,The length of the statement  "            var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 }' exceptionFilter: ex => ex is InvalidOperationException); " is 139.
Long Statement,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RethrowsAggregateExceptionAfterMaxRetryCount,The length of the statement  "            var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 }' exceptionFilter: ex => ex is InvalidOperationException); " is 139.
Long Statement,Azure.Core.Tests,TelemetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TelemetryPolicyTests.cs,IncludesComponentNameAndVersion,The length of the statement  "            Assert.AreEqual(userAgent' $"azsdk-net-base-test/1.0.0 ({RuntimeInformation.FrameworkDescription}; {RuntimeInformation.OSDescription})"); " is 137.
Long Statement,Azure.Core.Tests,ClientDiagnosticListener,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientDiagnosticListener.cs,AssertScopeStarted,The length of the statement  "                                throw new InvalidOperationException($"Attribute {expectedAttribute} not found' existing attributes: {string.Join("'"' producedDiagnosticScope.Activity.Tags)}"); " is 160.
Long Statement,Azure.Core.Testing,AsyncValidatingStream,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\AsyncValidatingStream.cs,Validate,The length of the statement  "                throw new InvalidOperationException("All stream calls were expected to be " + (_isAsync ? "async" : "sync") + " but were " + (isAsync ? "async" : "sync")); " is 155.
Long Statement,Azure.Core.Testing,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientTestBase.cs,InstrumentClient,The length of the statement  "                        ClientValidation<TClient>.ValidationException = new InvalidOperationException($"Client type contains public non-virtual async method {methodInfo.Name}"); " is 153.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                bool strict = !invocation.Method.GetCustomAttributes(true).Any(a => a.GetType().FullName == "Azure.Core.ForwardsClientCallsAttribute"); " is 135.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                        MethodInfo getResultMethod = getAwaiterMethod.ReturnType.GetMethod("GetResult"' BindingFlags.Instance | BindingFlags.Public); " is 125.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                            (string Key' object Value' DiagnosticListener Listener) e = diagnosticListener.Events.FirstOrDefault(e => e.Key == expectedEvent); " is 130.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                                throw new InvalidOperationException($"Expected diagnostic event not fired {expectedEvent} {Environment.NewLine}    fired events {string.Join("' "' diagnosticListener.Events)} {Environment.NewLine}    You may have forgotten to set your operationId to {expectedEvent} in {methodName} or applied the Azure.Core.ForwardsClientCallsAttribute to {methodName}."); " is 356.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                                throw new InvalidOperationException($"{e.Key} event was written into wrong DiagnosticSource {e.Listener.Name}' expected: {ns}"); " is 128.
Long Statement,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The length of the statement  "                    if (property.PropertyType == type && property.CanRead && !property.CanWrite && Includes(property.Name) && !Excludes(property.Name)) " is 131.
Long Statement,Azure.Core.Testing,RecordMatcher,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordMatcher.cs,IsEquivalentResponse,The length of the statement  "            IEnumerable<KeyValuePair<string' string[]>> entryHeaders = entry.ResponseHeaders.Where(h => !VolatileResponseHeaders.Contains(h.Key)); " is 134.
Long Statement,Azure.Core.Testing,RecordMatcher,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordMatcher.cs,IsEquivalentResponse,The length of the statement  "            IEnumerable<KeyValuePair<string' string[]>> otherEntryHeaders = otherEntry.ResponseHeaders.Where(h => !VolatileResponseHeaders.Contains(h.Key)); " is 144.
Long Statement,Azure.Core.Testing,RecordMatcher,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordMatcher.cs,CompareHeaderDictionaries,The length of the statement  "                        descriptionBuilder?.AppendLine($"    <{header.Key}> values differ' request <{JoinHeaderValues(header.Value)}>' record <{JoinHeaderValues(values)}>"); " is 149.
Long Statement,Azure.Core.Testing,RecordTransport,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordTransport.cs,CreateEntry,The length of the statement  "            if (!request.Headers.TryGetValue("Content-Length"' out _) && request.Content != null && request.Content.TryComputeLength(out long computedLength)) " is 146.
Long Statement,Azure.Core.Testing,UseSyncMethodsInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\UseSyncMethodsInterceptor.cs,Intercept,The length of the statement  "                throw new InvalidOperationException($"Unable to find a method with name {nonAsyncMethodName} and {string.Join<Type>("'"' parameterTypes)} parameters. " " is 151.
Long Statement,Azure.Core.Pipeline,RetriableStream,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\RetriableStream.cs,CreateAsync,The length of the statement  "            return Create(await asyncResponseFactory(0).ConfigureAwait(false)' responseFactory' asyncResponseFactory' responseClassifier' maxRetries); " is 138.
Long Statement,Azure.Core.Pipeline,RetriableStreamImpl,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\RetriableStream.cs,RetryAsync,The length of the statement  "                _currentStream = EnsureStream(async ? (await _asyncStreamFactory(_position).ConfigureAwait(false)) : _streamFactory(_position)); " is 128.
Complex Conditional,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The conditional expression  "property.PropertyType == type && property.CanRead && !property.CanWrite && Includes(property.Name) && !Excludes(property.Name)"  is complex.
Complex Conditional,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The conditional expression  "field.FieldType == type && (field.IsInitOnly || field.IsLiteral) && Includes(field.Name) && !Excludes(field.Name)"  is complex.
Complex Conditional,Azure.Core.Pipeline,TestFrameworkContentTypeUtilities,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\ContentTypeUtilities.cs,TryGetTextEncoding,The conditional expression  "contentType.StartsWith(textContentTypePrefix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(jsonSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(xmlSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(urlEncodedSuffix' StringComparison.OrdinalIgnoreCase)"  is complex.
Empty Catch Block,Azure.Core.Testing,RecordEntry,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordEntry.cs,SerializeBody,The method has an empty catch block.
Empty Catch Block,Azure.Core.Testing,TestRecording,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRecording.cs,TestRecording,The method has an empty catch block.
Magic Number,Azure.Core.Tests,AzureEventSourceListenerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\AzureEventSourceListenerTests.cs,FormatsByteArrays,The following statement contains a magic number: (EventWrittenEventArgs e' string message) = ExpectSingleEvent(() => TestSource.Log.LogWithByteArray(new byte[] { 0' 1' 233}));
Magic Number,Azure.Core.Tests,AzureEventSourceListenerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\AzureEventSourceListenerTests.cs,FormatsAsKeyValuesIfNoMessage,The following statement contains a magic number: (EventWrittenEventArgs e' string message) = ExpectSingleEvent(() => TestSource.Log.LogWithoutMessage("a message"' 5));
Magic Number,Azure.Core.Tests,TestSource,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\AzureEventSourceListenerTests.cs,LogWithoutMessage,The following statement contains a magic number: WriteEvent(2' message' other);
Magic Number,Azure.Core.Tests,TestSource,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\AzureEventSourceListenerTests.cs,LogWithByteArray,The following statement contains a magic number: WriteEvent(3' b);
Magic Number,Azure.Core.Tests,BearerTokenAuthenticationPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BearerTokenAuthenticationPolicyTests.cs,UsesTokenProvidedByCredentials,The following statement contains a magic number: MockTransport transport = CreateMockTransport(new MockResponse(200));
Magic Number,Azure.Core.Tests,BearerTokenAuthenticationPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BearerTokenAuthenticationPolicyTests.cs,RequestsTokenEveryRequest,The following statement contains a magic number: MockTransport transport = CreateMockTransport(new MockResponse(200)' new MockResponse(200));
Magic Number,Azure.Core.Tests,BearerTokenAuthenticationPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BearerTokenAuthenticationPolicyTests.cs,RequestsTokenEveryRequest,The following statement contains a magic number: MockTransport transport = CreateMockTransport(new MockResponse(200)' new MockResponse(200));
Magic Number,Azure.Core.Tests,BearerTokenAuthenticationPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BearerTokenAuthenticationPolicyTests.cs,CachesHeaderValue,The following statement contains a magic number: MockTransport transport = CreateMockTransport(new MockResponse(200)' new MockResponse(200));
Magic Number,Azure.Core.Tests,BearerTokenAuthenticationPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BearerTokenAuthenticationPolicyTests.cs,CachesHeaderValue,The following statement contains a magic number: MockTransport transport = CreateMockTransport(new MockResponse(200)' new MockResponse(200));
Magic Number,Azure.Core.Tests,BufferResponsePolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BufferResponsePolicyTests.cs,ReadsEntireBodyIntoMemoryStream,The following statement contains a magic number: MockResponse mockResponse = new MockResponse(200);
Magic Number,Azure.Core.Tests,BufferResponsePolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BufferResponsePolicyTests.cs,ReadsEntireBodyIntoMemoryStream,The following statement contains a magic number: var readTrackingStream = new ReadTrackingStream(128' int.MaxValue);
Magic Number,Azure.Core.Tests,BufferResponsePolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BufferResponsePolicyTests.cs,ReadsEntireBodyIntoMemoryStream,The following statement contains a magic number: Assert.AreEqual(128' ms.Length);
Magic Number,Azure.Core.Tests,BufferResponsePolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BufferResponsePolicyTests.cs,ReadsEntireBodyIntoMemoryStream,The following statement contains a magic number: Assert.AreEqual(128' readTrackingStream.BytesRead);
Magic Number,Azure.Core.Tests,BufferResponsePolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BufferResponsePolicyTests.cs,SurfacesStreamReadingExceptions,The following statement contains a magic number: MockResponse mockResponse = new MockResponse(200)              {                  ContentStream = new ReadTrackingStream(128' 64)              };
Magic Number,Azure.Core.Tests,BufferResponsePolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BufferResponsePolicyTests.cs,SurfacesStreamReadingExceptions,The following statement contains a magic number: MockResponse mockResponse = new MockResponse(200)              {                  ContentStream = new ReadTrackingStream(128' 64)              };
Magic Number,Azure.Core.Tests,BufferResponsePolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BufferResponsePolicyTests.cs,SurfacesStreamReadingExceptions,The following statement contains a magic number: MockResponse mockResponse = new MockResponse(200)              {                  ContentStream = new ReadTrackingStream(128' 64)              };
Magic Number,Azure.Core.Tests,BufferResponsePolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BufferResponsePolicyTests.cs,SkipsResponsesWithoutContent,The following statement contains a magic number: MockResponse mockResponse = new MockResponse(200);
Magic Number,Azure.Core.Tests,BufferResponsePolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BufferResponsePolicyTests.cs,ClosesStreamAfterCopying,The following statement contains a magic number: ReadTrackingStream readTrackingStream = new ReadTrackingStream(128' int.MaxValue);
Magic Number,Azure.Core.Tests,BufferResponsePolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BufferResponsePolicyTests.cs,ClosesStreamAfterCopying,The following statement contains a magic number: MockResponse mockResponse = new MockResponse(200)              {                  ContentStream = readTrackingStream              };
Magic Number,Azure.Core.Tests,BufferResponsePolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BufferResponsePolicyTests.cs,DoesntBufferWhenDisabled,The following statement contains a magic number: ReadTrackingStream readTrackingStream = new ReadTrackingStream(128' int.MaxValue);
Magic Number,Azure.Core.Tests,BufferResponsePolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\BufferResponsePolicyTests.cs,DoesntBufferWhenDisabled,The following statement contains a magic number: MockResponse mockResponse = new MockResponse(200)              {                  ContentStream = readTrackingStream              };
Magic Number,Azure.Core.Tests,ClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ClientDiagnosticsTests.cs,CreatesActivityWithNameAndTags,The following statement contains a magic number: scope.AddAttribute("Attribute2"' 2' i => i.ToString());
Magic Number,Azure.Core.Tests,ClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ClientDiagnosticsTests.cs,CreatesActivityWithNameAndTags,The following statement contains a magic number: scope.AddAttribute("Attribute3"' 3);
Magic Number,Azure.Core.Tests,ClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ClientDiagnosticsTests.cs,AddLinkCallsPassesLinksAsPartOfStartPayload,The following statement contains a magic number: Assert.AreEqual(activitiesArray.Length' 2);
Magic Number,Azure.Core.Tests,ClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ClientDiagnosticsTests.cs,FailedStopsActivityAndWritesExceptionEvent,The following statement contains a magic number: scope.AddAttribute("Attribute2"' 2' i => i.ToString());
Magic Number,Azure.Core.Tests,ClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ClientDiagnosticsTests.cs,NoopsWhenDisabled,The following statement contains a magic number: scope.AddAttribute("Attribute2"' 2' i => i.ToString());
Magic Number,Azure.Core.Tests,ClientRequestIdPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ClientRequestIdPolicyTests.cs,SetsHeaders,The following statement contains a magic number: MockRequest request = await mockTransport.RequestGate.Cycle(new MockResponse(200));
Magic Number,Azure.Core.Tests,ClientTestBaseTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ClientTestBaseTests.cs,CallsCorrectMethodBasedOnCtorArgument,The following statement contains a magic number: var result = await client.MethodAsync(123);
Magic Number,Azure.Core.Tests,ClientTestBaseTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ClientTestBaseTests.cs,WorksWithCancellationToken,The following statement contains a magic number: var result = await client.MethodAsync(123' new CancellationTokenSource().Token);
Magic Number,Azure.Core.Tests,ClientTestBaseTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ClientTestBaseTests.cs,ThrowsForSyncCallsInAsyncContext,The following statement contains a magic number: InvalidOperationException exception = Assert.Throws<InvalidOperationException>(() => client.Method(123));
Magic Number,Azure.Core.Tests,ClientTestBaseTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ClientTestBaseTests.cs,ThrowsWhenSyncMethodIsNotAvailable,The following statement contains a magic number: InvalidOperationException exception = Assert.Throws<InvalidOperationException>(() => client.NoAlternativeAsync(123));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: var response = new MockResponse(200);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: await SendRequestAsync(pipeline' request =>              {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io/api-version=5"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: await SendRequestAsync(pipeline' request =>              {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io/api-version=5"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: await SendRequestAsync(pipeline' request =>              {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io/api-version=5"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: await SendRequestAsync(pipeline' request =>              {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io/api-version=5"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 1' 2' 3' 4' 5 }' e.GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 1' 2' 3' 4' 5 }' e.GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 1' 2' 3' 4' 5 }' e.GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 1' 2' 3' 4' 5 }' e.GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: Assert.AreEqual(e.GetProperty<int>("status")' 200);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 6' 7' 8' 9' 0 }' e.GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 6' 7' 8' 9' 0 }' e.GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 6' 7' 8' 9' 0 }' e.GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendingRequestProducesEvents,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 6' 7' 8' 9' 0 }' e.GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,GettingErrorRequestProducesEvents,The following statement contains a magic number: var response = new MockResponse(500);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,GettingErrorRequestProducesEvents,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,GettingErrorRequestProducesEvents,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,GettingErrorRequestProducesEvents,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,GettingErrorRequestProducesEvents,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,GettingErrorRequestProducesEvents,The following statement contains a magic number: await SendRequestAsync(pipeline' request =>              {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,GettingErrorRequestProducesEvents,The following statement contains a magic number: await SendRequestAsync(pipeline' request =>              {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,GettingErrorRequestProducesEvents,The following statement contains a magic number: await SendRequestAsync(pipeline' request =>              {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,GettingErrorRequestProducesEvents,The following statement contains a magic number: await SendRequestAsync(pipeline' request =>              {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,GettingErrorRequestProducesEvents,The following statement contains a magic number: Assert.AreEqual(e.GetProperty<int>("status")' 500);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,GettingErrorRequestProducesEvents,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 6' 7' 8' 9' 0 }' e.GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,GettingErrorRequestProducesEvents,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 6' 7' 8' 9' 0 }' e.GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,GettingErrorRequestProducesEvents,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 6' 7' 8' 9' 0 }' e.GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,GettingErrorRequestProducesEvents,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 6' 7' 8' 9' 0 }' e.GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,RequestContentIsLoggedAsText,The following statement contains a magic number: var response = new MockResponse(500);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,ContentIsNotLoggedAsTextWhenDisabled,The following statement contains a magic number: var response = new MockResponse(500);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,ContentIsNotLoggedAsTextWhenDisabled,The following statement contains a magic number: response.ContentStream = new MemoryStream(new byte[] {1' 2' 3});
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,ContentIsNotLoggedAsTextWhenDisabled,The following statement contains a magic number: response.ContentStream = new MemoryStream(new byte[] {1' 2' 3});
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,ContentIsNotLoggedWhenDisabled,The following statement contains a magic number: var response = new MockResponse(500);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,ContentIsNotLoggedWhenDisabled,The following statement contains a magic number: response.ContentStream = new NonSeekableMemoryStream(new byte[] {1' 2' 3});
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,ContentIsNotLoggedWhenDisabled,The following statement contains a magic number: response.ContentStream = new NonSeekableMemoryStream(new byte[] {1' 2' 3});
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,RequestContentIsNotLoggedWhenDisabled,The following statement contains a magic number: var response = new MockResponse(500);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,RequestContentIsNotLoggedWhenDisabled,The following statement contains a magic number: response.ContentStream = new MemoryStream(new byte[] {1' 2' 3});
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,RequestContentIsNotLoggedWhenDisabled,The following statement contains a magic number: response.ContentStream = new MemoryStream(new byte[] {1' 2' 3});
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesAreLoggedInBlocks,The following statement contains a magic number: Assert.AreEqual(2' contentEvents.Length);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 72' 101' 108' 108' 111' 32 }' contentEvents[0].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 72' 101' 108' 108' 111' 32 }' contentEvents[0].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 72' 101' 108' 108' 111' 32 }' contentEvents[0].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 72' 101' 108' 108' 111' 32 }' contentEvents[0].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 72' 101' 108' 108' 111' 32 }' contentEvents[0].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 72' 101' 108' 108' 111' 32 }' contentEvents[0].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 119' 111' 114' 108' 100 }' contentEvents[1].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 119' 111' 114' 108' 100 }' contentEvents[1].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 119' 111' 114' 108' 100 }' contentEvents[1].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 119' 111' 114' 108' 100 }' contentEvents[1].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 119' 111' 114' 108' 100 }' contentEvents[1].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesErrorsAreLoggedInBlocks,The following statement contains a magic number: Assert.AreEqual(2' errorContentEvents.Length);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesErrorsAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 72' 101' 108' 108' 111' 32 }' errorContentEvents[0].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesErrorsAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 72' 101' 108' 108' 111' 32 }' errorContentEvents[0].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesErrorsAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 72' 101' 108' 108' 111' 32 }' errorContentEvents[0].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesErrorsAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 72' 101' 108' 108' 111' 32 }' errorContentEvents[0].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesErrorsAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 72' 101' 108' 108' 111' 32 }' errorContentEvents[0].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesErrorsAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 72' 101' 108' 108' 111' 32 }' errorContentEvents[0].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesErrorsAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 119' 111' 114' 108' 100 }' errorContentEvents[1].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesErrorsAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 119' 111' 114' 108' 100 }' errorContentEvents[1].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesErrorsAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 119' 111' 114' 108' 100 }' errorContentEvents[1].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesErrorsAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 119' 111' 114' 108' 100 }' errorContentEvents[1].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesErrorsAreLoggedInBlocks,The following statement contains a magic number: CollectionAssert.AreEqual(new byte[] { 119' 111' 114' 108' 100 }' errorContentEvents[1].GetProperty<byte[]>("content"));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesAreLoggedInTextBlocks,The following statement contains a magic number: Assert.AreEqual(2' contentEvents.Length);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesErrorsAreLoggedInTextBlocks,The following statement contains a magic number: Assert.AreEqual(2' errorContentEvents.Length);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SeekableTextResponsesErrorsAreLoggedInText,The following statement contains a magic number: Response response = await SendRequest(                  isSeekable: true'                  isError: true'                  mockResponse => mockResponse.AddHeader(new HttpHeader("Content-Type"' "text/xml"))'                  maxLength: 5              );
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SeekableTextResponsesAreLimitedInLength,The following statement contains a magic number: Response response = await SendRequest(                  isSeekable: true'                  isError: false'                  mockResponse => mockResponse.AddHeader(new HttpHeader("Content-Type"' "text/xml"))'                  maxLength: 5              );
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,RequestContentLogsAreLimitedInLength,The following statement contains a magic number: var response = new MockResponse(500);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,RequestContentLogsAreLimitedInLength,The following statement contains a magic number: var pipeline = new HttpPipeline(mockTransport' new[] { new LoggingPolicy(logContent: true' 5' s_allowedHeaders' s_allowedQueryParameters) });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,NonSeekableResponsesAreLimitedInLength,The following statement contains a magic number: Response response = await SendRequest(                  isSeekable: false'                  isError: false'                  mockResponse => mockResponse.AddHeader(new HttpHeader("Content-Type"' "text/xml"))'                  maxLength: 5              );
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreSanitized,The following statement contains a magic number: var response = new MockResponse(200);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreSanitized,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreSanitized,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreSanitized,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreSanitized,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreSanitized,The following statement contains a magic number: await SendRequestAsync(pipeline' request => {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io?api-version=5&secret=123"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Headers.Add("Secret-Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreSanitized,The following statement contains a magic number: await SendRequestAsync(pipeline' request => {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io?api-version=5&secret=123"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Headers.Add("Secret-Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreSanitized,The following statement contains a magic number: await SendRequestAsync(pipeline' request => {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io?api-version=5&secret=123"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Headers.Add("Secret-Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreSanitized,The following statement contains a magic number: await SendRequestAsync(pipeline' request => {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io?api-version=5&secret=123"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Headers.Add("Secret-Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreSanitized,The following statement contains a magic number: Assert.AreEqual(e.GetProperty<int>("status")' 200);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreNotSanitizedWhenStars,The following statement contains a magic number: var response = new MockResponse(200);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreNotSanitizedWhenStars,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreNotSanitizedWhenStars,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreNotSanitizedWhenStars,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreNotSanitizedWhenStars,The following statement contains a magic number: response.SetContent(new byte[] { 6' 7' 8' 9' 0 });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreNotSanitizedWhenStars,The following statement contains a magic number: await SendRequestAsync(pipeline' request =>              {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io?api-version=5&secret=123"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Headers.Add("Secret-Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreNotSanitizedWhenStars,The following statement contains a magic number: await SendRequestAsync(pipeline' request =>              {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io?api-version=5&secret=123"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Headers.Add("Secret-Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreNotSanitizedWhenStars,The following statement contains a magic number: await SendRequestAsync(pipeline' request =>              {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io?api-version=5&secret=123"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Headers.Add("Secret-Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreNotSanitizedWhenStars,The following statement contains a magic number: await SendRequestAsync(pipeline' request =>              {                  request.Method = RequestMethod.Get;                  request.Uri.Reset(new Uri("https://contoso.a.io?api-version=5&secret=123"));                  request.Headers.Add("Date"' "3/26/2019");                  request.Headers.Add("Custom-Header"' "Value");                  request.Headers.Add("Secret-Custom-Header"' "Value");                  request.Content = RequestContent.Create(new byte[] { 1' 2' 3' 4' 5 });                  requestId = request.ClientRequestId;              });
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,HeadersAndQueryParametersAreNotSanitizedWhenStars,The following statement contains a magic number: Assert.AreEqual(e.GetProperty<int>("status")' 200);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendRequest,The following statement contains a magic number: var mockResponse = new MockResponse(isError ? 500: 200);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendRequest,The following statement contains a magic number: var mockResponse = new MockResponse(isError ? 500: 200);
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendRequest,The following statement contains a magic number: var buffer = new byte[11];
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendRequest,The following statement contains a magic number: Assert.AreEqual(6' await response.ContentStream.ReadAsync(buffer' 5' 6));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendRequest,The following statement contains a magic number: Assert.AreEqual(6' await response.ContentStream.ReadAsync(buffer' 5' 6));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendRequest,The following statement contains a magic number: Assert.AreEqual(6' await response.ContentStream.ReadAsync(buffer' 5' 6));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendRequest,The following statement contains a magic number: Assert.AreEqual(5' await response.ContentStream.ReadAsync(buffer' 6' 5));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendRequest,The following statement contains a magic number: Assert.AreEqual(5' await response.ContentStream.ReadAsync(buffer' 6' 5));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendRequest,The following statement contains a magic number: Assert.AreEqual(5' await response.ContentStream.ReadAsync(buffer' 6' 5));
Magic Number,Azure.Core.Tests,EventSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\EventSourceTests.cs,SendRequest,The following statement contains a magic number: Assert.AreEqual(0' await response.ContentStream.ReadAsync(buffer' 0' 5));
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsBetweenRetries,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 });
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsBetweenRetries,The following statement contains a magic number: var policy = new RetryPolicyMock(RetryMode.Exponential' delay: TimeSpan.FromSeconds(1)' maxDelay: TimeSpan.FromSeconds(10));
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsBetweenRetries,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(500));
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsBetweenRetries,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(200));
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsBetweenRetries,The following statement contains a magic number: Assert.AreEqual(200' response.Status);
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 });
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: var policy = new RetryPolicyMock(RetryMode.Exponential' maxRetries: 4' delay: TimeSpan.FromSeconds(1)' maxDelay: TimeSpan.FromSeconds(10));
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: var policy = new RetryPolicyMock(RetryMode.Exponential' maxRetries: 4' delay: TimeSpan.FromSeconds(1)' maxDelay: TimeSpan.FromSeconds(10));
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: var expectedDelaysInSeconds = new int[] { 1' 2' 4' 8 };
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: var expectedDelaysInSeconds = new int[] { 1' 2' 4' 8 };
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: var expectedDelaysInSeconds = new int[] { 1' 2' 4' 8 };
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(500));
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(500));
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: i < 4
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: Assert.AreEqual(500' response.Status);
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,RespectsMaxDelay,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 });
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,RespectsMaxDelay,The following statement contains a magic number: var policy = new RetryPolicyMock(RetryMode.Exponential' maxRetries: 6' delay: TimeSpan.FromSeconds(1)' maxDelay: TimeSpan.FromSeconds(5));
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,RespectsMaxDelay,The following statement contains a magic number: var policy = new RetryPolicyMock(RetryMode.Exponential' maxRetries: 6' delay: TimeSpan.FromSeconds(1)' maxDelay: TimeSpan.FromSeconds(5));
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,RespectsMaxDelay,The following statement contains a magic number: var expectedDelaysInSeconds = new int[] { 1' 2' 4' 5' 5' 5 };
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,RespectsMaxDelay,The following statement contains a magic number: var expectedDelaysInSeconds = new int[] { 1' 2' 4' 5' 5' 5 };
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,RespectsMaxDelay,The following statement contains a magic number: var expectedDelaysInSeconds = new int[] { 1' 2' 4' 5' 5' 5 };
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,RespectsMaxDelay,The following statement contains a magic number: var expectedDelaysInSeconds = new int[] { 1' 2' 4' 5' 5' 5 };
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,RespectsMaxDelay,The following statement contains a magic number: var expectedDelaysInSeconds = new int[] { 1' 2' 4' 5' 5' 5 };
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,RespectsMaxDelay,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(500));
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,RespectsMaxDelay,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(500));
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,RespectsMaxDelay,The following statement contains a magic number: i < 6
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,RespectsMaxDelay,The following statement contains a magic number: Assert.AreEqual(500' response.Status);
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,UsesLargerOfDelayAndServerDelay,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 });
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,UsesLargerOfDelayAndServerDelay,The following statement contains a magic number: var policy = new RetryPolicyMock(RetryMode.Exponential' delay: TimeSpan.FromSeconds(delay)' maxDelay: TimeSpan.FromSeconds(5));
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,UsesLargerOfDelayAndServerDelay,The following statement contains a magic number: MockResponse mockResponse = new MockResponse(500);
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,UsesLargerOfDelayAndServerDelay,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(501));
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,UsesLargerOfDelayAndServerDelay,The following statement contains a magic number: Assert.AreEqual(501' response.Status);
Magic Number,Azure.Core.Tests,ExponentialPolicyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ExponentialPolicyTest.cs,AssertExponentialDelay,The following statement contains a magic number: Assert.LessOrEqual(Math.Abs(expected.TotalMilliseconds / actual.TotalMilliseconds - 1)' 0.25' "Expected {0} to be around {1}"' actual' expected);
Magic Number,Azure.Core.Tests,FailedResponseExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FailedResponseExceptionTests.cs,FormatsResponse,The following statement contains a magic number: var response = new MockResponse(210' "Reason");
Magic Number,Azure.Core.Tests,FailedResponseExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FailedResponseExceptionTests.cs,FormatsResponseContentForTextContentTypes,The following statement contains a magic number: var response = new MockResponse(210' "Reason");
Magic Number,Azure.Core.Tests,FailedResponseExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FailedResponseExceptionTests.cs,DoesntFormatsResponseContentForNonTextContentTypes,The following statement contains a magic number: var response = new MockResponse(210' "Reason");
Magic Number,Azure.Core.Tests,FailedResponseExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FailedResponseExceptionTests.cs,IncludesErrorCodeInMessageIfAvailable,The following statement contains a magic number: var response = new MockResponse(210' "Reason");
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,WaitsBetweenRetries,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 });
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,WaitsBetweenRetries,The following statement contains a magic number: var policy = new RetryPolicyMock(RetryMode.Fixed' delay: TimeSpan.FromSeconds(3));
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,WaitsBetweenRetries,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(500));
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,WaitsBetweenRetries,The following statement contains a magic number: Assert.AreEqual(delay' TimeSpan.FromSeconds(3));
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,WaitsBetweenRetries,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(200));
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,WaitsBetweenRetries,The following statement contains a magic number: Assert.AreEqual(200' response.Status);
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 });
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: var policy = new RetryPolicyMock(RetryMode.Fixed' delay: TimeSpan.FromSeconds(3)' maxRetries: 3);
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: var policy = new RetryPolicyMock(RetryMode.Fixed' delay: TimeSpan.FromSeconds(3)' maxRetries: 3);
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(500));
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: Assert.AreEqual(delay' TimeSpan.FromSeconds(3));
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(500));
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: i < 3
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,WaitsSameAmountEveryTime,The following statement contains a magic number: Assert.AreEqual(500' response.Status);
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,UsesLargerOfDelayAndServerDelay,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 });
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,UsesLargerOfDelayAndServerDelay,The following statement contains a magic number: MockResponse mockResponse = new MockResponse(500);
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,UsesLargerOfDelayAndServerDelay,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(501));
Magic Number,Azure.Core.Tests,FixedRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\FixedRetryPolicyTests.cs,UsesLargerOfDelayAndServerDelay,The following statement contains a magic number: Assert.AreEqual(501' response.Status);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsDateHeaderValue,The following statement contains a magic number: var mockResponse = new MockResponse(200);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsDateHeaderValue,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 1' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsDateHeaderValue,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 1' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsDateHeaderValue,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 1' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsDateHeaderValue,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 1' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsDateHeaderValue,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 1' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsXMsDateHeaderValue,The following statement contains a magic number: var mockResponse = new MockResponse(200);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsXMsDateHeaderValue,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 1' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsXMsDateHeaderValue,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 1' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsXMsDateHeaderValue,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 1' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsXMsDateHeaderValue,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 1' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsXMsDateHeaderValue,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 1' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsDateHeaderValueFirst,The following statement contains a magic number: var mockResponse = new MockResponse(200);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsDateHeaderValueFirst,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 9' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsDateHeaderValueFirst,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 9' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsDateHeaderValueFirst,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 9' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsDateHeaderValueFirst,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 9' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsDateHeaderValueFirst,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 9' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsDateHeaderValueFirst,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2013' 9' 29' 9' 2' 3' TimeSpan.Zero)' mockResponse.Headers.Date);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,ETagParsedIfExist,The following statement contains a magic number: var mockResponse = new MockResponse(200);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,ContentLengthParsedIfExist,The following statement contains a magic number: var mockResponse = new MockResponse(200);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,ContentLengthParsedIfExist,The following statement contains a magic number: Assert.AreEqual(100' mockResponse.Headers.ContentLength);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,DateReturnsNullForNoHeader,The following statement contains a magic number: var mockResponse = new MockResponse(200);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,ContentTypeReturnsContentTypeHeaderValue,The following statement contains a magic number: var mockResponse = new MockResponse(200);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,ContentTypeReturnsNullForNoHeader,The following statement contains a magic number: var mockResponse = new MockResponse(200);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,RequestIdReturnsRequestIdHeaderValue,The following statement contains a magic number: var mockResponse = new MockResponse(200);
Magic Number,Azure.Core.Tests,HeadersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HeadersTests.cs,RequestIdReturnsNullForNoHeader,The following statement contains a magic number: var mockResponse = new MockResponse(200);
Magic Number,Azure.Core.Tests,HttpClientTransportFunctionalTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportFunctionalTests.cs,ResponseHeadersAreSplit,The following statement contains a magic number: Assert.AreEqual(2' tokens.Count());
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,SettingHeaderOverridesDefaultContentLength,The following statement contains a magic number: request.Content = RequestContent.Create(new byte[10]);
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,SettingHeaderOverridesDefaultContentLength,The following statement contains a magic number: Assert.AreEqual(50' contentLength);
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,CanGetAndSetResponseHeaders,The following statement contains a magic number: var mockHandler = new MockHttpClientHandler(                  httpRequestMessage =>                  {                      var responseMessage = new HttpResponseMessage((HttpStatusCode)200);                        if (contentHeader)                      {                          responseMessage.Content = new StreamContent(new MemoryStream());                          Assert.True(responseMessage.Content.Headers.TryAddWithoutValidation(headerName' headerValue));                      }                      else                      {                          Assert.True(responseMessage.Headers.TryAddWithoutValidation(headerName' headerValue));                      }                        return Task.FromResult(responseMessage);                  });
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,CanGetAndSetMultiValueResponseHeaders,The following statement contains a magic number: var mockHandler = new MockHttpClientHandler(                  httpRequestMessage =>                  {                      var responseMessage = new HttpResponseMessage((HttpStatusCode)200);                        if (contentHeader)                      {                          responseMessage.Content = new StreamContent(new MemoryStream());                          Assert.True(responseMessage.Content.Headers.TryAddWithoutValidation(headerName' headerValue));                          Assert.True(responseMessage.Content.Headers.TryAddWithoutValidation(headerName' anotherHeaderValue));                      }                      else                      {                          Assert.True(responseMessage.Headers.TryAddWithoutValidation(headerName' headerValue));                          Assert.True(responseMessage.Headers.TryAddWithoutValidation(headerName' anotherHeaderValue));                      }                        return Task.FromResult(responseMessage);                  });
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,SettingContentStreamPreservesHeaders,The following statement contains a magic number: var mockHandler = new MockHttpClientHandler(                  httpRequestMessage =>                  {                      var responseMessage = new HttpResponseMessage((HttpStatusCode)200);                        if (contentHeader)                      {                          responseMessage.Content = new StreamContent(new MemoryStream());                          Assert.True(responseMessage.Content.Headers.TryAddWithoutValidation(headerName' headerValue));                      }                      else                      {                          Assert.True(responseMessage.Headers.TryAddWithoutValidation(headerName' headerValue));                      }                        return Task.FromResult(responseMessage);                  });
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,ContentStreamIsReturnedSynchronously,The following statement contains a magic number: var content = new AsyncContent()              {                  MemoryStream = new MemoryStream(new byte[] { 1' 2' 3' 4' 5 })              };
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,ContentStreamIsReturnedSynchronously,The following statement contains a magic number: var content = new AsyncContent()              {                  MemoryStream = new MemoryStream(new byte[] { 1' 2' 3' 4' 5 })              };
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,ContentStreamIsReturnedSynchronously,The following statement contains a magic number: var content = new AsyncContent()              {                  MemoryStream = new MemoryStream(new byte[] { 1' 2' 3' 4' 5 })              };
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,ContentStreamIsReturnedSynchronously,The following statement contains a magic number: var content = new AsyncContent()              {                  MemoryStream = new MemoryStream(new byte[] { 1' 2' 3' 4' 5 })              };
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,ContentStreamIsReturnedSynchronously,The following statement contains a magic number: byte[] data = new byte[5];
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,ContentStreamIsReturnedSynchronously,The following statement contains a magic number: Task<int> firstRead = stream.ReadAsync(data' 0' 5);
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,ContentStreamIsReturnedSynchronously,The following statement contains a magic number: Assert.AreEqual(5' await firstRead);
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,ContentStreamIsReturnedSynchronously,The following statement contains a magic number: stream.Position = 3;
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,ContentStreamIsReturnedSynchronously,The following statement contains a magic number: var secondReadLength = await stream.ReadAsync(data' 0' 5);
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,ContentStreamIsReturnedSynchronously,The following statement contains a magic number: Assert.AreEqual(3' secondReadLength);
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,ContentStreamIsReturnedSynchronously,The following statement contains a magic number: Assert.Throws<NotSupportedException>(() => stream.SetLength(5));
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,OriginalContentStreamIsReturnedIfNotAsync,The following statement contains a magic number: var content = new AsyncContent()              {                  MemoryStream = new MemoryStream(new byte[] { 1' 2' 3' 4' 5 })              };
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,OriginalContentStreamIsReturnedIfNotAsync,The following statement contains a magic number: var content = new AsyncContent()              {                  MemoryStream = new MemoryStream(new byte[] { 1' 2' 3' 4' 5 })              };
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,OriginalContentStreamIsReturnedIfNotAsync,The following statement contains a magic number: var content = new AsyncContent()              {                  MemoryStream = new MemoryStream(new byte[] { 1' 2' 3' 4' 5 })              };
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,OriginalContentStreamIsReturnedIfNotAsync,The following statement contains a magic number: var content = new AsyncContent()              {                  MemoryStream = new MemoryStream(new byte[] { 1' 2' 3' 4' 5 })              };
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,StreamRequestContentCanBeSentMultipleTimes,The following statement contains a magic number: request.Content = RequestContent.Create(new MemoryStream(new byte[] { 1' 2' 3 }));
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,StreamRequestContentCanBeSentMultipleTimes,The following statement contains a magic number: request.Content = RequestContent.Create(new MemoryStream(new byte[] { 1' 2' 3 }));
Magic Number,Azure.Core.Tests,HttpClientTransportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpClientTransportTests.cs,StreamRequestContentCanBeSentMultipleTimes,The following statement contains a magic number: Assert.AreEqual(2' requests.Count);
Magic Number,Azure.Core.Tests,HttpPipelineBuilderTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineBuilderTest.cs,CanAddCustomPolicy,The following statement contains a magic number: var transport = new MockTransport(new MockResponse(503)' new MockResponse(200));
Magic Number,Azure.Core.Tests,HttpPipelineBuilderTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineBuilderTest.cs,CanAddCustomPolicy,The following statement contains a magic number: var transport = new MockTransport(new MockResponse(503)' new MockResponse(200));
Magic Number,Azure.Core.Tests,HttpPipelineBuilderTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineBuilderTest.cs,CanAddCustomPolicy,The following statement contains a magic number: Assert.AreEqual(200' response.Status);
Magic Number,Azure.Core.Tests,HttpPipelineBuilderTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineBuilderTest.cs,UsesAssemblyNameAndInformationalVersionForTelemetryPolicySettings,The following statement contains a magic number: var transport = new MockTransport(new MockResponse(503)' new MockResponse(200));
Magic Number,Azure.Core.Tests,HttpPipelineBuilderTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineBuilderTest.cs,UsesAssemblyNameAndInformationalVersionForTelemetryPolicySettings,The following statement contains a magic number: var transport = new MockTransport(new MockResponse(503)' new MockResponse(200));
Magic Number,Azure.Core.Tests,HttpPipelineFunctionalTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineFunctionalTests.cs,SendRequestBuffersResponse,The following statement contains a magic number: using TestServer testServer = new TestServer(                  async context =>                  {                      for (int i = 0; i < 1000; i++)                      {                          await context.Response.Body.WriteAsync(buffer' 0' 1);                      }                  });
Magic Number,Azure.Core.Tests,HttpPipelineFunctionalTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineFunctionalTests.cs,SendRequestBuffersResponse,The following statement contains a magic number: Assert.AreEqual(response.ContentStream.Length' 1000);
Magic Number,Azure.Core.Tests,HttpPipelineFunctionalTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineFunctionalTests.cs,SendRequestBuffersResponse,The following statement contains a magic number: i < 100
Magic Number,Azure.Core.Tests,HttpPipelineFunctionalTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineFunctionalTests.cs,NonBufferedExtractedStreamReadableAfterMessageDisposed,The following statement contains a magic number: using TestServer testServer = new TestServer(                  async context =>                  {                      for (int i = 0; i < 1000; i++)                      {                          await context.Response.Body.WriteAsync(buffer' 0' 1);                      }                  });
Magic Number,Azure.Core.Tests,HttpPipelineFunctionalTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineFunctionalTests.cs,NonBufferedExtractedStreamReadableAfterMessageDisposed,The following statement contains a magic number: Assert.AreEqual(memoryStream.Length' 1000);
Magic Number,Azure.Core.Tests,HttpPipelineFunctionalTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineFunctionalTests.cs,NonBufferedExtractedStreamReadableAfterMessageDisposed,The following statement contains a magic number: i < 100
Magic Number,Azure.Core.Tests,HttpPipelineFunctionalTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineFunctionalTests.cs,RetriesTransportFailures,The following statement contains a magic number: using TestServer testServer = new TestServer(                  context =>                  {                      if (Interlocked.Increment(ref i) == 1)                      {                          context.Abort();                      }                      else                      {                          context.Response.StatusCode = 201;                      }                      return Task.CompletedTask;                  });
Magic Number,Azure.Core.Tests,HttpPipelineFunctionalTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineFunctionalTests.cs,RetriesTransportFailures,The following statement contains a magic number: Assert.AreEqual(message.Response.Status' 201);
Magic Number,Azure.Core.Tests,HttpPipelineFunctionalTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineFunctionalTests.cs,RetriesTransportFailures,The following statement contains a magic number: Assert.AreEqual(2' i);
Magic Number,Azure.Core.Tests,HttpPipelineMessageTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineMessageTest.cs,PreserveReturnsResponseStream,The following statement contains a magic number: var response = new MockResponse(200);
Magic Number,Azure.Core.Tests,HttpPipelineMessageTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineMessageTest.cs,PreserveReturnsNullWhenContentIsNull,The following statement contains a magic number: var response = new MockResponse(200);
Magic Number,Azure.Core.Tests,HttpPipelineMessageTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineMessageTest.cs,PreserveSetsResponseContentToThrowingStream,The following statement contains a magic number: var response = new MockResponse(200);
Magic Number,Azure.Core.Tests,HttpPipelineRequestContentTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineRequestContentTests.cs,StreamCopyToCancellation,The following statement contains a magic number: int size = 100;
Magic Number,Azure.Core.Tests,HttpPipelineRequestContentTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineRequestContentTests.cs,StreamCopyTo,The following statement contains a magic number: int size = 100;
Magic Number,Azure.Core.Tests,HttpPipelineRequestContentTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineRequestContentTests.cs,StreamCopyTo,The following statement contains a magic number: var destinationArray = new byte[size * 2];
Magic Number,Azure.Core.Tests,HttpPipelineRequestContentTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineRequestContentTests.cs,StreamCopyTo,The following statement contains a magic number: new Random(100).NextBytes(sourceArray);
Magic Number,Azure.Core.Tests,HttpPipelineTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpPipelineTests.cs,DoesntDisposeRequestInSendRequestAsync,The following statement contains a magic number: HttpPipeline httpPipeline = HttpPipelineBuilder.Build(new TestOptions()              {                  Transport = new MockTransport(new MockResponse(200))              });
Magic Number,Azure.Core.Tests,HttpRangeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpRangeTests.cs,Equality,The following statement contains a magic number: var nullStart = new HttpRange(0' 5);
Magic Number,Azure.Core.Tests,HttpRangeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpRangeTests.cs,Equality,The following statement contains a magic number: var nullEnd = new HttpRange(5' null);
Magic Number,Azure.Core.Tests,HttpRangeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpRangeTests.cs,Equality,The following statement contains a magic number: var r5_10 = new HttpRange(5' 10);
Magic Number,Azure.Core.Tests,HttpRangeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpRangeTests.cs,Equality,The following statement contains a magic number: var r5_10 = new HttpRange(5' 10);
Magic Number,Azure.Core.Tests,HttpRangeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpRangeTests.cs,Equality,The following statement contains a magic number: var r5_10_copy = new HttpRange(5' 10);
Magic Number,Azure.Core.Tests,HttpRangeTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpRangeTests.cs,Equality,The following statement contains a magic number: var r5_10_copy = new HttpRange(5' 10);
Magic Number,Azure.Core.Tests,MockHttpClientHandler,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\MockHttpClientHandler.cs,SendAsync,The following statement contains a magic number: return response ?? new HttpResponseMessage((HttpStatusCode)200);
Magic Number,Azure.Core.Tests,OperationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\OperationTests.cs,WaitForCompletionAsync,The following statement contains a magic number: var testResult = 100;
Magic Number,Azure.Core.Tests,OperationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\OperationTests.cs,WaitForCompletionAsync,The following statement contains a magic number: var testResponse = new MockResponse(200);
Magic Number,Azure.Core.Tests,OperationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\OperationTests.cs,WaitForCompletionAsync,The following statement contains a magic number: var operation = new TestOperation<int>("operation-id"' TimeSpan.FromMilliseconds(10)' testResult' testResponse)              {                  UpdateCalled = () => { updateCalled++; }              };
Magic Number,Azure.Core.Tests,OperationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\OperationTests.cs,UpdateStatusAsync,The following statement contains a magic number: var testResult = 100;
Magic Number,Azure.Core.Tests,OperationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\OperationTests.cs,UpdateStatusAsync,The following statement contains a magic number: var testResponse = new MockResponse(200);
Magic Number,Azure.Core.Tests,OperationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\OperationTests.cs,UpdateStatusAsync,The following statement contains a magic number: var operation = new TestOperation<int>("operation-id"' TimeSpan.FromMilliseconds(10)' testResult' testResponse)              {                  UpdateCalled = () => { updateCalled++; }              };
Magic Number,Azure.Core.Tests,OperationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\OperationTests.cs,UpdateStatus,The following statement contains a magic number: var testResult = 10;
Magic Number,Azure.Core.Tests,OperationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\OperationTests.cs,UpdateStatus,The following statement contains a magic number: var testResponse = new MockResponse(200);
Magic Number,Azure.Core.Tests,OperationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\OperationTests.cs,UpdateStatus,The following statement contains a magic number: var operation = new TestOperation<int>("operation-id"' TimeSpan.FromMilliseconds(10)' testResult' testResponse)              {                  UpdateCalled = () => { updateCalled++; }              };
Magic Number,Azure.Core.Tests,OperationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\OperationTests.cs,Cancellation,The following statement contains a magic number: cancel.CancelAfter(100);
Magic Number,Azure.Core.Tests,OperationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\OperationTests.cs,Cancellation,The following statement contains a magic number: var operation = new TestOperation<int>("operation-id"' TimeSpan.FromMilliseconds(1000)' 100' null)              {                  UpdateCalled = () => { updateCalled++; }              };
Magic Number,Azure.Core.Tests,OperationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\OperationTests.cs,Cancellation,The following statement contains a magic number: var operation = new TestOperation<int>("operation-id"' TimeSpan.FromMilliseconds(1000)' 100' null)              {                  UpdateCalled = () => { updateCalled++; }              };
Magic Number,Azure.Core.Tests,OperationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\OperationTests.cs,NotCompleted,The following statement contains a magic number: var operation = new TestOperation<int>("operation-id"' TimeSpan.FromMilliseconds(1000)' 100' null);
Magic Number,Azure.Core.Tests,OperationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\OperationTests.cs,NotCompleted,The following statement contains a magic number: var operation = new TestOperation<int>("operation-id"' TimeSpan.FromMilliseconds(1000)' 100' null);
Magic Number,Azure.Core.Tests,PipelineTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\PipelineTests.cs,Basics,The following statement contains a magic number: var mockTransport = new MockTransport(                  new MockResponse(500)'                  new MockResponse(1));
Magic Number,Azure.Core.Tests,PipelineTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\PipelineTests.cs,Basics,The following statement contains a magic number: var pipeline = new HttpPipeline(mockTransport' new[] {                  new RetryPolicy(RetryMode.Exponential' TimeSpan.Zero' TimeSpan.Zero' 5)              }' responseClassifier: new CustomResponseClassifier());
Magic Number,Azure.Core.Tests,CustomResponseClassifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\PipelineTests.cs,IsRetriableResponse,The following statement contains a magic number: return message.Response.Status == 500;
Magic Number,Azure.Core.Tests,RecordSessionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RecordSessionTests.cs,CanRoundtripSessionRecord,The following statement contains a magic number: recordEntry.StatusCode = 202;
Magic Number,Azure.Core.Tests,RecordSessionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RecordSessionTests.cs,CanRoundtripSessionRecord,The following statement contains a magic number: Assert.AreEqual(202' recordEntry.StatusCode);
Magic Number,Azure.Core.Tests,RequestActivityPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RequestActivityPolicyTests.cs,ActivityIsCreatedForRequest,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(_ =>              {                  activity = Activity.Current;                  startEvent = testListener.Events.Dequeue();                  MockResponse mockResponse = new MockResponse(201);                  mockResponse.AddHeader(new HttpHeader("x-ms-request-id"' "server request id"));                  return mockResponse;              });
Magic Number,Azure.Core.Tests,RequestActivityPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RequestActivityPolicyTests.cs,ActivityIdIsStampedOnRequest,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(_ =>                  {                      activity = Activity.Current;                      return new MockResponse(201);                  });
Magic Number,Azure.Core.Tests,RequestActivityPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RequestActivityPolicyTests.cs,CurrentActivityIsInjectedIntoRequest,The following statement contains a magic number: var transport = new MockTransport(new MockResponse(200));
Magic Number,Azure.Core.Tests,RequestActivityPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RequestActivityPolicyTests.cs,CurrentActivityIsInjectedIntoRequestW3C,The following statement contains a magic number: var transport = new MockTransport(new MockResponse(200));
Magic Number,Azure.Core.Tests,RequestActivityPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RequestActivityPolicyTests.cs,PassesMessageIntoIsEnabledStartAndStopEvents,The following statement contains a magic number: var transport = new MockTransport(new MockResponse(200));
Magic Number,Azure.Core.Tests,RequestActivityPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RequestActivityPolicyTests.cs,ActivityIsNotCreatedWhenDisabled,The following statement contains a magic number: var transport = new MockTransport(new MockResponse(200));
Magic Number,Azure.Core.Tests,RequestUriBuilderTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RequestUriBuilderTest.cs,AddsLeadingSlashToPath,The following statement contains a magic number: var uriBuilder = new RequestUriBuilder              {                  Scheme = "http"'                  Host = "localhost"'                  Port = 80'                  Path = path              };
Magic Number,Azure.Core.Tests,RequestUriBuilderTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RequestUriBuilderTest.cs,AddsLeadingQuestionMarkToQuery,The following statement contains a magic number: var uriBuilder = new RequestUriBuilder              {                  Scheme = "http"'                  Host = "localhost"'                  Port = 80'                  Query = query              };
Magic Number,Azure.Core.Tests,RequestUriBuilderTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RequestUriBuilderTest.cs,SettingQueryToEmptyRemovesQuestionMark,The following statement contains a magic number: var uriBuilder = new RequestUriBuilder              {                  Scheme = "http"'                  Host = "localhost"'                  Port = 80'                  Query = "a"              };
Magic Number,Azure.Core.Tests,RequestUriBuilderTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RequestUriBuilderTest.cs,PathIsNotEscaped,The following statement contains a magic number: var uriBuilder = new RequestUriBuilder              {                  Scheme = "http"'                  Host = "localhost"'                  Port = 80'                  Path = path              };
Magic Number,Azure.Core.Tests,RequestUriBuilderTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RequestUriBuilderTest.cs,PathIsEscaped,The following statement contains a magic number: var uriBuilder = new RequestUriBuilder              {                  Scheme = "http"'                  Host = "localhost"'                  Port = 80              };
Magic Number,Azure.Core.Tests,RequestUriBuilderTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RequestUriBuilderTest.cs,QueryIsNotEscaped,The following statement contains a magic number: var uriBuilder = new RequestUriBuilder              {                  Scheme = "http"'                  Host = "localhost"'                  Port = 80'                  Query = "\u1234"              };
Magic Number,Azure.Core.Tests,RequestUriBuilderTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RequestUriBuilderTest.cs,AppendQueryWithEmptyValueWorks,The following statement contains a magic number: var uriBuilder = new RequestUriBuilder              {                  Scheme = "http"'                  Host = "localhost"'                  Port = 80              };
Magic Number,Azure.Core.Tests,RequestUriBuilderTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RequestUriBuilderTest.cs,AppendQueryWorks,The following statement contains a magic number: var uriBuilder = new RequestUriBuilder              {                  Scheme = "http"'                  Host = "localhost"'                  Port = 80'                  Query = initialQuery              };
Magic Number,Azure.Core.Tests,RequestUriBuilderTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RequestUriBuilderTest.cs,AppendPathWorks,The following statement contains a magic number: var uriBuilder = new RequestUriBuilder              {                  Scheme = "http"'                  Host = "localhost"'                  Port = 80'                  Path = initialPath              };
Magic Number,Azure.Core.Tests,ResponseTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ResponseTests.cs,ToStringsFormatsStatusAndValue,The following statement contains a magic number: var response = Response.FromValue(new TestPayload("test_name")' response: new MockResponse(200));
Magic Number,Azure.Core.Tests,ResponseTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ResponseTests.cs,ToStringsFormatsStatusAndResponsePhrase,The following statement contains a magic number: var response = new MockResponse(200' "Phrase");
Magic Number,Azure.Core.Tests,ResponseTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ResponseTests.cs,ValueThrowsIfUnspecified,The following statement contains a magic number: var response = new NoBodyResponse<TestPayload>(new MockResponse(304));
Magic Number,Azure.Core.Tests,ResponseTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ResponseTests.cs,ValueThrowsFromCastIfUnspecified,The following statement contains a magic number: var response = new NoBodyResponse<TestPayload>(new MockResponse(304));
Magic Number,Azure.Core.Tests,ResponseTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\ResponseTests.cs,ToStringsFormatsStatusAndMessageForNoBodyResponse,The following statement contains a magic number: var response = new NoBodyResponse<TestPayload>(new MockResponse(200));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: var stream1 = new MockReadStream(100' throwAfter: 50);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: var stream1 = new MockReadStream(100' throwAfter: 50);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: var stream2 = new MockReadStream(50' offset: 50' throwIOException: false);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: var stream2 = new MockReadStream(50' offset: 50' throwIOException: false);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = stream1 }'                  new MockResponse(200) { ContentStream = stream2 }              );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = stream1 }'                  new MockResponse(200) { ContentStream = stream2 }              );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Stream reliableStream = await CreateAsync(                  offset => SendTestRequest(pipeline' offset)'                  offset => SendTestRequestAsync(pipeline' offset)'                  new ResponseClassifier()' maxRetries: 5);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Assert.AreEqual(25' await ReadAsync(reliableStream' _buffer' 0' 25));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Assert.AreEqual(25' await ReadAsync(reliableStream' _buffer' 0' 25));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Assert.AreEqual(100' reliableStream.Length);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Assert.AreEqual(25' reliableStream.Position);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Assert.AreEqual(25' await ReadAsync(reliableStream' _buffer' 25' 25));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Assert.AreEqual(25' await ReadAsync(reliableStream' _buffer' 25' 25));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Assert.AreEqual(25' await ReadAsync(reliableStream' _buffer' 25' 25));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Assert.AreEqual(100' reliableStream.Length);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Assert.AreEqual(50' reliableStream.Position);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Assert.AreEqual(50' await ReadAsync(reliableStream' _buffer' 50' 50));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Assert.AreEqual(50' await ReadAsync(reliableStream' _buffer' 50' 50));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Assert.AreEqual(50' await ReadAsync(reliableStream' _buffer' 50' 50));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Assert.AreEqual(100' reliableStream.Length);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Assert.AreEqual(100' reliableStream.Position);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: Assert.AreEqual(0' await ReadAsync(reliableStream' _buffer' 0' 50));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,MaintainsGlobalLengthAndPosition,The following statement contains a magic number: AssertReads(_buffer' 100);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: var stream1 = new MockReadStream(100' throwAfter: 50);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: var stream1 = new MockReadStream(100' throwAfter: 50);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: var stream2 = new MockReadStream(50' offset: 50' throwAfter: 0' throwIOException: false);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: var stream2 = new MockReadStream(50' offset: 50' throwAfter: 0' throwIOException: false);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = stream1 }'                  new MockResponse(200) { ContentStream = stream2 }              );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = stream1 }'                  new MockResponse(200) { ContentStream = stream2 }              );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: Stream reliableStream = await CreateAsync(                  offset => SendTestRequest(pipeline' offset)'                  offset => SendTestRequestAsync(pipeline' offset)'                  new ResponseClassifier()'                  maxRetries: 5);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: Assert.AreEqual(25' await ReadAsync(reliableStream' _buffer' 0' 25));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: Assert.AreEqual(25' await ReadAsync(reliableStream' _buffer' 0' 25));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: Assert.AreEqual(100' reliableStream.Length);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: Assert.AreEqual(25' reliableStream.Position);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: Assert.AreEqual(25' await ReadAsync(reliableStream' _buffer' 25' 25));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: Assert.AreEqual(25' await ReadAsync(reliableStream' _buffer' 25' 25));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: Assert.AreEqual(25' await ReadAsync(reliableStream' _buffer' 25' 25));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: Assert.AreEqual(100' reliableStream.Length);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: Assert.AreEqual(50' reliableStream.Position);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: Assert.ThrowsAsync<InvalidOperationException>(() => reliableStream.ReadAsync(_buffer' 50' 50));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: Assert.ThrowsAsync<InvalidOperationException>(() => reliableStream.ReadAsync(_buffer' 50' 50));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntRetryNonRetryableExceptions,The following statement contains a magic number: AssertReads(_buffer' 50);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntCallLengthPrematurely,The following statement contains a magic number: var stream2 = new MockReadStream(50);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntCallLengthPrematurely,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = stream1 }'                  new MockResponse(200) { ContentStream = stream2 }              );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntCallLengthPrematurely,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = stream1 }'                  new MockResponse(200) { ContentStream = stream2 }              );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntCallLengthPrematurely,The following statement contains a magic number: Stream reliableStream = RetriableStream.Create(                  IsAsync ? await SendTestRequestAsync(pipeline' 0) : SendTestRequest(pipeline' 0)'                  offset => SendTestRequest(pipeline' offset)'                  offset => SendTestRequestAsync(pipeline' offset)'                  new ResponseClassifier()'                  maxRetries: 5);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntCallLengthPrematurely,The following statement contains a magic number: Assert.AreEqual(50' await ReadAsync(reliableStream' _buffer' 0' 50));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntCallLengthPrematurely,The following statement contains a magic number: Assert.AreEqual(50' await ReadAsync(reliableStream' _buffer' 0' 50));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntCallLengthPrematurely,The following statement contains a magic number: Assert.AreEqual(50' reliableStream.Position);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntCallLengthPrematurely,The following statement contains a magic number: Assert.AreEqual(0' await ReadAsync(reliableStream' _buffer' 0' 50));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,DoesntCallLengthPrematurely,The following statement contains a magic number: AssertReads(_buffer' 50);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,ThrowsIfSendingRetryRequestThrows,The following statement contains a magic number: var stream1 = new MockReadStream(100' throwAfter: 50);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,ThrowsIfSendingRetryRequestThrows,The following statement contains a magic number: var stream1 = new MockReadStream(100' throwAfter: 50);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,ThrowsIfSendingRetryRequestThrows,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(new MockResponse(200) { ContentStream = stream1 });
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,ThrowsIfSendingRetryRequestThrows,The following statement contains a magic number: Stream reliableStream = await CreateAsync(                  offset =>                  {                      if (offset == 0)                      {                          return SendTestRequest(pipeline' offset);                      }                      else                      {                          throw new InvalidOperationException();                      }                  }'                  async offset =>                  {                      if (offset == 0)                      {                          return await SendTestRequestAsync(pipeline' offset);                      }                      else                      {                          throw new InvalidOperationException();                      }                  }' new ResponseClassifier()' maxRetries: 5);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,ThrowsIfSendingRetryRequestThrows,The following statement contains a magic number: await ReadAsync(reliableStream' _buffer' 0' 25);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,ThrowsIfSendingRetryRequestThrows,The following statement contains a magic number: await ReadAsync(reliableStream' _buffer' 25' 25);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,ThrowsIfSendingRetryRequestThrows,The following statement contains a magic number: await ReadAsync(reliableStream' _buffer' 25' 25);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,ThrowsIfSendingRetryRequestThrows,The following statement contains a magic number: AssertReads(_buffer' 50);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,ThrowsIfSendingRetryRequestThrows,The following statement contains a magic number: Assert.ThrowsAsync<InvalidOperationException>(() => ReadAsync(reliableStream' _buffer' 50' 50));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,ThrowsIfSendingRetryRequestThrows,The following statement contains a magic number: Assert.ThrowsAsync<InvalidOperationException>(() => ReadAsync(reliableStream' _buffer' 50' 50));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 2) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 3) }                  );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 2) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 3) }                  );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 2) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 3) }                  );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 2) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 3) }                  );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 2) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 3) }                  );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 2) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 3) }                  );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 2) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 3) }                  );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 2) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 3) }                  );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 2) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 3) }                  );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: MockTransport mockTransport = CreateMockTransport(                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 1) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 2) }'                  new MockResponse(200) { ContentStream = new MockReadStream(100' throwAfter: 1' offset: 3) }                  );
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: Stream reliableStream = await CreateAsync(offset =>                  {                      if (offset == 0)                      {                          return SendTestRequest(pipeline' offset);                      }                        throw new InvalidOperationException();                  }'                  async offset =>                  {                      if (offset == 0)                      {                          return await SendTestRequestAsync(pipeline' offset);                      }                        throw new InvalidOperationException();                  }' new ResponseClassifier()' maxRetries: 3);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: AggregateException aggregateException = Assert.ThrowsAsync<AggregateException>(() => ReadAsync(reliableStream' _buffer' 0' 4));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: Assert.AreEqual(4' aggregateException.InnerExceptions.Count);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: Assert.AreEqual("Failed at 2"' aggregateException.InnerExceptions[2].Message);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: Assert.AreEqual("Failed at 3"' aggregateException.InnerExceptions[3].Message);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,RetriesMaxCountAndThrowsAggregateException,The following statement contains a magic number: Assert.AreEqual(4' mockTransport.Requests.Count);
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,ThrowsIfInitialRequestThrow,The following statement contains a magic number: Assert.Throws<InvalidOperationException>(() => RetriableStream.Create(                  _ => throw new InvalidOperationException()'                  _ => default'                  new ResponseClassifier()'                  5));
Magic Number,Azure.Core.Tests,RetriableStreamTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetriableStreamTests.cs,ThrowsIfInitialRequestThrowAsync,The following statement contains a magic number: Assert.ThrowsAsync<InvalidOperationException>(() => RetriableStream.CreateAsync(                  _ => null'                  _ => throw new InvalidOperationException()'                  new ResponseClassifier()'                  5));
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,DoesNotExceedRetryCount,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 });
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,DoesNotExceedRetryCount,The following statement contains a magic number: (HttpPipelinePolicy policy' AsyncGate<TimeSpan' object> gate) = CreateRetryPolicy(maxRetries: 3);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,DoesNotExceedRetryCount,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(500));
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,DoesNotExceedRetryCount,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(500));
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,DoesNotExceedRetryCount,The following statement contains a magic number: i < 3
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,DoesNotExceedRetryCount,The following statement contains a magic number: Assert.AreEqual(500' response.Status);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,OnlyRetriesRetriebleCodes,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 });
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,OnlyRetriesRetriebleCodes,The following statement contains a magic number: (HttpPipelinePolicy policy' AsyncGate<TimeSpan' object> gate) = CreateRetryPolicy(maxRetries: 3);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,OnlyRetriesRetriebleCodes,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(500));
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,OnlyRetriesRetriebleCodes,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(501));
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,OnlyRetriesRetriebleCodes,The following statement contains a magic number: Assert.AreEqual(501' response.Status);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetriesOnException,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 }' exceptionFilter: ex => ex is InvalidOperationException);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetriesOnException,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(200));
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetriesOnException,The following statement contains a magic number: Assert.AreEqual(200' response.Status);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetriesOnlyFilteredException,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 }' exceptionFilter: ex => ex is InvalidOperationException);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetriesOnlyFilteredExceptionFirst,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 }' exceptionFilter: ex => ex is InvalidOperationException);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RethrowsAggregateExceptionAfterMaxRetryCount,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 }' exceptionFilter: ex => ex is InvalidOperationException);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RethrowsAggregateExceptionAfterMaxRetryCount,The following statement contains a magic number: (HttpPipelinePolicy policy' AsyncGate<TimeSpan' object> gate) = CreateRetryPolicy(maxRetries: 3);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RethrowsAggregateExceptionAfterMaxRetryCount,The following statement contains a magic number: i < 3
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterHeaderWithInt,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 });
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterHeaderWithInt,The following statement contains a magic number: (HttpPipelinePolicy policy' AsyncGate<TimeSpan' object> gate) = CreateRetryPolicy(maxRetries: 3);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterHeaderWithInt,The following statement contains a magic number: MockResponse mockResponse = new MockResponse(500);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterHeaderWithInt,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(501));
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterHeaderWithInt,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(25)' retryDelay);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterHeaderWithInt,The following statement contains a magic number: Assert.AreEqual(501' response.Status);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterHeaderWithDate,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 });
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterHeaderWithDate,The following statement contains a magic number: (HttpPipelinePolicy policy' AsyncGate<TimeSpan' object> gate) = CreateRetryPolicy(maxRetries: 3);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterHeaderWithDate,The following statement contains a magic number: MockResponse mockResponse = new MockResponse(500);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterHeaderWithDate,The following statement contains a magic number: mockResponse.AddHeader(new HttpHeader("Retry-After"' DateTimeOffset.Now.AddHours(5).ToString("R")));
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterHeaderWithDate,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(501));
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterHeaderWithDate,The following statement contains a magic number: Assert.Less(TimeSpan.FromHours(4)' retryDelay);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterHeaderWithDate,The following statement contains a magic number: Assert.AreEqual(501' response.Status);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetryAfterWithInvalidValueIsIgnored,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 });
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetryAfterWithInvalidValueIsIgnored,The following statement contains a magic number: (HttpPipelinePolicy policy' AsyncGate<TimeSpan' object> gate) = CreateRetryPolicy(maxRetries: 3);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetryAfterWithInvalidValueIsIgnored,The following statement contains a magic number: MockResponse mockResponse = new MockResponse(500);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetryAfterWithInvalidValueIsIgnored,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(501));
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetryAfterWithInvalidValueIsIgnored,The following statement contains a magic number: Assert.AreEqual(501' response.Status);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterMSHeader,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 });
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterMSHeader,The following statement contains a magic number: (HttpPipelinePolicy policy' AsyncGate<TimeSpan' object> gate) = CreateRetryPolicy(maxRetries: 3);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterMSHeader,The following statement contains a magic number: MockResponse mockResponse = new MockResponse(500);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterMSHeader,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(501));
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterMSHeader,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromMilliseconds(120000)' retryDelay);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RespectsRetryAfterMSHeader,The following statement contains a magic number: Assert.AreEqual(501' response.Status);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,MsHeadersArePreferredOverRetryAfter,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 });
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,MsHeadersArePreferredOverRetryAfter,The following statement contains a magic number: (HttpPipelinePolicy policy' AsyncGate<TimeSpan' object> gate) = CreateRetryPolicy(maxRetries: 3);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,MsHeadersArePreferredOverRetryAfter,The following statement contains a magic number: MockResponse mockResponse = new MockResponse(500);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,MsHeadersArePreferredOverRetryAfter,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(501));
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,MsHeadersArePreferredOverRetryAfter,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromMilliseconds(120000)' retryDelay);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,MsHeadersArePreferredOverRetryAfter,The following statement contains a magic number: Assert.AreEqual(501' response.Status);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetryingEmitsEventSourceEvent,The following statement contains a magic number: var responseClassifier = new MockResponseClassifier(retriableCodes: new[] { 500 });
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetryingEmitsEventSourceEvent,The following statement contains a magic number: (HttpPipelinePolicy policy' AsyncGate<TimeSpan' object> gate) = CreateRetryPolicy(maxRetries: 2);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetryingEmitsEventSourceEvent,The following statement contains a magic number: MockRequest request = await mockTransport.RequestGate.Cycle(new MockResponse(500));
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetryingEmitsEventSourceEvent,The following statement contains a magic number: await mockTransport.RequestGate.Cycle(new MockResponse(500));
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetryingEmitsEventSourceEvent,The following statement contains a magic number: i < 2
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,RetryingEmitsEventSourceEvent,The following statement contains a magic number: AssertRetryEvent(listener' request' 2);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,AssertRetryEvent,The following statement contains a magic number: EventWrittenEventArgs e = listener.SingleEventById(10' args => args.GetProperty<int>("retryNumber") == retryNumber);
Magic Number,Azure.Core.Tests,RetryPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\RetryPolicyTestBase.cs,CreateRetryPolicy,The following statement contains a magic number: var policy = new RetryPolicyMock(_mode' maxRetries' TimeSpan.FromSeconds(3)' maxDelay: TimeSpan.MaxValue);
Magic Number,Azure.Core.Tests,TelemetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TelemetryPolicyTests.cs,IncludesComponentNameAndVersion,The following statement contains a magic number: var transport = new MockTransport(new MockResponse(200));
Magic Number,Azure.Core.Tests,TelemetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TelemetryPolicyTests.cs,ApplicationIdIsIncluded,The following statement contains a magic number: var transport = new MockTransport(new MockResponse(200));
Magic Number,System.Net.Http.Tests,HttpEnvironmentProxyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpEnvironmentProxyTest.cs,HttpProxy_EnvironmentProxy_Loaded,The following statement contains a magic number: Assert.True(u != null && u.Host == "1.1.1.2" && u.Port == 3001);
Magic Number,System.Net.Http.Tests,HttpEnvironmentProxyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpEnvironmentProxyTest.cs,HttpProxy_EnvironmentProxy_Loaded,The following statement contains a magic number: Assert.True(u != null && u.Host == "1.1.1.1" && u.Port == 3000);
Magic Number,System.Net.Http.Tests,HttpEnvironmentProxyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpEnvironmentProxyTest.cs,HttpProxy_EnvironmentProxy_Loaded,The following statement contains a magic number: Assert.True(u != null && u.Host == "1.1.1.3" && u.Port == 3003);
Magic Number,System.Net.Http.Tests,HttpEnvironmentProxyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpEnvironmentProxyTest.cs,HttpProxy_EnvironmentProxy_Loaded,The following statement contains a magic number: Assert.True(u != null && u.Host == "1.1.1.1" && u.Port == 3000);
Magic Number,System.Net.Http.Tests,HttpEnvironmentProxyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpEnvironmentProxyTest.cs,HttpProxy_EnvironmentProxy_Loaded,The following statement contains a magic number: Assert.True(u != null && u.Host == "1.1.1.1" && u.Port == 3000);
Magic Number,System.Net.Http.Tests,HttpEnvironmentProxyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpEnvironmentProxyTest.cs,HttpProxy_EnvironmentProxy_Loaded,The following statement contains a magic number: Assert.True(u != null && u.Host == "1.1.1.3" && u.Port == 3003);
Magic Number,System.Net.Http.Tests,HttpEnvironmentProxyTest,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\HttpEnvironmentProxyTest.cs,HttpProxy_EnvironmentProxy_Loaded,The following statement contains a magic number: Assert.True(u != null && u.Host == "1.1.1.5" && u.Port == 3005);
Magic Number,Azure.Core.Samples,ConfigurationSamples,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\samples\ConfigurationSamples.cs,ConfigurationHelloWorld,The following statement contains a magic number: SecretClientOptions options = new SecretClientOptions()              {                  Retry =                  {                      Delay = TimeSpan.FromSeconds(2)'                      MaxRetries = 10'                      Mode = RetryMode.Fixed                  }'                  Diagnostics =                  {                      IsLoggingContentEnabled = true'                      ApplicationId = "myApplicationId"                  }              };
Magic Number,Azure.Core.Samples,ConfigurationSamples,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\samples\ConfigurationSamples.cs,ConfigurationHelloWorld,The following statement contains a magic number: SecretClientOptions options = new SecretClientOptions()              {                  Retry =                  {                      Delay = TimeSpan.FromSeconds(2)'                      MaxRetries = 10'                      Mode = RetryMode.Fixed                  }'                  Diagnostics =                  {                      IsLoggingContentEnabled = true'                      ApplicationId = "myApplicationId"                  }              };
Magic Number,Azure.Core.Samples,ConfigurationSamples,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\samples\ConfigurationSamples.cs,RetryOptions,The following statement contains a magic number: SecretClientOptions options = new SecretClientOptions()              {                  Retry =                  {                      Delay = TimeSpan.FromSeconds(2)'                      MaxRetries = 10'                      Mode = RetryMode.Fixed                  }              };
Magic Number,Azure.Core.Samples,ConfigurationSamples,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\samples\ConfigurationSamples.cs,RetryOptions,The following statement contains a magic number: SecretClientOptions options = new SecretClientOptions()              {                  Retry =                  {                      Delay = TimeSpan.FromSeconds(2)'                      MaxRetries = 10'                      Mode = RetryMode.Fixed                  }              };
Magic Number,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The following statement contains a magic number: var expectedEventPrefix = declaringType.FullName + "." + methodName.Substring(0' methodName.Length - 5);
Magic Number,Azure.Core.Testing,RandomExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RandomExtensions.cs,NewGuid,The following statement contains a magic number: var bytes = new byte[16];
Magic Number,Azure.Core.Testing,TestRetryHelper,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRetryHelper.cs,RetryAsync,The following statement contains a magic number: delay = TimeSpan.FromSeconds(5);
Missing Default,Azure.Core.Testing,TestRecording,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRecording.cs,TestRecording,The following switch statement is missing a default case: switch (Mode)              {                  case RecordedTestMode.Record:                      _session = new RecordSession();                      if (File.Exists(_sessionFile))                      {                          try                          {                              _previousSession = Load();                          }                          catch (Exception)                          {                              // ignore                          }                      }                      break;                  case RecordedTestMode.Playback:                      _session = Load();                      break;              }
