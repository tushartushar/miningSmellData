Implementation smell,Namespace,Class,File,Method,Description
Long Method,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,Main,The method has 158 lines of code.
Long Statement,Sample.Microsoft.HelloKeyVault,ConsoleTracingInterceptor,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\ConsoleTracingInterceptor.cs,EnterMethod,The length of the statement  "            Write("{0} - [{1}]: Entered method {2} with arguments: {3}"' invocationId' instance' method' parameters.AsFormattedString()); " is 125.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,UpdateKey,The length of the statement  "            var updatedKey = Task.Run(() => keyVaultClient.UpdateKeyAsync(vaultAddress' keyName' attributes: keyAttributes)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 160.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ImportKey,The length of the statement  "            var importedKey = Task.Run(() => keyVaultClient.ImportKeyAsync(vaultAddress' name' keyBundle' isHsm)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 149.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,GetKey,The length of the statement  "                    retrievedKey = Task.Run(() => keyVaultClient.GetKeyAsync(vaultAddress' keyName' keyVersion)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 140.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,GetKey,The length of the statement  "                    retrievedKey = Task.Run(() => keyVaultClient.GetKeyAsync(vaultAddress' keyName)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 128.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ListKeyVersions,The length of the statement  "            var results = Task.Run(() => keyVaultClient.GetKeyVersionsAsync(vaultAddress' keyName' maxResults)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 147.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ListKeyVersions,The length of the statement  "                results = Task.Run(() => keyVaultClient.GetKeyVersionsNextAsync(results.NextPageLink)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 134.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,CreateSecret,The length of the statement  "                    keyVaultClient.SetSecretAsync(inputValidator.GetVaultAddress()' name' secretValue' tags' contentType' inputValidator.GetSecretAttributes())) " is 140.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,GetSecret,The length of the statement  "                secret = Task.Run(() => keyVaultClient.GetSecretAsync(vaultAddress' secretName' secretVersion)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 143.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ListSecrets,The length of the statement  "            var results = Task.Run(() => keyVaultClient.GetSecretsAsync(vaultAddress' maxResults)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 134.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ListSecrets,The length of the statement  "                results = Task.Run(() => keyVaultClient.GetSecretsNextAsync(results.NextPageLink)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 130.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,DeleteSecret,The length of the statement  "            var secret = Task.Run(() => keyVaultClient.DeleteSecretAsync(vaultAddress' secretName)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 135.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,BackupRestoreKey,The length of the statement  "            var backupKeyResult = Task.Run(() => keyVaultClient.BackupKeyAsync(vaultAddress' keyName)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 138.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,BackupRestoreKey,The length of the statement  "                "The backup key value contains {0} bytes.\nTo restore it into a key vault this value should be provided!"' backupKeyResult.Value.Length)); " is 138.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,BackupRestoreKey,The length of the statement  "            var restoredKey = Task.Run(() => keyVaultClient.RestoreKeyAsync(newVaultAddress' backupKeyResult.Value)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 152.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,DeleteKey,The length of the statement  "            var keyBundle = Task.Run(() => keyVaultClient.DeleteKeyAsync(vaultAddress' keyName)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 132.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,WrapUnwrap,The length of the statement  "                wrappedKey = Task.Run(() => keyVaultClient.WrapKeyAsync(vaultAddress' keyName' keyVersion' algorithm' symmetricKey)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 164.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,WrapUnwrap,The length of the statement  "                wrappedKey = Task.Run(() => keyVaultClient.WrapKeyAsync(keyId' algorithm' symmetricKey)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 136.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,WrapUnwrap,The length of the statement  "            Console.Out.WriteLine(string.Format("The symmetric key is wrapped using key id {0} and algorithm {1}"' wrappedKey.Kid' algorithm)); " is 131.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,WrapUnwrap,The length of the statement  "            var unwrappedKey = Task.Run(() => keyVaultClient.UnwrapKeyAsync(wrappedKey.Kid' algorithm' wrappedKey.Result)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 158.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,EncryptDecrypt,The length of the statement  "            Console.Out.WriteLine(string.Format("The text is encrypted using key id {0} and algorithm {1}"' operationResult.Kid' algorithm)); " is 129.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,EncryptDecrypt,The length of the statement  "            var decryptedText = Task.Run(() => keyVaultClient.DecryptAsync(operationResult.Kid' algorithm' operationResult.Result)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 167.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,_encrypt,The length of the statement  "                operationResult = Task.Run(() => keyVaultClient.EncryptAsync(vaultAddress' keyName' keyVersion' algorithm' plainText)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 166.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,_encrypt,The length of the statement  "                operationResult = Task.Run(() => keyVaultClient.EncryptAsync(keyId' algorithm' plainText)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 138.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,Encrypt,The length of the statement  "            Console.Out.WriteLine(string.Format("The text is encrypted using key id {0} and algorithm {1}"' operationResult.Kid' algorithm)); " is 129.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,Encrypt,The length of the statement  "            Console.Out.WriteLine(string.Format("Encrypted text' base-64 encoded: {0}"' Convert.ToBase64String(operationResult.Result))); " is 125.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,Decrypt,The length of the statement  "            operationResult = Task.Run(() => keyVaultClient.DecryptAsync(localKey.KeyIdentifier.ToString()' algorithm' cipherText)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 167.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,SignVerify,The length of the statement  "                signature = Task.Run(() => keyVaultClient.SignAsync(vaultAddress' keyName' keyVersion' algorithm' digest)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 154.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,SignVerify,The length of the statement  "                signature = Task.Run(() => keyVaultClient.SignAsync(keyId' algorithm' digest)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 126.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,SignVerify,The length of the statement  "            Console.Out.WriteLine(string.Format("The signature is created using key id {0} and algorithm {1} "' signature.Kid' algorithm)); " is 127.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,SignVerify,The length of the statement  "            bool isVerified = Task.Run(() => keyVaultClient.VerifyAsync(signature.Kid' algorithm' digest' signature.Result)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 160.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,CreateCertificate,The length of the statement  "                    var certBundle = Task.Run(() => keyVaultClient.GetCertificateAsync(pendingCertificateResponse.Target)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 150.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ImportCertificate,The length of the statement  "                var x509Bytes = x509Collection.Cast<X509Certificate2>().Single(s => s.HasPrivateKey).Export(X509ContentType.Pfx' pfxPassword); " is 126.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ImportCertificate,The length of the statement  "                base64X509 = "MIIJOwIBAzCCCPcGCSqGSIb3DQEHAaCCCOgEggjkMIII4DCCBgkGCSqGSIb3DQEHAaCCBfoEggX2MIIF8jCCBe4GCyqGSIb3DQEMCgECoIIE / jCCBPowHAYKKoZIhvcNAQwBAzAOBAj15YH9pOE58AICB9AEggTYLrI + SAru2dBZRQRlJY7XQ3LeLkah2FcRR3dATDshZ2h0IA2oBrkQIdsLyAAWZ32qYR1qkWxLHn9AqXgu27AEbOk35 + pITZaiy63YYBkkpR + pDdngZt19Z0PWrGwHEq5z6BHS2GLyyN8SSOCbdzCz7blj3 + 7IZYoMj4WOPgOm / tQ6U44SFWek46QwN2zeA4i97v7ftNNns27ms52jqfhOvTA9c / wyfZKAY4aKJfYYUmycKjnnRl012ldS2lOkASFt + lu4QCa72IY6ePtRudPCvmzRv2pkLYS6z3cI7omT8nHP3DymNOqLbFqr5O2M1ZYaLC63Q3xt3eVvbcPh3N08D1hHkhz / KDTvkRAQpvrW8ISKmgDdmzN55Pe55xHfSWGB7gPw8sZea57IxFzWHTK2yvTslooWoosmGxanYY2IG / no3EbPOWDKjPZ4ilYJe5JJ2immlxPz + 2e2EOCKpDI + 7fzQcRz3PTd3BK + budZ8aXX8aW / lOgKS8WmxZoKnOJBNWeTNWQFugmktXfdPHAdxMhjUXqeGQd8wTvZ4EzQNNafovwkI7IV / ZYoa++RGofVR3ZbRSiBNF6TDj / qXFt0wN / CQnsGAmQAGNiN + D4mY7i25dtTu / Jc7OxLdhAUFpHyJpyrYWLfvOiS5WYBeEDHkiPUa / 8eZSPA3MXWZR1RiuDvuNqMjct1SSwdXADTtF68l / US1ksU657 + XSC + 6ly1A / upz + X71 + C4Ho6W0751j5ZMT6xKjGh5pee7MVuduxIzXjWIy3YSd0fIT3U0A5NLEvJ9rfkx6JiHjRLx6V1tqsrtT6BsGtmCQR1UCJPLqsKVDvAINx3cPA / CGqr5OX2BGZlAihGmN6n7gv8w4O0k0LPTAe5YefgXN3m9pE867N31GtHVZaJ / UVgDNYS2jused4rw76ZWN41akx2QN0JSeMJqHXqVz6AKfz8ICS / dFnEGyBNpXiMRxrY / QPKi / wONwqsbDxRW7vZRVKs78pBkE0ksaShlZk5GkeayDWC / 7Hi / NqUFtIloK9XB3paLxo1DGu5qqaF34jZdktzkXp0uZqpp + FfKZaiovMjt8F7yHCPk + LYpRsU2Cyc9DVoDA6rIgf + uEP4jppgehsxyT0lJHax2t869R2jYdsXwYUXjgwHIV0voj7bJYPGFlFjXOp6ZW86scsHM5xfsGQoK2Fp838VT34SHE1ZXU / puM7rviREHYW72pfpgGZUILQMohuTPnd8tFtAkbrmjLDo + k9xx7HUvgoFTiNNWuq / cRjr70FKNguMMTIrid + HwfmbRoaxENWdLcOTNeascER2a + 37UQolKD5ksrPJG6RdNA7O2pzp3micDYRs / +s28cCIxO//J/d4nsgHp6RTuCu4+Jm9k0YTw2Xg75b2cWKrxGnDUgyIlvNPaZTB5QbMid4x44/lE0LLi9kcPQhRgrK07OnnrMgZvVGjt1CLGhKUv7KFc3xV1r1rwKkosxnoG99oCoTQtregcX5rIMjHgkc1IdflGJkZzaWMkYVFOJ4Weynz008i4ddkske5vabZs37Lb8iggUYNBYZyGzalruBgnQyK4fz38Fae4nWYjyildVfgyo/fCePR2ovOfphx9OQJi+M9BoFmPrAg+8ARDZ+R+5yzYuEc9ZoVX7nkp7LTGB3DANBgkrBgEEAYI3EQIxADATBgkqhkiG9w0BCRUxBgQEAQAAADBXBgkqhkiG9w0BCRQxSh5IAGEAOAAwAGQAZgBmADgANgAtAGUAOQA2AGUALQA0ADIAMgA0AC0AYQBhADEAMQAtAGIAZAAxADkANABkADUAYQA2AGIANwA3MF0GCSsGAQQBgjcRATFQHk4ATQBpAGMAcgBvAHMAbwBmAHQAIABTAHQAcgBvAG4AZwAgAEMAcgB5AHAAdABvAGcAcgBhAHAAaABpAGMAIABQAHIAbwB2AGkAZABlAHIwggLPBgkqhkiG9w0BBwagggLAMIICvAIBADCCArUGCSqGSIb3DQEHATAcBgoqhkiG9w0BDAEGMA4ECNX+VL2MxzzWAgIH0ICCAojmRBO+CPfVNUO0s+BVuwhOzikAGNBmQHNChmJ/pyzPbMUbx7tO63eIVSc67iERda2WCEmVwPigaVQkPaumsfp8+L6iV/BMf5RKlyRXcwh0vUdu2Qa7qadD+gFQ2kngf4Dk6vYo2/2HxayuIf6jpwe8vql4ca3ZtWXfuRix2fwgltM0bMz1g59d7x/glTfNqxNlsty0A/rWrPJjNbOPRU2XykLuc3AtlTtYsQ32Zsmu67A7UNBw6tVtkEXlFDqhavEhUEO3dvYqMY+QLxzpZhA0q44ZZ9/ex0X6QAFNK5wuWxCbupHWsgxRwKftrxyszMHsAvNoNcTlqcctee+ecNwTJQa1/MDbnhO6/qHA7cfG1qYDq8Th635vGNMW1w3sVS7l0uEvdayAsBHWTcOC2tlMa5bfHrhY8OEIqj5bN5H9RdFy8G/W239tjDu1OYjBDydiBqzBn8HG1DSj1Pjc0kd/82d4ZU0308KFTC3yGcRad0GnEH0Oi3iEJ9HbriUbfVMbXNHOF+MktWiDVqzndGMKmuJSdfTBKvGFvejAWVO5E4mgLvoaMmbchc3BO7sLeraHnJN5hvMBaLcQI38N86mUfTR8AP6AJ9c2k514KaDLclm4z6J8dMz60nUeo5D3YD09G6BavFHxSvJ8MF0Lu5zOFzEePDRFm9mH8W0N/sFlIaYfD/GWU/w44mQucjaBk95YtqOGRIj58tGDWr8iUdHwaYKGqU24zGeRae9DhFXPzZshV1ZGsBQFRaoYkyLAwdJWIXTi+c37YaC8FRSEnnNmS79Dou1Kc3BvK4EYKAD2KxjtUebrV174gD0Q+9YuJ0GXOTspBvCFd5VT2Rw5zDNrA/J3F5fMCk4wOzAfMAcGBSsOAwIaBBSxgh2xyF+88V4vAffBmZXv8Txt4AQU4O/NX4MjxSodbE7ApNAMIvrtREwCAgfQ"; " is 3256.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ExportCertificate,The length of the statement  "                Task.Run(() => keyVaultClient.GetSecretAsync(certificateBundle.SecretIdentifier.Identifier)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 140.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ListCertificates,The length of the statement  "            var results = Task.Run(() => keyVaultClient.GetCertificatesAsync(vaultAddress' maxResults)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 139.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ListCertificates,The length of the statement  "                results = Task.Run(() => keyVaultClient.GetCertificatesNextAsync(results.NextPageLink)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 135.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ListCertificateVersions,The length of the statement  "            var results = Task.Run(() => keyVaultClient.GetCertificateVersionsAsync(vaultAddress' certificateName' maxResults)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 163.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ListCertificateVersions,The length of the statement  "                results = Task.Run(() => keyVaultClient.GetCertificateVersionsNextAsync(results.NextPageLink)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 142.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,DeleteCertificate,The length of the statement  "            var certificate = Task.Run(() => keyVaultClient.DeleteCertificateAsync(vaultAddress' certificateName)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 150.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,UpdateStorageAccount,The length of the statement  "                () => userKeyVaultClient.UpdateStorageAccountAsync(vaultAddress' storageAccountName' keyName' false' regenerationPeriod)) " is 121.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ListStorageAccounts,The length of the statement  "            var results = Task.Run(() => userKeyVaultClient.GetStorageAccountsAsync(vaultAddress' maxResults)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 146.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ListStorageAccounts,The length of the statement  "                results = Task.Run(() => userKeyVaultClient.GetStorageAccountsNextAsync(results.NextPageLink)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 142.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ListSasDefinitions,The length of the statement  "            var results = Task.Run(() => keyVaultClient.GetSasDefinitionsAsync(vaultAddress' storageAccountName' maxResults)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 161.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,ListSasDefinitions,The length of the statement  "                results = Task.Run(() => userKeyVaultClient.GetSasDefinitionsNextAsync(results.NextPageLink)).ConfigureAwait(false).GetAwaiter().GetResult(); " is 141.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,PrintoutSecret,The length of the statement  "            Console.Out.WriteLine("Secret attributes: \n\tIs the key enabled: {0}\n\tExpiry date: {1}\n\tEnable date: {2}\n\tContent type: {3}"' " is 132.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,PrintoutCertificate,The length of the statement  "            Console.Out.WriteLine("Certificate attributes: \n\tIs enabled: {0}\n\tExpiry date: {1}\n\tEnable date: {2}\n\tThumbprint: {3}"' " is 127.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,PrintoutStorageAccount,The length of the statement  "            Console.Out.WriteLine("Storage Account regeneration period: {0} days"' XmlConvert.ToTimeSpan(storageBundle.RegenerationPeriod).TotalDays); " is 138.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,PrintoutStorageSasDefinition,The length of the statement  "            Console.Out.WriteLine("Storage Sas Definition parameters: {{ {0} }}"' string.Join("' "' sasDefinitionBundle.Parameters.Select(kvp => kvp.Key + ":" + kvp.Value.ToString()))); " is 173.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,PrintoutStorageSasDefinition,The length of the statement  "            Console.Out.WriteLine("Storage Sas Definition attributes: \n\tIs enabled: {0}"' sasDefinitionBundle.Attributes.Enabled); " is 120.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,PrintoutCertificateOperation,The length of the statement  "            Console.Out.WriteLine("Certificate Opeation: \n\tStatus: {0}\n\tStatus Detail: {1}\n\tTarget: {2}\n\tIssuer reference name: {3}"' " is 129.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,PrintoutCertificateOperation,The length of the statement  "                certificateOperation.Status' certificateOperation.StatusDetails' certificateOperation.Target' certificateOperation.IssuerParameters.Name); " is 138.
Long Statement,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,FindCertificateByThumbprint,The length of the statement  "                    X509Certificate2Collection col = store.Certificates.Find(X509FindType.FindByThumbprint' certificateThumbprint' false); // Don't validate certs' since the test root isn't installed. " is 180.
Magic Number,Sample.Microsoft.HelloKeyVault,InputValidator,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\InputValidator.cs,GetDigestHash,The following statement contains a magic number: var digest = RandomHash<SHA256CryptoServiceProvider>( 32 );
Magic Number,Sample.Microsoft.HelloKeyVault,InputValidator,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\InputValidator.cs,GetStorageAccountName,The following statement contains a magic number: if (name == string.Empty)              {                  if (mandatory == true)                  {                      throw new Exception(tag + " argument is missing");                  }                  if (allowDefault)                  {                      name = "storage" + new Random().Next(0' 9999);                      Console.Out.WriteLine(tag + " is not provided. Using default value: " + name);                  }              }
Magic Number,Sample.Microsoft.HelloKeyVault,InputValidator,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\InputValidator.cs,GetSasDefinitionName,The following statement contains a magic number: if (name == string.Empty)              {                  if (mandatory == true)                  {                      throw new Exception(tag + " argument is missing");                  }                  if (allowDefault)                  {                      name = "storagesas" + new Random().Next(0' 9999);                      Console.Out.WriteLine(tag + " is not provided. Using default value: " + name);                  }              }
Magic Number,Sample.Microsoft.HelloKeyVault,InputValidator,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\InputValidator.cs,GetKeyBundle,The following statement contains a magic number: var defaultKeyBundle = new KeyBundle              {                  Key = new JsonWebKey()                  {                      Kty = GetKeyType()'                  }'                  Attributes = new KeyAttributes()                  {                      Enabled = true'                      Expires = DateTime.UtcNow.AddDays(2)'                      NotBefore = DateTime.UtcNow.AddDays(-1)                  }              };
Magic Number,Sample.Microsoft.HelloKeyVault,InputValidator,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\InputValidator.cs,GetImportKeyBundle,The following statement contains a magic number: var rsa    = new RSACryptoServiceProvider( 2048 );
Magic Number,Sample.Microsoft.HelloKeyVault,InputValidator,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\InputValidator.cs,GetImportKeyBundle,The following statement contains a magic number: var importKeyBundle = new KeyBundle              {                  Key = webKey'                  Attributes = new KeyAttributes()                  {                      Enabled = true'                      Expires = DateTime.UtcNow.AddDays(2)'                      NotBefore = DateTime.UtcNow.AddDays(-1)                  }              };
Magic Number,Sample.Microsoft.HelloKeyVault,InputValidator,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\InputValidator.cs,GetUpdateKeyAttribute,The following statement contains a magic number: return new KeyAttributes()              {                  Enabled = true'                  Expires = DateTime.UtcNow.AddDays( 2 ) '                  NotBefore = DateTime.UtcNow.AddDays( -1 )               };
Magic Number,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,CreateCertificate,The following statement contains a magic number: var policy = new CertificatePolicy              {                  IssuerParameters = new IssuerParameters                  {                      Name = "Self"'                  }'                  KeyProperties = new KeyProperties                  {                      Exportable = true'                      KeySize = 2048'                      KeyType = "RSA"                  }'                  SecretProperties = new SecretProperties                  {                      ContentType = "application/x-pkcs12"                  }'                  X509CertificateProperties = new X509CertificateProperties                  {                      Subject = "CN=KEYVAULTDEMO"                  }              };
Magic Number,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,CreateCertificate,The following statement contains a magic number: while (pendingPollCount < 11)              {                  var pendingCertificateResponse = Task.Run(() =>                           keyVaultClient.GetCertificateOperationAsync(vaultAddress' pendingCertificate.CertificateOperationIdentifier.Name))                      .ConfigureAwait(false).GetAwaiter().GetResult();                    PrintoutCertificateOperation(pendingCertificateResponse);                    if (0 == string.Compare(pendingCertificateResponse.Status' "InProgress"' true))                  {                      Console.Out.WriteLine("Waiting on the long running operation to complete creating the certificate...");                      Thread.Sleep(TimeSpan.FromSeconds(5));                      pendingPollCount++;                      continue;                  }                    if (0 == string.Compare(pendingCertificateResponse.Status' "Completed"' true))                  {                      var certBundle = Task.Run(() => keyVaultClient.GetCertificateAsync(pendingCertificateResponse.Target)).ConfigureAwait(false).GetAwaiter().GetResult();                        Console.Out.WriteLine("Created certificate:---------------");                      PrintoutCertificate(certBundle);                        return certBundle;                  }                    throw new Exception(string.Format(                      "Polling on pending certificate returned an unexpected result. Error code = {0}' Error message = {1}"'                      pendingCertificate.Error.Code'                      pendingCertificate.Error.Message));              }
Magic Number,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,CreateCertificate,The following statement contains a magic number: while (pendingPollCount < 11)              {                  var pendingCertificateResponse = Task.Run(() =>                           keyVaultClient.GetCertificateOperationAsync(vaultAddress' pendingCertificate.CertificateOperationIdentifier.Name))                      .ConfigureAwait(false).GetAwaiter().GetResult();                    PrintoutCertificateOperation(pendingCertificateResponse);                    if (0 == string.Compare(pendingCertificateResponse.Status' "InProgress"' true))                  {                      Console.Out.WriteLine("Waiting on the long running operation to complete creating the certificate...");                      Thread.Sleep(TimeSpan.FromSeconds(5));                      pendingPollCount++;                      continue;                  }                    if (0 == string.Compare(pendingCertificateResponse.Status' "Completed"' true))                  {                      var certBundle = Task.Run(() => keyVaultClient.GetCertificateAsync(pendingCertificateResponse.Target)).ConfigureAwait(false).GetAwaiter().GetResult();                        Console.Out.WriteLine("Created certificate:---------------");                      PrintoutCertificate(certBundle);                        return certBundle;                  }                    throw new Exception(string.Format(                      "Polling on pending certificate returned an unexpected result. Error code = {0}' Error message = {1}"'                      pendingCertificate.Error.Code'                      pendingCertificate.Error.Message));              }
Magic Number,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,UpdateStorageAccount,The following statement contains a magic number: var regenerationPeriod = XmlConvert.ToString(TimeSpan.FromDays(5));
Missing Default,Sample.Microsoft.HelloKeyVault,Program,C:\repos\Azure_azure-sdk-for-net\src\SDKs\KeyVault\dataPlane\Microsoft.Azure.KeyVault.Samples\samples\HelloKeyVault\Program.cs,Main,The following switch statement is missing a default case: switch (operation)                      {                          case KeyOperationType.CREATE_KEY:                              keyBundle = CreateKey(keyBundle' out keyName);                              break;                            case KeyOperationType.IMPORT_KEY:                              keyBundle = ImportKey(out keyName);                              break;                            case KeyOperationType.GET_KEY:                              keyBundle = GetKey(keyBundle);                              break;                            case KeyOperationType.LIST_KEYVERSIONS:                              ListKeyVersions(keyName);                              break;                            case KeyOperationType.UPDATE_KEY:                              keyBundle = UpdateKey(keyName);                              break;                            case KeyOperationType.DELETE_KEY:                              DeleteKey(keyName);                              break;                            case KeyOperationType.BACKUP_RESTORE:                              keyBundle = BackupRestoreKey(keyName);                              break;                            case KeyOperationType.SIGN_VERIFY:                              SignVerify(keyBundle);                              break;                            case KeyOperationType.ENCRYPT_DECRYPT:                              EncryptDecrypt(keyBundle);                              break;                            case KeyOperationType.ENCRYPT:                              Encrypt(keyBundle);                              break;                            case KeyOperationType.DECRYPT:                              Decrypt(keyBundle);                              break;                            case KeyOperationType.WRAP_UNWRAP:                              WrapUnwrap(keyBundle);                              break;                            case KeyOperationType.CREATE_SECRET:                              secret = CreateSecret(out secretName);                              break;                            case KeyOperationType.GET_SECRET:                              secret = GetSecret(secret.Id);                              break;                            case KeyOperationType.LIST_SECRETS:                              ListSecrets();                              break;                            case KeyOperationType.DELETE_SECRET:                              secret = DeleteSecret(secretName);                              break;                            case KeyOperationType.CREATE_CERTIFICATE:                              certificateBundle = CreateCertificate(out certificateCreateName);                              break;                            case KeyOperationType.IMPORT_CERTIFICATE:                              certificateBundle = ImportCertificate(out certificateName);                              break;                            case KeyOperationType.EXPORT_CERTIFICATE:                              var x509Certificate = ExportCertificate(certificateBundle);                              break;                            case KeyOperationType.LIST_CERTIFICATEVERSIONS:                              ListCertificateVersions(certificateName);                              break;                            case KeyOperationType.LIST_CERTIFICATES:                              ListCertificates();                              break;                            case KeyOperationType.DELETE_CERTIFICATE:                              certificateBundle = DeleteCertificate(certificateName);                              certificateBundle = DeleteCertificate(certificateCreateName);                              break;                            case KeyOperationType.CREATE_STORAGE_ACCOUNT:                              CreateStorageAccount(out storageAccountName);                              break;                            case KeyOperationType.GET_STORAGE_ACCOUNT:                              GetStorageAccount(storageAccountName);                              break;                            case KeyOperationType.UPDATE_STORAGE_ACCOUNT:                              UpdateStorageAccount(storageAccountName);                              break;                            case KeyOperationType.LIST_STORAGE_ACCOUNT:                              ListStorageAccounts();                              break;                            case KeyOperationType.REGENERATE_STORAGE_ACCOUNT_KEY:                              RegenerateStorageAccountKey(storageAccountName);                              break;                            case KeyOperationType.CREATE_STORAGE_SAS_DEFINITION:                              CreateSasDefinition(storageAccountName' out sasDefinitionName);                              break;                            case KeyOperationType.GET_STORAGE_SAS_DEFINITION:                              GetSasDefinition(storageAccountName' sasDefinitionName);                              break;                            case KeyOperationType.UPDATE_STORAGE_SAS_DEFINITION:                              UpdateSasDefinition(storageAccountName' sasDefinitionName);                              break;                            case KeyOperationType.LIST_STORAGE_SAS_DEFINITION:                              ListSasDefinitions(storageAccountName);                              break;                            case KeyOperationType.DELETE_STORAGE_SAS_DEFINITION:                              DeleteSasDefinition(storageAccountName' sasDefinitionName);                              break;                            case KeyOperationType.DELETE_STORAGE_ACCOUNT:                              DeleteStorageAccount(storageAccountName);                              break;                      }
