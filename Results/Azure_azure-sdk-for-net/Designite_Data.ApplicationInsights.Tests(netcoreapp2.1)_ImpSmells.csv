Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Data.ApplicationInsights.Tests.Events,EventsTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Events\EventsTestBase.cs,GetEventType,Cyclomatic complexity of the method is 11
Complex Method,Data.ApplicationInsights.Tests.Events,EventsTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Events\EventsTestBase.cs,AssertEvent,Cyclomatic complexity of the method is 13
Long Parameter List,Data.ApplicationInsights.Tests.Metrics,MetricsTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Metrics\MetricsTestBase.cs,AssertMetrics,The method has 6 parameters. Parameters: metric' hasAverage' hasCount' hasMax' hasMin' hasSum
Long Identifier,Data.ApplicationInsights.Tests.ScenarioTests.Events,EventsExtensionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Events\EventsExtensionTests.cs,,The length of the parameter AvailabilityResultsParamsAsync is 30.
Long Identifier,Data.ApplicationInsights.Tests.ScenarioTests.Events,EventsExtensionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Events\EventsExtensionTests.cs,,The length of the parameter PerformanceCountersParamsAsync is 30.
Long Identifier,Data.ApplicationInsights.Tests.Metrics,MetricsTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Metrics\MetricsTestBase.cs,,The length of the parameter AggregatedIntervalSegmentMetricData is 35.
Long Identifier,Data.ApplicationInsights.Tests.Metrics,MetricsTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Metrics\MetricsTestBase.cs,,The length of the parameter AggregatedIntervalMultiSegmentMetricData is 40.
Long Statement,Data.ApplicationInsights.Tests,QueryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\QueryTests.cs,CanExecuteSimplePostQuery_DemoWorkspace,The length of the statement  "                await ExecuteAndVerify(async (client) => await client.Query.ExecuteWithHttpMessagesAsync(DefaultAppId' SimpleQuery)' ctx: ctx); " is 127.
Long Statement,Data.ApplicationInsights.Tests,QueryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\QueryTests.cs,CanExecutePostQueryWithTimespan_DemoWorkspace,The length of the statement  "                await ExecuteAndVerify(async (client) => await client.Query.ExecuteWithHttpMessagesAsync(DefaultAppId' SimpleQuery' PastHourTimespan)' ctx: ctx); " is 145.
Long Statement,Data.ApplicationInsights.Tests,QueryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\QueryTests.cs,GetsExceptionWithShortWait,The length of the statement  "                var longQuery = "union * | order by operation_Id | order by timestamp | order by operation_Id | order by timestamp | order by operation_Id | order by timestamp | order by operation_Id | order by timestamp"; " is 206.
Long Statement,Data.ApplicationInsights.Tests,QueryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\QueryTests.cs,GetsExceptionWithShortWait,The length of the statement  "                    var result = await client.Query.ExecuteWithHttpMessagesAsync(DefaultAppId' longQuery' customHeaders: new Dictionary<string' List<string>> { { "Cache-Control"' new List<string> { "no-cache" } } }); " is 196.
Long Statement,Data.ApplicationInsights.Tests.Metrics,IntervaledSegmentedMetricsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Metrics\IntervaledSegmentedMetricsTests.cs,GetIntervaledSegmentedMetrics,The length of the statement  "                var metric = await client.Metrics.GetIntervaledSegmentedMetricAsync(DefaultAppId' metricId' timespan' interval' aggregation' segments); " is 135.
Long Statement,Data.ApplicationInsights.Tests.Metrics,IntervaledSegmentedMetricsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Metrics\IntervaledSegmentedMetricsTests.cs,GetIntervaledSegmentedMetrics_AllAggregations,The length of the statement  "                var metric = await client.Metrics.GetIntervaledSegmentedMetricAsync(DefaultAppId' metricId' timespan' interval' aggregation' segments); " is 135.
Long Statement,Data.ApplicationInsights.Tests.Metrics,IntervaledSegmentedMetricsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Metrics\IntervaledSegmentedMetricsTests.cs,GetIntervaledMultiSegmentedMetrics,The length of the statement  "                var metric = await client.Metrics.GetIntervaledSegmentedMetricAsync(DefaultAppId' metricId' timespan' interval' aggregation' segments); " is 135.
Long Statement,Data.ApplicationInsights.Tests.Metrics,IntervaledSegmentedMetricsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Metrics\IntervaledSegmentedMetricsTests.cs,GetIntervaledMultiSegmentedMetrics_AllAggregations,The length of the statement  "                var metric = await client.Metrics.GetIntervaledSegmentedMetricAsync(DefaultAppId' metricId' timespan' interval' aggregation' segments); " is 135.
Complex Conditional,Data.ApplicationInsights.Tests.Events,EventsTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Events\EventsTestBase.cs,AssertEvent,The conditional expression  "expectedType != EventType.CustomEvents && expectedType != EventType.PageViews &&                  expectedType != EventType.BrowserTimings && expectedType != EventType.AvailabilityResults &&                  expectedType != EventType.Exceptions && expectedType != EventType.CustomMetrics &&                  expectedType != EventType.PerformanceCounters"  is complex.
Magic Number,Data.ApplicationInsights.Tests.ScenarioTests.Events,EventsExtensionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Events\EventsExtensionTests.cs,GetByType,The following statement contains a magic number: var top = 10;
Magic Number,Data.ApplicationInsights.Tests.Events,EventsTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Events\EventsTestBase.cs,VerifyTrace,The following statement contains a magic number: Assert.True(trace.Trace.SeverityLevel >= 0 && trace.Trace.SeverityLevel <= 5);
Magic Number,Data.ApplicationInsights.Tests.Events,TraceEventsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Events\TraceEventsTests.cs,GetTraceEvents,The following statement contains a magic number: var top = 10;
Magic Number,Data.ApplicationInsights.Tests.Metrics,IntervaledMetricsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Metrics\IntervaledMetricsTests.cs,GetIntervaledMetrics,The following statement contains a magic number: Assert.Equal(13' metric.Intervals.Count);
Magic Number,Data.ApplicationInsights.Tests.Metrics,IntervaledMetricsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Metrics\IntervaledMetricsTests.cs,GetIntervaledMetrics_AllAggregations,The following statement contains a magic number: Assert.Equal(13' metric.Intervals.Count);
Magic Number,Data.ApplicationInsights.Tests.Metrics,IntervaledSegmentedMetricsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Metrics\IntervaledSegmentedMetricsTests.cs,GetIntervaledSegmentedMetrics,The following statement contains a magic number: Assert.Equal(13' metric.Intervals.Count);
Magic Number,Data.ApplicationInsights.Tests.Metrics,IntervaledSegmentedMetricsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Metrics\IntervaledSegmentedMetricsTests.cs,GetIntervaledSegmentedMetrics_AllAggregations,The following statement contains a magic number: Assert.Equal(13' metric.Intervals.Count);
Magic Number,Data.ApplicationInsights.Tests.Metrics,IntervaledSegmentedMetricsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Metrics\IntervaledSegmentedMetricsTests.cs,GetIntervaledMultiSegmentedMetrics,The following statement contains a magic number: Assert.Equal(13' metric.Intervals.Count);
Magic Number,Data.ApplicationInsights.Tests.Metrics,IntervaledSegmentedMetricsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Metrics\IntervaledSegmentedMetricsTests.cs,GetIntervaledMultiSegmentedMetrics_AllAggregations,The following statement contains a magic number: Assert.Equal(13' metric.Intervals.Count);
Magic Number,Data.ApplicationInsights.Tests.Metrics,MetricTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\applicationinsights\Microsoft.Azure.ApplicationInsights.Query\tests\ScenarioTests\Metrics\MetricTests.cs,VerifyMetric,The following statement contains a magic number: Assert.Equal(200' actual.Status);
