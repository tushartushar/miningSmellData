Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Azure.Core.Testing,RecordEntry,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordEntry.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Azure.Core.Tests,ClientDiagnosticListener,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientDiagnosticListener.cs,OnNext,Cyclomatic complexity of the method is 9
Complex Method,Azure.Storage.Test.Shared,StorageRecordedTestSanitizer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageRecordedTestSanitizer.cs,SanitizeTextBody,Cyclomatic complexity of the method is 10
Complex Method,Azure.Storage,TestExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExtensions.cs,ToString,Cyclomatic complexity of the method is 14
Long Parameter List,Azure.Core.Testing,SyncAsyncPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\SyncAsyncPolicyTestBase.cs,SendRequestAsync,The method has 5 parameters. Parameters: transport' requestAction' policy' responseClassifier' bufferResponse
Long Parameter List,Azure.Core.Testing,SyncAsyncPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\SyncAsyncPolicyTestBase.cs,SendGetRequest,The method has 5 parameters. Parameters: transport' policy' responseClassifier' bufferResponse' uri
Long Parameter List,Azure.Storage.Blobs.Test,BlobSasBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobSasBuilderTests.cs,BuildBlobSasBuilder,The method has 5 parameters. Parameters: includeBlob' includeSnapshot' containerName' blobName' constants
Long Parameter List,Azure.Storage.Blobs.Test,BlobSasBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobSasBuilderTests.cs,BuildSignature,The method has 5 parameters. Parameters: includeBlob' includeSnapshot' containerName' blobName' constants
Long Parameter List,Azure.Storage.Blobs.Test,BlobSasBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobSasBuilderTests.cs,BuildIdentitySignature,The method has 5 parameters. Parameters: includeBlob' includeSnapshot' containerName' blobName' constants
Long Parameter List,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetSecondaryReadServiceClient,The method has 5 parameters. Parameters: config' numberOfReadFailuresToSimulate' testExceptionPolicy' simulate404' enabledRequestMethods
Long Parameter List,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetSecondaryReadBlobBaseClient,The method has 5 parameters. Parameters: config' numberOfReadFailuresToSimulate' testExceptionPolicy' simulate404' enabledRequestMethods
Long Parameter List,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetSecondaryReadBlobContainerClient,The method has 5 parameters. Parameters: config' numberOfReadFailuresToSimulate' testExceptionPolicy' simulate404' enabledRequestMethods
Long Parameter List,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetSecondaryStorageOptions,The method has 5 parameters. Parameters: config' testExceptionPolicy' numberOfReadFailuresToSimulate' simulate404' trackedRequestMethods
Long Parameter List,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetServiceClient_BlobServiceSas_Snapshot,The method has 5 parameters. Parameters: containerName' blobName' snapshot' sharedKeyCredentials' sasCredentials
Long Parameter List,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetTestContainerAsync,The method has 5 parameters. Parameters: service' containerName' metadata' publicAccessType' premium
Long Parameter List,Azure.Storage.Blobs.Tests,StagingSink,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,CommitAsync,The method has 6 parameters. Parameters: blocks' headers' metadata' accessConditions' accessTier' cancellationToken
Long Parameter List,Azure.Storage.Blobs.Tests,StagingSink,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,Commit,The method has 6 parameters. Parameters: blocks' headers' metadata' accessConditions' accessTier' cancellationToken
Long Parameter List,Azure.Storage.Blobs.Tests,StagingSink,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,StageAsync,The method has 6 parameters. Parameters: s' stream' hash' accessConditions' progress' cancellationToken
Long Parameter List,Azure.Storage.Blobs.Tests,StagingSink,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,Stage,The method has 6 parameters. Parameters: s' stream' hash' accessConditions' progress' cancellationToken
Long Identifier,Azure.Core.Testing,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientTestBase.cs,,The length of the parameter s_diagnosticScopeValidatingInterceptor is 38.
Long Identifier,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,PerformSecondaryStorageTest,The length of the parameter numberOfReadFailuresToSimulate is 30.
Long Identifier,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,PerformSecondaryStorageTest,The length of the parameter numberOfReadFailuresToSimulate is 30.
Long Identifier,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetSecondaryReadServiceClient,The length of the parameter numberOfReadFailuresToSimulate is 30.
Long Identifier,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetSecondaryReadBlobBaseClient,The length of the parameter numberOfReadFailuresToSimulate is 30.
Long Identifier,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetSecondaryReadBlobContainerClient,The length of the parameter numberOfReadFailuresToSimulate is 30.
Long Identifier,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetSecondaryStorageOptions,The length of the parameter numberOfReadFailuresToSimulate is 30.
Long Identifier,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetServiceClient_SecondaryAccount_ReadEnabledOnRetry,The length of the parameter numberOfReadFailuresToSimulate is 30.
Long Identifier,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetBlobBaseClient_SecondaryAccount_ReadEnabledOnRetry,The length of the parameter numberOfReadFailuresToSimulate is 30.
Long Identifier,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetBlobContainerClient_SecondaryAccount_ReadEnabledOnRetry,The length of the parameter numberOfReadFailuresToSimulate is 30.
Long Identifier,Azure.Storage.Test,TestConfigurations,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestConfigurations.cs,,The length of the parameter DefaultTestConfigPathEnvironmentVariable is 40.
Long Identifier,Azure.Storage.Test,TestExceptionPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExceptionPolicy.cs,TestExceptionPolicy,The length of the parameter numberOfReadFailuresToSimulate is 30.
Long Statement,Azure.Core.Testing,AsyncValidatingStream,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\AsyncValidatingStream.cs,Validate,The length of the statement  "                throw new InvalidOperationException("All stream calls were expected to be " + (_isAsync ? "async" : "sync") + " but were " + (isAsync ? "async" : "sync")); " is 155.
Long Statement,Azure.Core.Testing,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientTestBase.cs,InstrumentClient,The length of the statement  "                        ClientValidation<TClient>.ValidationException = new InvalidOperationException($"Client type contains public non-virtual async method {methodInfo.Name}"); " is 153.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                bool strict = !invocation.Method.GetCustomAttributes(true).Any(a => a.GetType().FullName == "Azure.Core.ForwardsClientCallsAttribute"); " is 135.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                        MethodInfo getResultMethod = getAwaiterMethod.ReturnType.GetMethod("GetResult"' BindingFlags.Instance | BindingFlags.Public); " is 125.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                            (string Key' object Value' DiagnosticListener Listener) e = diagnosticListener.Events.FirstOrDefault(e => e.Key == expectedEvent); " is 130.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                                throw new InvalidOperationException($"Expected diagnostic event not fired {expectedEvent} {Environment.NewLine}    fired events {string.Join("' "' diagnosticListener.Events)} {Environment.NewLine}    You may have forgotten to set your operationId to {expectedEvent} in {methodName} or applied the Azure.Core.ForwardsClientCallsAttribute to {methodName}."); " is 356.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                                throw new InvalidOperationException($"{e.Key} event was written into wrong DiagnosticSource {e.Listener.Name}' expected: {ns}"); " is 128.
Long Statement,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The length of the statement  "                    if (property.PropertyType == type && property.CanRead && !property.CanWrite && Includes(property.Name) && !Excludes(property.Name)) " is 131.
Long Statement,Azure.Core.Testing,RecordMatcher,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordMatcher.cs,IsEquivalentResponse,The length of the statement  "            IEnumerable<KeyValuePair<string' string[]>> entryHeaders = entry.ResponseHeaders.Where(h => !VolatileResponseHeaders.Contains(h.Key)); " is 134.
Long Statement,Azure.Core.Testing,RecordMatcher,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordMatcher.cs,IsEquivalentResponse,The length of the statement  "            IEnumerable<KeyValuePair<string' string[]>> otherEntryHeaders = otherEntry.ResponseHeaders.Where(h => !VolatileResponseHeaders.Contains(h.Key)); " is 144.
Long Statement,Azure.Core.Testing,RecordMatcher,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordMatcher.cs,CompareHeaderDictionaries,The length of the statement  "                        descriptionBuilder?.AppendLine($"    <{header.Key}> values differ' request <{JoinHeaderValues(header.Value)}>' record <{JoinHeaderValues(values)}>"); " is 149.
Long Statement,Azure.Core.Testing,RecordTransport,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordTransport.cs,CreateEntry,The length of the statement  "            if (!request.Headers.TryGetValue("Content-Length"' out _) && request.Content != null && request.Content.TryComputeLength(out long computedLength)) " is 146.
Long Statement,Azure.Core.Testing,UseSyncMethodsInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\UseSyncMethodsInterceptor.cs,Intercept,The length of the statement  "                throw new InvalidOperationException($"Unable to find a method with name {nonAsyncMethodName} and {string.Join<Type>("'"' parameterTypes)} parameters. " " is 151.
Long Statement,Azure.Core.Tests,ClientDiagnosticListener,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientDiagnosticListener.cs,AssertScopeStarted,The length of the statement  "                                throw new InvalidOperationException($"Attribute {expectedAttribute} not found' existing attributes: {string.Join("'"' producedDiagnosticScope.Activity.Tags)}"); " is 160.
Long Statement,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,Ctor_ConnectionString,The length of the statement  "            var connectionString = new StorageConnectionString(credentials' (blobEndpoint' blobSecondaryEndpoint)' (default' default)' (default' default)' (default' default)); " is 163.
Long Statement,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,Ctor_ConnectionString,The length of the statement  "            AppendBlobClient blob = InstrumentClient(new AppendBlobClient(connectionString.ToString(true)' containerName' blobName' GetOptions())); " is 135.
Long Statement,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,AppendBlockAsync_WithUnreliableConnection,The length of the statement  "            var progressHandler = new Progress<long>(progress => { progressList.Add(progress); /*logger.LogTrace("Progress: {progress}"' progress.BytesTransferred);*/ }); " is 158.
Long Statement,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,AppendBlockAsync_WithUnreliableConnection,The length of the statement  "            using (var stream = new FaultyStream(new MemoryStream(data)' 256 * Constants.KB' 1' new IOException("Simulated stream fault"))) " is 127.
Long Statement,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,Ctor_ConnectionString,The length of the statement  "            var connectionString = new StorageConnectionString(credentials' (blobEndpoint' blobSecondaryEndpoint)' (default' default)' (default' default)' (default' default)); " is 163.
Long Statement,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,Ctor_ConnectionString,The length of the statement  "            BlobBaseClient blob1 = InstrumentClient(new BlobBaseClient(connectionString.ToString(true)' containerName' blobName' GetOptions())); " is 132.
Long Statement,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,DownloadAsync_ReadFromSecondaryStorage,The length of the statement  "            await using DisposingContainer test = await GetTestContainerAsync(GetServiceClient_SecondaryAccount_ReadEnabledOnRetry(1' out TestExceptionPolicy testExceptionPolicy)); " is 168.
Long Statement,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,DownloadFileAsync_Parallel_LargeBlobs,The length of the statement  "                await ParallelDownloadFileAndVerify(size' 16 * Constants.MB' new StorageTransferOptions { MaximumConcurrency = maximumThreadCount }); " is 133.
Long Statement,Azure.Storage.Blobs.Test,BlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobClientTests.cs,Ctor_ConnectionString,The length of the statement  "            var connectionString = new StorageConnectionString(credentials' (blobEndpoint' blobSecondaryEndpoint)' (default' default)' (default' default)' (default' default)); " is 163.
Long Statement,Azure.Storage.Blobs.Test,BlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobClientTests.cs,Ctor_ConnectionString,The length of the statement  "            BlobClient blob1 = InstrumentClient(new BlobClient(connectionString.ToString(true)' containerName' blobName' GetOptions())); " is 124.
Long Statement,Azure.Storage.Blobs.Test,BlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobClientTests.cs,UploadStreamAsync_LargeBlobs,The length of the statement  "            await UploadStreamAndVerify(size' 16 * Constants.MB' new StorageTransferOptions { MaximumConcurrency = maximumThreadCount }); " is 125.
Long Statement,Azure.Storage.Blobs.Test,BlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobClientTests.cs,UploadFileAsync_LargeBlobs,The length of the statement  "            await UploadFileAndVerify(size' 16 * Constants.MB' new StorageTransferOptions { MaximumConcurrency = maximumThreadCount }); " is 123.
Long Statement,Azure.Storage.Blobs.Test,BlobSasBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobSasBuilderTests.cs,ToSasQueryParameters_ContainerTest,The length of the statement  "            BlobSasBuilder blobSasBuilder = BuildBlobSasBuilder(includeBlob: false' includeSnapshot: false' containerName' blobName' constants); " is 132.
Long Statement,Azure.Storage.Blobs.Test,BlobSasBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobSasBuilderTests.cs,ToSasQueryParameters_ContainerIdentityTest,The length of the statement  "            BlobSasBuilder blobSasBuilder = BuildBlobSasBuilder(includeBlob: false' includeSnapshot: false' containerName' blobName' constants); " is 132.
Long Statement,Azure.Storage.Blobs.Test,BlobSasBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobSasBuilderTests.cs,ToSasQueryParameters_ContainerIdentityTest,The length of the statement  "            BlobSasQueryParameters sasQueryParameters = blobSasBuilder.ToSasQueryParameters(GetUserDelegationKey(constants)' constants.Sas.Account); " is 136.
Long Statement,Azure.Storage.Blobs.Test,BlobSasBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobSasBuilderTests.cs,ToSasQueryParameters_BlobTest,The length of the statement  "            BlobSasBuilder blobSasBuilder = BuildBlobSasBuilder(includeBlob: true' includeSnapshot: false' containerName' blobName' constants); " is 131.
Long Statement,Azure.Storage.Blobs.Test,BlobSasBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobSasBuilderTests.cs,ToSasQueryParameters_BlobIdentityTest,The length of the statement  "            BlobSasBuilder blobSasBuilder = BuildBlobSasBuilder(includeBlob: true' includeSnapshot: false' containerName' blobName' constants); " is 131.
Long Statement,Azure.Storage.Blobs.Test,BlobSasBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobSasBuilderTests.cs,ToSasQueryParameters_BlobIdentityTest,The length of the statement  "            BlobSasQueryParameters sasQueryParameters = blobSasBuilder.ToSasQueryParameters(GetUserDelegationKey(constants)' constants.Sas.Account); " is 136.
Long Statement,Azure.Storage.Blobs.Test,BlobSasBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobSasBuilderTests.cs,ToSasQueryParameters_SnapshotTest,The length of the statement  "            BlobSasBuilder blobSasBuilder = BuildBlobSasBuilder(includeBlob: true' includeSnapshot: true' containerName' blobName' constants); " is 130.
Long Statement,Azure.Storage.Blobs.Test,BlobSasBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobSasBuilderTests.cs,ToSasQueryParameters_SnapshotIdentityTest,The length of the statement  "            BlobSasBuilder blobSasBuilder = BuildBlobSasBuilder(includeBlob: true' includeSnapshot: true' containerName' blobName' constants); " is 130.
Long Statement,Azure.Storage.Blobs.Test,BlobSasBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobSasBuilderTests.cs,ToSasQueryParameters_SnapshotIdentityTest,The length of the statement  "            BlobSasQueryParameters sasQueryParameters = blobSasBuilder.ToSasQueryParameters(GetUserDelegationKey(constants)' constants.Sas.Account); " is 136.
Long Statement,Azure.Storage.Blobs.Test,BlobSasBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobSasBuilderTests.cs,ToSasQueryParameters_NullSharedKeyCredentialTest,The length of the statement  "            BlobSasBuilder blobSasBuilder = BuildBlobSasBuilder(includeBlob: true' includeSnapshot: true' containerName' blobName' constants); " is 130.
Long Statement,Azure.Storage.Blobs.Test,BlobSasBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobSasBuilderTests.cs,BuildBlobSasBuilder,The length of the statement  "            builder.SetPermissions(BlobAccountSasPermissions.Read | BlobAccountSasPermissions.Write | BlobAccountSasPermissions.Delete); " is 124.
Long Statement,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_SasTest,The length of the statement  "            var uriString = "https://account.blob.core.windows.net/container/blob?sv=2015-04-05&spr=https&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sip=168.1.5.60-168.1.5.70&sr=b&sp=rw&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"; " is 241.
Long Statement,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_SasTest,The length of the statement  "            var uriString = "https://127.0.0.1/account/container/blob?sv=2015-04-05&spr=https&st=2015-04-29T22%3A18%3A26Z&se=2015-04-30T02%3A23%3A26Z&sip=168.1.5.60-168.1.5.70&sr=b&sp=rw&sig=Z%2FRHIX5Xcg0Mq2rqI3OlWTjEg2tYkboXr1P9ZUXDtkk%3D"; " is 229.
Long Statement,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,Ctor_ConnectionString,The length of the statement  "            var connectionString = new StorageConnectionString(credentials' (blobEndpoint' blobSecondaryEndpoint)' (default' default)' (default' default)' (default' default)); " is 163.
Long Statement,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,Ctor_ConnectionString,The length of the statement  "            BlockBlobClient blob = InstrumentClient(new BlockBlobClient(connectionString.ToString(true)' containerName' blobName' GetOptions())); " is 133.
Long Statement,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,StageBlockAsync_WithUnreliableConnection,The length of the statement  "            var progressHandler = new Progress<long>(progress => { progressList.Add(progress); /*logger.LogTrace("Progress: {progress}"' progress.BytesTransferred);*/ }); " is 158.
Long Statement,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,StageBlockAsync_WithUnreliableConnection,The length of the statement  "            using (var stream = new FaultyStream(new MemoryStream(data)' 256 * Constants.KB' 1' new IOException("Simulated stream fault"))) " is 127.
Long Statement,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,StageBlockAsync_Error,The length of the statement  "                        Assert.AreEqual("Value for one of the query parameters specified in the request URI is invalid."' e.Message.Split('\n')[0]); " is 124.
Long Statement,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,GetBlockListAsync_Type,The length of the statement  "                new GetBlockListParameters { BlockListTypes = BlockListTypes.Committed | BlockListTypes.Uncommitted' CommittedCount = 1' UncommittedCount = 1 }' " is 144.
Long Statement,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,GetBlockListAsync_Error,The length of the statement  "                    Assert.AreEqual("Value for one of the query parameters specified in the request URI is invalid."' e.Message.Split('\n')[0]); " is 124.
Long Statement,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,UploadAsync_WithUnreliableConnection,The length of the statement  "            var progressHandler = new Progress<long>(progress => { progressList.Add(progress); /*logger.LogTrace("Progress: {progress}"' progress.BytesTransferred);*/ }); " is 158.
Long Statement,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,UploadAsync_WithUnreliableConnection,The length of the statement  "            using (var stream = new FaultyStream(new MemoryStream(data)' 256 * Constants.KB' 1' new IOException("Simulated stream fault"))) " is 127.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,Ctor_ConnectionString,The length of the statement  "            var connectionString = new StorageConnectionString(credentials' (blobEndpoint' blobSecondaryEndpoint)' (default' default)' (default' default)' (default' default)); " is 163.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,Ctor_ConnectionString,The length of the statement  "            BlobContainerClient container = InstrumentClient(new BlobContainerClient(connectionString.ToString(true)' containerName)); " is 122.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,CreateAsync_WithBlobServiceSas,The length of the statement  "            catch (RequestFailedException se) when (se.ErrorCode == "AuthorizationFailure") // TODO verify if this is a missing error code " is 126.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,AcquireLeaseAsync,The length of the statement  "            Response<BlobLease> response = await InstrumentClient(container.GetBlobLeaseClient(id)).AcquireAsync(duration: duration); " is 121.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,RenewLeaseAsync,The length of the statement  "            Response<BlobLease> renewResponse = await InstrumentClient(container.GetBlobLeaseClient(leaseResponse.Value.LeaseId)).RenewAsync(); " is 131.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ReleaseLeaseAsync,The length of the statement  "            Response<BlobLease> leaseResponse = await InstrumentClient(test.Container.GetBlobLeaseClient(id)).AcquireAsync(duration); " is 121.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ReleaseLeaseAsync,The length of the statement  "            Response<ReleasedObjectInfo> releaseResponse = await InstrumentClient(test.Container.GetBlobLeaseClient(leaseResponse.Value.LeaseId)).ReleaseAsync(); " is 149.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,BreakLeaseAsync,The length of the statement  "            Response<BlobLease> breakResponse = await InstrumentClient(test.Container.GetBlobLeaseClient()).BreakAsync(breakPeriod); " is 120.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,BreakLeaseAsync_AccessConditions,The length of the statement  "                Response<BlobLease> aquireLeaseResponse = await InstrumentClient(container.GetBlobLeaseClient(id)).AcquireAsync(duration: duration); " is 132.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,BreakLeaseAsync_AccessConditionsFail,The length of the statement  "                Response<BlobLease> aquireLeaseResponse = await InstrumentClient(container.GetBlobLeaseClient(id)).AcquireAsync(duration: duration); " is 132.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ChangeLeaseAsync,The length of the statement  "            Response<BlobLease> leaseResponse = await InstrumentClient(test.Container.GetBlobLeaseClient(id)).AcquireAsync(duration); " is 121.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ChangeLeaseAsync_AccessConditions,The length of the statement  "                Response<BlobLease> aquireLeaseResponse = await InstrumentClient(container.GetBlobLeaseClient(id)).AcquireAsync(duration: duration); " is 132.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ChangeLeaseAsync_AccessConditions,The length of the statement  "                Response<BlobLease> response = await InstrumentClient(container.GetBlobLeaseClient(aquireLeaseResponse.Value.LeaseId)).ChangeAsync( " is 131.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ChangeLeaseAsync_AccessConditionsFail,The length of the statement  "                Response<BlobLease> aquireLeaseResponse = await InstrumentClient(container.GetBlobLeaseClient(id)).AcquireAsync(duration: duration); " is 132.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ListBlobsHierarchySegmentAsync_Deleted,The length of the statement  "            IList<BlobHierarchyItem> blobs = await test.Container.GetBlobsByHierarchyAsync(states: BlobStates.Deleted).ToListAsync(); " is 121.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ListBlobsHierarchySegmentAsync_Uncommited,The length of the statement  "            IList<BlobHierarchyItem> blobs = await test.Container.GetBlobsByHierarchyAsync(states: BlobStates.Uncommitted).ToListAsync(); " is 125.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ListBlobsHierarchySegmentAsync_Snapshot,The length of the statement  "            IList<BlobHierarchyItem> blobs = await test.Container.GetBlobsByHierarchyAsync(states: BlobStates.Snapshots).ToListAsync(); " is 123.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ListContainersSegmentAsync_SecondaryStorageFirstRetrySuccessful,The length of the statement  "            TestExceptionPolicy testExceptionPolicy = await PerformSecondaryStorageTest(1); // one GET failure means the GET request should end up using the SECONDARY host " is 159.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ListContainersSegmentAsync_SecondaryStorageFirstRetrySuccessful,The length of the statement  "            AssertSecondaryStorageFirstRetrySuccessful(SecondaryStorageTenantPrimaryHost()' SecondaryStorageTenantSecondaryHost()' testExceptionPolicy); " is 140.
Long Statement,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,PerformSecondaryStorageTest,The length of the statement  "            BlobContainerClient containerClient = GetBlobContainerClient_SecondaryAccount_ReadEnabledOnRetry(numberOfReadFailuresToSimulate' out TestExceptionPolicy testExceptionPolicy' retryOn404); " is 186.
Long Statement,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,Ctor_ConnectionString,The length of the statement  "            var connectionString = new StorageConnectionString(credentials' (blobEndpoint' blobSecondaryEndpoint)' (default' default)' (default' default)' (default' default)); " is 163.
Long Statement,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,Ctor_ConnectionString,The length of the statement  "            PageBlobClient blob = InstrumentClient(new PageBlobClient(connectionString.ToString(true)' containerName' blobName' GetOptions())); " is 131.
Long Statement,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesAsync_WithUnreliableConnection,The length of the statement  "            var progressHandler = new Progress<long>(progress => { progressList.Add(progress); /*logger.LogTrace("Progress: {progress}"' progress.BytesTransferred);*/ }); " is 158.
Long Statement,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesAsync_WithUnreliableConnection,The length of the statement  "            using (var stream = new FaultyStream(new MemoryStream(data)' 256 * Constants.KB' 1' new IOException("Simulated stream fault"))) " is 127.
Long Statement,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Clear,The length of the statement  "            Response<PageRangesInfo> diff = await blob.GetPageRangesDiffAsync(range: new HttpRange(0' 6 * Constants.KB)' previousSnapshot: snapshot.Value.Snapshot); " is 152.
Long Statement,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Clear,The length of the statement  "            Assert.AreEqual(5 * Constants.KB' pageRange2.Offset); // since the first part of the page was cleared' it should start at 5 rather than 4 KB " is 140.
Long Statement,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Clear,The length of the statement  "            HttpRange clearRange = diff.Value.ClearRanges.First(); // ClearRange is only populated by GetPageRangesDiff API' and only if passing previous snapshot parameter " is 160.
Long Statement,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,Ctor_ConnectionString,The length of the statement  "            var connectionString = new StorageConnectionString(credentials' (blobEndpoint' blobSecondaryEndpoint)' (default' default)' (default' default)' (default' default)); " is 163.
Long Statement,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,ListContainersSegmentAsync_SecondaryStorageFirstRetrySuccessful,The length of the statement  "            TestExceptionPolicy testExceptionPolicy = await PerformSecondaryStorageTest(1); // one GET failure means the GET request should end up using the SECONDARY host " is 159.
Long Statement,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,ListContainersSegmentAsync_SecondaryStorageFirstRetrySuccessful,The length of the statement  "            AssertSecondaryStorageFirstRetrySuccessful(SecondaryStorageTenantPrimaryHost()' SecondaryStorageTenantSecondaryHost()' testExceptionPolicy); " is 140.
Long Statement,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,ListContainersSegmentAsync_SecondaryStorageSecondRetrySuccessful,The length of the statement  "            TestExceptionPolicy testExceptionPolicy = await PerformSecondaryStorageTest(2); // two GET failures means the GET request should end up using the PRIMARY host " is 158.
Long Statement,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,ListContainersSegmentAsync_SecondaryStorageSecondRetrySuccessful,The length of the statement  "            AssertSecondaryStorageSecondRetrySuccessful(SecondaryStorageTenantPrimaryHost()' SecondaryStorageTenantSecondaryHost()' testExceptionPolicy); " is 141.
Long Statement,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,ListContainersSegmentAsync_SecondaryStorageThirdRetrySuccessful,The length of the statement  "            TestExceptionPolicy testExceptionPolicy = await PerformSecondaryStorageTest(3); // three GET failures means the GET request should end up using the SECONDARY host " is 162.
Long Statement,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,ListContainersSegmentAsync_SecondaryStorageThirdRetrySuccessful,The length of the statement  "            AssertSecondaryStorageThirdRetrySuccessful(SecondaryStorageTenantPrimaryHost()' SecondaryStorageTenantSecondaryHost()' testExceptionPolicy); " is 140.
Long Statement,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,ListContainersSegmentAsync_SecondaryStorage404OnSecondary,The length of the statement  "            TestExceptionPolicy testExceptionPolicy = await PerformSecondaryStorageTest(3' true);  // three GET failures + 404 on SECONDARY host means the GET request should end up using the PRIMARY host " is 191.
Long Statement,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,ListContainersSegmentAsync_SecondaryStorage404OnSecondary,The length of the statement  "            AssertSecondaryStorage404OnSecondary(SecondaryStorageTenantPrimaryHost()' SecondaryStorageTenantSecondaryHost()' testExceptionPolicy); " is 134.
Long Statement,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,GetUserDelegationKey,The length of the statement  "            Response<UserDelegationKey> response = await service.GetUserDelegationKeyAsync(startsOn: null' expiresOn: Recording.UtcNow.AddHours(1)); " is 136.
Long Statement,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetSecondaryReadServiceClient,The length of the statement  "            BlobClientOptions options = GetSecondaryStorageOptions(config' out testExceptionPolicy' numberOfReadFailuresToSimulate' simulate404' enabledRequestMethods); " is 156.
Long Statement,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetSecondaryReadBlobBaseClient,The length of the statement  "            BlobClientOptions options = GetSecondaryStorageOptions(config' out testExceptionPolicy' numberOfReadFailuresToSimulate' simulate404' enabledRequestMethods); " is 156.
Long Statement,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetSecondaryReadBlobContainerClient,The length of the statement  "            BlobClientOptions options = GetSecondaryStorageOptions(config' out testExceptionPolicy' numberOfReadFailuresToSimulate' simulate404' enabledRequestMethods); " is 156.
Long Statement,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetSecondaryStorageOptions,The length of the statement  "            testExceptionPolicy = new TestExceptionPolicy(numberOfReadFailuresToSimulate' options.GeoRedundantSecondaryUri' simulate404' trackedRequestMethods); " is 148.
Long Statement,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,SetupBlobLeaseCondition,The length of the statement  "                lease = await InstrumentClient(blob.GetBlobLeaseClient(Recording.Random.NewGuid().ToString())).AcquireAsync(BlobLeaseClient.InfiniteLeaseDuration); " is 147.
Long Statement,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,SetupContainerLeaseCondition,The length of the statement  "                lease = await InstrumentClient(container.GetBlobLeaseClient(Recording.Random.NewGuid().ToString())).AcquireAsync(BlobLeaseClient.InfiniteLeaseDuration); " is 152.
Long Statement,Azure.Storage,TestExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExtensions.cs,ToString,The length of the statement  "            var listOfSettings = conn.Settings.Select(pair => string.Format(CultureInfo.InvariantCulture' "{0}={1}"' pair.Key' pair.Value)).ToList(); " is 137.
Long Statement,Azure.Storage,TestExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExtensions.cs,ToString,The length of the statement  "            if (!string.IsNullOrWhiteSpace(conn._accountName) && (conn.Credentials is StorageSharedKeyCredential sharedKeyCredentials ? string.IsNullOrWhiteSpace(sharedKeyCredentials.AccountName) : true)) " is 192.
Long Statement,Azure.Storage,TestExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExtensions.cs,ToString,The length of the statement  "                listOfSettings.Add(string.Format(CultureInfo.InvariantCulture' "{0}={1}"' Constants.ConnectionStrings.AccountNameSetting' conn._accountName)); " is 142.
Long Statement,Azure.Storage,TestExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExtensions.cs,ToString,The length of the statement  "                return string.Format(CultureInfo.InvariantCulture' "{0}={1}"' Constants.ConnectionStrings.SharedAccessSignatureSetting' exportSecrets ? sasCredentials.SasToken : "[signature hidden]"); " is 184.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,ReturnsPropertiesForZeroLength,The length of the statement  "            Mock<BlobBaseClient> blockClient = new Mock<BlobBaseClient>(MockBehavior.Strict' new Uri("http://mock")' new BlobClientOptions()); " is 130.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,DownloadsInOneBlockIfUnderLimit,The length of the statement  "            Mock<BlobBaseClient> blockClient = new Mock<BlobBaseClient>(MockBehavior.Strict' new Uri("http://mock")' new BlobClientOptions()); " is 130.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,DownloadsInBlocksWhenOverTheLimit,The length of the statement  "            Mock<BlobBaseClient> blockClient = new Mock<BlobBaseClient>(MockBehavior.Strict' new Uri("http://mock")' new BlobClientOptions()); " is 130.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,DownloadsInBlocksWhenOverTheLimit,The length of the statement  "            PartitionedDownloader downloader = new PartitionedDownloader(blockClient.Object' new StorageTransferOptions() { MaximumTransferLength = 10}' 20); " is 145.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,IncludesEtagInConditions,The length of the statement  "            Mock<BlobBaseClient> blockClient = new Mock<BlobBaseClient>(MockBehavior.Strict' new Uri("http://mock")' new BlobClientOptions()); " is 130.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,IncludesEtagInConditions,The length of the statement  "            PartitionedDownloader downloader = new PartitionedDownloader(blockClient.Object' new StorageTransferOptions() { MaximumTransferLength = 10}' 10); " is 145.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,SurfacesDownloadExceptions,The length of the statement  "            Mock<BlobBaseClient> blockClient = new Mock<BlobBaseClient>(MockBehavior.Strict' new Uri("http://mock")' new BlobClientOptions()); " is 130.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,SurfacesDownloadExceptions,The length of the statement  "                blockClient.Setup(c => c.DownloadAsync(It.IsAny<HttpRange>()' It.IsAny<BlobRequestConditions>()' false' s_cancellationToken)) " is 125.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,SurfacesDownloadExceptions,The length of the statement  "                blockClient.Setup(c => c.Download(It.IsAny<HttpRange>()' It.IsAny<BlobRequestConditions>()' false' s_cancellationToken)) " is 120.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,SurfacesDownloadExceptions,The length of the statement  "            PartitionedDownloader downloader = new PartitionedDownloader(blockClient.Object' new StorageTransferOptions() { MaximumTransferLength = 10}' 20); " is 145.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,SetupDownload,The length of the statement  "                blockClient.Setup(c => c.DownloadAsync(It.IsAny<HttpRange>()' It.IsAny<BlobRequestConditions>()' false' s_cancellationToken)) " is 125.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,SetupDownload,The length of the statement  "                blockClient.Setup(c => c.Download(It.IsAny<HttpRange>()' It.IsAny<BlobRequestConditions>()' false' s_cancellationToken)) " is 120.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,UploadsStreamInBlocksIfLengthNotAvailable,The length of the statement  "            Mock<BlockBlobClient> clientMock = new Mock<BlockBlobClient>(MockBehavior.Strict' new Uri("http://mock")' new BlobClientOptions()); " is 131.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,UploadsStreamInBlocksIfLengthIsOverTheLimit,The length of the statement  "            Mock<BlockBlobClient> clientMock = new Mock<BlockBlobClient>(MockBehavior.Strict' new Uri("http://mock")' new BlobClientOptions()); " is 131.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,UploadsStreamInBlocksIfLengthIsOverTheLimit,The length of the statement  "            PartitionedUploader uploader = new PartitionedUploader(clientMock.Object' default' singleUploadThreshold: 20' arrayPool: testPool); " is 131.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,UploadsStreamInBlocksUnderSize,The length of the statement  "            Mock<BlockBlobClient> clientMock = new Mock<BlockBlobClient>(MockBehavior.Strict' new Uri("http://mock")' new BlobClientOptions()); " is 131.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,UploadsStreamInBlocksUnderSize,The length of the statement  "            PartitionedUploader uploader = new PartitionedUploader(clientMock.Object' new StorageTransferOptions() { MaximumTransferLength = 20}' arrayPool: testPool); " is 155.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,MergesLotsOfSmallBlocks,The length of the statement  "            Mock<BlockBlobClient> clientMock = new Mock<BlockBlobClient>(MockBehavior.Strict' new Uri("http://mock")' new BlobClientOptions()); " is 131.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,SmallMaxWriteSize,The length of the statement  "            Mock<BlockBlobClient> clientMock = new Mock<BlockBlobClient>(MockBehavior.Strict' new Uri("http://mock")' new BlobClientOptions()); " is 131.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,SmallMaxWriteSize,The length of the statement  "            PartitionedUploader uploader = new PartitionedUploader(clientMock.Object' new StorageTransferOptions() { MaximumTransferLength = 100 }' arrayPool: testPool); " is 157.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,MergesBlocksUntilTheyReachOverHalfMaxSize,The length of the statement  "            Mock<BlockBlobClient> clientMock = new Mock<BlockBlobClient>(MockBehavior.Strict' new Uri("http://mock")' new BlobClientOptions()); " is 131.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,MergesBlocksUntilTheyReachOverHalfMaxSize,The length of the statement  "            PartitionedUploader uploader = new PartitionedUploader(clientMock.Object' new StorageTransferOptions() { MaximumTransferLength = 20}' arrayPool: testPool); " is 155.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,BlockIdsAre64BytesUniqueBase64Strings,The length of the statement  "            Mock<BlockBlobClient> clientMock = new Mock<BlockBlobClient>(MockBehavior.Strict' new Uri("http://mock")' new BlobClientOptions()); " is 131.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,BlockIdsAre64BytesUniqueBase64Strings,The length of the statement  "            PartitionedUploader uploader = new PartitionedUploader(clientMock.Object' new StorageTransferOptions() { MaximumTransferLength = 20}); " is 134.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,AsyncUploadsAsSingleBlockIfUnderLimit,The length of the statement  "                        c => c.UploadAsync(content' s_blobHttpHeaders' s_metadata' s_conditions' s_accessTier' s_progress' s_cancellationToken)) " is 120.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,AsyncUploadsAsSingleBlockIfUnderLimit,The length of the statement  "                clientMock.Setup(c => c.Upload(content' s_blobHttpHeaders' s_metadata' s_conditions' s_accessTier' s_progress' s_cancellationToken)) " is 132.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,InvokeUploadAsync,The length of the statement  "                return await uploader.UploadAsync(content' s_blobHttpHeaders' s_metadata' s_conditions' s_progress' s_accessTier' s_cancellationToken); " is 135.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,InvokeUploadAsync,The length of the statement  "                return uploader.Upload(content' s_blobHttpHeaders' s_metadata' s_conditions' s_progress' s_accessTier' s_cancellationToken); " is 124.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,SetupAsyncStaging,The length of the statement  "                    )).Returns<IEnumerable<string>' BlobHttpHeaders' Dictionary<string' string>' BlobRequestConditions' AccessTier?' CancellationToken>(sink.CommitAsync); " is 150.
Long Statement,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,SetupAsyncStaging,The length of the statement  "                    )).Returns<IEnumerable<string>' BlobHttpHeaders' Dictionary<string' string>' BlobRequestConditions' AccessTier?' CancellationToken>(sink.Commit); " is 145.
Long Statement,Azure.Storage.Blobs.Tests,UnitTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\UnitTests.cs,GetBlobOptions_VariousFlagCombos,The length of the statement  "                    string.Join("'"' System.Linq.Enumerable.Select(BlobExtensions.AsIncludeItems(traits' states)' item => Azure.Storage.Blobs.BlobRestClient.Serialization.ToString(item)))); " is 169.
Long Statement,Azure.Storage.Test,TestConfigurations,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestConfigurations.cs,GetTenant,The length of the statement  "                Assert.Inconclusive($"Live test configuration tenant type '{type}' named '{name}' was not found in file {TestConfigurationsPath}!"); " is 132.
Long Statement,Azure.Storage.Test,TestHelper,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestHelper.cs,AssertSequenceEqual,The length of the statement  "            (int index' T expected' T actual)[] firstErrors = expected.Zip(actual' (e' a) => (expected: e' actual: a)).Select((x' i) => (index: i' x.expected' x.actual)).Where(x => !x.expected.Equals(x.actual)).Take(5).ToArray(); " is 217.
Long Statement,Azure.Storage.Test,TestHelper,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestHelper.cs,AssertSequenceEqual,The length of the statement  "            Assert.IsFalse(firstErrors.Any()' $"Actual sequence does not match expected sequence at locations\n{string.Join("\n"' firstErrors.Select(e => $"{e.index} => expected = {e.expected}' actual = {e.actual}"))}"); " is 208.
Complex Conditional,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The conditional expression  "property.PropertyType == type && property.CanRead && !property.CanWrite && Includes(property.Name) && !Excludes(property.Name)"  is complex.
Complex Conditional,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The conditional expression  "field.FieldType == type && (field.IsInitOnly || field.IsLiteral) && Includes(field.Name) && !Excludes(field.Name)"  is complex.
Complex Conditional,Azure.Core.Pipeline,TestFrameworkContentTypeUtilities,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\ContentTypeUtilities.cs,TryGetTextEncoding,The conditional expression  "contentType.StartsWith(textContentTypePrefix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(jsonSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(xmlSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(urlEncodedSuffix' StringComparison.OrdinalIgnoreCase)"  is complex.
Empty Catch Block,Azure.Core.Testing,RecordEntry,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordEntry.cs,SerializeBody,The method has an empty catch block.
Empty Catch Block,Azure.Core.Testing,TestRecording,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRecording.cs,TestRecording,The method has an empty catch block.
Empty Catch Block,Azure.Storage.Test.Shared,DisposingContainer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,DisposeAsync,The method has an empty catch block.
Empty Catch Block,Azure.Storage.Test.Shared,StorageRecordedTestSanitizer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageRecordedTestSanitizer.cs,SanitizeTextBody,The method has an empty catch block.
Empty Catch Block,Azure.Storage.Test.Shared,StorageRecordedTestSanitizer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageRecordedTestSanitizer.cs,SanitizeTextBody,The method has an empty catch block.
Magic Number,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The following statement contains a magic number: var expectedEventPrefix = declaringType.FullName + "." + methodName.Substring(0' methodName.Length - 5);
Magic Number,Azure.Core.Testing,RandomExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RandomExtensions.cs,NewGuid,The following statement contains a magic number: var bytes = new byte[16];
Magic Number,Azure.Core.Testing,TestRetryHelper,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRetryHelper.cs,RetryAsync,The following statement contains a magic number: delay = TimeSpan.FromSeconds(5);
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,AppendBlockAsync_AccessConditions,The following statement contains a magic number: AccessConditionParameters[] testCases = new[]              {                  new AccessConditionParameters()'                  new AccessConditionParameters { IfModifiedSince = OldDate }'                  new AccessConditionParameters { IfUnmodifiedSince = NewDate }'                  new AccessConditionParameters { Match = ReceivedETag }'                  new AccessConditionParameters { NoneMatch = GarbageETag }'                  new AccessConditionParameters { LeaseId = ReceivedLeaseId }'                  new AccessConditionParameters { AppendPosE = 0 }'                  new AccessConditionParameters { MaxSizeLTE = 100 }              };
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,AppendBlockAsync_AccessConditions,The following statement contains a magic number: var data = GetRandomBuffer(7);
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,AppendBlockAsync_AccessConditionsFail,The following statement contains a magic number: var data = GetRandomBuffer(7);
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,AppendBlockFromUriAsync_Range,The following statement contains a magic number: var data = GetRandomBuffer(4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,AppendBlockFromUriAsync_Range,The following statement contains a magic number: await destBlob.AppendBlockFromUriAsync(sourceBlob.Uri' new HttpRange(2 * Constants.KB' 2 * Constants.KB));
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,AppendBlockFromUriAsync_Range,The following statement contains a magic number: await destBlob.AppendBlockFromUriAsync(sourceBlob.Uri' new HttpRange(2 * Constants.KB' 2 * Constants.KB));
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,AppendBlockFromUriAsync_Range,The following statement contains a magic number: Response<BlobDownloadInfo> result = await destBlob.DownloadAsync(new HttpRange(0' 2 * Constants.KB));
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,AppendBlockFromUriAsync_Range,The following statement contains a magic number: Assert.AreEqual(2 * Constants.KB' dataResult.Length);
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,AppendBlockFromUriAsync_Range,The following statement contains a magic number: TestHelper.AssertSequenceEqual(data.Skip(2 * Constants.KB).Take(2 * Constants.KB)' dataResult.ToArray());
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,AppendBlockFromUriAsync_Range,The following statement contains a magic number: TestHelper.AssertSequenceEqual(data.Skip(2 * Constants.KB).Take(2 * Constants.KB)' dataResult.ToArray());
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,AppendBlockFromUriAsync_AccessConditions,The following statement contains a magic number: AccessConditionParameters[] testCases = new[]              {                  new AccessConditionParameters()'                  new AccessConditionParameters { IfModifiedSince = OldDate }'                  new AccessConditionParameters { IfUnmodifiedSince = NewDate }'                  new AccessConditionParameters { Match = ReceivedETag }'                  new AccessConditionParameters { NoneMatch = GarbageETag }'                  new AccessConditionParameters { LeaseId = ReceivedLeaseId }'                  new AccessConditionParameters { AppendPosE = 0 }'                  new AccessConditionParameters { MaxSizeLTE = 100 }'                  new AccessConditionParameters { SourceIfModifiedSince = OldDate }'                  new AccessConditionParameters { SourceIfUnmodifiedSince = NewDate }'                  new AccessConditionParameters { SourceIfMatch = ReceivedETag }'                  new AccessConditionParameters { SourceIfNoneMatch = GarbageETag }              };
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,AppendBlockFromUriAsync_AccessConditions,The following statement contains a magic number: var data = GetRandomBuffer(7);
Magic Number,Azure.Storage.Blobs.Test,AppendBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\AppendBlobClientTests.cs,AppendBlockFromUriAsync_AccessConditionsFail,The following statement contains a magic number: var data = GetRandomBuffer(7);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,DownloadAsync_ReadFromSecondaryStorage,The following statement contains a magic number: Response<BlobDownloadInfo> response = await EnsurePropagatedAsync(                  async () => await blockBlobClient.DownloadAsync()'                  downloadInfo => downloadInfo.GetRawResponse().Status != 404);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,DownloadAsync_WithUnreliableConnection,The following statement contains a magic number: BlobServiceClient service = InstrumentClient(                  new BlobServiceClient(                      new Uri(TestConfigDefault.BlobServiceEndpoint)'                      new StorageSharedKeyCredential(TestConfigDefault.AccountName' TestConfigDefault.AccountKey)'                      GetFaultyBlobConnectionOptions(                          raiseAt: 256 * Constants.KB'                          raise: new Exception("Unexpected"))));
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,DownloadAsync_Range,The following statement contains a magic number: var data = GetRandomBuffer(10 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,DownloadAsync_Range,The following statement contains a magic number: var count = 2 * Constants.KB;
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,DownloadAsync_MD5,The following statement contains a magic number: var data = GetRandomBuffer(10 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,DownloadAsync_MD5,The following statement contains a magic number: var count = 2 * Constants.KB;
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,DownloadFileAsync_Parallel_LargeBlobs,The following statement contains a magic number: await ParallelDownloadFileAndVerify(size' 16 * Constants.MB' new StorageTransferOptions { MaximumConcurrency = maximumThreadCount });
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,DownloadTo_Initial304,The following statement contains a magic number: Assert.AreEqual(304' result.Status);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,StartCopyFromUriAsync,The following statement contains a magic number: await operation.WaitForCompletionAsync(TimeSpan.FromMilliseconds(10)' CancellationToken.None);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,StartCopyFromUriAsync_AccessTier,The following statement contains a magic number: await operation.WaitForCompletionAsync(TimeSpan.FromMilliseconds(10)' CancellationToken.None);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,StartCopyFromUriAsync_RehydratePriority,The following statement contains a magic number: await operation.WaitForCompletionAsync(TimeSpan.FromMilliseconds(10)' CancellationToken.None);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,AbortCopyFromUriAsync,The following statement contains a magic number: var data = GetRandomBuffer(8 * Constants.MB);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,AbortCopyFromUriAsync_Lease,The following statement contains a magic number: var data = GetRandomBuffer(8 * Constants.MB);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,AbortCopyFromUriAsync_LeaseFail,The following statement contains a magic number: var data = GetRandomBuffer(8 * Constants.MB);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,AcquireLeaseAsync,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,AcquireLeaseAsync_AccessConditions,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,AcquireLeaseAsync_AccessConditionsFail,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,AcquireLeaseAsync_Error,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,RenewLeaseAsync,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,RenewLeaseAsync_AccessConditions,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,RenewLeaseAsync_AccessConditionsFail,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,ReleaseLeaseAsync,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,ReleaseLeaseAsync_AccessConditions,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,ReleaseLeaseAsync_AccessConditionsFail,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,BreakLeaseAsync,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,BreakLeaseAsync_BreakPeriod,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,BreakLeaseAsync_BreakPeriod,The following statement contains a magic number: TimeSpan breakPeriod = TimeSpan.FromSeconds(5);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,BreakLeaseAsync_AccessConditions,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,BreakLeaseAsync_AccessConditionsFail,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,ChangeLeaseAsync,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,ChangeLeaseAsync_AccessConditions,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,ChangeLeaseAsync_AccessConditionsFail,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobBaseClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobBaseClientTests.cs,SetTierAsync_Lease,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,BlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,BlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,BlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,BlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,BlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobClientTests.cs,UploadStreamAsync_LargeBlobs,The following statement contains a magic number: await UploadStreamAndVerify(size' 16 * Constants.MB' new StorageTransferOptions { MaximumConcurrency = maximumThreadCount });
Magic Number,Azure.Storage.Blobs.Test,BlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobClientTests.cs,UploadFileAsync_LargeBlobs,The following statement contains a magic number: await UploadFileAndVerify(size' 16 * Constants.MB' new StorageTransferOptions { MaximumConcurrency = maximumThreadCount });
Magic Number,Azure.Storage.Blobs.Test,BlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobClientTests.cs,Perf_SmallBlobs,The following statement contains a magic number: trial < 1000
Magic Number,Azure.Storage.Blobs.Test,BlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobClientTests.cs,Upload_Stress,The following statement contains a magic number: CancellationTokenSource source = new CancellationTokenSource(TimeSpan.FromSeconds(60));
Magic Number,Azure.Storage.Blobs.Test,BlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobClientTests.cs,Upload_Stress,The following statement contains a magic number: await blob.UploadAsync(                          stream'                          transferOptions: new StorageTransferOptions { MaximumConcurrency = 8 }'                          cancellationToken: token);
Magic Number,Azure.Storage.Blobs.Test,BlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobClientTests.cs,ChecksForCancelation,The following statement contains a magic number: var data = GetRandomBuffer(100 * Constants.MB);
Magic Number,Azure.Storage.Blobs.Test,BlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobClientTests.cs,ChecksForCancelation,The following statement contains a magic number: CancellationTokenSource source = new CancellationTokenSource(TimeSpan.FromSeconds(.1));
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_AccountTest,The following statement contains a magic number: Assert.AreEqual(443' blobUriBuilder.Port);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_ContainerTest,The following statement contains a magic number: Assert.AreEqual(443' blobUriBuilder.Port);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_BlobTest,The following statement contains a magic number: Assert.AreEqual(443' blobUriBuilder.Port);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_PortTest,The following statement contains a magic number: Assert.AreEqual(8080' blobUriBuilder.Port);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_SnapshotTest,The following statement contains a magic number: Assert.AreEqual(443' blobUriBuilder.Port);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 30' 2' 23' 26' TimeSpan.Zero)' blobUriBuilder.Sas.ExpiresOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 30' 2' 23' 26' TimeSpan.Zero)' blobUriBuilder.Sas.ExpiresOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 30' 2' 23' 26' TimeSpan.Zero)' blobUriBuilder.Sas.ExpiresOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 30' 2' 23' 26' TimeSpan.Zero)' blobUriBuilder.Sas.ExpiresOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 30' 2' 23' 26' TimeSpan.Zero)' blobUriBuilder.Sas.ExpiresOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 30' 2' 23' 26' TimeSpan.Zero)' blobUriBuilder.Sas.ExpiresOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 29' 22' 18' 26' TimeSpan.Zero)' blobUriBuilder.Sas.StartsOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 29' 22' 18' 26' TimeSpan.Zero)' blobUriBuilder.Sas.StartsOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 29' 22' 18' 26' TimeSpan.Zero)' blobUriBuilder.Sas.StartsOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 29' 22' 18' 26' TimeSpan.Zero)' blobUriBuilder.Sas.StartsOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 29' 22' 18' 26' TimeSpan.Zero)' blobUriBuilder.Sas.StartsOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 29' 22' 18' 26' TimeSpan.Zero)' blobUriBuilder.Sas.StartsOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_RegularUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(443' blobUriBuilder.Port);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_AccountTest,The following statement contains a magic number: Assert.AreEqual(443' blobUriBuilder.Port);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_ContainerTest,The following statement contains a magic number: Assert.AreEqual(443' blobUriBuilder.Port);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_BlobTest,The following statement contains a magic number: Assert.AreEqual(443' blobUriBuilder.Port);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_PortTest,The following statement contains a magic number: Assert.AreEqual(8080' blobUriBuilder.Port);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_SnapshotTest,The following statement contains a magic number: Assert.AreEqual(443' blobUriBuilder.Port);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 30' 2' 23' 26' TimeSpan.Zero)' blobUriBuilder.Sas.ExpiresOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 30' 2' 23' 26' TimeSpan.Zero)' blobUriBuilder.Sas.ExpiresOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 30' 2' 23' 26' TimeSpan.Zero)' blobUriBuilder.Sas.ExpiresOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 30' 2' 23' 26' TimeSpan.Zero)' blobUriBuilder.Sas.ExpiresOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 30' 2' 23' 26' TimeSpan.Zero)' blobUriBuilder.Sas.ExpiresOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 30' 2' 23' 26' TimeSpan.Zero)' blobUriBuilder.Sas.ExpiresOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 29' 22' 18' 26' TimeSpan.Zero)' blobUriBuilder.Sas.StartsOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 29' 22' 18' 26' TimeSpan.Zero)' blobUriBuilder.Sas.StartsOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 29' 22' 18' 26' TimeSpan.Zero)' blobUriBuilder.Sas.StartsOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 29' 22' 18' 26' TimeSpan.Zero)' blobUriBuilder.Sas.StartsOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 29' 22' 18' 26' TimeSpan.Zero)' blobUriBuilder.Sas.StartsOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(new DateTimeOffset(2015' 4' 29' 22' 18' 26' TimeSpan.Zero)' blobUriBuilder.Sas.StartsOn);
Magic Number,Azure.Storage.Blobs.Test,BlobUriBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobUriBuilderTests.cs,BlobUriBuilder_IPStyleUrl_SasTest,The following statement contains a magic number: Assert.AreEqual(443' blobUriBuilder.Port);
Magic Number,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,StageBlockFromUriAsync_Range,The following statement contains a magic number: await destBlob.StageBlockFromUriAsync(sourceBlob.Uri' ToBase64(GetNewBlockName())' new HttpRange(256' 256));
Magic Number,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,StageBlockFromUriAsync_Range,The following statement contains a magic number: await destBlob.StageBlockFromUriAsync(sourceBlob.Uri' ToBase64(GetNewBlockName())' new HttpRange(256' 256));
Magic Number,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,StageBlockFromUriAsync_Range,The following statement contains a magic number: Assert.AreEqual(256' getBlockListResult.Value.UncommittedBlocks.First().Size);
Magic Number,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,CommitBlockListAsync,The following statement contains a magic number: Assert.AreEqual(2' blobList.Value.CommittedBlocks.Count());
Magic Number,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,CommitBlockListAsync_AccessTier,The following statement contains a magic number: Assert.AreEqual(2' blobList.Value.CommittedBlocks.Count());
Magic Number,Azure.Storage.Blobs.Test,BlockBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlockBlobClientTests.cs,GetBlockListAsync_Type,The following statement contains a magic number: GetBlockListParameters[] testCases = new[]              {                  new GetBlockListParameters { BlockListTypes = BlockListTypes.All' CommittedCount = 1' UncommittedCount = 1 }'                  new GetBlockListParameters { BlockListTypes = default' CommittedCount = 1' UncommittedCount = 1 }'                  new GetBlockListParameters { BlockListTypes = BlockListTypes.Committed | BlockListTypes.Uncommitted' CommittedCount = 1' UncommittedCount = 1 }'                  new GetBlockListParameters { BlockListTypes = (BlockListTypes)7' CommittedCount = 1' UncommittedCount = 1 }'                  new GetBlockListParameters { BlockListTypes = BlockListTypes.Committed' CommittedCount = 1' UncommittedCount = 0 }'                  new GetBlockListParameters { BlockListTypes = BlockListTypes.Uncommitted' CommittedCount = 0' UncommittedCount = 1 }              };
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,Ctor_Uri,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,Ctor_Uri,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,Ctor_Uri,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,Ctor_Uri,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,AcquireLeaseAsync,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,AcquireLeaseAsync_Error,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,AcquireLeaseAsync_AccessConditions,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,AcquireLeaseAsync_AccessConditionsFail,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,RenewLeaseAsync,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,RenewLeaseAsync_AccessConditions,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,RenewLeaseAsync_AccessConditionsFail,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ReleaseLeaseAsync,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ReleaseLeaseAsync_AccessConditions,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ReleaseLeaseAsync_AccessConditionsFail,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,BreakLeaseAsync,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,BreakLeaseAsync_AccessConditions,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,BreakLeaseAsync_AccessConditionsFail,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ChangeLeaseAsync,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ChangeLeaseAsync_AccessConditions,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ChangeLeaseAsync_AccessConditionsFail,The following statement contains a magic number: var duration = TimeSpan.FromSeconds(15);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ListBlobsFlatSegmentAsync_MaxResults,The following statement contains a magic number: Page<BlobItem> page = await test.Container.GetBlobsAsync().AsPages(pageSizeHint: 2).FirstAsync();
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ListBlobsFlatSegmentAsync_MaxResults,The following statement contains a magic number: Assert.AreEqual(2' page.Values.Count);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ListBlobsFlatSegmentAsync_Snapshot,The following statement contains a magic number: Assert.AreEqual(2' blobs.Count);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ListBlobsFlatSegmentAsync_Prefix,The following statement contains a magic number: Assert.AreEqual(3' blobs.Count);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ListBlobsHierarchySegmentAsync,The following statement contains a magic number: Assert.AreEqual(3' blobs.Count);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ListBlobsHierarchySegmentAsync,The following statement contains a magic number: Assert.AreEqual(2' prefixes.Count);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ListBlobsHierarchySegmentAsync_MaxResults,The following statement contains a magic number: Page<BlobHierarchyItem> page = await test.Container.GetBlobsByHierarchyAsync(delimiter: delimiter)                  .AsPages(pageSizeHint: 2)                  .FirstAsync();
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ListBlobsHierarchySegmentAsync_MaxResults,The following statement contains a magic number: Assert.AreEqual(2' page.Values.Count);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ListBlobsHierarchySegmentAsync_Snapshot,The following statement contains a magic number: Assert.AreEqual(2' blobs.Count);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,ListBlobsHierarchySegmentAsync_Prefix,The following statement contains a magic number: Assert.AreEqual(3' blobs.Count);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,UploadBlobAsync,The following statement contains a magic number: using var stream = new MemoryStream(GetRandomBuffer(100));
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,PerformSecondaryStorageTest,The following statement contains a magic number: Response<BlobContainerProperties> properties = await EnsurePropagatedAsync(                  async () => await containerClient.GetPropertiesAsync()'                  properties => properties.GetRawResponse().Status != 404);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,PerformSecondaryStorageTest,The following statement contains a magic number: Assert.AreEqual(200' properties.GetRawResponse().Status);
Magic Number,Azure.Storage.Blobs.Test,ContainerClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ContainerClientTests.cs,SetUpContainerForListing,The following statement contains a magic number: await blobs[3].SetMetadataAsync(metadata);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,CreateAsync_SequenceNumber,The following statement contains a magic number: await blob.CreateAsync(                  size: Constants.KB'                  sequenceNumber: 2);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,CreateAsync_SequenceNumber,The following statement contains a magic number: Assert.AreEqual(2' response.Value.BlobSequenceNumber);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,CreateAsync_Headers,The following statement contains a magic number: var contentMD5 = MD5.Create().ComputeHash(GetRandomBuffer(16));
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,CreateAsync_Error,The following statement contains a magic number: var invalidPageSize = 511;
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesAsync,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesAsync,The following statement contains a magic number: var expectedData = new byte[4 * Constants.KB];
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesAsync,The following statement contains a magic number: Response<BlobDownloadInfo> response = await blob.DownloadAsync(range: new HttpRange(0' 4 * Constants.KB));
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesAsync,The following statement contains a magic number: var actualData = new byte[4 * Constants.KB];
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesAsync_Error,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesAsync_Error,The following statement contains a magic number: await TestHelper.AssertExpectedExceptionAsync<RequestFailedException>(                      blob.UploadPagesAsync(stream' 5 * Constants.KB)'                      e => Assert.AreEqual("InvalidPageRange"' e.ErrorCode));
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ClearPagesAsync,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ClearPagesAsync,The following statement contains a magic number: var data = GetRandomBuffer(4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ClearPagesAsync,The following statement contains a magic number: var expectedData = new byte[4 * Constants.KB];
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ClearPagesAsync,The following statement contains a magic number: Array.Copy(data' expectedData' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ClearPagesAsync_CPK,The following statement contains a magic number: await blob.CreateAsync(4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ClearPagesAsync_CPK,The following statement contains a magic number: var data = GetRandomBuffer(4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ClearPagesAsync_Error,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ClearPagesAsync_Error,The following statement contains a magic number: await TestHelper.AssertExpectedExceptionAsync<RequestFailedException>(                  blob.ClearPagesAsync(range: new HttpRange(5 * Constants.KB' Constants.KB))'                  e =>                  {                      Assert.AreEqual("InvalidPageRange"' e.ErrorCode);                      Assert.AreEqual("The page range specified is invalid."' e.Message.Split('\n')[0]);                  });
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync,The following statement contains a magic number: await blob.UploadPagesAsync(stream' 2 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync,The following statement contains a magic number: Response<PageRangesInfo> result = await blob.GetPageRangesAsync(range: new HttpRange(0' 4 * Constants.KB));
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync,The following statement contains a magic number: Assert.AreEqual(2' result.Value.PageRanges.Count());
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync,The following statement contains a magic number: Assert.AreEqual(2 * Constants.KB' range2.Offset);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync,The following statement contains a magic number: Assert.AreEqual(3 * Constants.KB' range2.Offset + range2.Length);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Clear,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 6 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Clear,The following statement contains a magic number: var data = GetRandomBuffer(2 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Clear,The following statement contains a magic number: await blob.UploadPagesAsync(stream' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Clear,The following statement contains a magic number: await blob.ClearPagesAsync(new HttpRange(4 * Constants.KB' Constants.KB));
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Clear,The following statement contains a magic number: Response<PageRangesInfo> result = await blob.GetPageRangesAsync(range: new HttpRange(0' 6 * Constants.KB));
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Clear,The following statement contains a magic number: Response<PageRangesInfo> diff = await blob.GetPageRangesDiffAsync(range: new HttpRange(0' 6 * Constants.KB)' previousSnapshot: snapshot.Value.Snapshot);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Clear,The following statement contains a magic number: Assert.AreEqual(2' result.Value.PageRanges.Count());
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Clear,The following statement contains a magic number: Assert.AreEqual(2 * Constants.KB' pageRange1.Offset + pageRange1.Length);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Clear,The following statement contains a magic number: Assert.AreEqual(5 * Constants.KB' pageRange2.Offset);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Clear,The following statement contains a magic number: Assert.AreEqual(6 * Constants.KB' pageRange2.Offset + pageRange2.Length);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Clear,The following statement contains a magic number: Assert.AreEqual(4 * Constants.KB' clearRange.Offset);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Error,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Error,The following statement contains a magic number: await TestHelper.AssertExpectedExceptionAsync<RequestFailedException>(                  blob.GetPageRangesAsync(range: new HttpRange(5 * Constants.KB' 4 * Constants.KB))'                  e =>                  {                      Assert.AreEqual("InvalidRange"' e.ErrorCode);                      Assert.AreEqual("The range specified is invalid for the current size of the resource."'                          e.Message.Split('\n')[0]);                  });
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_Error,The following statement contains a magic number: await TestHelper.AssertExpectedExceptionAsync<RequestFailedException>(                  blob.GetPageRangesAsync(range: new HttpRange(5 * Constants.KB' 4 * Constants.KB))'                  e =>                  {                      Assert.AreEqual("InvalidRange"' e.ErrorCode);                      Assert.AreEqual("The range specified is invalid for the current size of the resource."'                          e.Message.Split('\n')[0]);                  });
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_AccessConditions,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesAsync_AccessConditionsFail,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesDiffAsync,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesDiffAsync,The following statement contains a magic number: await blob.UploadPagesAsync(stream' 2 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesDiffAsync,The following statement contains a magic number: Response<PageRangesInfo> result = await blob.GetPageRangesDiffAsync(                  range: new HttpRange(0' 4 * Constants.KB)'                  snapshot'                  prevSnapshot);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesDiffAsync,The following statement contains a magic number: Assert.AreEqual(2 * Constants.KB' range.Offset);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesDiffAsync,The following statement contains a magic number: Assert.AreEqual(3 * Constants.KB' range.Offset + range.Length);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesDiffAsync_Error,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesDiffAsync_Error,The following statement contains a magic number: await TestHelper.AssertExpectedExceptionAsync<RequestFailedException>(                  blob.GetPageRangesDiffAsync(range: new HttpRange(5 * Constants.KB' 4 * Constants.KB))'                  e =>                  {                      Assert.AreEqual("InvalidRange"' e.ErrorCode);                      Assert.AreEqual("The range specified is invalid for the current size of the resource."'                          e.Message.Split('\n')[0]);                  });
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesDiffAsync_Error,The following statement contains a magic number: await TestHelper.AssertExpectedExceptionAsync<RequestFailedException>(                  blob.GetPageRangesDiffAsync(range: new HttpRange(5 * Constants.KB' 4 * Constants.KB))'                  e =>                  {                      Assert.AreEqual("InvalidRange"' e.ErrorCode);                      Assert.AreEqual("The range specified is invalid for the current size of the resource."'                          e.Message.Split('\n')[0]);                  });
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesDiffAsync_AccessConditions,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesDiffAsync_AccessConditions,The following statement contains a magic number: await blob.UploadPagesAsync(stream' 2 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesDiffAsync_AccessConditionsFail,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,GetPageRangesDiffAsync_AccessConditionsFail,The following statement contains a magic number: await blob.UploadPagesAsync(stream' 2 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ResizeAsync,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ResizeAsync,The following statement contains a magic number: var newSize = 8 * Constants.KB;
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ResizeAsync_CPK,The following statement contains a magic number: var newSize = 8 * Constants.KB;
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ResizeAsync_Error,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ResizeAsync_Error,The following statement contains a magic number: var invalidSize = 511;
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ResizeAsync_AccessConditions,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ResizeAsync_AccessConditions,The following statement contains a magic number: var newSize = 8 * Constants.KB;
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ResizeAsync_AccessConditionsFail,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,ResizeAsync_AccessConditionsFail,The following statement contains a magic number: var newSize = 8 * Constants.KB;
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UpdateSequenceNumberAsync,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UpdateSequenceNumberAsync,The following statement contains a magic number: long sequenceAccessNumber = 5;
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UpdateSequenceNumberAsync_AccessConditions,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UpdateSequenceNumberAsync_AccessConditions,The following statement contains a magic number: long sequenceAccessNumber = 5;
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UpdateSequenceNumberAsync_AccessConditionsFail,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UpdateSequenceNumberAsync_AccessConditionsFail,The following statement contains a magic number: long sequenceAccessNumber = 5;
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UpdateSequenceNumberAsync_Error,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,StartCopyIncrementalAsync,The following statement contains a magic number: var expectedData = new byte[4 * Constants.KB];
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,StartCopyIncrementalAsync,The following statement contains a magic number: PageBlobClient sourceBlob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,StartCopyIncrementalAsync,The following statement contains a magic number: await operation.WaitForCompletionAsync(TimeSpan.FromMilliseconds(10)' CancellationToken.None);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,StartCopyIncrementalAsync_Error,The following statement contains a magic number: PageBlobClient blob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,StartCopyIncrementalAsync_AccessConditions,The following statement contains a magic number: var expectedData = new byte[4 * Constants.KB];
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,StartCopyIncrementalAsync_AccessConditions,The following statement contains a magic number: PageBlobClient sourceBlob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,StartCopyIncrementalAsync_AccessConditions,The following statement contains a magic number: await operation.WaitForCompletionAsync(TimeSpan.FromMilliseconds(10)' CancellationToken.None);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,StartCopyIncrementalAsync_AccessConditionsFail,The following statement contains a magic number: var expectedData = new byte[4 * Constants.KB];
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,StartCopyIncrementalAsync_AccessConditionsFail,The following statement contains a magic number: PageBlobClient sourceBlob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,StartCopyIncrementalAsync_AccessConditionsFail,The following statement contains a magic number: await operation.WaitForCompletionAsync(TimeSpan.FromMilliseconds(10)' CancellationToken.None);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,StartCopyIncrementalAsync_AccessTier,The following statement contains a magic number: var expectedData = new byte[4 * Constants.KB];
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,StartCopyIncrementalAsync_AccessTier,The following statement contains a magic number: PageBlobClient sourceBlob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,StartCopyIncrementalAsync_AccessTier,The following statement contains a magic number: await operation.WaitForCompletionAsync(TimeSpan.FromMilliseconds(10)' CancellationToken.None);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,StartCopyIncrementalAsync_AccessTierFail,The following statement contains a magic number: var expectedData = new byte[4 * Constants.KB];
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,StartCopyIncrementalAsync_AccessTierFail,The following statement contains a magic number: PageBlobClient sourceBlob = await CreatePageBlobClientAsync(test.Container' 4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesFromUriAsync_Range,The following statement contains a magic number: var data = GetRandomBuffer(4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesFromUriAsync_Range,The following statement contains a magic number: await sourceBlob.CreateAsync(4 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesFromUriAsync_Range,The following statement contains a magic number: await destBlob.CreateAsync(2 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesFromUriAsync_Range,The following statement contains a magic number: var range = new HttpRange(0' 2 * Constants.KB);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesFromUriAsync_Range,The following statement contains a magic number: await destBlob.UploadPagesFromUriAsync(                      sourceUri: sourceBlob.Uri'                      sourceRange: new HttpRange(2 * Constants.KB' 2 * Constants.KB)'                      range: range);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesFromUriAsync_Range,The following statement contains a magic number: await destBlob.UploadPagesFromUriAsync(                      sourceUri: sourceBlob.Uri'                      sourceRange: new HttpRange(2 * Constants.KB' 2 * Constants.KB)'                      range: range);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesFromUriAsync_Range,The following statement contains a magic number: Response<BlobDownloadInfo> response = await destBlob.DownloadAsync(new HttpRange(0' 2 * Constants.KB));
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesFromUriAsync_Range,The following statement contains a magic number: Assert.AreEqual(2 * Constants.KB' dataResult.Length);
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesFromUriAsync_Range,The following statement contains a magic number: TestHelper.AssertSequenceEqual(data.Skip(2 * Constants.KB).Take(2 * Constants.KB)' dataResult.ToArray());
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,UploadPagesFromUriAsync_Range,The following statement contains a magic number: TestHelper.AssertSequenceEqual(data.Skip(2 * Constants.KB).Take(2 * Constants.KB)' dataResult.ToArray());
Magic Number,Azure.Storage.Blobs.Test,PageBlobClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PageBlobClientTests.cs,CreateIfNotExistsAsync_Error,The following statement contains a magic number: var invalidPageSize = 511;
Magic Number,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,Ctor_ConnectionString,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,Ctor_Uri,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,Ctor_Uri,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,Ctor_Uri,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,Ctor_Uri,The following statement contains a magic number: var accountKey = Convert.ToBase64String(new byte[] { 0' 1' 2' 3' 4' 5 });
Magic Number,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,ListContainersSegmentAsync_SecondaryStorageSecondRetrySuccessful,The following statement contains a magic number: TestExceptionPolicy testExceptionPolicy = await PerformSecondaryStorageTest(2);
Magic Number,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,ListContainersSegmentAsync_SecondaryStorageThirdRetrySuccessful,The following statement contains a magic number: TestExceptionPolicy testExceptionPolicy = await PerformSecondaryStorageTest(3);
Magic Number,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,ListContainersSegmentAsync_SecondaryStorage404OnSecondary,The following statement contains a magic number: TestExceptionPolicy testExceptionPolicy = await PerformSecondaryStorageTest(3' true);
Magic Number,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,SetPropertiesAsync,The following statement contains a magic number: properties.Cors =                  new[]                  {                      new BlobCorsRule                      {                          MaxAgeInSeconds = 1000'                          AllowedHeaders = "x-ms-meta-data*'x-ms-meta-target*'x-ms-meta-abc"'                          AllowedMethods = "PUT'GET"'                          AllowedOrigins = "*"'                          ExposedHeaders = "x-ms-meta-*"                      }                  };
Magic Number,Azure.Storage.Blobs.Test,ServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\ServiceClientTests.cs,SetPropertiesAsync,The following statement contains a magic number: Assert.IsTrue(properties.Cors[0].MaxAgeInSeconds == 1000);
Magic Number,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetOptions,The following statement contains a magic number: var options = new BlobClientOptions              {                  Diagnostics = { IsLoggingEnabled = true }'                  Retry =                  {                      Mode = RetryMode.Exponential'                      MaxRetries = Storage.Constants.MaxReliabilityRetries'                      Delay = TimeSpan.FromSeconds(Mode == RecordedTestMode.Playback ? 0.01 : 0.5)'                      MaxDelay = TimeSpan.FromSeconds(Mode == RecordedTestMode.Playback ? 0.1 : 10)                  }              };
Magic Number,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetOptions,The following statement contains a magic number: var options = new BlobClientOptions              {                  Diagnostics = { IsLoggingEnabled = true }'                  Retry =                  {                      Mode = RetryMode.Exponential'                      MaxRetries = Storage.Constants.MaxReliabilityRetries'                      Delay = TimeSpan.FromSeconds(Mode == RecordedTestMode.Playback ? 0.01 : 0.5)'                      MaxDelay = TimeSpan.FromSeconds(Mode == RecordedTestMode.Playback ? 0.1 : 10)                  }              };
Magic Number,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetOptions,The following statement contains a magic number: var options = new BlobClientOptions              {                  Diagnostics = { IsLoggingEnabled = true }'                  Retry =                  {                      Mode = RetryMode.Exponential'                      MaxRetries = Storage.Constants.MaxReliabilityRetries'                      Delay = TimeSpan.FromSeconds(Mode == RecordedTestMode.Playback ? 0.01 : 0.5)'                      MaxDelay = TimeSpan.FromSeconds(Mode == RecordedTestMode.Playback ? 0.1 : 10)                  }              };
Magic Number,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetOptions,The following statement contains a magic number: var options = new BlobClientOptions              {                  Diagnostics = { IsLoggingEnabled = true }'                  Retry =                  {                      Mode = RetryMode.Exponential'                      MaxRetries = Storage.Constants.MaxReliabilityRetries'                      Delay = TimeSpan.FromSeconds(Mode == RecordedTestMode.Playback ? 0.01 : 0.5)'                      MaxDelay = TimeSpan.FromSeconds(Mode == RecordedTestMode.Playback ? 0.1 : 10)                  }              };
Magic Number,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetSecondaryStorageOptions,The following statement contains a magic number: options.Retry.MaxRetries = 4;
Magic Number,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,GetCustomerProvidedKey,The following statement contains a magic number: var bytes = new byte[32];
Magic Number,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,EnableSoftDelete,The following statement contains a magic number: properties.Value.DeleteRetentionPolicy = new BlobRetentionPolicy()              {                  Enabled = true'                  Days = 2              };
Magic Number,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,EnableSoftDelete,The following statement contains a magic number: await Delay(250);
Magic Number,Azure.Storage.Test.Shared,BlobTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\BlobTestBase.cs,DisableSoftDelete,The following statement contains a magic number: await Delay(250);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,GetNewString,The following statement contains a magic number: buffer[i] = (char)('a' + Recording.Random.Next(0' 25));
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,GetIPAddress,The following statement contains a magic number: var a = Recording.Random.Next(0' 256);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,GetIPAddress,The following statement contains a magic number: var b = Recording.Random.Next(0' 256);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,GetIPAddress,The following statement contains a magic number: var c = Recording.Random.Next(0' 256);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,GetIPAddress,The following statement contains a magic number: var d = Recording.Random.Next(0' 256);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,WaitForProgressAsync,The following statement contains a magic number: await Delay(500' 100).ConfigureAwait(false);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,WaitForProgressAsync,The following statement contains a magic number: await Delay(500' 100).ConfigureAwait(false);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,WaitForProgressAsync,The following statement contains a magic number: attempts < 10
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,AssertSecondaryStorageSecondRetrySuccessful,The following statement contains a magic number: Assert.AreEqual(primaryHost' testExceptionPolicy.HostsSetInRequests[2]);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,AssertSecondaryStorageThirdRetrySuccessful,The following statement contains a magic number: Assert.AreEqual(primaryHost' testExceptionPolicy.HostsSetInRequests[2]);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,AssertSecondaryStorageThirdRetrySuccessful,The following statement contains a magic number: Assert.AreEqual(secondaryHost' testExceptionPolicy.HostsSetInRequests[3]);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,AssertSecondaryStorage404OnSecondary,The following statement contains a magic number: Assert.AreEqual(primaryHost' testExceptionPolicy.HostsSetInRequests[2]);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,AssertSecondaryStorage404OnSecondary,The following statement contains a magic number: Assert.AreEqual(primaryHost' testExceptionPolicy.HostsSetInRequests[3]);
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,EnsurePropagatedAsync,The following statement contains a magic number: int delayDuration = 10000;
Magic Number,Azure.Storage.Test.Shared,StorageTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageTestBase.cs,EnsurePropagatedAsync,The following statement contains a magic number: DateTimeOffset endTime = DateTimeOffset.Now.AddMinutes(16);
Magic Number,Azure.Storage,TestExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExtensions.cs,ToHttp,The following statement contains a magic number: var builder = new UriBuilder(uri)              {                  Scheme = "http"'                  Port = 80              };
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,DownloadsInOneBlockIfUnderLimit,The following statement contains a magic number: MockDataSource dataSource = new MockDataSource(10);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,DownloadsInOneBlockIfUnderLimit,The following statement contains a magic number: AssertContent(10' stream);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,DownloadsInBlocksWhenOverTheLimit,The following statement contains a magic number: MockDataSource dataSource = new MockDataSource(100);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,DownloadsInBlocksWhenOverTheLimit,The following statement contains a magic number: BlobProperties smallLengthProperties = new BlobProperties()              {                  ContentLength = 100              };
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,DownloadsInBlocksWhenOverTheLimit,The following statement contains a magic number: PartitionedDownloader downloader = new PartitionedDownloader(blockClient.Object' new StorageTransferOptions() { MaximumTransferLength = 10}' 20);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,DownloadsInBlocksWhenOverTheLimit,The following statement contains a magic number: PartitionedDownloader downloader = new PartitionedDownloader(blockClient.Object' new StorageTransferOptions() { MaximumTransferLength = 10}' 20);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,DownloadsInBlocksWhenOverTheLimit,The following statement contains a magic number: Assert.AreEqual(dataSource.Requests.Count' 9);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,DownloadsInBlocksWhenOverTheLimit,The following statement contains a magic number: AssertContent(100' stream);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,IncludesEtagInConditions,The following statement contains a magic number: MockDataSource dataSource = new MockDataSource(100);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,IncludesEtagInConditions,The following statement contains a magic number: BlobProperties properties = new BlobProperties()              {                  ContentLength = 100'                  ETag = s_etag              };
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,IncludesEtagInConditions,The following statement contains a magic number: PartitionedDownloader downloader = new PartitionedDownloader(blockClient.Object' new StorageTransferOptions() { MaximumTransferLength = 10}' 10);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,IncludesEtagInConditions,The following statement contains a magic number: PartitionedDownloader downloader = new PartitionedDownloader(blockClient.Object' new StorageTransferOptions() { MaximumTransferLength = 10}' 10);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,IncludesEtagInConditions,The following statement contains a magic number: Assert.AreEqual(dataSource.Requests.Count' 10);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,IncludesEtagInConditions,The following statement contains a magic number: AssertContent(100' stream);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,SurfacesDownloadExceptions,The following statement contains a magic number: BlobProperties smallLengthProperties = new BlobProperties()              {                  ContentLength = 100              };
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,SurfacesDownloadExceptions,The following statement contains a magic number: PartitionedDownloader downloader = new PartitionedDownloader(blockClient.Object' new StorageTransferOptions() { MaximumTransferLength = 10}' 20);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedDownloaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,SurfacesDownloadExceptions,The following statement contains a magic number: PartitionedDownloader downloader = new PartitionedDownloader(blockClient.Object' new StorageTransferOptions() { MaximumTransferLength = 10}' 20);
Magic Number,Azure.Storage.Blobs.Tests,MockDataSource,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,GetStreamAsync,The following statement contains a magic number: await Task.Delay(25);
Magic Number,Azure.Storage.Blobs.Tests,MockDataSource,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,GetStream,The following statement contains a magic number: return Response.FromValue(new BlobDownloadInfo(new FlattenedDownloadProperties()                  {                      ContentRange = $"bytes {range.Offset}-{range.Offset + contentLength}/{_length}"'                      ContentLength = contentLength'                      Content = memoryStream'                      LastModified = DateTimeOffset.Now'                      Metadata = new Dictionary<string' string>() { { "meta"' "data"}}'                      BlobType = BlobType.Page'                      CopyStatusDescription = "test"'                      CopyId = "test"'                      CopyProgress = "test"'                      CopySource = new Uri("http://example.com")'                      CopyStatus = CopyStatus.Failed'                      LeaseDuration = LeaseDurationType.Fixed'                      LeaseState = LeaseState.Expired'                      LeaseStatus = LeaseStatus.Unlocked'                      ContentType = "test"'                      ETag = s_etag'                      ContentHash = new byte[]{ 1' 2' 3}'                      ContentEncoding = "test"'                      ContentDisposition = "test"'                      ContentLanguage = "test"'                      CacheControl = "test"'                      BlobSequenceNumber = 12'                      AcceptRanges = "test"'                      BlobCommittedBlockCount = 5'                      IsServerEncrypted = true'                      EncryptionKeySha256 = "test"'                      CopyCompletionTime =  DateTimeOffset.Now                  })' new MockResponse(200));
Magic Number,Azure.Storage.Blobs.Tests,MockDataSource,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,GetStream,The following statement contains a magic number: return Response.FromValue(new BlobDownloadInfo(new FlattenedDownloadProperties()                  {                      ContentRange = $"bytes {range.Offset}-{range.Offset + contentLength}/{_length}"'                      ContentLength = contentLength'                      Content = memoryStream'                      LastModified = DateTimeOffset.Now'                      Metadata = new Dictionary<string' string>() { { "meta"' "data"}}'                      BlobType = BlobType.Page'                      CopyStatusDescription = "test"'                      CopyId = "test"'                      CopyProgress = "test"'                      CopySource = new Uri("http://example.com")'                      CopyStatus = CopyStatus.Failed'                      LeaseDuration = LeaseDurationType.Fixed'                      LeaseState = LeaseState.Expired'                      LeaseStatus = LeaseStatus.Unlocked'                      ContentType = "test"'                      ETag = s_etag'                      ContentHash = new byte[]{ 1' 2' 3}'                      ContentEncoding = "test"'                      ContentDisposition = "test"'                      ContentLanguage = "test"'                      CacheControl = "test"'                      BlobSequenceNumber = 12'                      AcceptRanges = "test"'                      BlobCommittedBlockCount = 5'                      IsServerEncrypted = true'                      EncryptionKeySha256 = "test"'                      CopyCompletionTime =  DateTimeOffset.Now                  })' new MockResponse(200));
Magic Number,Azure.Storage.Blobs.Tests,MockDataSource,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,GetStream,The following statement contains a magic number: return Response.FromValue(new BlobDownloadInfo(new FlattenedDownloadProperties()                  {                      ContentRange = $"bytes {range.Offset}-{range.Offset + contentLength}/{_length}"'                      ContentLength = contentLength'                      Content = memoryStream'                      LastModified = DateTimeOffset.Now'                      Metadata = new Dictionary<string' string>() { { "meta"' "data"}}'                      BlobType = BlobType.Page'                      CopyStatusDescription = "test"'                      CopyId = "test"'                      CopyProgress = "test"'                      CopySource = new Uri("http://example.com")'                      CopyStatus = CopyStatus.Failed'                      LeaseDuration = LeaseDurationType.Fixed'                      LeaseState = LeaseState.Expired'                      LeaseStatus = LeaseStatus.Unlocked'                      ContentType = "test"'                      ETag = s_etag'                      ContentHash = new byte[]{ 1' 2' 3}'                      ContentEncoding = "test"'                      ContentDisposition = "test"'                      ContentLanguage = "test"'                      CacheControl = "test"'                      BlobSequenceNumber = 12'                      AcceptRanges = "test"'                      BlobCommittedBlockCount = 5'                      IsServerEncrypted = true'                      EncryptionKeySha256 = "test"'                      CopyCompletionTime =  DateTimeOffset.Now                  })' new MockResponse(200));
Magic Number,Azure.Storage.Blobs.Tests,MockDataSource,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,GetStream,The following statement contains a magic number: return Response.FromValue(new BlobDownloadInfo(new FlattenedDownloadProperties()                  {                      ContentRange = $"bytes {range.Offset}-{range.Offset + contentLength}/{_length}"'                      ContentLength = contentLength'                      Content = memoryStream'                      LastModified = DateTimeOffset.Now'                      Metadata = new Dictionary<string' string>() { { "meta"' "data"}}'                      BlobType = BlobType.Page'                      CopyStatusDescription = "test"'                      CopyId = "test"'                      CopyProgress = "test"'                      CopySource = new Uri("http://example.com")'                      CopyStatus = CopyStatus.Failed'                      LeaseDuration = LeaseDurationType.Fixed'                      LeaseState = LeaseState.Expired'                      LeaseStatus = LeaseStatus.Unlocked'                      ContentType = "test"'                      ETag = s_etag'                      ContentHash = new byte[]{ 1' 2' 3}'                      ContentEncoding = "test"'                      ContentDisposition = "test"'                      ContentLanguage = "test"'                      CacheControl = "test"'                      BlobSequenceNumber = 12'                      AcceptRanges = "test"'                      BlobCommittedBlockCount = 5'                      IsServerEncrypted = true'                      EncryptionKeySha256 = "test"'                      CopyCompletionTime =  DateTimeOffset.Now                  })' new MockResponse(200));
Magic Number,Azure.Storage.Blobs.Tests,MockDataSource,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedDownloaderTests.cs,GetStream,The following statement contains a magic number: return Response.FromValue(new BlobDownloadInfo(new FlattenedDownloadProperties()                  {                      ContentRange = $"bytes {range.Offset}-{range.Offset + contentLength}/{_length}"'                      ContentLength = contentLength'                      Content = memoryStream'                      LastModified = DateTimeOffset.Now'                      Metadata = new Dictionary<string' string>() { { "meta"' "data"}}'                      BlobType = BlobType.Page'                      CopyStatusDescription = "test"'                      CopyId = "test"'                      CopyProgress = "test"'                      CopySource = new Uri("http://example.com")'                      CopyStatus = CopyStatus.Failed'                      LeaseDuration = LeaseDurationType.Fixed'                      LeaseState = LeaseState.Expired'                      LeaseStatus = LeaseStatus.Unlocked'                      ContentType = "test"'                      ETag = s_etag'                      ContentHash = new byte[]{ 1' 2' 3}'                      ContentEncoding = "test"'                      ContentDisposition = "test"'                      ContentLanguage = "test"'                      CacheControl = "test"'                      BlobSequenceNumber = 12'                      AcceptRanges = "test"'                      BlobCommittedBlockCount = 5'                      IsServerEncrypted = true'                      EncryptionKeySha256 = "test"'                      CopyCompletionTime =  DateTimeOffset.Now                  })' new MockResponse(200));
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,UploadsStreamInBlocksIfLengthNotAvailable,The following statement contains a magic number: TestStream content = new TestStream(_async' null' TestStream.Read(0' 10));
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,UploadsStreamInBlocksIfLengthIsOverTheLimit,The following statement contains a magic number: TestStream content = new TestStream(_async' 30' TestStream.Read(0' 10));
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,UploadsStreamInBlocksIfLengthIsOverTheLimit,The following statement contains a magic number: TestStream content = new TestStream(_async' 30' TestStream.Read(0' 10));
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,UploadsStreamInBlocksIfLengthIsOverTheLimit,The following statement contains a magic number: PartitionedUploader uploader = new PartitionedUploader(clientMock.Object' default' singleUploadThreshold: 20' arrayPool: testPool);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,UploadsStreamInBlocksUnderSize,The following statement contains a magic number: TestStream content = new TestStream(_async' null'                  TestStream.Read(0' 10)'                  TestStream.Read(1' 10)              );
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,UploadsStreamInBlocksUnderSize,The following statement contains a magic number: TestStream content = new TestStream(_async' null'                  TestStream.Read(0' 10)'                  TestStream.Read(1' 10)              );
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,UploadsStreamInBlocksUnderSize,The following statement contains a magic number: PartitionedUploader uploader = new PartitionedUploader(clientMock.Object' new StorageTransferOptions() { MaximumTransferLength = 20}' arrayPool: testPool);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,UploadsStreamInBlocksUnderSize,The following statement contains a magic number: Assert.AreEqual(2' sink.Staged.Count);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,UploadsStreamInBlocksUnderSize,The following statement contains a magic number: Assert.AreEqual(3' testPool.TotalRents);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,MergesLotsOfSmallBlocks,The following statement contains a magic number: TestStream content = new TestStream(_async' null'                  Enumerable.Range(1' 250).Select(b => TestStream.Read((byte)b' b)).ToArray()              );
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,SmallMaxWriteSize,The following statement contains a magic number: TestStream content = new TestStream(_async' null'                  Enumerable.Range(1' 1000).Select(b => TestStream.Read((byte)b' 2)).ToArray()              );
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,SmallMaxWriteSize,The following statement contains a magic number: TestStream content = new TestStream(_async' null'                  Enumerable.Range(1' 1000).Select(b => TestStream.Read((byte)b' 2)).ToArray()              );
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,SmallMaxWriteSize,The following statement contains a magic number: PartitionedUploader uploader = new PartitionedUploader(clientMock.Object' new StorageTransferOptions() { MaximumTransferLength = 100 }' arrayPool: testPool);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,SmallMaxWriteSize,The following statement contains a magic number: Assert.AreEqual(41' testPool.TotalRents);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,SmallMaxWriteSize,The following statement contains a magic number: Assert.LessOrEqual(bytes.Length' 100);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,SmallMaxWriteSize,The following statement contains a magic number: Assert.GreaterOrEqual(bytes.Length' 50);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,MergesBlocksUntilTheyReachOverHalfMaxSize,The following statement contains a magic number: TestStream content = new TestStream(_async' null'                  TestStream.Read(0' 5)'                  TestStream.Read(1' 5)'                  TestStream.Read(2' 10)              );
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,MergesBlocksUntilTheyReachOverHalfMaxSize,The following statement contains a magic number: TestStream content = new TestStream(_async' null'                  TestStream.Read(0' 5)'                  TestStream.Read(1' 5)'                  TestStream.Read(2' 10)              );
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,MergesBlocksUntilTheyReachOverHalfMaxSize,The following statement contains a magic number: TestStream content = new TestStream(_async' null'                  TestStream.Read(0' 5)'                  TestStream.Read(1' 5)'                  TestStream.Read(2' 10)              );
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,MergesBlocksUntilTheyReachOverHalfMaxSize,The following statement contains a magic number: TestStream content = new TestStream(_async' null'                  TestStream.Read(0' 5)'                  TestStream.Read(1' 5)'                  TestStream.Read(2' 10)              );
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,MergesBlocksUntilTheyReachOverHalfMaxSize,The following statement contains a magic number: PartitionedUploader uploader = new PartitionedUploader(clientMock.Object' new StorageTransferOptions() { MaximumTransferLength = 20}' arrayPool: testPool);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,MergesBlocksUntilTheyReachOverHalfMaxSize,The following statement contains a magic number: Assert.AreEqual(2' sink.Staged.Count);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,MergesBlocksUntilTheyReachOverHalfMaxSize,The following statement contains a magic number: Assert.AreEqual(3' testPool.TotalRents);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,BlockIdsAre64BytesUniqueBase64Strings,The following statement contains a magic number: TestStream content = new TestStream(_async' null'                  TestStream.Read(0' 10)'                  TestStream.Read(0' 10)              );
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,BlockIdsAre64BytesUniqueBase64Strings,The following statement contains a magic number: TestStream content = new TestStream(_async' null'                  TestStream.Read(0' 10)'                  TestStream.Read(0' 10)              );
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,BlockIdsAre64BytesUniqueBase64Strings,The following statement contains a magic number: PartitionedUploader uploader = new PartitionedUploader(clientMock.Object' new StorageTransferOptions() { MaximumTransferLength = 20});
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,BlockIdsAre64BytesUniqueBase64Strings,The following statement contains a magic number: Assert.AreEqual(2' sink.Staged.Count);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,BlockIdsAre64BytesUniqueBase64Strings,The following statement contains a magic number: Assert.AreEqual(64' blockId.Length);
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,AsyncUploadsAsSingleBlockIfUnderLimit,The following statement contains a magic number: TestStream content = new TestStream(true' 10' TestStream.Read(0' 10));
Magic Number,Azure.Storage.Blobs.Tests,PartitionedUploaderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,AsyncUploadsAsSingleBlockIfUnderLimit,The following statement contains a magic number: TestStream content = new TestStream(true' 10' TestStream.Read(0' 10));
Magic Number,Azure.Storage.Blobs.Tests,StagingSink,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,CommitAsync,The following statement contains a magic number: await Task.Delay(25);
Magic Number,Azure.Storage.Blobs.Tests,StagingSink,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,StageAsync,The following statement contains a magic number: await Task.Delay(25);
Magic Number,Azure.Storage.Blobs.Tests,StagingSink,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Blobs\tests\PartitionedUploaderTests.cs,Stage,The following statement contains a magic number: return Response.FromValue(new BlockInfo()' new MockResponse(200));
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: values == null || values.Length != 21
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TenantConfiguration,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TenantConfiguration.cs,Parse,The following statement contains a magic number: return new TenantConfiguration              {                  // Keep these in the same order as Serialize above!                  TenantName = values[0]'                  AccountName = values[1]'                  AccountKey = values[2]'                  BlobServiceEndpoint = values[3]'                  FileServiceEndpoint = values[4]'                  QueueServiceEndpoint = values[5]'                  TableServiceEndpoint = values[6]'                  BlobSecurePortOverride = values[7]'                  FileSecurePortOverride = values[8]'                  TableSecurePortOverride = values[9]'                  QueueSecurePortOverride = values[10]'                  BlobServiceSecondaryEndpoint = values[11]'                  FileServiceSecondaryEndpoint = values[12]'                  QueueServiceSecondaryEndpoint = values[13]'                  TableServiceSecondaryEndpoint = values[14]'                  ActiveDirectoryApplicationId = values[15]'                  ActiveDirectoryApplicationSecret = values[16]'                  ActiveDirectoryTenantId = values[17]'                  ActiveDirectoryAuthEndpoint = values[18]'                  TenantType = ParseTenantType(values[19])'                  ConnectionString = values[20]              };
Magic Number,Azure.Storage.Test,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestConstants.cs,TestConstants,The following statement contains a magic number: ContentMD5 = MD5.Create().ComputeHash(test.GetRandomBuffer(16));
Magic Number,Azure.Storage.Test,TestExceptionPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExceptionPolicy.cs,SimulateFailure,The following statement contains a magic number: message.Response = new MockResponse(Simulate404 && message.Request.Uri.Host == SecondaryUri.Host ? 404 : 429);
Magic Number,Azure.Storage.Test,TestExceptionPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestExceptionPolicy.cs,SimulateFailure,The following statement contains a magic number: message.Response = new MockResponse(Simulate404 && message.Request.Uri.Host == SecondaryUri.Host ? 404 : 429);
Magic Number,Azure.Storage.Test,TestHelper,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestHelper.cs,AssertSequenceEqual,The following statement contains a magic number: (int index' T expected' T actual)[] firstErrors = expected.Zip(actual' (e' a) => (expected: e' actual: a)).Select((x' i) => (index: i' x.expected' x.actual)).Where(x => !x.expected.Equals(x.actual)).Take(5).ToArray();
Magic Number,Azure.Storage.Test,TestResponseClassifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestResponseClassifier.cs,IsRetriableResponse,The following statement contains a magic number: message.Response.Status >= 400 &&                  message.Response.Headers.TryGetValue("x-ms-error-code"' out var error)
Missing Default,Azure.Core.Testing,TestRecording,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRecording.cs,TestRecording,The following switch statement is missing a default case: switch (Mode)              {                  case RecordedTestMode.Record:                      _session = new RecordSession();                      if (File.Exists(_sessionFile))                      {                          try                          {                              _previousSession = Load();                          }                          catch (Exception)                          {                              // ignore                          }                      }                      break;                  case RecordedTestMode.Playback:                      _session = Load();                      break;              }
Missing Default,Azure.Storage.Test.Shared,StorageRecordedTestSanitizer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\StorageRecordedTestSanitizer.cs,SanitizeTextBody,The following switch statement is missing a default case: switch (doc.RootElement.GetProperty(property.Name).ValueKind)                                      {                                          case JsonValueKind.Null:                                              writer.WriteNull(property.Name);                                              break;                                          case JsonValueKind.True:                                              writer.WriteBoolean(property.Name' true);                                              break;                                          case JsonValueKind.False:                                              writer.WriteBoolean(property.Name' false);                                              break;                                          case JsonValueKind.Number:                                              writer.WriteNumber(property.Name' property.Value.GetDouble());                                              break;                                          case JsonValueKind.String:                                              writer.WriteString(                                                  property.Name'                                                  property.Name == "access_token" ?                                                      SanitizeValue :                                                      property.Value.GetString());                                              break;                                              // Ignore nested objects and arrays...                                      }
Missing Default,Azure.Storage.Test,TestResponseClassifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\storage\Azure.Storage.Common\tests\Shared\TestResponseClassifier.cs,IsRetriableResponse,The following switch statement is missing a default case: switch (error)                  {                      case "InternalError":                      case "OperationTimedOut":                      case "ServerBusy":                      case "CannotVerifyCopySource":                          return true;                  }
