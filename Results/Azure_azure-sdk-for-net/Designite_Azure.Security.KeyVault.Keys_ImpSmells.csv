Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Azure.Security.KeyVault.Keys,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\JsonWebKey.cs,ReadProperties,Cyclomatic complexity of the method is 18
Complex Method,Azure.Security.KeyVault.Keys,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\JsonWebKey.cs,WriteProperties,Cyclomatic complexity of the method is 17
Complex Method,Azure.Security.KeyVault.Keys,KeyCurveName,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyCurveName.cs,FromOid,Cyclomatic complexity of the method is 10
Complex Method,Azure.Security.KeyVault.Keys,KeyRequestParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyRequestParameters.cs,WriteProperties,Cyclomatic complexity of the method is 9
Complex Method,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,Cyclomatic complexity of the method is 10
Complex Method,Azure.Security.KeyVault.Keys.Cryptography,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,Cyclomatic complexity of the method is 11
Long Parameter List,Azure.Security.KeyVault.Keys,KeyModelFactory,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyModelFactory.cs,JsonWebKey,The method has 16 parameters. Parameters: keyType' id' keyOps' curveName' d' dp' dq' e' k' n' p' q' qi' t' x' y
Long Parameter List,Azure.Security.KeyVault.Keys,KeyModelFactory,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyModelFactory.cs,KeyProperties,The method has 8 parameters. Parameters: id' vaultUri' name' version' managed' createdOn' updatedOn' recoveryLevel
Long Parameter List,Azure.Security.KeyVault.Keys,KeyModelFactory,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyModelFactory.cs,DeletedKey,The method has 5 parameters. Parameters: properties' key' recoveryId' deletedOn' scheduledPurgeDate
Long Parameter List,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,Azure.Security.KeyVault.Keys.Cryptography,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,GetPageAsync,The method has 5 parameters. Parameters: firstPageUri' nextLink' itemFactory' operationName' cancellationToken
Long Parameter List,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,GetPage,The method has 5 parameters. Parameters: firstPageUri' nextLink' itemFactory' operationName' cancellationToken
Long Parameter List,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequestAsync,The method has 5 parameters. Parameters: method' content' resultFactory' cancellationToken' path
Long Parameter List,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequest,The method has 5 parameters. Parameters: method' content' resultFactory' cancellationToken' path
Long Identifier,Azure.Security.KeyVault.Keys,DeletedKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\DeletedKey.cs,,The length of the parameter ScheduledPurgeDatePropertyName is 30.
Long Identifier,Azure.Security.KeyVault.Keys.Cryptography,KeyEncryptParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\KeyEncryptParameters.cs,,The length of the parameter s_authenticationDataPropertyNameBytes is 37.
Long Identifier,Azure.Security.KeyVault.Keys.Cryptography,KeyEncryptParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\KeyEncryptParameters.cs,,The length of the parameter s_authenticationTagPropertyNameBytes is 36.
Long Statement,Azure.Security.KeyVault.Keys,DeleteKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\DeleteKeyOperation.cs,UpdateStatusAsync,The length of the statement  "                    _response = await _pipeline.GetResponseAsync(RequestMethod.Get' cancellationToken' KeyClient.DeletedKeysPath' _value.Name).ConfigureAwait(false); " is 145.
Long Statement,Azure.Security.KeyVault.Keys,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\JsonWebKey.cs,ToRSA,The length of the statement  "            // Key parameter length requirements defined by 2.2.2.9.1 RSA Private Key BLOB specification: https://docs.microsoft.com/openspecs/windows_protocols/ms-wcce/5cf2e6b9-3195-4f85-bc18-05b50e6d4e11 " is 193.
Long Statement,Azure.Security.KeyVault.Keys,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\JsonWebKey.cs,ForceBufferLength,The length of the statement  "                    throw new InvalidOperationException($"key parameter {name} is too long: expected at most {requiredLengthInBytes} bytes' but found {value.Length - i} bytes"); " is 157.
Long Statement,Azure.Security.KeyVault.Keys,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\JsonWebKey.cs,Initialize,The length of the statement  "            CurveName = KeyCurveName.FromOid(ecParameters.Curve.Oid' ecdsa.KeySize).ToString() ?? throw new InvalidOperationException("elliptic curve name is invalid"); " is 156.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,CreateKey,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Post' parameters' () => new KeyVaultKey(name)' cancellationToken' KeysPath' name' "/create"); " is 136.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,CreateKeyAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Post' parameters' () => new KeyVaultKey(name)' cancellationToken' KeysPath' name' "/create").ConfigureAwait(false); " is 169.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,CreateEcKey,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Post' parameters' () => new KeyVaultKey(ecKeyOptions.Name)' cancellationToken' KeysPath' ecKeyOptions.Name' "/create"); " is 162.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,CreateEcKeyAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Post' parameters' () => new KeyVaultKey(ecKeyOptions.Name)' cancellationToken' KeysPath' ecKeyOptions.Name' "/create").ConfigureAwait(false); " is 195.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,CreateRsaKey,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Post' parameters' () => new KeyVaultKey(rsaKeyOptions.Name)' cancellationToken' KeysPath' rsaKeyOptions.Name' "/create"); " is 164.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,CreateRsaKeyAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Post' parameters' () => new KeyVaultKey(rsaKeyOptions.Name)' cancellationToken' KeysPath' rsaKeyOptions.Name' "/create").ConfigureAwait(false); " is 197.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,UpdateKeyProperties,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Patch' parameters' () => new KeyVaultKey(properties.Name)' cancellationToken' KeysPath' properties.Name' "/"' properties.Version); " is 173.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,UpdateKeyPropertiesAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Patch' parameters' () => new KeyVaultKey(properties.Name)' cancellationToken' KeysPath' properties.Name' "/"' properties.Version).ConfigureAwait(false); " is 206.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,GetKey,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Get' () => new KeyVaultKey(name)' cancellationToken' KeysPath' name' "/"' version); " is 126.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,GetKeyAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Get' () => new KeyVaultKey(name)' cancellationToken' KeysPath' name' "/"' version).ConfigureAwait(false); " is 159.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,GetPropertiesOfKeys,The length of the statement  "            return PageResponseEnumerator.CreateEnumerable(nextLink => _pipeline.GetPage(firstPageUri' nextLink' () => new KeyProperties()' "Azure.Security.KeyVault.Keys.KeyClient.GetPropertiesOfKeys"' cancellationToken)); " is 210.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,GetPropertiesOfKeysAsync,The length of the statement  "            return PageResponseEnumerator.CreateAsyncEnumerable(nextLink => _pipeline.GetPageAsync(firstPageUri' nextLink' () => new KeyProperties()' "Azure.Security.KeyVault.Keys.KeyClient.GetPropertiesOfKeys"' cancellationToken)); " is 220.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,GetPropertiesOfKeyVersions,The length of the statement  "            return PageResponseEnumerator.CreateEnumerable(nextLink => _pipeline.GetPage(firstPageUri' nextLink' () => new KeyProperties()' "Azure.Security.KeyVault.Keys.KeyClient.GetPropertiesOfKeyVersions"' cancellationToken)); " is 217.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,GetPropertiesOfKeyVersionsAsync,The length of the statement  "            return PageResponseEnumerator.CreateAsyncEnumerable(nextLink => _pipeline.GetPageAsync(firstPageUri' nextLink' () => new KeyProperties()' "Azure.Security.KeyVault.Keys.KeyClient.GetPropertiesOfKeyVersions"' cancellationToken)); " is 227.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,GetDeletedKeyAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Get' () => new DeletedKey(name)' cancellationToken' DeletedKeysPath' name).ConfigureAwait(false); " is 151.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,StartDeleteKey,The length of the statement  "                Response<DeletedKey> response = _pipeline.SendRequest(RequestMethod.Delete' () => new DeletedKey(name)' cancellationToken' KeysPath' name); " is 139.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,StartDeleteKeyAsync,The length of the statement  "                Response<DeletedKey> response = await _pipeline.SendRequestAsync(RequestMethod.Delete' () => new DeletedKey(name)' cancellationToken' KeysPath' name).ConfigureAwait(false); " is 172.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,GetDeletedKeys,The length of the statement  "            return PageResponseEnumerator.CreateEnumerable(nextLink => _pipeline.GetPage(firstPageUri' nextLink' () => new DeletedKey()' "Azure.Security.KeyVault.Keys.KeyClient.GetDeletedKeys"' cancellationToken)); " is 202.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,GetDeletedKeysAsync,The length of the statement  "            return PageResponseEnumerator.CreateAsyncEnumerable(nextLink => _pipeline.GetPageAsync(firstPageUri' nextLink' () => new DeletedKey()' "Azure.Security.KeyVault.Keys.KeyClient.GetDeletedKeys"' cancellationToken)); " is 212.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,PurgeDeletedKeyAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Delete' cancellationToken' DeletedKeysPath' name).ConfigureAwait(false); " is 126.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,StartRecoverDeletedKey,The length of the statement  "                Response<KeyVaultKey> response = _pipeline.SendRequest(RequestMethod.Post' () => new KeyVaultKey(name)' cancellationToken' DeletedKeysPath' name' "/recover"); " is 158.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,StartRecoverDeletedKeyAsync,The length of the statement  "                Response<KeyVaultKey> response = await _pipeline.SendRequestAsync(RequestMethod.Post' () => new KeyVaultKey(name)' cancellationToken' DeletedKeysPath' name' "/recover").ConfigureAwait(false); " is 191.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,BackupKey,The length of the statement  "                Response<KeyBackup> backup = _pipeline.SendRequest(RequestMethod.Post' () => new KeyBackup()' cancellationToken' KeysPath' name' "/backup"); " is 140.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,BackupKeyAsync,The length of the statement  "                Response<KeyBackup> backup = await _pipeline.SendRequestAsync(RequestMethod.Post' () => new KeyBackup()' cancellationToken' KeysPath' name' "/backup").ConfigureAwait(false); " is 173.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,RestoreKeyBackup,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Post' new KeyBackup { Value = backup }' () => new KeyVaultKey()' cancellationToken' KeysPath' "/restore"); " is 149.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,RestoreKeyBackupAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Post' new KeyBackup { Value = backup }' () => new KeyVaultKey()' cancellationToken' KeysPath' "/restore").ConfigureAwait(false); " is 182.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,ImportKey,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Put' importKeyOptions' () => new KeyVaultKey(name)' cancellationToken' KeysPath' name); " is 130.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,ImportKeyAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Put' importKeyOptions' () => new KeyVaultKey(name)' cancellationToken' KeysPath' name).ConfigureAwait(false); " is 163.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,ImportKey,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Put' importKeyOptions' () => new KeyVaultKey(importKeyOptions.Name)' cancellationToken' KeysPath' importKeyOptions.Name); " is 164.
Long Statement,Azure.Security.KeyVault.Keys,KeyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClient.cs,ImportKeyAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Put' importKeyOptions' () => new KeyVaultKey(importKeyOptions.Name)' cancellationToken' KeysPath' importKeyOptions.Name).ConfigureAwait(false); " is 197.
Long Statement,Azure.Security.KeyVault.Keys,KeyProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyProperties.cs,ParseId,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "Invalid ObjectIdentifier: {0}. Bad number of segments: {1}"' idToParse' idToParse.Segments.Length)); " is 173.
Long Statement,Azure.Security.KeyVault.Keys,KeyProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyProperties.cs,ParseId,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "Invalid ObjectIdentifier: {0}. segment [1] should be 'keys/'' found '{1}'"' idToParse' idToParse.Segments[1])); " is 184.
Long Statement,Azure.Security.KeyVault.Keys,RecoverDeletedKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\RecoverDeletedKeyOperation.cs,UpdateStatus,The length of the statement  "                using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation.UpdateStatus"); " is 124.
Long Statement,Azure.Security.KeyVault.Keys,RecoverDeletedKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\RecoverDeletedKeyOperation.cs,UpdateStatus,The length of the statement  "                    _response = _pipeline.GetResponse(RequestMethod.Get' cancellationToken' KeyClient.KeysPath' _value.Name' "/"' _value.Properties.Version); " is 137.
Long Statement,Azure.Security.KeyVault.Keys,RecoverDeletedKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\RecoverDeletedKeyOperation.cs,UpdateStatusAsync,The length of the statement  "                using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.RecoverDeletedKeyOperation.UpdateStatus"); " is 124.
Long Statement,Azure.Security.KeyVault.Keys,RecoverDeletedKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\RecoverDeletedKeyOperation.cs,UpdateStatusAsync,The length of the statement  "                    _response = await _pipeline.GetResponseAsync(RequestMethod.Get' cancellationToken' KeyClient.KeysPath' _value.Name' "/"' _value.Properties.Version).ConfigureAwait(false); " is 170.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,AesCryptographyProvider,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesCryptographyProvider.cs,UnwrapKey,The length of the statement  "                throw new ArgumentException($"Key wrap algorithm {algorithm} key size {algorithmKeySizeBytes} is greater than the underlying key size {keySizeBytes}"); " is 151.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,AesCryptographyProvider,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesCryptographyProvider.cs,WrapKey,The length of the statement  "                throw new ArgumentException($"Key wrap algorithm {algorithm} key size {algorithmKeySizeBytes} is greater than the underlying key size {keySizeBytes}"); " is 151.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The length of the statement  "                    throw new ArgumentOutOfRangeException(nameof(inputCount)' "The sum of inputCount and inputOffset parameters must not be larger than the length of inputBuffer"); " is 160.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The length of the statement  "                    throw new ArgumentOutOfRangeException(nameof(inputCount)' "The sum of inputCount and inputOffset parameters must not be larger than the length of inputBuffer"); " is 160.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,EncryptAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Encrypt"); " is 124.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,Encrypt,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Encrypt"); " is 124.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,DecryptAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Decrypt"); " is 124.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,Decrypt,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Decrypt"); " is 124.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,WrapKeyAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.WrapKey"); " is 124.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,WrapKey,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.WrapKey"); " is 124.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,UnwrapKeyAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.UnwrapKey"); " is 126.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,UnwrapKey,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.UnwrapKey"); " is 126.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,SignAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Sign"); " is 121.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,Sign,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Sign"); " is 121.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,VerifyAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Verify"); " is 123.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,Verify,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Verify"); " is 123.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,SignDataAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.SignData"); " is 125.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,SignData,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.SignData"); " is 125.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,SignDataAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.SignData"); " is 125.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,SignData,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.SignData"); " is 125.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,VerifyDataAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.VerifyData"); " is 127.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,VerifyData,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.VerifyData"); " is 127.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,VerifyDataAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.VerifyData"); " is 127.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,VerifyData,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.VerifyData"); " is 127.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,WrapKeyAsync,The length of the statement  "            WrapResult result = await WrapKeyAsync(new KeyWrapAlgorithm(algorithm)' key.ToArray()' cancellationToken).ConfigureAwait(false); " is 128.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,UnwrapKey,The length of the statement  "            byte[] buffer = MemoryMarshal.TryGetArray(encryptedKey' out ArraySegment<byte> segment) ? segment.Array : encryptedKey.ToArray(); " is 129.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,UnwrapKeyAsync,The length of the statement  "            byte[] buffer = MemoryMarshal.TryGetArray(encryptedKey' out ArraySegment<byte> segment) ? segment.Array : encryptedKey.ToArray(); " is 129.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,UnwrapKeyAsync,The length of the statement  "            UnwrapResult result = await UnwrapKeyAsync(new KeyWrapAlgorithm(algorithm)' buffer' cancellationToken).ConfigureAwait(false); " is 125.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,InitializeAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Initialize"); " is 127.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,CryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\CryptographyClient.cs,Initialize,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.CryptographyClient.Initialize"); " is 127.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,EcCryptographyProvider,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\EcCryptographyProvider.cs,Sign,The length of the statement  "                throw new ArgumentException($"Signature algorithm {algorithm} key size {algorithmCurve.KeySize} does not match underlying key size {_curve.KeySize}"); " is 150.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,EcCryptographyProvider,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\EcCryptographyProvider.cs,Sign,The length of the statement  "                throw new ArgumentException($"Signature algorithm {algorithm} key curve name does not correspond to underlying key curve name {_curve}"); " is 137.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,EcCryptographyProvider,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\EcCryptographyProvider.cs,Verify,The length of the statement  "                throw new ArgumentException($"Signature algorithm {algorithm} key size {algorithmCurve.KeySize} does not match underlying key size {_curve.KeySize}"); " is 150.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,EcCryptographyProvider,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\EcCryptographyProvider.cs,Verify,The length of the statement  "                throw new ArgumentException($"Signature algorithm {algorithm} key curve name does not correspond to underlying key curve name {_curve}"); " is 137.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,KeyResolver,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\KeyResolver.cs,Resolve,The length of the statement  "            using DiagnosticScope scope = _clientDiagnostics.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.KeyResolver.Resolve"); " is 126.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,KeyResolver,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\KeyResolver.cs,ResolveAsync,The length of the statement  "            using DiagnosticScope scope = _clientDiagnostics.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.KeyResolver.Resolve"); " is 126.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,KeyResolver,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\KeyResolver.cs,GetKey,The length of the statement  "            return KeyVaultIdentifier.Parse(keyId).Collection == KeyVaultIdentifier.SecretsCollection ? (KeyVaultKey)ParseResponse(response' new SecretKey()) : ParseResponse(response' new KeyVaultKey()); " is 191.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,KeyResolver,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\KeyResolver.cs,GetKeyAsync,The length of the statement  "            return KeyVaultIdentifier.Parse(keyId).Collection == KeyVaultIdentifier.SecretsCollection ? (KeyVaultKey)ParseResponse(response' new SecretKey()) : ParseResponse(response' new KeyVaultKey()); " is 191.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,LocalCryptographyProvider,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\LocalCryptographyProvider.cs,ThrowIfTimeInvalid,The length of the statement  "                throw new InvalidOperationException($"The key \"{_key.Name}\" is not valid before {_key.Properties.NotBefore.Value:r}."); " is 121.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,LocalCryptographyProvider,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\LocalCryptographyProvider.cs,ThrowIfTimeInvalid,The length of the statement  "                throw new InvalidOperationException($"The key \"{_key.Name}\" is not valid after {_key.Properties.ExpiresOn.Value:r}."); " is 120.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,EncryptAsync,The length of the statement  "            using DiagnosticScope scope = Pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.RemoteCryptographyClient.Encrypt"); " is 129.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,EncryptAsync,The length of the statement  "                return await Pipeline.SendRequestAsync(RequestMethod.Post' parameters' () => new EncryptResult { Algorithm = algorithm }' cancellationToken' "/encrypt").ConfigureAwait(false); " is 175.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,Encrypt,The length of the statement  "            using DiagnosticScope scope = Pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.RemoteCryptographyClient.Encrypt"); " is 129.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,Encrypt,The length of the statement  "                return Pipeline.SendRequest(RequestMethod.Post' parameters' () => new EncryptResult { Algorithm = algorithm }' cancellationToken' "/encrypt"); " is 142.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,DecryptAsync,The length of the statement  "            using DiagnosticScope scope = Pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.RemoteCryptographyClient.Decrypt"); " is 129.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,DecryptAsync,The length of the statement  "                return await Pipeline.SendRequestAsync(RequestMethod.Post' parameters' () => new DecryptResult { Algorithm = algorithm }' cancellationToken' "/decrypt").ConfigureAwait(false); " is 175.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,Decrypt,The length of the statement  "            using DiagnosticScope scope = Pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.RemoteCryptographyClient.Decrypt"); " is 129.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,Decrypt,The length of the statement  "                return Pipeline.SendRequest(RequestMethod.Post' parameters' () => new DecryptResult { Algorithm = algorithm }' cancellationToken' "/decrypt"); " is 142.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,WrapKeyAsync,The length of the statement  "            using DiagnosticScope scope = Pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.RemoteCryptographyClient.WrapKey"); " is 129.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,WrapKeyAsync,The length of the statement  "                return await Pipeline.SendRequestAsync(RequestMethod.Post' parameters' () => new WrapResult { Algorithm = algorithm }' cancellationToken' "/wrapKey").ConfigureAwait(false); " is 172.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,WrapKey,The length of the statement  "            using DiagnosticScope scope = Pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.RemoteCryptographyClient.WrapKey"); " is 129.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,WrapKey,The length of the statement  "                return Pipeline.SendRequest(RequestMethod.Post' parameters' () => new WrapResult { Algorithm = algorithm }' cancellationToken' "/wrapKey"); " is 139.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,UnwrapKeyAsync,The length of the statement  "            using DiagnosticScope scope = Pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.RemoteCryptographyClient.UnwrapKey"); " is 131.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,UnwrapKeyAsync,The length of the statement  "                return await Pipeline.SendRequestAsync(RequestMethod.Post' parameters' () => new UnwrapResult { Algorithm = algorithm }' cancellationToken' "/unwrapKey").ConfigureAwait(false); " is 176.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,UnwrapKey,The length of the statement  "            using DiagnosticScope scope = Pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.RemoteCryptographyClient.UnwrapKey"); " is 131.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,UnwrapKey,The length of the statement  "                return Pipeline.SendRequest(RequestMethod.Post' parameters' () => new UnwrapResult { Algorithm = algorithm }' cancellationToken' "/unwrapKey"); " is 143.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,SignAsync,The length of the statement  "            using DiagnosticScope scope = Pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.RemoteCryptographyClient.Sign"); " is 126.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,SignAsync,The length of the statement  "                return await Pipeline.SendRequestAsync(RequestMethod.Post' parameters' () => new SignResult { Algorithm = algorithm }' cancellationToken' "/sign").ConfigureAwait(false); " is 169.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,Sign,The length of the statement  "            using DiagnosticScope scope = Pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.RemoteCryptographyClient.Sign"); " is 126.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,Sign,The length of the statement  "                return Pipeline.SendRequest(RequestMethod.Post' parameters' () => new SignResult { Algorithm = algorithm }' cancellationToken' "/sign"); " is 136.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,VerifyAsync,The length of the statement  "            using DiagnosticScope scope = Pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.RemoteCryptographyClient.Verify"); " is 128.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,VerifyAsync,The length of the statement  "                return await Pipeline.SendRequestAsync(RequestMethod.Post' parameters' () => new VerifyResult { Algorithm = algorithm' KeyId = _keyId.ToString() }' cancellationToken' "/verify").ConfigureAwait(false); " is 200.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,Verify,The length of the statement  "            using DiagnosticScope scope = Pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.RemoteCryptographyClient.Verify"); " is 128.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,Verify,The length of the statement  "                return Pipeline.SendRequest(RequestMethod.Post' parameters' () => new VerifyResult { Algorithm = algorithm' KeyId = _keyId.ToString() }' cancellationToken' "/verify"); " is 167.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,GetKeyAsync,The length of the statement  "            using DiagnosticScope scope = Pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.RemoteCryptographyClient.GetKey"); " is 128.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,GetKeyAsync,The length of the statement  "                return await Pipeline.SendRequestAsync(RequestMethod.Get' () => new KeyVaultKey()' cancellationToken).ConfigureAwait(false); " is 124.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RemoteCryptographyClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RemoteCryptographyClient.cs,GetKey,The length of the statement  "            using DiagnosticScope scope = Pipeline.CreateScope("Azure.Security.KeyVault.Keys.Cryptography.RemoteCryptographyClient.GetKey"); " is 128.
Long Statement,Azure.Security.KeyVault.Keys.Cryptography,RsaCryptographyProvider,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RsaCryptographyProvider.cs,SupportsOperation,The length of the statement  "                if (operation == KeyOperation.Encrypt || operation == KeyOperation.Decrypt || operation == KeyOperation.Sign || operation == KeyOperation.Verify || operation == KeyOperation.WrapKey || operation == KeyOperation.UnwrapKey) " is 221.
Long Statement,Microsoft.Extensions.Azure,KeyClientBuilderExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClientBuilderExtensions.cs,AddKeyClient,The length of the statement  "            return builder.RegisterClientFactory<KeyClient' KeyClientOptions>((options' cred) => new KeyClient(vaultUri' cred' options)); " is 125.
Long Statement,Microsoft.Extensions.Azure,KeyClientBuilderExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyClientBuilderExtensions.cs,AddCryptographyClient,The length of the statement  "            return builder.RegisterClientFactory<CryptographyClient' CryptographyClientOptions>((options' cred) => new CryptographyClient(vaultUri' cred' options)); " is 152.
Long Statement,Azure.Security.KeyVault,Base64Url,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\Base64Url.cs,Decode,The length of the statement  "            str = new StringBuilder(str).Replace('-'' '+').Replace('_'' '/').Append('='' (str.Length % 4 == 0) ? 0 : 4 - (str.Length % 4)).ToString(); " is 138.
Long Statement,Azure.Security.KeyVault,Base64Url,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\Base64Url.cs,Encode,The length of the statement  "            return new StringBuilder(Convert.ToBase64String(bytes)).Replace('+'' '-').Replace('/'' '_').Replace("="' "").ToString(); " is 120.
Long Statement,Azure.Security.KeyVault,ChallengeBasedAuthenticationPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\ChallengeBasedAuthenticationPolicy.cs,AuthenticateRequestAsync,The length of the statement  "                        await _credential.GetTokenAsync(new TokenRequestContext(_challenge.Scopes)' message.CancellationToken).ConfigureAwait(false) : " is 126.
Long Statement,Azure.Security.KeyVault,AuthenticationChallenge,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\ChallengeBasedAuthenticationPolicy.cs,GetChallengeFromResponse,The length of the statement  "                if (response.Headers.TryGetValue("WWW-Authenticate"' out string challengeValue) && challengeValue.StartsWith(BearerChallengePrefix' StringComparison.OrdinalIgnoreCase)) " is 168.
Long Statement,Azure.Security.KeyVault,KeyVaultIdentifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultIdentifier.cs,Parse,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "Invalid ObjectIdentifier: {0}. segment [1] should be '{1}/'' found '{2}'"' id' collection' identifier.Collection)); " is 188.
Long Statement,Azure.Security.KeyVault,KeyVaultIdentifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultIdentifier.cs,Parse,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "Invalid ObjectIdentifier: {0}. Bad number of segments: {1}"' id' id.Segments.Length)); " is 159.
Complex Conditional,Azure.Security.KeyVault.Keys.Cryptography,RsaCryptographyProvider,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\RsaCryptographyProvider.cs,SupportsOperation,The conditional expression  "operation == KeyOperation.Encrypt || operation == KeyOperation.Decrypt || operation == KeyOperation.Sign || operation == KeyOperation.Verify || operation == KeyOperation.WrapKey || operation == KeyOperation.UnwrapKey"  is complex.
Complex Conditional,Azure.Core.Pipeline,ContentTypeUtilities,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\ContentTypeUtilities.cs,TryGetTextEncoding,The conditional expression  "contentType.StartsWith(textContentTypePrefix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(jsonSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(xmlSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(urlEncodedSuffix' StringComparison.OrdinalIgnoreCase)"  is complex.
Magic Number,Azure.Security.KeyVault.Keys,DeleteKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\DeleteKeyOperation.cs,CheckCompletedAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the key was deleted.                      return true;                    case 404:                      return false;                    default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault.Keys,DeleteKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\DeleteKeyOperation.cs,CheckCompletedAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the key was deleted.                      return true;                    case 404:                      return false;                    default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault.Keys,DeleteKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\DeleteKeyOperation.cs,CheckCompletedAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the key was deleted.                      return true;                    case 404:                      return false;                    default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault.Keys,DeleteKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\DeleteKeyOperation.cs,CheckCompleted,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the key was deleted.                      return true;                    case 404:                      return false;                    default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault.Keys,DeleteKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\DeleteKeyOperation.cs,CheckCompleted,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the key was deleted.                      return true;                    case 404:                      return false;                    default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault.Keys,DeleteKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\DeleteKeyOperation.cs,CheckCompleted,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the key was deleted.                      return true;                    case 404:                      return false;                    default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault.Keys,KeyCurveName,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyCurveName.cs,FromOid,The following statement contains a magic number: switch (keySize)                  {                      case 521 when string.Equals(oid.FriendlyName' "nistP521"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "secp521r1"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "ECDSA_P521"' StringComparison.OrdinalIgnoreCase):                          return P521;                        case 384 when string.Equals(oid.FriendlyName' "nistP384"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "secp384r1"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "ECDSA_P384"' StringComparison.OrdinalIgnoreCase):                          return P384;                        case 256 when string.Equals(oid.FriendlyName' "secp256k1"' StringComparison.OrdinalIgnoreCase):                          return P256K;                        case 256 when string.Equals(oid.FriendlyName' "nistP256"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "secp256r1"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "ECDSA_P256"' StringComparison.OrdinalIgnoreCase):                          return P256;                  }
Magic Number,Azure.Security.KeyVault.Keys,KeyCurveName,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyCurveName.cs,FromOid,The following statement contains a magic number: switch (keySize)                  {                      case 521 when string.Equals(oid.FriendlyName' "nistP521"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "secp521r1"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "ECDSA_P521"' StringComparison.OrdinalIgnoreCase):                          return P521;                        case 384 when string.Equals(oid.FriendlyName' "nistP384"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "secp384r1"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "ECDSA_P384"' StringComparison.OrdinalIgnoreCase):                          return P384;                        case 256 when string.Equals(oid.FriendlyName' "secp256k1"' StringComparison.OrdinalIgnoreCase):                          return P256K;                        case 256 when string.Equals(oid.FriendlyName' "nistP256"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "secp256r1"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "ECDSA_P256"' StringComparison.OrdinalIgnoreCase):                          return P256;                  }
Magic Number,Azure.Security.KeyVault.Keys,KeyCurveName,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyCurveName.cs,FromOid,The following statement contains a magic number: switch (keySize)                  {                      case 521 when string.Equals(oid.FriendlyName' "nistP521"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "secp521r1"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "ECDSA_P521"' StringComparison.OrdinalIgnoreCase):                          return P521;                        case 384 when string.Equals(oid.FriendlyName' "nistP384"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "secp384r1"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "ECDSA_P384"' StringComparison.OrdinalIgnoreCase):                          return P384;                        case 256 when string.Equals(oid.FriendlyName' "secp256k1"' StringComparison.OrdinalIgnoreCase):                          return P256K;                        case 256 when string.Equals(oid.FriendlyName' "nistP256"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "secp256r1"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "ECDSA_P256"' StringComparison.OrdinalIgnoreCase):                          return P256;                  }
Magic Number,Azure.Security.KeyVault.Keys,KeyCurveName,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyCurveName.cs,FromOid,The following statement contains a magic number: switch (keySize)                  {                      case 521 when string.Equals(oid.FriendlyName' "nistP521"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "secp521r1"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "ECDSA_P521"' StringComparison.OrdinalIgnoreCase):                          return P521;                        case 384 when string.Equals(oid.FriendlyName' "nistP384"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "secp384r1"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "ECDSA_P384"' StringComparison.OrdinalIgnoreCase):                          return P384;                        case 256 when string.Equals(oid.FriendlyName' "secp256k1"' StringComparison.OrdinalIgnoreCase):                          return P256K;                        case 256 when string.Equals(oid.FriendlyName' "nistP256"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "secp256r1"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "ECDSA_P256"' StringComparison.OrdinalIgnoreCase):                          return P256;                  }
Magic Number,Azure.Security.KeyVault.Keys,KeyProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyProperties.cs,ParseId,The following statement contains a magic number: idToParse.Segments.Length != 3 && idToParse.Segments.Length != 4
Magic Number,Azure.Security.KeyVault.Keys,KeyProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyProperties.cs,ParseId,The following statement contains a magic number: idToParse.Segments.Length != 3 && idToParse.Segments.Length != 4
Magic Number,Azure.Security.KeyVault.Keys,KeyProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyProperties.cs,ParseId,The following statement contains a magic number: Name = idToParse.Segments[2].Trim('/');
Magic Number,Azure.Security.KeyVault.Keys,KeyProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyProperties.cs,ParseId,The following statement contains a magic number: Version = (idToParse.Segments.Length == 4) ? idToParse.Segments[3].TrimEnd('/') : null;
Magic Number,Azure.Security.KeyVault.Keys,KeyProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyProperties.cs,ParseId,The following statement contains a magic number: Version = (idToParse.Segments.Length == 4) ? idToParse.Segments[3].TrimEnd('/') : null;
Magic Number,Azure.Security.KeyVault.Keys,RecoverDeletedKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\RecoverDeletedKeyOperation.cs,CheckCompletedAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the key was recovered.                      return true;                    case 404:                      return false;                    default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault.Keys,RecoverDeletedKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\RecoverDeletedKeyOperation.cs,CheckCompletedAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the key was recovered.                      return true;                    case 404:                      return false;                    default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault.Keys,RecoverDeletedKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\RecoverDeletedKeyOperation.cs,CheckCompletedAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the key was recovered.                      return true;                    case 404:                      return false;                    default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault.Keys,RecoverDeletedKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\RecoverDeletedKeyOperation.cs,CheckCompleted,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the key was recovered.                      return true;                    case 404:                      return false;                    default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault.Keys,RecoverDeletedKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\RecoverDeletedKeyOperation.cs,CheckCompleted,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the key was recovered.                      return true;                    case 404:                      return false;                    default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault.Keys,RecoverDeletedKeyOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\RecoverDeletedKeyOperation.cs,CheckCompleted,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the key was recovered.                      return true;                    case 404:                      return false;                    default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesCryptographyProvider,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesCryptographyProvider.cs,GetKeySizeInBits,The following statement contains a magic number: return GetKeySizeInBytes() << 3;
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,Create,The following statement contains a magic number: aes.KeySize = key.Length * 8;
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,CreateEncryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,CreateEncryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,CreateEncryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,CreateEncryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,CreateEncryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,CreateEncryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,CreateEncryptor,The following statement contains a magic number: iv != null && iv.Length != 8
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,CreateDecryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,CreateDecryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,CreateDecryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,CreateDecryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,CreateDecryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,CreateDecryptor,The following statement contains a magic number: key.Length != 128 >> 3 && key.Length != 192 >> 3 && key.Length != 256 >> 3
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKw,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,CreateDecryptor,The following statement contains a magic number: iv != null && iv.Length != 8
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,AesKwEncryptor,The following statement contains a magic number: var aesIv = new byte[_aes.BlockSize >> 3];
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: inputCount % 8 != 0
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: var n = inputCount >> 3;
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: byte[] r = new byte[n << 3];
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: byte[] block = new byte[16];
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(r' i << 3' block' 64 >> 3' 64 >> 3);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(r' i << 3' block' 64 >> 3' 64 >> 3);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(r' i << 3' block' 64 >> 3' 64 >> 3);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(r' i << 3' block' 64 >> 3' 64 >> 3);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(r' i << 3' block' 64 >> 3' 64 >> 3);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: var b = encryptor.TransformFinalBlock(block' 0' 16);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(b' a' 64 >> 3);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(b' a' 64 >> 3);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(b' 64 >> 3' r' i << 3' 64 >> 3);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(b' 64 >> 3' r' i << 3' 64 >> 3);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(b' 64 >> 3' r' i << 3' 64 >> 3);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(b' 64 >> 3' r' i << 3' 64 >> 3);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(b' 64 >> 3' r' i << 3' 64 >> 3);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: j < 6
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: var c = new byte[(n + 1) << 3];
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(r' i << 3' c' (i + 1) << 3' 8);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(r' i << 3' c' (i + 1) << 3' 8);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwEncryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(r' i << 3' c' (i + 1) << 3' 8);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,AesKwDecryptor,The following statement contains a magic number: var aesIv = new byte[_aes.BlockSize >> 3];
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: inputCount % 8 != 0
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: var n = (inputCount - BlockSizeInBytes) >> 3;
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: byte[] r = new byte[n << 3];
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: byte[] block = new byte[16];
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(r' (i - 1) << 3' block' BlockSizeInBytes' BlockSizeInBytes);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: var b = encryptor.TransformFinalBlock(block' 0' 16);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(b' BlockSizeInBytes' r' (i - 1) << 3' BlockSizeInBytes);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: var c = new byte[n << 3];
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(r' i << 3' c' i << 3' 8);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(r' i << 3' c' i << 3' 8);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,AesKwDecryptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\AesKw.cs,TransformFinalBlock,The following statement contains a magic number: Array.Copy(r' i << 3' c' i << 3' 8);
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,KeyResolver,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\KeyResolver.cs,ParseResponse,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      result.Deserialize(response.ContentStream);                      return Response.FromValue(result' response);                  default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,KeyResolver,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\KeyResolver.cs,ParseResponse,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      result.Deserialize(response.ContentStream);                      return Response.FromValue(result' response);                  default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,KeyResolver,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\KeyResolver.cs,ParseResponse,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      result.Deserialize(response.ContentStream);                      return Response.FromValue(result' response);                  default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault.Keys.Cryptography,KeyResolver,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\KeyResolver.cs,ParseResponse,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      result.Deserialize(response.ContentStream);                      return Response.FromValue(result' response);                  default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault,Base64Url,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\Base64Url.cs,Decode,The following statement contains a magic number: str = new StringBuilder(str).Replace('-'' '+').Replace('_'' '/').Append('='' (str.Length % 4 == 0) ? 0 : 4 - (str.Length % 4)).ToString();
Magic Number,Azure.Security.KeyVault,Base64Url,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\Base64Url.cs,Decode,The following statement contains a magic number: str = new StringBuilder(str).Replace('-'' '+').Replace('_'' '/').Append('='' (str.Length % 4 == 0) ? 0 : 4 - (str.Length % 4)).ToString();
Magic Number,Azure.Security.KeyVault,Base64Url,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\Base64Url.cs,Decode,The following statement contains a magic number: str = new StringBuilder(str).Replace('-'' '+').Replace('_'' '/').Append('='' (str.Length % 4 == 0) ? 0 : 4 - (str.Length % 4)).ToString();
Magic Number,Azure.Security.KeyVault,ChallengeBasedAuthenticationPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\ChallengeBasedAuthenticationPolicy.cs,ProcessCoreAsync,The following statement contains a magic number: message.Response.Status == 401
Magic Number,Azure.Security.KeyVault,ChallengeBasedAuthenticationPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\ChallengeBasedAuthenticationPolicy.cs,AuthenticateRequestAsync,The following statement contains a magic number: _refreshOn = token.ExpiresOn - TimeSpan.FromMinutes(2);
Magic Number,Azure.Security.KeyVault,AuthenticationChallenge,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\ChallengeBasedAuthenticationPolicy.cs,ParseBearerChallengeHeaderValue,The following statement contains a magic number: pair.Length == 2
Magic Number,Azure.Security.KeyVault,KeyVaultIdentifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultIdentifier.cs,Parse,The following statement contains a magic number: id.Segments.Length != 3 && id.Segments.Length != 4
Magic Number,Azure.Security.KeyVault,KeyVaultIdentifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultIdentifier.cs,Parse,The following statement contains a magic number: id.Segments.Length != 3 && id.Segments.Length != 4
Magic Number,Azure.Security.KeyVault,KeyVaultIdentifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultIdentifier.cs,Parse,The following statement contains a magic number: KeyVaultIdentifier identifier = new KeyVaultIdentifier              {                    Id = id'                  VaultUri = new Uri($"{id.Scheme}://{id.Authority}")'                  Collection = id.Segments[1].Trim('/')'                  Name = id.Segments[2].Trim('/')'                  Version = (id.Segments.Length == 4) ? id.Segments[3].TrimEnd('/') : null              };
Magic Number,Azure.Security.KeyVault,KeyVaultIdentifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultIdentifier.cs,Parse,The following statement contains a magic number: KeyVaultIdentifier identifier = new KeyVaultIdentifier              {                    Id = id'                  VaultUri = new Uri($"{id.Scheme}://{id.Authority}")'                  Collection = id.Segments[1].Trim('/')'                  Name = id.Segments[2].Trim('/')'                  Version = (id.Segments.Length == 4) ? id.Segments[3].TrimEnd('/') : null              };
Magic Number,Azure.Security.KeyVault,KeyVaultIdentifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultIdentifier.cs,Parse,The following statement contains a magic number: KeyVaultIdentifier identifier = new KeyVaultIdentifier              {                    Id = id'                  VaultUri = new Uri($"{id.Scheme}://{id.Authority}")'                  Collection = id.Segments[1].Trim('/')'                  Name = id.Segments[2].Trim('/')'                  Version = (id.Segments.Length == 4) ? id.Segments[3].TrimEnd('/') : null              };
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequestAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequestAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequestAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequestAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequest,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequest,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequest,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequest,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Core.Pipeline,ActivityExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\DiagnosticScope.cs,SetW3CFormat,The following statement contains a magic number: s_setIdFormatMethod.Invoke(activity' new object[]{ 2 /* ActivityIdFormat.W3C */});
Magic Number,Azure.Core.Pipeline,ActivityExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\DiagnosticScope.cs,IsW3CFormat,The following statement contains a magic number: return (int)result == 2 /* ActivityIdFormat.W3C */;
Missing Default,Azure.Security.KeyVault.Keys,JsonWebKey,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\JsonWebKey.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case KeyIdPropertyName:                          Id = prop.Value.GetString();                          break;                      case KeyTypePropertyName:                          KeyType = prop.Value.GetString();                          break;                      case KeyOpsPropertyName:                          foreach (JsonElement element in prop.Value.EnumerateArray())                          {                              _keyOps.Add(element.ToString());                          }                          break;                      case CurveNamePropertyName:                          CurveName = prop.Value.GetString();                          break;                      case NPropertyName:                          N = Base64Url.Decode(prop.Value.GetString());                          break;                      case EPropertyName:                          E = Base64Url.Decode(prop.Value.GetString());                          break;                      case DPPropertyName:                          DP = Base64Url.Decode(prop.Value.GetString());                          break;                      case DQPropertyName:                          DQ = Base64Url.Decode(prop.Value.GetString());                          break;                      case QIPropertyName:                          QI = Base64Url.Decode(prop.Value.GetString());                          break;                      case PPropertyName:                          P = Base64Url.Decode(prop.Value.GetString());                          break;                      case QPropertyName:                          Q = Base64Url.Decode(prop.Value.GetString());                          break;                      case XPropertyName:                          X = Base64Url.Decode(prop.Value.GetString());                          break;                      case YPropertyName:                          Y = Base64Url.Decode(prop.Value.GetString());                          break;                      case DPropertyName:                          D = Base64Url.Decode(prop.Value.GetString());                          break;                      case KPropertyName:                          K = Base64Url.Decode(prop.Value.GetString());                          break;                      case TPropertyName:                          T = Base64Url.Decode(prop.Value.GetString());                          break;                  }
Missing Default,Azure.Security.KeyVault.Keys,KeyAttributes,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyAttributes.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case EnabledPropertyName:                          Enabled = prop.Value.GetBoolean();                          break;                      case NotBeforePropertyName:                          NotBefore = DateTimeOffset.FromUnixTimeSeconds(prop.Value.GetInt64());                          break;                      case ExpiresPropertyName:                          ExpiresOn = DateTimeOffset.FromUnixTimeSeconds(prop.Value.GetInt64());                          break;                      case CreatedPropertyName:                          CreatedOn = DateTimeOffset.FromUnixTimeSeconds(prop.Value.GetInt64());                          break;                      case UpdatedPropertyName:                          UpdatedOn = DateTimeOffset.FromUnixTimeSeconds(prop.Value.GetInt64());                          break;                      case RecoveryLevelPropertyName:                          RecoveryLevel = prop.Value.GetString();                          break;                  }
Missing Default,Azure.Security.KeyVault.Keys,KeyCurveName,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyCurveName.cs,FromOid,The following switch statement is missing a default case: switch (keySize)                  {                      case 521 when string.Equals(oid.FriendlyName' "nistP521"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "secp521r1"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "ECDSA_P521"' StringComparison.OrdinalIgnoreCase):                          return P521;                        case 384 when string.Equals(oid.FriendlyName' "nistP384"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "secp384r1"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "ECDSA_P384"' StringComparison.OrdinalIgnoreCase):                          return P384;                        case 256 when string.Equals(oid.FriendlyName' "secp256k1"' StringComparison.OrdinalIgnoreCase):                          return P256K;                        case 256 when string.Equals(oid.FriendlyName' "nistP256"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "secp256r1"' StringComparison.OrdinalIgnoreCase)                                 || string.Equals(oid.FriendlyName' "ECDSA_P256"' StringComparison.OrdinalIgnoreCase):                          return P256;                  }
Missing Default,Azure.Security.KeyVault.Keys,KeyProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\KeyProperties.cs,ReadProperty,The following switch statement is missing a default case: switch (prop.Name)              {                  case KeyIdPropertyName:                      string id = prop.Value.GetString();                      Id = new Uri(id);                      ParseId(Id);                      break;                  case ManagedPropertyName:                      Managed = prop.Value.GetBoolean();                      break;                  case AttributesPropertyName:                      _attributes.ReadProperties(prop.Value);                      break;                  case TagsPropertyName:                      foreach (JsonProperty tagProp in prop.Value.EnumerateObject())                      {                          Tags[tagProp.Name] = tagProp.Value.GetString();                      }                      break;              }
Missing Default,Azure.Security.KeyVault.Keys.Cryptography,DecryptResult,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\DecryptResult.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case KeyIdPropertyName:                          KeyId = prop.Value.GetString();                          break;                      case PlaintextPropertyName:                          Plaintext = Base64Url.Decode(prop.Value.GetString());                          break;                  }
Missing Default,Azure.Security.KeyVault.Keys.Cryptography,EncryptResult,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\EncryptResult.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case KeyIdPropertyName:                          KeyId = prop.Value.GetString();                          break;                      case CiphertextPropertyName:                          Ciphertext = Base64Url.Decode(prop.Value.GetString());                          break;                  }
Missing Default,Azure.Security.KeyVault.Keys.Cryptography,SignResult,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\SignResult.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case KeyIdPropertyName:                          KeyId = prop.Value.GetString();                          break;                      case SignaturePropertyName:                          Signature = Base64Url.Decode(prop.Value.GetString());                          break;                  }
Missing Default,Azure.Security.KeyVault.Keys.Cryptography,UnwrapResult,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\UnwrapResult.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case KeyIdPropertyName:                          KeyId = prop.Value.GetString();                          break;                      case KeyPropertyName:                          Key = Base64Url.Decode(prop.Value.GetString());                          break;                  }
Missing Default,Azure.Security.KeyVault.Keys.Cryptography,VerifyResult,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\VerifyResult.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case KeyIdPropertyName:                          KeyId = prop.Value.GetString();                          break;                      case ValidPropertyName:                          IsValid = prop.Value.GetBoolean();                          break;                  }
Missing Default,Azure.Security.KeyVault.Keys.Cryptography,WrapResult,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Keys\src\Cryptography\WrapResult.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case KeyIdPropertyName:                          KeyId = prop.Value.GetString();                          break;                      case EncryptedKeyPropertyName:                          EncryptedKey = Base64Url.Decode(prop.Value.GetString());                          break;                  }
Missing Default,Azure.Security.KeyVault,KeyVaultPage<T>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPage.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case "value":                          JsonElement value = prop.Value;                          if (value.ValueKind != JsonValueKind.Null)                          {                              _items = new T[value.GetArrayLength()];                                int i = 0;                                foreach (JsonElement elem in value.EnumerateArray())                              {                                  _items[i] = _itemFactory();                                    _items[i].ReadProperties(elem);                                    i++;                              }                          }                          break;                        case "nextLink":                          var nextLinkUrl = prop.Value.GetString();                          if (!string.IsNullOrEmpty(nextLinkUrl))                          {                              NextLink = new Uri(nextLinkUrl);                          }                          break;                  }
