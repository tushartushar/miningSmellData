Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Azure.Security.KeyVault.Secrets.Samples,GetSecrets,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\samples\Sample3_GetSecrets.cs,GetSecretsSync,Cyclomatic complexity of the method is 9
Complex Method,Azure.Security.KeyVault.Secrets.Samples,GetSecrets,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\samples\Sample3_GetSecrets.cs,GetSecretsAsync,Cyclomatic complexity of the method is 8
Complex Method,Azure.Core.Testing,RecordEntry,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordEntry.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Azure.Core.Tests,ClientDiagnosticListener,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientDiagnosticListener.cs,OnNext,Cyclomatic complexity of the method is 9
Long Parameter List,Azure.Core.Testing,SyncAsyncPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\SyncAsyncPolicyTestBase.cs,SendRequestAsync,The method has 5 parameters. Parameters: transport' requestAction' policy' responseClassifier' bufferResponse
Long Parameter List,Azure.Core.Testing,SyncAsyncPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\SyncAsyncPolicyTestBase.cs,SendGetRequest,The method has 5 parameters. Parameters: transport' policy' responseClassifier' bufferResponse' uri
Long Identifier,Azure.Security.KeyVault.Secrets.Tests,SecretsTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\SecretsTestBase.cs,,The length of the parameter AzureKeyVaultUrlEnvironmentVariable is 35.
Long Identifier,Azure.Core.Testing,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientTestBase.cs,,The length of the parameter s_diagnosticScopeValidatingInterceptor is 38.
Long Statement,Azure.Security.KeyVault.Secrets.Samples,BackupAndRestore,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\samples\Sample2_BackupAndRestore.cs,BackupAndRestoreSync,The length of the statement  "            // If the Key Vault is soft delete-enabled and you want to permanently delete the secret before its `ScheduledPurgeDate`' " is 121.
Long Statement,Azure.Security.KeyVault.Secrets.Samples,BackupAndRestore,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\samples\Sample2_BackupAndRestore.cs,BackupAndRestoreAsync,The length of the statement  "            // If the Key Vault is soft delete-enabled and you want to permanently delete the secret before its `ScheduledPurgeDate`' " is 121.
Long Statement,Azure.Security.KeyVault.Secrets.Samples,Snippets,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\samples\SampleSnippets.cs,CreateClient,The length of the statement  "            // Create a new secret client using the default credential from Azure.Identity using environment variables previously set' " is 122.
Long Statement,Azure.Security.KeyVault.Secrets.Tests,SecretClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\SecretClientLiveTests.cs,GetSecretVersionsNonExisting,The length of the statement  "            List<SecretProperties> allSecrets = await Client.GetPropertiesOfSecretVersionsAsync(Recording.GenerateId()).ToEnumerableAsync(); " is 128.
Long Statement,Azure.Core.Testing,AsyncValidatingStream,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\AsyncValidatingStream.cs,Validate,The length of the statement  "                throw new InvalidOperationException("All stream calls were expected to be " + (_isAsync ? "async" : "sync") + " but were " + (isAsync ? "async" : "sync")); " is 155.
Long Statement,Azure.Core.Testing,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientTestBase.cs,InstrumentClient,The length of the statement  "                        ClientValidation<TClient>.ValidationException = new InvalidOperationException($"Client type contains public non-virtual async method {methodInfo.Name}"); " is 153.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                bool strict = !invocation.Method.GetCustomAttributes(true).Any(a => a.GetType().FullName == "Azure.Core.ForwardsClientCallsAttribute"); " is 135.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                        MethodInfo getResultMethod = getAwaiterMethod.ReturnType.GetMethod("GetResult"' BindingFlags.Instance | BindingFlags.Public); " is 125.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                            (string Key' object Value' DiagnosticListener Listener) e = diagnosticListener.Events.FirstOrDefault(e => e.Key == expectedEvent); " is 130.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                                throw new InvalidOperationException($"Expected diagnostic event not fired {expectedEvent} {Environment.NewLine}    fired events {string.Join("' "' diagnosticListener.Events)} {Environment.NewLine}    You may have forgotten to set your operationId to {expectedEvent} in {methodName} or applied the Azure.Core.ForwardsClientCallsAttribute to {methodName}."); " is 356.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                                throw new InvalidOperationException($"{e.Key} event was written into wrong DiagnosticSource {e.Listener.Name}' expected: {ns}"); " is 128.
Long Statement,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The length of the statement  "                    if (property.PropertyType == type && property.CanRead && !property.CanWrite && Includes(property.Name) && !Excludes(property.Name)) " is 131.
Long Statement,Azure.Core.Testing,RecordMatcher,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordMatcher.cs,IsEquivalentResponse,The length of the statement  "            IEnumerable<KeyValuePair<string' string[]>> entryHeaders = entry.ResponseHeaders.Where(h => !VolatileResponseHeaders.Contains(h.Key)); " is 134.
Long Statement,Azure.Core.Testing,RecordMatcher,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordMatcher.cs,IsEquivalentResponse,The length of the statement  "            IEnumerable<KeyValuePair<string' string[]>> otherEntryHeaders = otherEntry.ResponseHeaders.Where(h => !VolatileResponseHeaders.Contains(h.Key)); " is 144.
Long Statement,Azure.Core.Testing,RecordMatcher,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordMatcher.cs,CompareHeaderDictionaries,The length of the statement  "                        descriptionBuilder?.AppendLine($"    <{header.Key}> values differ' request <{JoinHeaderValues(header.Value)}>' record <{JoinHeaderValues(values)}>"); " is 149.
Long Statement,Azure.Core.Testing,RecordTransport,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordTransport.cs,CreateEntry,The length of the statement  "            if (!request.Headers.TryGetValue("Content-Length"' out _) && request.Content != null && request.Content.TryComputeLength(out long computedLength)) " is 146.
Long Statement,Azure.Core.Testing,UseSyncMethodsInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\UseSyncMethodsInterceptor.cs,Intercept,The length of the statement  "                throw new InvalidOperationException($"Unable to find a method with name {nonAsyncMethodName} and {string.Join<Type>("'"' parameterTypes)} parameters. " " is 151.
Long Statement,Azure.Core.Tests,ClientDiagnosticListener,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientDiagnosticListener.cs,AssertScopeStarted,The length of the statement  "                                throw new InvalidOperationException($"Attribute {expectedAttribute} not found' existing attributes: {string.Join("'"' producedDiagnosticScope.Activity.Tags)}"); " is 160.
Complex Conditional,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The conditional expression  "property.PropertyType == type && property.CanRead && !property.CanWrite && Includes(property.Name) && !Excludes(property.Name)"  is complex.
Complex Conditional,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The conditional expression  "field.FieldType == type && (field.IsInitOnly || field.IsLiteral) && Includes(field.Name) && !Excludes(field.Name)"  is complex.
Complex Conditional,Azure.Core.Pipeline,TestFrameworkContentTypeUtilities,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\ContentTypeUtilities.cs,TryGetTextEncoding,The conditional expression  "contentType.StartsWith(textContentTypePrefix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(jsonSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(xmlSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(urlEncodedSuffix' StringComparison.OrdinalIgnoreCase)"  is complex.
Virtual Method Call from Constructor,Azure.Security.KeyVault.Secrets.Tests,SecretClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\SecretClientTests.cs,SecretClientTests,The constructor "SecretClientTests" calls a virtual method "InstrumentClient".
Empty Catch Block,Azure.Security.KeyVault.Secrets.Tests,SecretsTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\SecretsTestBase.cs,CleanupSecret,The method has an empty catch block.
Empty Catch Block,Azure.Security.KeyVault.Secrets.Tests,SecretsTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\SecretsTestBase.cs,CleanupSecret,The method has an empty catch block.
Empty Catch Block,Azure.Security.KeyVault.Secrets.Tests,SecretsTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\SecretsTestBase.cs,CleanupSecret,The method has an empty catch block.
Empty Catch Block,Azure.Core.Testing,RecordEntry,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RecordEntry.cs,SerializeBody,The method has an empty catch block.
Empty Catch Block,Azure.Core.Testing,TestRecording,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRecording.cs,TestRecording,The method has an empty catch block.
Magic Number,Azure.Security.KeyVault.Secrets.Samples,HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\samples\Sample1_HelloWorld.cs,HelloWorldSync,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Azure.Security.KeyVault.Secrets.Samples,BackupAndRestore,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\samples\Sample2_BackupAndRestore.cs,BackupAndRestoreSync,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Azure.Security.KeyVault.Secrets.Samples,BackupAndRestore,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\samples\Sample2_BackupAndRestore.cs,BackupAndRestoreSync,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Azure.Security.KeyVault.Secrets.Samples,GetSecrets,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\samples\Sample3_GetSecrets.cs,GetSecretsSync,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Azure.Security.KeyVault.Secrets.Samples,Snippets,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\samples\SampleSnippets.cs,DeleteAndPurgeSecret,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,Azure.Security.KeyVault.Secrets.Tests,SecretClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\SecretClientLiveTests.cs,SetSecretWithExtendedProps,The following statement contains a magic number: IResolveConstraint createdUpdatedConstraint = Is.EqualTo(DateTimeOffset.FromUnixTimeSeconds(1565114301));
Magic Number,Azure.Security.KeyVault.Secrets.Tests,SecretClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\SecretClientLiveTests.cs,SetSecretWithExtendedProps,The following statement contains a magic number: var exp = new DateTimeOffset(new DateTime(637027248120000000' DateTimeKind.Utc));
Magic Number,Azure.Security.KeyVault.Secrets.Tests,SecretClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\SecretClientLiveTests.cs,SetSecretWithExtendedProps,The following statement contains a magic number: DateTimeOffset nbf = exp.AddDays(-30);
Magic Number,Azure.Security.KeyVault.Secrets.Tests,SecretClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\SecretClientLiveTests.cs,SetSecretWithExtendedProps,The following statement contains a magic number: createdUpdatedConstraint = Is.InRange(now.AddMinutes(-5)' now.AddMinutes(5));
Magic Number,Azure.Security.KeyVault.Secrets.Tests,SecretClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\SecretClientLiveTests.cs,SetSecretWithExtendedProps,The following statement contains a magic number: createdUpdatedConstraint = Is.InRange(now.AddMinutes(-5)' now.AddMinutes(5));
Magic Number,Azure.Security.KeyVault.Secrets.Tests,SecretClientLiveTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\SecretClientLiveTests.cs,SetSecretWithExtendedProps,The following statement contains a magic number: Assert.AreEqual(2' setResult.Properties.Tags.Count);
Magic Number,Azure.Security.KeyVault.Secrets.Tests,SecretsTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Secrets\tests\SecretsTestBase.cs,WaitForPurgedSecret,The following statement contains a magic number: return TestRetryHelper.RetryAsync(async () => {                      try                      {                          await Client.GetDeletedSecretAsync(name).ConfigureAwait(false);                          throw new InvalidOperationException($"Secret {name} still exists");                      }                      catch (RequestFailedException ex) when (ex.Status == 404)                      {                          return (Response)null;                      }                  });
Magic Number,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The following statement contains a magic number: var expectedEventPrefix = declaringType.FullName + "." + methodName.Substring(0' methodName.Length - 5);
Magic Number,Azure.Core.Testing,RandomExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RandomExtensions.cs,NewGuid,The following statement contains a magic number: var bytes = new byte[16];
Magic Number,Azure.Core.Testing,TestRetryHelper,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRetryHelper.cs,RetryAsync,The following statement contains a magic number: delay = TimeSpan.FromSeconds(5);
Missing Default,Azure.Core.Testing,TestRecording,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRecording.cs,TestRecording,The following switch statement is missing a default case: switch (Mode)              {                  case RecordedTestMode.Record:                      _session = new RecordSession();                      if (File.Exists(_sessionFile))                      {                          try                          {                              _previousSession = Load();                          }                          catch (Exception)                          {                              // ignore                          }                      }                      break;                  case RecordedTestMode.Playback:                      _session = Load();                      break;              }
