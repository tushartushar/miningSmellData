Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Azure.Security.KeyVault.Certificates,CertificateOperationProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperationProperties.cs,ReadProperties,Cyclomatic complexity of the method is 10
Complex Method,Azure.Security.KeyVault.Certificates,CertificatePolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificatePolicy.cs,ReadProperties,Cyclomatic complexity of the method is 8
Complex Method,Azure.Security.KeyVault.Certificates,CertificatePolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificatePolicy.cs,WriteProperties,Cyclomatic complexity of the method is 9
Complex Method,Azure.Security.KeyVault.Certificates,CertificatePolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificatePolicy.cs,ReadX509CertificateProperties,Cyclomatic complexity of the method is 8
Complex Method,Azure.Security.KeyVault.Certificates,CertificatePolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificatePolicy.cs,WriteX509CertificateProperties,Cyclomatic complexity of the method is 8
Long Parameter List,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,StartCreateCertificate,The method has 5 parameters. Parameters: certificateName' policy' enabled' tags' cancellationToken
Long Parameter List,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,StartCreateCertificateAsync,The method has 5 parameters. Parameters: certificateName' policy' enabled' tags' cancellationToken
Long Parameter List,Azure.Security.KeyVault.Certificates,CertificateModelFactory,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateModelFactory.cs,CertificateOperationProperties,The method has 13 parameters. Parameters: id' name' vaultUri' issuerName' certificateType' certificateTransparency' csr' cancellationRequested' requestId' status' statusDetails' target' error
Long Parameter List,Azure.Security.KeyVault.Certificates,CertificateModelFactory,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateModelFactory.cs,CertificatePolicy,The method has 5 parameters. Parameters: subject' subjectAlternativeNames' issuerName' createdOn' updatedOn
Long Parameter List,Azure.Security.KeyVault.Certificates,CertificateModelFactory,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateModelFactory.cs,CertificateProperties,The method has 10 parameters. Parameters: id' name' vaultUri' version' x509thumbprint' notBefore' expiresOn' createdOn' updatedOn' recoveryLevel
Long Parameter List,Azure.Security.KeyVault.Certificates,CertificateModelFactory,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateModelFactory.cs,DeletedCertificate,The method has 8 parameters. Parameters: properties' keyId' secretId' cer' policy' recoveryId' deletedOn' scheduledPurgeDate
Long Parameter List,Azure.Security.KeyVault.Certificates,CertificateModelFactory,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateModelFactory.cs,KeyVaultCertificateWithPolicy,The method has 5 parameters. Parameters: properties' keyId' secretId' cer' policy
Long Parameter List,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,GetPageAsync,The method has 5 parameters. Parameters: firstPageUri' nextLink' itemFactory' operationName' cancellationToken
Long Parameter List,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,GetPage,The method has 5 parameters. Parameters: firstPageUri' nextLink' itemFactory' operationName' cancellationToken
Long Parameter List,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequestAsync,The method has 5 parameters. Parameters: method' content' resultFactory' cancellationToken' path
Long Parameter List,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequest,The method has 5 parameters. Parameters: method' content' resultFactory' cancellationToken' path
Long Identifier,Azure.Security.KeyVault.Certificates,CertificateIssuer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateIssuer.cs,,The length of the parameter s_credentialsPropertyNameBytes is 30.
Long Identifier,Azure.Security.KeyVault.Certificates,CertificateIssuer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateIssuer.cs,,The length of the parameter s_organizationIdPropertyNameBytes is 33.
Long Identifier,Azure.Security.KeyVault.Certificates,CertificateIssuer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateIssuer.cs,,The length of the parameter s_adminDetailsPropertyNameBytes is 31.
Long Identifier,Azure.Security.KeyVault.Certificates,CertificateOperationProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperationProperties.cs,,The length of the parameter CancellationRequestedPropertyName is 33.
Long Identifier,Azure.Security.KeyVault.Certificates,CertificateOperationUpdateParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperationUpdateParameters.cs,,The length of the parameter CancellationRequestedPropertyName is 33.
Long Identifier,Azure.Security.KeyVault.Certificates,CertificateOperationUpdateParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperationUpdateParameters.cs,,The length of the parameter s_cancellationRequestedPropertyNameBytes is 40.
Long Identifier,Azure.Security.KeyVault.Certificates,CertificatePolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificatePolicy.cs,,The length of the parameter s_lifetimeActionsPropertyNameBytes is 34.
Long Identifier,Azure.Security.KeyVault.Certificates,CertificatePolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificatePolicy.cs,,The length of the parameter s_secretPropsPropertyNameBytes is 30.
Long Identifier,Azure.Security.KeyVault.Certificates,CertificatePolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificatePolicy.cs,,The length of the parameter s_contentTypePropertyNameBytes is 30.
Long Identifier,Azure.Security.KeyVault.Certificates,CertificatePolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificatePolicy.cs,,The length of the parameter s_validityMonthsPropertyNameBytes is 33.
Long Identifier,Azure.Security.KeyVault.Certificates,DeletedCertificate,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\DeletedCertificate.cs,,The length of the parameter ScheduledPurgeDatePropertyName is 30.
Long Identifier,Azure.Security.KeyVault.Certificates,IssuerParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\IssuerParameters.cs,,The length of the parameter CertificateTransparencyPropertyName is 35.
Long Identifier,Azure.Security.KeyVault.Certificates,IssuerParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\IssuerParameters.cs,,The length of the parameter s_certificateTypePropertyNameBytes is 34.
Long Identifier,Azure.Security.KeyVault.Certificates,IssuerParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\IssuerParameters.cs,,The length of the parameter s_certificateTransparencyPropertyNameNameBytes is 46.
Long Identifier,Azure.Security.KeyVault.Certificates,LifetimeAction,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\LifetimeAction.cs,,The length of the parameter LifetimePercentagePropertyName is 30.
Long Identifier,Azure.Security.KeyVault.Certificates,LifetimeAction,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\LifetimeAction.cs,,The length of the parameter s_lifetimePercentagePropertyNameBytes is 37.
Long Identifier,Azure.Security.KeyVault.Certificates,LifetimeAction,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\LifetimeAction.cs,,The length of the parameter s_daysBeforeExpiryPropertyNameBytes is 35.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,StartCreateCertificate,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.StartCreateCertificate"); " is 133.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,StartCreateCertificate,The length of the statement  "                Response<CertificateOperationProperties> response = _pipeline.SendRequest(RequestMethod.Post' parameters' () => new CertificateOperationProperties()' cancellationToken' CertificatesPath' certificateName' "/create"); " is 215.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,StartCreateCertificateAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.StartCreateCertificate"); " is 133.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,StartCreateCertificateAsync,The length of the statement  "                Response<CertificateOperationProperties> response = await _pipeline.SendRequestAsync(RequestMethod.Post' parameters' () => new CertificateOperationProperties()' cancellationToken' CertificatesPath' certificateName' "/create").ConfigureAwait(false); " is 248.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificate,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificate"); " is 125.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificate,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Get' () => new KeyVaultCertificateWithPolicy()' cancellationToken' CertificatesPath' certificateName); " is 145.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificateAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificate"); " is 125.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificateAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Get' () => new KeyVaultCertificateWithPolicy()' cancellationToken' CertificatesPath' certificateName).ConfigureAwait(false); " is 178.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificateVersion,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateVersion"); " is 132.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificateVersion,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Get' () => new KeyVaultCertificate()' cancellationToken' CertificatesPath' certificateName' "/"' version); " is 149.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificateVersionAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateVersion"); " is 132.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificateVersionAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Get' () => new KeyVaultCertificate()' cancellationToken' CertificatesPath' certificateName' "/"' version).ConfigureAwait(false); " is 182.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,UpdateCertificateProperties,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.UpdateCertificateProperties"); " is 138.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,UpdateCertificateProperties,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Patch' parameters' () => new KeyVaultCertificate()' cancellationToken' CertificatesPath' properties.Name' "/"' properties.Version); " is 174.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,UpdateCertificatePropertiesAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.UpdateCertificateProperties"); " is 138.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,UpdateCertificatePropertiesAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Patch' parameters' () => new KeyVaultCertificate()' cancellationToken' CertificatesPath' properties.Name' "/"' properties.Version).ConfigureAwait(false); " is 207.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,StartDeleteCertificate,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.StartDeleteCertificate"); " is 133.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,StartDeleteCertificate,The length of the statement  "                Response<DeletedCertificate> response = _pipeline.SendRequest(RequestMethod.Delete' () => new DeletedCertificate()' cancellationToken' CertificatesPath' certificateName); " is 170.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,StartDeleteCertificateAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.StartDeleteCertificate"); " is 133.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,StartDeleteCertificateAsync,The length of the statement  "                Response<DeletedCertificate> response = await _pipeline.SendRequestAsync(RequestMethod.Delete' () => new DeletedCertificate()' cancellationToken' CertificatesPath' certificateName).ConfigureAwait(false); " is 203.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetDeletedCertificate,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetDeletedCertificate"); " is 132.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetDeletedCertificate,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Get' () => new DeletedCertificate()' cancellationToken' DeletedCertificatesPath' certificateName); " is 141.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetDeletedCertificateAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetDeletedCertificate"); " is 132.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetDeletedCertificateAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Get' () => new DeletedCertificate()' cancellationToken' DeletedCertificatesPath' certificateName).ConfigureAwait(false); " is 174.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,StartRecoverDeletedCertificate,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.StartRecoverDeletedCertificate"); " is 141.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,StartRecoverDeletedCertificate,The length of the statement  "                Response<KeyVaultCertificateWithPolicy> response = _pipeline.SendRequest(RequestMethod.Post' () => new KeyVaultCertificateWithPolicy()' cancellationToken' DeletedCertificatesPath' certificateName' "/recover"); " is 209.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,StartRecoverDeletedCertificateAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.StartRecoverDeletedCertificate"); " is 141.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,StartRecoverDeletedCertificateAsync,The length of the statement  "                Response<KeyVaultCertificateWithPolicy> response = await _pipeline.SendRequestAsync(RequestMethod.Post' () => new KeyVaultCertificateWithPolicy()' cancellationToken' DeletedCertificatesPath' certificateName' "/recover").ConfigureAwait(false); " is 242.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,PurgeDeletedCertificate,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.PurgeDeletedCertificate"); " is 134.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,PurgeDeletedCertificateAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.PurgeDeletedCertificate"); " is 134.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,PurgeDeletedCertificateAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Delete' cancellationToken' DeletedCertificatesPath' certificateName).ConfigureAwait(false); " is 145.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,BackupCertificate,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.BackupCertificate"); " is 128.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,BackupCertificate,The length of the statement  "                Response<CertificateBackup> backup = _pipeline.SendRequest(RequestMethod.Post' () => new CertificateBackup()' cancellationToken' CertificatesPath' certificateName' "/backup"); " is 175.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,BackupCertificateAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.BackupCertificate"); " is 128.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,BackupCertificateAsync,The length of the statement  "                Response<CertificateBackup> backup = await _pipeline.SendRequestAsync(RequestMethod.Post' () => new CertificateBackup()' cancellationToken' CertificatesPath' certificateName' "/backup").ConfigureAwait(false); " is 208.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,RestoreCertificateBackup,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.RestoreCertificateBackup"); " is 135.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,RestoreCertificateBackup,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Post' new CertificateBackup { Value = backup }' () => new KeyVaultCertificateWithPolicy()' cancellationToken' CertificatesPath' "/restore"); " is 183.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,RestoreCertificateBackupAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.RestoreCertificateBackup"); " is 135.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,RestoreCertificateBackupAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Post' new CertificateBackup { Value = backup }' () => new KeyVaultCertificateWithPolicy()' cancellationToken' CertificatesPath' "/restore").ConfigureAwait(false); " is 216.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,ImportCertificate,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.ImportCertificate"); " is 128.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,ImportCertificate,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Post' importCertificateOptions' () => new KeyVaultCertificateWithPolicy()' cancellationToken' CertificatesPath' "/"' importCertificateOptions.Name' "/import"); " is 202.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,ImportCertificateAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.ImportCertificate"); " is 128.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,ImportCertificateAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Post' importCertificateOptions' () => new KeyVaultCertificateWithPolicy()' cancellationToken' CertificatesPath' "/"' importCertificateOptions.Name' "/import").ConfigureAwait(false); " is 235.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPropertiesOfCertificates,The length of the statement  "            Uri firstPageUri = _pipeline.CreateFirstPageUri(CertificatesPath' ("includePending"' includePending.ToString(CultureInfo.InvariantCulture).ToLowerInvariant())); " is 160.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPropertiesOfCertificates,The length of the statement  "            return PageResponseEnumerator.CreateEnumerable(nextLink => _pipeline.GetPage(firstPageUri' nextLink' () => new CertificateProperties()' "Azure.Security.KeyVault.Keys.KeyClient.GetPropertiesOfCertificates"' cancellationToken)); " is 226.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPropertiesOfCertificatesAsync,The length of the statement  "            Uri firstPageUri = _pipeline.CreateFirstPageUri(CertificatesPath' ("includePending"' includePending.ToString(CultureInfo.InvariantCulture).ToLowerInvariant())); " is 160.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPropertiesOfCertificatesAsync,The length of the statement  "            return PageResponseEnumerator.CreateAsyncEnumerable(nextLink => _pipeline.GetPageAsync(firstPageUri' nextLink' () => new CertificateProperties()' "Azure.Security.KeyVaultCertificates.CertificateClient.GetPropertiesOfCertificates"' cancellationToken)); " is 251.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPropertiesOfCertificateVersions,The length of the statement  "            return PageResponseEnumerator.CreateEnumerable(nextLink => _pipeline.GetPage(firstPageUri' nextLink' () => new CertificateProperties()' "Azure.Security.KeyVaultCertificates.CertificateClient.GetPropertiesOfCertificateVersions"' cancellationToken)); " is 248.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPropertiesOfCertificateVersionsAsync,The length of the statement  "            return PageResponseEnumerator.CreateAsyncEnumerable(nextLink => _pipeline.GetPageAsync(firstPageUri' nextLink' () => new CertificateProperties()' "Azure.Security.KeyVaultCertificates.CertificateClient.GetPropertiesOfCertificateVersions"' cancellationToken)); " is 258.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetDeletedCertificates,The length of the statement  "            Uri firstPageUri = _pipeline.CreateFirstPageUri(DeletedCertificatesPath' ("includePending"' includePending.ToString(CultureInfo.InvariantCulture).ToLowerInvariant())); " is 167.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetDeletedCertificates,The length of the statement  "            return PageResponseEnumerator.CreateEnumerable(nextLink => _pipeline.GetPage(firstPageUri' nextLink' () => new DeletedCertificate()' "Azure.Security.KeyVaultCertificates.CertificateClient.GetDeletedCertificates"' cancellationToken)); " is 233.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetDeletedCertificatesAsync,The length of the statement  "            Uri firstPageUri = _pipeline.CreateFirstPageUri(DeletedCertificatesPath' ("includePending"' includePending.ToString(CultureInfo.InvariantCulture).ToLowerInvariant())); " is 167.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetDeletedCertificatesAsync,The length of the statement  "            return PageResponseEnumerator.CreateAsyncEnumerable(nextLink => _pipeline.GetPageAsync(firstPageUri' nextLink' () => new DeletedCertificate()' "Azure.Security.KeyVaultCertificates.CertificateClient.GetDeletedCertificates"' cancellationToken)); " is 243.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificatePolicy,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificatePolicy"); " is 131.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificatePolicy,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Get' () => new CertificatePolicy()' cancellationToken' CertificatesPath' certificateName' "/policy"); " is 144.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificatePolicyAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificatePolicy"); " is 131.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificatePolicyAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Get' () => new CertificatePolicy()' cancellationToken' CertificatesPath' certificateName' "/policy").ConfigureAwait(false); " is 177.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,UpdateCertificatePolicy,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.UpdateCertificatePolicy"); " is 134.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,UpdateCertificatePolicy,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Patch' policy' () => new CertificatePolicy()' cancellationToken' CertificatesPath' certificateName' "/policy"); " is 154.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,UpdateCertificatePolicyAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.UpdateCertificatePolicy"); " is 134.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,UpdateCertificatePolicyAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Patch' policy' () => new CertificatePolicy()' cancellationToken' CertificatesPath' certificateName' "/policy").ConfigureAwait(false); " is 187.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,CreateIssuer,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.CreateIssuer"); " is 123.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,CreateIssuer,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Put' issuer' () => new CertificateIssuer()' cancellationToken' IssuersPath' issuer.Name); " is 132.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,CreateIssuerAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.CreateIssuer"); " is 123.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,CreateIssuerAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Put' issuer' () => new CertificateIssuer()' cancellationToken' IssuersPath' issuer.Name).ConfigureAwait(false); " is 165.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetIssuer,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetIssuer"); " is 120.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetIssuer,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Get' () => new CertificateIssuer()' cancellationToken' IssuersPath' issuerName); " is 123.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetIssuerAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetIssuer"); " is 120.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetIssuerAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Get' () => new CertificateIssuer()' cancellationToken' IssuersPath' issuerName).ConfigureAwait(false); " is 156.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,UpdateIssuer,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.UpdateIssuer"); " is 123.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,UpdateIssuer,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Patch' issuer' () => new CertificateIssuer()' cancellationToken' IssuersPath' issuer.Name); " is 134.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,UpdateIssuerAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.UpdateIssuer"); " is 123.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,UpdateIssuerAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Patch' issuer' () => new CertificateIssuer()' cancellationToken' IssuersPath' issuer.Name).ConfigureAwait(false); " is 167.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,DeleteIssuer,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.DeleteIssuer"); " is 123.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,DeleteIssuer,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Delete' () => new CertificateIssuer()' cancellationToken' IssuersPath' issuerName); " is 126.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,DeleteIssuerAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.DeleteIssuer"); " is 123.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,DeleteIssuerAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Delete' () => new CertificateIssuer()' cancellationToken' IssuersPath' issuerName).ConfigureAwait(false); " is 159.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPropertiesOfIssuers,The length of the statement  "            return PageResponseEnumerator.CreateEnumerable(nextLink => _pipeline.GetPage(firstPageUri' nextLink' () => new IssuerProperties()' "Azure.Security.KeyVaultCertificates.CertificateClient.GetPropertiesOfIssuers"' cancellationToken)); " is 231.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPropertiesOfIssuersAsync,The length of the statement  "            return PageResponseEnumerator.CreateAsyncEnumerable(nextLink => _pipeline.GetPageAsync(firstPageUri' nextLink' () => new IssuerProperties()' "Azure.Security.KeyVaultCertificates.CertificateClient.GetPropertiesOfIssuers"' cancellationToken)); " is 241.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificateOperation,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateOperation"); " is 134.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificateOperation,The length of the statement  "                Response<CertificateOperationProperties> response = _pipeline.SendRequest(RequestMethod.Get' () => new CertificateOperationProperties()' cancellationToken' CertificatesPath' certificateName' "/pending"); " is 203.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificateOperationAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetCertificateOperation"); " is 134.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetCertificateOperationAsync,The length of the statement  "                Response<CertificateOperationProperties> response = await _pipeline.SendRequestAsync(RequestMethod.Get' () => new CertificateOperationProperties()' cancellationToken' CertificatesPath' certificateName' "/pending").ConfigureAwait(false); " is 236.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,SetContacts,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.SetContacts"); " is 122.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,SetContacts,The length of the statement  "                Response<ContactList> contactList = _pipeline.SendRequest(RequestMethod.Put' new ContactList(contacts)' () => new ContactList()' cancellationToken' ContactsPath); " is 162.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,SetContactsAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.SetContacts"); " is 122.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,SetContactsAsync,The length of the statement  "                Response<ContactList> contactList = await _pipeline.SendRequestAsync(RequestMethod.Put' new ContactList(contacts)' () => new ContactList()' cancellationToken' ContactsPath).ConfigureAwait(false); " is 195.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetContacts,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetContacts"); " is 122.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetContacts,The length of the statement  "                Response<ContactList> contactList = _pipeline.SendRequest(RequestMethod.Get' () => new ContactList()' cancellationToken' ContactsPath); " is 135.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetContactsAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetContacts"); " is 122.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetContactsAsync,The length of the statement  "                Response<ContactList> contactList = await _pipeline.SendRequestAsync(RequestMethod.Get' () => new ContactList()' cancellationToken' ContactsPath).ConfigureAwait(false); " is 168.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,DeleteContacts,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.DeleteContacts"); " is 125.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,DeleteContacts,The length of the statement  "                Response<ContactList> contactList = _pipeline.SendRequest(RequestMethod.Delete' () => new ContactList()' cancellationToken' ContactsPath); " is 138.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,DeleteContactsAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.DeleteContacts"); " is 125.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,DeleteContactsAsync,The length of the statement  "                Response<ContactList> contactList = await _pipeline.SendRequestAsync(RequestMethod.Delete' () => new ContactList()' cancellationToken' ContactsPath).ConfigureAwait(false); " is 171.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,MergeCertificate,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.MergeCertificate"); " is 127.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,MergeCertificate,The length of the statement  "                Response<KeyVaultCertificateWithPolicy> certificate = _pipeline.SendRequest(RequestMethod.Post' () => new KeyVaultCertificateWithPolicy()' cancellationToken' CertificatesPath' mergeCertificateOptions.Name' "/pending/merge"); " is 224.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,MergeCertificateAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.MergeCertificate"); " is 127.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,MergeCertificateAsync,The length of the statement  "                Response<KeyVaultCertificateWithPolicy> certificate = await _pipeline.SendRequestAsync(RequestMethod.Post' () => new KeyVaultCertificateWithPolicy()' cancellationToken' CertificatesPath' mergeCertificateOptions.Name' "/pending/merge").ConfigureAwait(false); " is 257.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPendingCertificate,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetPendingCertificate"); " is 132.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPendingCertificate,The length of the statement  "                Response response = _pipeline.GetResponse(RequestMethod.Get' cancellationToken' CertificatesPath' certificateName' "/pending"); " is 127.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPendingCertificateAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.GetPendingCertificate"); " is 132.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPendingCertificateAsync,The length of the statement  "                Response response = await _pipeline.GetResponseAsync(RequestMethod.Get' cancellationToken' CertificatesPath' certificateName' "/pending").ConfigureAwait(false); " is 160.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,CancelCertificateOperation,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.CancelCertificateOperation"); " is 137.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,CancelCertificateOperation,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Patch' parameters' () => new CertificateOperationProperties()' cancellationToken' CertificatesPath' certificateName' "/pending"); " is 172.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,CancelCertificateOperationAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.CancelCertificateOperation"); " is 137.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,CancelCertificateOperationAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Patch' parameters' () => new CertificateOperationProperties()' cancellationToken' CertificatesPath' certificateName' "/pending").ConfigureAwait(false); " is 205.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,DeleteCertificateOperation,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.DeleteCertificateOperation"); " is 137.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,DeleteCertificateOperation,The length of the statement  "                return _pipeline.SendRequest(RequestMethod.Delete' () => new CertificateOperationProperties()' cancellationToken' CertificatesPath' certificateName' "/pending"); " is 161.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,DeleteCertificateOperationAsync,The length of the statement  "            using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.CertificateClient.DeleteCertificateOperation"); " is 137.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,DeleteCertificateOperationAsync,The length of the statement  "                return await _pipeline.SendRequestAsync(RequestMethod.Delete' () => new CertificateOperationProperties()' cancellationToken' CertificatesPath' certificateName' "/pending").ConfigureAwait(false); " is 194.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperation.cs,UpdateStatus,The length of the statement  "                Response<CertificateOperationProperties> pollResponse = _client.GetPendingCertificate(Properties.Name' cancellationToken); " is 122.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperation.cs,UpdateStatusAsync,The length of the statement  "                Response<CertificateOperationProperties> pollResponse = await _client.GetPendingCertificateAsync(Properties.Name' cancellationToken).ConfigureAwait(false); " is 155.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperation.cs,UpdateStatusAsync,The length of the statement  "                Response<KeyVaultCertificateWithPolicy> getResponse = await _client.GetCertificateAsync(Properties.Name' cancellationToken).ConfigureAwait(false); " is 146.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperation.cs,Cancel,The length of the statement  "            Response<CertificateOperationProperties> response = _client.CancelCertificateOperation(Properties.Name' cancellationToken); " is 123.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperation.cs,CancelAsync,The length of the statement  "            Response<CertificateOperationProperties> response = await _client.CancelCertificateOperationAsync(Properties.Name' cancellationToken).ConfigureAwait(false); " is 156.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperation.cs,Delete,The length of the statement  "            Response<CertificateOperationProperties> response = _client.DeleteCertificateOperation(Properties.Name' cancellationToken); " is 123.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperation.cs,DeleteAsync,The length of the statement  "            Response<CertificateOperationProperties> response = await _client.DeleteCertificateOperationAsync(Properties.Name' cancellationToken).ConfigureAwait(false); " is 156.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateOperationProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperationProperties.cs,ParseId,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "Invalid ObjectIdentifier: {0}. Bad number of segments: {1}"' idToParse' idToParse.Segments.Length)); " is 173.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateOperationProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperationProperties.cs,ParseId,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "Invalid ObjectIdentifier: {0}. segment [1] should be 'certificates/'' found '{1}'"' idToParse' idToParse.Segments[1])); " is 192.
Long Statement,Azure.Security.KeyVault.Certificates,CertificatePolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificatePolicy.cs,WriteProperties,The length of the statement  "            if (Subject != null || (SubjectAlternativeNames != null && !SubjectAlternativeNames.IsEmpty) || !KeyUsage.IsNullOrEmpty() || !EnhancedKeyUsage.IsNullOrEmpty() || ValidityInMonths.HasValue) " is 188.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateProperties.cs,ParseId,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "Invalid ObjectIdentifier: {0}. Bad number of segments: {1}"' idToParse' idToParse.Segments.Length)); " is 173.
Long Statement,Azure.Security.KeyVault.Certificates,CertificateProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateProperties.cs,ParseId,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "Invalid ObjectIdentifier: {0}. segment [1] should be 'certificates/'' found '{1}'"' idToParse' idToParse.Segments[1])); " is 192.
Long Statement,Azure.Security.KeyVault.Certificates,DeleteCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\DeleteCertificateOperation.cs,UpdateStatus,The length of the statement  "                using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.DeleteCertificateOperation.UpdateStatus"); " is 132.
Long Statement,Azure.Security.KeyVault.Certificates,DeleteCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\DeleteCertificateOperation.cs,UpdateStatus,The length of the statement  "                    _response = _pipeline.GetResponse(RequestMethod.Get' cancellationToken' CertificateClient.DeletedCertificatesPath' _value.Name); " is 128.
Long Statement,Azure.Security.KeyVault.Certificates,DeleteCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\DeleteCertificateOperation.cs,UpdateStatusAsync,The length of the statement  "                using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.DeleteCertificateOperation.UpdateStatus"); " is 132.
Long Statement,Azure.Security.KeyVault.Certificates,DeleteCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\DeleteCertificateOperation.cs,UpdateStatusAsync,The length of the statement  "                    _response = await _pipeline.GetResponseAsync(RequestMethod.Get' cancellationToken' CertificateClient.DeletedCertificatesPath' _value.Name).ConfigureAwait(false); " is 161.
Long Statement,Azure.Security.KeyVault.Certificates,RecoverDeletedCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\RecoverDeletedCertificateOperation.cs,UpdateStatus,The length of the statement  "                using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation.UpdateStatus"); " is 140.
Long Statement,Azure.Security.KeyVault.Certificates,RecoverDeletedCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\RecoverDeletedCertificateOperation.cs,UpdateStatus,The length of the statement  "                    _response = _pipeline.GetResponse(RequestMethod.Get' cancellationToken' CertificateClient.CertificatesPath' _value.Name' "/"' _value.Properties.Version); " is 153.
Long Statement,Azure.Security.KeyVault.Certificates,RecoverDeletedCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\RecoverDeletedCertificateOperation.cs,UpdateStatusAsync,The length of the statement  "                using DiagnosticScope scope = _pipeline.CreateScope("Azure.Security.KeyVault.Certificates.RecoverDeletedCertificateOperation.UpdateStatus"); " is 140.
Long Statement,Azure.Security.KeyVault.Certificates,RecoverDeletedCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\RecoverDeletedCertificateOperation.cs,UpdateStatusAsync,The length of the statement  "                    _response = await _pipeline.GetResponseAsync(RequestMethod.Get' cancellationToken' CertificateClient.CertificatesPath' _value.Name' "/"' _value.Properties.Version).ConfigureAwait(false); " is 186.
Long Statement,Microsoft.Extensions.Azure,CertificateClientBuilderExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClientBuilderExtensions.cs,AddCertificateClient,The length of the statement  "            return builder.RegisterClientFactory<CertificateClient' CertificateClientOptions>((options' cred) => new CertificateClient(vaultUri' cred' options)); " is 149.
Long Statement,Azure.Security.KeyVault,Base64Url,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\Base64Url.cs,Decode,The length of the statement  "            str = new StringBuilder(str).Replace('-'' '+').Replace('_'' '/').Append('='' (str.Length % 4 == 0) ? 0 : 4 - (str.Length % 4)).ToString(); " is 138.
Long Statement,Azure.Security.KeyVault,Base64Url,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\Base64Url.cs,Encode,The length of the statement  "            return new StringBuilder(Convert.ToBase64String(bytes)).Replace('+'' '-').Replace('/'' '_').Replace("="' "").ToString(); " is 120.
Long Statement,Azure.Security.KeyVault,ChallengeBasedAuthenticationPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\ChallengeBasedAuthenticationPolicy.cs,AuthenticateRequestAsync,The length of the statement  "                        await _credential.GetTokenAsync(new TokenRequestContext(_challenge.Scopes)' message.CancellationToken).ConfigureAwait(false) : " is 126.
Long Statement,Azure.Security.KeyVault,AuthenticationChallenge,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\ChallengeBasedAuthenticationPolicy.cs,GetChallengeFromResponse,The length of the statement  "                if (response.Headers.TryGetValue("WWW-Authenticate"' out string challengeValue) && challengeValue.StartsWith(BearerChallengePrefix' StringComparison.OrdinalIgnoreCase)) " is 168.
Long Statement,Azure.Security.KeyVault,KeyVaultIdentifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultIdentifier.cs,Parse,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "Invalid ObjectIdentifier: {0}. segment [1] should be '{1}/'' found '{2}'"' id' collection' identifier.Collection)); " is 188.
Long Statement,Azure.Security.KeyVault,KeyVaultIdentifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultIdentifier.cs,Parse,The length of the statement  "                throw new ArgumentException(string.Format(CultureInfo.InvariantCulture' "Invalid ObjectIdentifier: {0}. Bad number of segments: {1}"' id' id.Segments.Length)); " is 159.
Complex Conditional,Azure.Security.KeyVault.Certificates,CertificatePolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificatePolicy.cs,WriteProperties,The conditional expression  "Subject != null || (SubjectAlternativeNames != null && !SubjectAlternativeNames.IsEmpty) || !KeyUsage.IsNullOrEmpty() || !EnhancedKeyUsage.IsNullOrEmpty() || ValidityInMonths.HasValue"  is complex.
Complex Conditional,Azure.Core.Pipeline,ContentTypeUtilities,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\ContentTypeUtilities.cs,TryGetTextEncoding,The conditional expression  "contentType.StartsWith(textContentTypePrefix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(jsonSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(xmlSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(urlEncodedSuffix' StringComparison.OrdinalIgnoreCase)"  is complex.
Magic Number,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPendingCertificate,The following statement contains a magic number: switch (response.Status)                  {                      case 200:                      case 403:                          return _pipeline.CreateResponse(response' new CertificateOperationProperties());                        case 404:                          return Response.FromValue<CertificateOperationProperties>(null' response);                        default:                          throw response.CreateRequestFailedException();                  }
Magic Number,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPendingCertificate,The following statement contains a magic number: switch (response.Status)                  {                      case 200:                      case 403:                          return _pipeline.CreateResponse(response' new CertificateOperationProperties());                        case 404:                          return Response.FromValue<CertificateOperationProperties>(null' response);                        default:                          throw response.CreateRequestFailedException();                  }
Magic Number,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPendingCertificate,The following statement contains a magic number: switch (response.Status)                  {                      case 200:                      case 403:                          return _pipeline.CreateResponse(response' new CertificateOperationProperties());                        case 404:                          return Response.FromValue<CertificateOperationProperties>(null' response);                        default:                          throw response.CreateRequestFailedException();                  }
Magic Number,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPendingCertificateAsync,The following statement contains a magic number: switch (response.Status)                  {                      case 200:                      case 403:                          return _pipeline.CreateResponse(response' new CertificateOperationProperties());                        case 404:                          return Response.FromValue<CertificateOperationProperties>(null' response);                        default:                          throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);                  }
Magic Number,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPendingCertificateAsync,The following statement contains a magic number: switch (response.Status)                  {                      case 200:                      case 403:                          return _pipeline.CreateResponse(response' new CertificateOperationProperties());                        case 404:                          return Response.FromValue<CertificateOperationProperties>(null' response);                        default:                          throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);                  }
Magic Number,Azure.Security.KeyVault.Certificates,CertificateClient,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateClient.cs,GetPendingCertificateAsync,The following statement contains a magic number: switch (response.Status)                  {                      case 200:                      case 403:                          return _pipeline.CreateResponse(response' new CertificateOperationProperties());                        case 404:                          return Response.FromValue<CertificateOperationProperties>(null' response);                        default:                          throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);                  }
Magic Number,Azure.Security.KeyVault.Certificates,CertificateOperationProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperationProperties.cs,ParseId,The following statement contains a magic number: idToParse.Segments.Length != 3 && idToParse.Segments.Length != 4
Magic Number,Azure.Security.KeyVault.Certificates,CertificateOperationProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperationProperties.cs,ParseId,The following statement contains a magic number: idToParse.Segments.Length != 3 && idToParse.Segments.Length != 4
Magic Number,Azure.Security.KeyVault.Certificates,CertificateOperationProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperationProperties.cs,ParseId,The following statement contains a magic number: Name = idToParse.Segments[2].Trim('/');
Magic Number,Azure.Security.KeyVault.Certificates,CertificateProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateProperties.cs,ParseId,The following statement contains a magic number: idToParse.Segments.Length != 3 && idToParse.Segments.Length != 4
Magic Number,Azure.Security.KeyVault.Certificates,CertificateProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateProperties.cs,ParseId,The following statement contains a magic number: idToParse.Segments.Length != 3 && idToParse.Segments.Length != 4
Magic Number,Azure.Security.KeyVault.Certificates,CertificateProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateProperties.cs,ParseId,The following statement contains a magic number: Name = idToParse.Segments[2].Trim('/');
Magic Number,Azure.Security.KeyVault.Certificates,CertificateProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateProperties.cs,ParseId,The following statement contains a magic number: Version = (idToParse.Segments.Length == 4) ? idToParse.Segments[3].TrimEnd('/') : null;
Magic Number,Azure.Security.KeyVault.Certificates,CertificateProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateProperties.cs,ParseId,The following statement contains a magic number: Version = (idToParse.Segments.Length == 4) ? idToParse.Segments[3].TrimEnd('/') : null;
Magic Number,Azure.Security.KeyVault.Certificates,DeleteCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\DeleteCertificateOperation.cs,CheckCompletedAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the certificate was deleted.                      return true;                    case 404:                      return false;                    default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault.Certificates,DeleteCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\DeleteCertificateOperation.cs,CheckCompletedAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the certificate was deleted.                      return true;                    case 404:                      return false;                    default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault.Certificates,DeleteCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\DeleteCertificateOperation.cs,CheckCompletedAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the certificate was deleted.                      return true;                    case 404:                      return false;                    default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault.Certificates,DeleteCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\DeleteCertificateOperation.cs,CheckCompleted,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the certificate was deleted.                      return true;                    case 404:                      return false;                    default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault.Certificates,DeleteCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\DeleteCertificateOperation.cs,CheckCompleted,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the certificate was deleted.                      return true;                    case 404:                      return false;                    default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault.Certificates,DeleteCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\DeleteCertificateOperation.cs,CheckCompleted,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the certificate was deleted.                      return true;                    case 404:                      return false;                    default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault.Certificates,RecoverDeletedCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\RecoverDeletedCertificateOperation.cs,CheckCompletedAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the certificate was recovered.                      return true;                    case 404:                      return false;                    default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault.Certificates,RecoverDeletedCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\RecoverDeletedCertificateOperation.cs,CheckCompletedAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the certificate was recovered.                      return true;                    case 404:                      return false;                    default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault.Certificates,RecoverDeletedCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\RecoverDeletedCertificateOperation.cs,CheckCompletedAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the certificate was recovered.                      return true;                    case 404:                      return false;                    default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault.Certificates,RecoverDeletedCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\RecoverDeletedCertificateOperation.cs,CheckCompleted,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the certificate was recovered.                      return true;                    case 404:                      return false;                    default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault.Certificates,RecoverDeletedCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\RecoverDeletedCertificateOperation.cs,CheckCompleted,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the certificate was recovered.                      return true;                    case 404:                      return false;                    default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault.Certificates,RecoverDeletedCertificateOperation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\RecoverDeletedCertificateOperation.cs,CheckCompleted,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 403: // Access denied but proof the certificate was recovered.                      return true;                    case 404:                      return false;                    default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault,Base64Url,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\Base64Url.cs,Decode,The following statement contains a magic number: str = new StringBuilder(str).Replace('-'' '+').Replace('_'' '/').Append('='' (str.Length % 4 == 0) ? 0 : 4 - (str.Length % 4)).ToString();
Magic Number,Azure.Security.KeyVault,Base64Url,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\Base64Url.cs,Decode,The following statement contains a magic number: str = new StringBuilder(str).Replace('-'' '+').Replace('_'' '/').Append('='' (str.Length % 4 == 0) ? 0 : 4 - (str.Length % 4)).ToString();
Magic Number,Azure.Security.KeyVault,Base64Url,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\Base64Url.cs,Decode,The following statement contains a magic number: str = new StringBuilder(str).Replace('-'' '+').Replace('_'' '/').Append('='' (str.Length % 4 == 0) ? 0 : 4 - (str.Length % 4)).ToString();
Magic Number,Azure.Security.KeyVault,ChallengeBasedAuthenticationPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\ChallengeBasedAuthenticationPolicy.cs,ProcessCoreAsync,The following statement contains a magic number: message.Response.Status == 401
Magic Number,Azure.Security.KeyVault,ChallengeBasedAuthenticationPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\ChallengeBasedAuthenticationPolicy.cs,AuthenticateRequestAsync,The following statement contains a magic number: _refreshOn = token.ExpiresOn - TimeSpan.FromMinutes(2);
Magic Number,Azure.Security.KeyVault,AuthenticationChallenge,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\ChallengeBasedAuthenticationPolicy.cs,ParseBearerChallengeHeaderValue,The following statement contains a magic number: pair.Length == 2
Magic Number,Azure.Security.KeyVault,KeyVaultIdentifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultIdentifier.cs,Parse,The following statement contains a magic number: id.Segments.Length != 3 && id.Segments.Length != 4
Magic Number,Azure.Security.KeyVault,KeyVaultIdentifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultIdentifier.cs,Parse,The following statement contains a magic number: id.Segments.Length != 3 && id.Segments.Length != 4
Magic Number,Azure.Security.KeyVault,KeyVaultIdentifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultIdentifier.cs,Parse,The following statement contains a magic number: KeyVaultIdentifier identifier = new KeyVaultIdentifier              {                    Id = id'                  VaultUri = new Uri($"{id.Scheme}://{id.Authority}")'                  Collection = id.Segments[1].Trim('/')'                  Name = id.Segments[2].Trim('/')'                  Version = (id.Segments.Length == 4) ? id.Segments[3].TrimEnd('/') : null              };
Magic Number,Azure.Security.KeyVault,KeyVaultIdentifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultIdentifier.cs,Parse,The following statement contains a magic number: KeyVaultIdentifier identifier = new KeyVaultIdentifier              {                    Id = id'                  VaultUri = new Uri($"{id.Scheme}://{id.Authority}")'                  Collection = id.Segments[1].Trim('/')'                  Name = id.Segments[2].Trim('/')'                  Version = (id.Segments.Length == 4) ? id.Segments[3].TrimEnd('/') : null              };
Magic Number,Azure.Security.KeyVault,KeyVaultIdentifier,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultIdentifier.cs,Parse,The following statement contains a magic number: KeyVaultIdentifier identifier = new KeyVaultIdentifier              {                    Id = id'                  VaultUri = new Uri($"{id.Scheme}://{id.Authority}")'                  Collection = id.Segments[1].Trim('/')'                  Name = id.Segments[2].Trim('/')'                  Version = (id.Segments.Length == 4) ? id.Segments[3].TrimEnd('/') : null              };
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequestAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequestAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequestAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequestAsync,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw await response.CreateRequestFailedExceptionAsync().ConfigureAwait(false);              }
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequest,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequest,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequest,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Security.KeyVault,KeyVaultPipeline,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPipeline.cs,SendRequest,The following statement contains a magic number: switch (response.Status)              {                  case 200:                  case 201:                  case 202:                  case 204:                      return response;                  default:                      throw response.CreateRequestFailedException();              }
Magic Number,Azure.Core.Pipeline,ActivityExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\DiagnosticScope.cs,SetW3CFormat,The following statement contains a magic number: s_setIdFormatMethod.Invoke(activity' new object[]{ 2 /* ActivityIdFormat.W3C */});
Magic Number,Azure.Core.Pipeline,ActivityExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\DiagnosticScope.cs,IsW3CFormat,The following statement contains a magic number: return (int)result == 2 /* ActivityIdFormat.W3C */;
Missing Default,Azure.Security.KeyVault.Certificates,AdministratorContact,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\AdministratorContact.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case FirstNamePropertyName:                          FirstName = prop.Value.GetString();                          break;                      case LastNamePropertyName:                          LastName = prop.Value.GetString();                          break;                      case EmailPropertyName:                          Email = prop.Value.GetString();                          break;                      case PhonePropertyName:                          Phone = prop.Value.GetString();                          break;                  }
Missing Default,Azure.Security.KeyVault.Certificates,CertificateAttributes,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateAttributes.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case EnabledPropertyName:                          Enabled = prop.Value.GetBoolean();                          break;                        case NotBeforePropertyName:                          NotBefore = DateTimeOffset.FromUnixTimeSeconds(prop.Value.GetInt64());                          break;                        case ExpiresPropertyName:                          ExpiresOn = DateTimeOffset.FromUnixTimeSeconds(prop.Value.GetInt64());                          break;                        case CreatedPropertyName:                          CreatedOn = DateTimeOffset.FromUnixTimeSeconds(prop.Value.GetInt64());                          break;                        case UpdatedPropertyName:                          UpdatedOn = DateTimeOffset.FromUnixTimeSeconds(prop.Value.GetInt64());                          break;                        case RecoveryLevelPropertyName:                          RecoveryLevel = prop.Value.GetString();                          break;                  }
Missing Default,Azure.Security.KeyVault.Certificates,CertificateContact,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateContact.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case NamePropertyName:                          Name = prop.Value.GetString();                          break;                        case EmailPropertyName:                          Email = prop.Value.GetString();                          break;                        case PhonePropertyName:                          Phone = prop.Value.GetString();                          break;                  }
Missing Default,Azure.Security.KeyVault.Certificates,CertificateIssuer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateIssuer.cs,ReadCredentialsProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case AccountIdPropertyName:                          AccountId = prop.Value.GetString();                          break;                        case PasswordPropertyName:                          Password = prop.Value.GetString();                          break;                  }
Missing Default,Azure.Security.KeyVault.Certificates,CertificateIssuer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateIssuer.cs,ReadOrgDetailsProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case OrganizationIdPropertyName:                          OrganizationId = prop.Value.GetString();                          break;                        case AdminDetailsPropertyName:                          foreach (JsonElement elem in prop.Value.EnumerateArray())                          {                              var admin = new AdministratorContact();                              admin.ReadProperties(elem);                              AdministratorContacts.Add(admin);                          }                          Password = prop.Value.GetString();                          break;                  }
Missing Default,Azure.Security.KeyVault.Certificates,CertificateIssuer,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateIssuer.cs,ReadAttributeProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case EnabledPropertyName:                          Enabled = prop.Value.GetBoolean();                          break;                        case CreatedPropertyName:                          CreatedOn = DateTimeOffset.FromUnixTimeSeconds(prop.Value.GetInt64());                          break;                        case UpdatedPropertyName:                          UpdatedOn = DateTimeOffset.FromUnixTimeSeconds(prop.Value.GetInt64());                          break;                  }
Missing Default,Azure.Security.KeyVault.Certificates,CertificateOperationError,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperationError.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case CodePropertyName:                          Code = prop.Value.GetString();                          break;                        case MessagePropertyName:                          Message = prop.Value.GetString();                          break;                        case InnerErrorPropertyName:                          InnerError = new CertificateOperationError();                          ((IJsonDeserializable)InnerError).ReadProperties(prop.Value);                          break;                  }
Missing Default,Azure.Security.KeyVault.Certificates,CertificateOperationProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateOperationProperties.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case IdPropertyName:                          var id = prop.Value.GetString();                          Id = new Uri(id);                          ParseId(Id);                          break;                        case IssuerProperyName:                          _issuer.ReadProperties(prop.Value);                          break;                        case CsrPropertyName:                          string csr = prop.Value.GetString();                          Csr = Base64Url.Decode(csr);                          break;                        case CancellationRequestedPropertyName:                          CancellationRequested = prop.Value.GetBoolean();                          break;                        case RequestIdPropertyName:                          RequestId = prop.Value.GetString();                          break;                        case StatusPropertyName:                          Status = prop.Value.GetString();                          break;                        case StatusDetailsPropertyName:                          StatusDetails = prop.Value.GetString();                          break;                        case TargetPropertyName:                          Target = prop.Value.GetString();                          break;                        case ErrorPropertyName:                          Error = new CertificateOperationError();                          ((IJsonDeserializable)Error).ReadProperties(prop.Value);                          break;                  }
Missing Default,Azure.Security.KeyVault.Certificates,CertificatePolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificatePolicy.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case KeyPropsPropertyName:                          ReadKeyProperties(prop.Value);                          break;                        case SecretPropsPropertyName:                          ReadSecretProperties(prop.Value);                          break;                        case X509PropsPropertyName:                          ReadX509CertificateProperties(prop.Value);                          break;                        case IssuerPropertyName:                          _issuer.ReadProperties(prop.Value);                          break;                        case AttributesPropertyName:                          ReadAttributesProperties(prop.Value);                          break;                        case LifetimeActionsPropertyName:                          foreach (JsonElement actionElem in prop.Value.EnumerateArray())                          {                              LifetimeActions.Add(LifetimeAction.FromJsonObject(actionElem));                          }                          break;                    }
Missing Default,Azure.Security.KeyVault.Certificates,CertificatePolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificatePolicy.cs,ReadKeyProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case KeyTypePropertyName:                          KeyType = prop.Value.GetString();                          break;                        case ReuseKeyPropertyName:                          ReuseKey = prop.Value.GetBoolean();                          break;                        case ExportablePropertyName:                          Exportable = prop.Value.GetBoolean();                          break;                        case CurveNamePropertyName:                          KeyCurveName = prop.Value.GetString();                          break;                        case KeySizePropertyName:                          KeySize = prop.Value.GetInt32();                          break;                  }
Missing Default,Azure.Security.KeyVault.Certificates,CertificatePolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificatePolicy.cs,ReadX509CertificateProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case SubjectPropertyName:                          Subject = prop.Value.GetString();                          break;                        case SansPropertyName:                          SubjectAlternativeNames = new SubjectAlternativeNames();                          ((IJsonDeserializable)SubjectAlternativeNames).ReadProperties(prop.Value);                          break;                        case KeyUsagePropertyName:                          foreach (JsonElement usageElem in prop.Value.EnumerateArray())                          {                              KeyUsage.Add(usageElem.GetString());                          }                          break;                        case EkusPropertyName:                          foreach (JsonElement usageElem in prop.Value.EnumerateArray())                          {                              EnhancedKeyUsage.Add(usageElem.GetString());                          }                          break;                        case ValidityMonthsPropertyName:                          ValidityInMonths = prop.Value.GetInt32();                          break;                  }
Missing Default,Azure.Security.KeyVault.Certificates,CertificatePolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificatePolicy.cs,ReadAttributesProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case EnabledPropertyName:                          Enabled = prop.Value.GetBoolean();                          break;                        case CreatedPropertyName:                          CreatedOn = DateTimeOffset.FromUnixTimeSeconds(prop.Value.GetInt64());                          break;                        case UpdatedPropertyName:                          UpdatedOn = DateTimeOffset.FromUnixTimeSeconds(prop.Value.GetInt64());                          break;                  }
Missing Default,Azure.Security.KeyVault.Certificates,CertificateProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\CertificateProperties.cs,ReadProperty,The following switch statement is missing a default case: switch (prop.Name)              {                  case IdPropertyName:                      var id = prop.Value.GetString();                      Id = new Uri(id);                      ParseId(Id);                      break;                    case X509ThumprintPropertyName:                      X509Thumbprint = Base64Url.Decode(prop.Value.GetString());                      break;                    case TagsPropertyName:                      foreach (JsonProperty tagProp in prop.Value.EnumerateObject())                      {                          Tags[tagProp.Name] = tagProp.Value.GetString();                      }                      break;                    case AttributesPropertyName:                      _attributes.ReadProperties(prop.Value);                      break;              }
Missing Default,Azure.Security.KeyVault.Certificates,IssuerParameters,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\IssuerParameters.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case IssuerNamePropertyName:                          IssuerName = prop.Value.GetString();                          break;                        case CertificateTypePropertyName:                          CertificateType = prop.Value.GetString();                          break;                        case CertificateTransparencyPropertyName:                          CertificateTransparency = prop.Value.GetBoolean();                          break;                  }
Missing Default,Azure.Security.KeyVault.Certificates,IssuerProperties,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\IssuerProperties.cs,ReadProperty,The following switch statement is missing a default case: switch (prop.Name)              {                  case IdPropertyName:                      var id = prop.Value.GetString();                      Id = new Uri(id);                      break;                    case ProviderPropertyName:                      Provider = prop.Value.GetString();                      break;              }
Missing Default,Azure.Security.KeyVault.Certificates,LifetimeAction,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\LifetimeAction.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case TriggerPropertyName:                          foreach (JsonProperty triggerProp in prop.Value.EnumerateObject())                          {                              switch (triggerProp.Name)                              {                                  case LifetimePercentagePropertyName:                                      LifetimePercentage = triggerProp.Value.GetInt32();                                      break;                                    case DaysBeforeExpiryPropertyName:                                      DaysBeforeExpiry = triggerProp.Value.GetInt32();                                      break;                              }                          }                          break;                        case ActionPropertyName:                          Action = prop.Value.GetProperty(ActionTypePropertyName).GetString();                          break;                  }
Missing Default,Azure.Security.KeyVault.Certificates,LifetimeAction,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\LifetimeAction.cs,ReadProperties,The following switch statement is missing a default case: switch (triggerProp.Name)                              {                                  case LifetimePercentagePropertyName:                                      LifetimePercentage = triggerProp.Value.GetInt32();                                      break;                                    case DaysBeforeExpiryPropertyName:                                      DaysBeforeExpiry = triggerProp.Value.GetInt32();                                      break;                              }
Missing Default,Azure.Security.KeyVault.Certificates,SubjectAlternativeNames,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Certificates\src\SubjectAlternativeNames.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case DnsPropertyName:                          foreach (JsonElement element in prop.Value.EnumerateArray())                          {                              DnsNames.Add(element.ToString());                          }                          break;                        case EmailsPropertyName:                          foreach (JsonElement element in prop.Value.EnumerateArray())                          {                              Emails.Add(element.ToString());                          }                          break;                        case UpnsPropertyName:                          foreach (JsonElement element in prop.Value.EnumerateArray())                          {                              UserPrincipalNames.Add(element.ToString());                          }                          break;                  }
Missing Default,Azure.Security.KeyVault,KeyVaultPage<T>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\keyvault\Azure.Security.KeyVault.Shared\src\KeyVaultPage.cs,ReadProperties,The following switch statement is missing a default case: switch (prop.Name)                  {                      case "value":                          JsonElement value = prop.Value;                          if (value.ValueKind != JsonValueKind.Null)                          {                              _items = new T[value.GetArrayLength()];                                int i = 0;                                foreach (JsonElement elem in value.EnumerateArray())                              {                                  _items[i] = _itemFactory();                                    _items[i].ReadProperties(elem);                                    i++;                              }                          }                          break;                        case "nextLink":                          var nextLinkUrl = prop.Value.GetString();                          if (!string.IsNullOrEmpty(nextLinkUrl))                          {                              NextLink = new Uri(nextLinkUrl);                          }                          break;                  }
