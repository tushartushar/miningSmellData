Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\ServiceBusScope.cs,CreateTopicAsync,The method has 5 parameters. Parameters: partitioned' sessionEnabled' configureTopic' configureSubscription' caller
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\ServiceBusScope.cs,UsingQueueAsync,The method has 5 parameters. Parameters: partitioned' sessionEnabled' scopedOperationAsync' configureQueue' caller
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\ServiceBusScope.cs,UsingTopicAsync,The method has 6 parameters. Parameters: partitioned' sessionEnabled' scopedOperationAsync' configureTopic' configureSubscription' caller
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests,OnMessageQueueTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnMessageQueueTests.cs,OnMessageTestAsync,The method has 5 parameters. Parameters: partitioned' sessionEnabled' maxConcurrentCalls' mode' autoComplete
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests,OnMessageTopicSubscriptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnMessageTopicSubscriptionTests.cs,OnMessageTestAsync,The method has 5 parameters. Parameters: partitioned' sessionEnabled' maxConcurrentCalls' mode' autoComplete
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests,OnSessionQueueTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnSessionQueueTests.cs,OnSessionTestAsync,The method has 5 parameters. Parameters: partitioned' sessionEnabled' maxConcurrentCalls' mode' autoComplete
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests,OnSessionTopicSubscriptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnSessionTopicSubscriptionTests.cs,OnSessionTestAsync,The method has 5 parameters. Parameters: partitioned' sessionEnabled' maxConcurrentCalls' mode' autoComplete
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,OnMessageAsyncTestCase,The method has 5 parameters. Parameters: messageSender' messageReceiver' maxConcurrentCalls' autoComplete' messageCount
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertSendStart,The method has 6 parameters. Parameters: entityName' eventName' payload' activity' parentActivity' messageCount
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertSendStop,The method has 6 parameters. Parameters: entityName' eventName' payload' activity' sendActivity' messageCount
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertCompleteStart,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' parentActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertCompleteStop,The method has 6 parameters. Parameters: entityName' eventName' payload' activity' completeActivity' parentActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertAbandonStart,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' parentActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertAbandonStop,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' abandonActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertDeferStart,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' parentActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertDeferStop,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' deferActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertDeadLetterStart,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' parentActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertDeadLetterStop,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' deadLetterActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertScheduleStart,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' parentActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertScheduleStop,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' scheduleActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertCancelStart,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' parentActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertCancelStop,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' scheduleActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertReceiveStart,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' messagesCount
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertReceiveStop,The method has 8 parameters. Parameters: entityName' eventName' payload' activity' receiveActivity' sendActivity' sentMessagesCount' receivedMessagesCount
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertReceiveDeferredStop,The method has 6 parameters. Parameters: entityName' eventName' payload' activity' receiveActivity' sendActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertProcessStart,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' sendActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertProcessStop,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' processActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertPeekStop,The method has 6 parameters. Parameters: entityName' eventName' payload' activity' peekActivity' sendActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertRenewLockStart,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' parentActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertRenewLockStop,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' renewLockActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\DiagnosticsTests.cs,AssertException,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' parentActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SessionDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SessionDiagnosticsTests.cs,AssertAcceptMessageSessionStop,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' acceptActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SessionDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SessionDiagnosticsTests.cs,AssertGetSessionStateStop,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' getStateActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SessionDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SessionDiagnosticsTests.cs,AssertSetSessionStateStop,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' setStateActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SessionDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SessionDiagnosticsTests.cs,AssertRenewSessionLockStart,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' parentActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SessionDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SessionDiagnosticsTests.cs,AssertRenewSessionLockStop,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' renewActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SessionDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SessionDiagnosticsTests.cs,AssertProcessSessionStart,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' sendActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SessionDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SessionDiagnosticsTests.cs,AssertProcessSessionStop,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' processActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SubscriptionClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SubscriptionClientDiagnosticsTests.cs,AssertAddRuleStop,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' addRuleActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SubscriptionClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SubscriptionClientDiagnosticsTests.cs,AssertGetRulesStop,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' getRulesActivity
Long Parameter List,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SubscriptionClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SubscriptionClientDiagnosticsTests.cs,AssertRemoveRuleStop,The method has 5 parameters. Parameters: entityName' eventName' payload' activity' removeRuleActivity
Long Parameter List,Microsoft.Azure.ServiceBus.Performance,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Performance\Program.cs,WriteResult,The method has 6 parameters. Parameters: totalMessages' totalElapsed' currentMessages' currentElapsed' maxMessages' maxElapsed
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\TestConstants.cs,,The length of the parameter ConnectionStringEnvironmentVariable is 35.
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\TestConstants.cs,,The length of the parameter RetryExponentialBackoffSeconds is 30.
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\TestConstants.cs,,The length of the parameter QueueDefaultDuplicateDetectionHistory is 37.
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\TestConstants.cs,,The length of the parameter TopicDefaultDuplicateDetectionHistory is 37.
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\TestConstants.cs,,The length of the parameter SubscriptionMaximumDeliveryCount is 32.
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\TestConstants.cs,,The length of the parameter SubscriptionDefaultDeadLetterOnExpire is 37.
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\TestConstants.cs,,The length of the parameter SubscriptionDefaultDeadLetterOnException is 40.
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\TestConstants.cs,,The length of the parameter SubscriptionDefaultMessageTimeToLive is 36.
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\TestConstants.cs,,The length of the parameter SubscriptionDefaultLockDuration is 31.
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests,TestUtility,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\TestUtility.cs,,The length of the parameter NamespaceConnectionStringInstance is 33.
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests,TestUtility,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\TestUtility.cs,,The length of the parameter SocketNamespaceConnectionStringInstance is 39.
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests,OnMessageQueueTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnMessageQueueTests.cs,OnMessageExceptionHandlerCalledTest,The length of the parameter exceptionReceivedHandlerCalled is 30.
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests,OnSessionQueueTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnSessionQueueTests.cs,OnSessionExceptionHandlerCalledWhenRegisteredOnNonSessionFulQueue,The length of the parameter exceptionReceivedHandlerCalled is 30.
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests,OnSessionTopicSubscriptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnSessionTopicSubscriptionTests.cs,OnSessionExceptionHandlerCalledWhenRegisteredOnNonSessionFulSubscription,The length of the parameter exceptionReceivedHandlerCalled is 30.
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,WaitingReceiveShouldReturnImmediatelyWhenReceiverIsClosed,The length of the parameter timeoutCancellationTokenSource is 30.
Long Identifier,Microsoft.Azure.ServiceBus.UnitTests.Primitives,ServiceBusNamespaceConnectionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Primitives\ServiceBusNamespaceConnectionTests.cs,,The length of the parameter WebSocketsNamespaceConnectionString is 35.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ExpectedMessagingExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ExpectedMessagingExceptionTests.cs,MessageLockLostExceptionTest,The length of the statement  "                var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.PeekLock); " is 120.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ExpectedMessagingExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ExpectedMessagingExceptionTests.cs,CompleteOnPeekedMessagesShouldThrowTest,The length of the statement  "                var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete); " is 128.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ExpectedMessagingExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ExpectedMessagingExceptionTests.cs,SessionLockLostExceptionTest,The length of the statement  "                    TestUtility.Log($"Received Session: SessionId: {sessionReceiver.SessionId}: LockedUntilUtc: {sessionReceiver.LockedUntilUtc}"); " is 127.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ExpectedMessagingExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ExpectedMessagingExceptionTests.cs,SessionLockLostExceptionTest,The length of the statement  "                    await Assert.ThrowsAsync<SessionLockLostException>(async () => await sessionReceiver.CompleteAsync(message.SystemProperties.LockToken)); " is 136.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ExpectedMessagingExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ExpectedMessagingExceptionTests.cs,OperationsOnMessageSenderReceiverAfterCloseShouldThrowObjectDisposedExceptionTest,The length of the statement  "                var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete); " is 128.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ExpectedMessagingExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ExpectedMessagingExceptionTests.cs,OperationsOnMessageSenderReceiverAfterCloseShouldThrowObjectDisposedExceptionTest,The length of the statement  "                await Assert.ThrowsAsync<ObjectDisposedException>(async () => await sender.SendAsync(new Message(Encoding.UTF8.GetBytes("test")))); " is 131.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ExpectedMessagingExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ExpectedMessagingExceptionTests.cs,OperationsOnMessageSessionAfterCloseShouldThrowObjectDisposedExceptionTest,The length of the statement  "                    TestUtility.Log($"Received Session: SessionId: {sessionReceiver.SessionId}: LockedUntilUtc: {sessionReceiver.LockedUntilUtc}"); " is 127.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ExpectedMessagingExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ExpectedMessagingExceptionTests.cs,OperationsOnMessageSessionAfterCloseShouldThrowObjectDisposedExceptionTest,The length of the statement  "                    TestUtility.Log($"Reaccept Session: SessionId: {sessionReceiver.SessionId}: LockedUntilUtc: {sessionReceiver.LockedUntilUtc}"); " is 127.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ExpectedMessagingExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ExpectedMessagingExceptionTests.cs,CreatingLinkToNonExistingEntityShouldThrowEntityNotFoundException,The length of the statement  "            var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' "nonExistingEntity"); // Covers queue and topic " is 121.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ExpectedMessagingExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ExpectedMessagingExceptionTests.cs,CreatingLinkToNonExistingEntityShouldThrowEntityNotFoundException,The length of the statement  "                receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' EntityNameHelper.FormatSubscriptionPath(topicName' "nonexistingsub")); " is 140.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,DisplayTestMethodNameAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\DisplayTestMethodNameAttribute.cs,Before,The length of the statement  "            TestUtility.Log($"Begin {methodUnderTest.DeclaringType}.{methodUnderTest.Name} on {PlatformServices.Default.Application.RuntimeFramework}"); " is 140.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\ServiceBusScope.cs,CreateQueueAsync,The length of the statement  "                    TestUtility.Log($"There was an issue removing the queue: [{ name }].  This is considered non-fatal' but you should remove this manually from the Service Bus namespace. Exception: [{ ex.Message }]"); " is 198.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\ServiceBusScope.cs,CreateTopicAsync,The length of the statement  "            await CreateRetryPolicy<SubscriptionDescription>().ExecuteAsync( () => ManagementClient.CreateSubscriptionAsync(subscriptionDescription)); " is 138.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\ServiceBusScope.cs,CreateTopicAsync,The length of the statement  "                    TestUtility.Log($"There was an issue removing the topic: [{ topicName }].  This is considered non-fatal' but you should remove this manually from the Service Bus namespace. Exception: [{ ex.Message }]"); " is 203.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,TestUtility,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\TestUtility.cs,ReceiveMessagesAsync,The length of the statement  "            while (messagesToReturn.Count < messageCount && (receiveAttempts++ < TestConstants.MaxAttemptsCount || stopwatch.Elapsed < timeout)) " is 132.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,TestUtility,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\TestUtility.cs,ReadEnvironmentConnectionString,The length of the statement  "                throw new InvalidOperationException($"'{TestConstants.ConnectionStringEnvironmentVariable}' environment variable was not found!"); " is 130.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,OnMessageQueueTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnMessageQueueTests.cs,OnMessageRegistrationWithoutPendingMessagesReceiveAndDelete,The length of the statement  "                    await this.OnMessageRegistrationWithoutPendingMessagesTestCase(queueClient.InnerSender' queueClient.InnerReceiver' maxConcurrentCalls' true); " is 141.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,OnMessageQueueTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnMessageQueueTests.cs,OnMessageExceptionHandlerCalledTest,The length of the statement  "            var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' invalidQueueName' ReceiveMode.ReceiveAndDelete); " is 121.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,OnSessionQueueTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnSessionQueueTests.cs,OnSessionTestAsync,The length of the statement  "                TestUtility.Log($"Queue: {queueName}' MaxConcurrentCalls: {maxConcurrentCalls}' Receive Mode: {mode.ToString()}' AutoComplete: {autoComplete}"); " is 144.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,OnSessionQueueTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnSessionQueueTests.cs,ExceptionReceivedHandler,The length of the statement  "            TestUtility.Log($"Exception Received: ClientId: {eventArgs.ExceptionReceivedContext.ClientId}' EntityPath: {eventArgs.ExceptionReceivedContext.EntityPath}' Exception: {eventArgs.Exception.Message}"); " is 199.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,OnSessionTopicSubscriptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnSessionTopicSubscriptionTests.cs,OnSessionTestAsync,The length of the statement  "                TestUtility.Log($"Topic: {topicName}' MaxConcurrentCalls: {maxConcurrentCalls}' Receive Mode: {mode.ToString()}' AutoComplete: {autoComplete}"); " is 144.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,OnSessionTopicSubscriptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnSessionTopicSubscriptionTests.cs,ExceptionReceivedHandler,The length of the statement  "            TestUtility.Log($"Exception Received: ClientId: {eventArgs.ExceptionReceivedContext.ClientId}' EntityPath: {eventArgs.ExceptionReceivedContext.EntityPath}' Exception: {eventArgs.Exception.Message}"); " is 199.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,PluginTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\PluginTests.cs,Registering_plugin_multiple_times_should_throw,The length of the statement  "                var messageReceiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete); " is 122.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,PluginTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\PluginTests.cs,Unregistering_plugin_should_complete_with_plugin_set,The length of the statement  "                var messageReceiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete); " is 122.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,PluginTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\PluginTests.cs,Unregistering_plugin_should_complete_without_plugin_set,The length of the statement  "                var messageReceiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete); " is 122.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,PluginTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\PluginTests.cs,Multiple_plugins_should_run_in_order,The length of the statement  "                var messageReceiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete); " is 122.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,PluginTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\PluginTests.cs,Multiple_plugins_should_be_able_to_manipulate_message,The length of the statement  "                var messageReceiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete); " is 122.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,PluginTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\PluginTests.cs,Plugin_with_ShouldContinueOnException_should_continue,The length of the statement  "                var messageReceiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete); " is 122.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,QueueClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueClientTests.cs,PeekLockWithDeadLetterTest,The length of the statement  "                var deadLetterQueueClient = new QueueClient(TestUtility.NamespaceConnectionString' EntityNameHelper.FormatDeadLetterPath(queueClient.QueueName)); " is 145.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,QueueClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueClientTests.cs,ScheduleMessagesAppearAfterScheduledTimeAsyncTest,The length of the statement  "                    await this.ScheduleMessagesAppearAfterScheduledTimeAsyncTestCase(queueClient.InnerSender' queueClient.InnerReceiver' messageCount); " is 131.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,QueueSessionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueSessionTests.cs,SessionRenewLockTest,The length of the statement  "                    TestUtility.Log($"After Renew Session LockedUntilUTC: {firstLockedUntilUtcTime} for Session: {sessionReceiver.SessionId}"); " is 123.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,QueueSessionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueSessionTests.cs,SessionRenewLockTest,The length of the statement  "                    TestUtility.Log($"After Second Renew Session LockedUntilUTC: {sessionReceiver.LockedUntilUtc} for Session: {sessionReceiver.SessionId}"); " is 137.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RetryExponentialServerBusyShouldSelfResetTest,The length of the statement  "            Assert.True(retryExponential.ShouldRetry(duration' retryCount' exception' out _)' "We should retry' but it returned false"); " is 124.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RetryExponentialServerBusyShouldSelfResetTest,The length of the statement  "            Assert.True(retryExponential.ShouldRetry(duration' retryCount' exception' out _)' "We should retry' but it return false"); " is 122.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RetryExponentialServerBusyShouldSelfResetTest,The length of the statement  "            // This check is timing sensitive and has shown to behave differently in different build environments.  Allow for some timing " is 125.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RetryExponentialServerBusyShouldSelfResetTest,The length of the statement  "            Assert.True(retryExponential.ShouldRetry(duration' retryCount' exception' out _)' "We should retry' but it return false"); " is 122.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,PeekLockWithAbandonTestCase,The length of the statement  "            var messagesWithDeliveryCount2 = receivedMessages.Where(message => message.SystemProperties.DeliveryCount == 2).Count(); " is 120.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,PeekLockDeferTestCase,The length of the statement  "            var sequenceNumbers = receivedMessages.Select(receivedMessage => receivedMessage.SystemProperties.SequenceNumber).ToList(); " is 123.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,OnMessageAsyncTestCase,The length of the statement  "                new MessageHandlerOptions(ExceptionReceivedHandler) { MaxConcurrentCalls = maxConcurrentCalls' AutoComplete = autoComplete }); " is 126.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,OnMessageRegistrationWithoutPendingMessagesTestCase,The length of the statement  "                new MessageHandlerOptions(ExceptionReceivedHandler) { MaxConcurrentCalls = maxConcurrentCalls' AutoComplete = autoComplete }); " is 126.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,ExceptionReceivedHandler,The length of the statement  "            TestUtility.Log($"Exception Received: ClientId: {eventArgs.ExceptionReceivedContext.ClientId}' EntityPath: {eventArgs.ExceptionReceivedContext.EntityPath}' Exception: {eventArgs.Exception.Message}"); " is 199.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,MessageReceiverAndMessageSenderCreationWorksAsExpected,The length of the statement  "                var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.PeekLock); " is 120.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,TopicClientPeekLockDeferTestCase,The length of the statement  "                var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.PeekLock); " is 120.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,PeekAsyncTest,The length of the statement  "                var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete); " is 128.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,ReceiveShouldReturnNoLaterThanServerWaitTimeTest,The length of the statement  "                var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete); " is 128.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,ReceiveShouldThrowForServerTimeoutZeroTest,The length of the statement  "                var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete); " is 128.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,ReceiverShouldUseTheLatestPrefetchCount,The length of the statement  "                var receiver1 = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete); " is 129.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,ReceiverShouldUseTheLatestPrefetchCount,The length of the statement  "                var receiver2 = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete' prefetchCount: 1); " is 147.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,DeadLetterReasonShouldPropagateToTheReceivedMessage,The length of the statement  "                var dlqReceiver = new MessageReceiver(TestUtility.NamespaceConnectionString' EntityNameHelper.FormatDeadLetterPath(queueName)' ReceiveMode.ReceiveAndDelete); " is 157.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,ClientThrowsObjectDisposedExceptionWhenUserCloseConnectionAndWouldUseOldSeviceBusConnection,The length of the statement  "                var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete); " is 128.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,SendMesageCloseConnectionCreateAnotherConnectionSendAgainMessage,The length of the statement  "                var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete); " is 128.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,ClientsUseGlobalConnectionCloseFirstClientSecoundClientShouldSendMessage,The length of the statement  "                var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete); " is 128.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderShouldTakeCareOfWhitespace,The length of the statement  "            Assert.Equal("Endpoint=amqps://contoso.servicebus.windows.net;SharedAccessKeyName=keyname;SharedAccessKey=key;EntityPath=myQ"' csBuilder.ToString()); " is 149.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderShouldTakeCareOfSlash,The length of the statement  "            Assert.Equal("Endpoint=amqps://contoso.servicebus.windows.net;SharedAccessKeyName=keyname;EntityPath=myQ"' csBuilder.ToString()); " is 129.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderShouldTrimTrailingSemicolon,The length of the statement  "            Assert.Equal("Endpoint=amqps://contoso.servicebus.windows.net;TransportType=AmqpWebSockets;OperationTimeout=00:00:42"' csBuilder.ToString()); " is 141.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderShouldOutputTransportTypeIfWebSocket,The length of the statement  "            Assert.Equal("Endpoint=amqps://contoso.servicebus.windows.net;SharedAccessKeyName=keyname;SharedAccessKey=key;TransportType=AmqpWebSockets;EntityPath=myQ"' csBuilder.ToString()); " is 178.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderShouldParseTransportTypeIfWebSocket,The length of the statement  "            var csBuilder = new ServiceBusConnectionStringBuilder("Endpoint=sb://contoso.servicebus.windows.net;SharedAccessKeyName=keyname;SharedAccessKey=key;TransportType=AmqpWebSockets"); " is 179.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderShouldDefaultToAmqp,The length of the statement  "            var csBuilder = new ServiceBusConnectionStringBuilder("Endpoint=sb://contoso.servicebus.windows.net;SharedAccessKeyName=keyname;SharedAccessKey=key"); " is 150.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderShouldParseOperationTimeoutAsInteger,The length of the statement  "            var csBuilder = new ServiceBusConnectionStringBuilder("Endpoint=sb://contoso.servicebus.windows.net;SharedAccessKeyName=keyname;SharedAccessKey=key;OperationTimeout=120"); " is 171.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderShouldParseOperationTimeoutAsTimeSpan,The length of the statement  "            var csBuilder = new ServiceBusConnectionStringBuilder("Endpoint=sb://contoso.servicebus.windows.net;SharedAccessKeyName=keyname;SharedAccessKey=key;OperationTimeout=00:12:34"); " is 176.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderOperationTimeoutShouldDefaultToOneMinute,The length of the statement  "            var csBuilder = new ServiceBusConnectionStringBuilder("Endpoint=sb://contoso.servicebus.windows.net;SharedAccessKeyName=keyname;SharedAccessKey=key"); " is 150.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderShouldThrowForInvalidOperationTimeout,The length of the statement  "            var exception = Assert.Throws<ArgumentException>(() => new ServiceBusConnectionStringBuilder("Endpoint=sb://contoso.servicebus.windows.net;SharedAccessKeyName=keyname;SharedAccessKey=key;OperationTimeout=x")); " is 209.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderShouldParseToken,The length of the statement  "            var token = "SharedAccessSignature sr=https%3a%2f%2fmynamespace.servicebus.windows.net%2fvendor-&sig=somesignature&se=64953734126&skn=PolicyName"; " is 146.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderShouldParseToken,The length of the statement  "            var csBuilder = new ServiceBusConnectionStringBuilder("SharedAccessSignature=" + token+";Endpoint=sb://contoso.servicebus.windows.net"); " is 136.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,TestSessionHandler,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TestSessionHandler.cs,OnSessionHandler,The length of the statement  "            TestUtility.Log($"Received Session: {session.SessionId} message: SequenceNumber: {message.SystemProperties.SequenceNumber}"); " is 125.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,TokenProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TokenProviderTests.cs,SasTokenWithLargeExpiryTimeShouldBeAccepted,The length of the statement  "                var tokenProvider = TokenProvider.CreateSharedAccessSignatureTokenProvider(csb.SasKeyName' csb.SasKey' TimeSpan.FromDays(100)); " is 127.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionalCompleteCommitTest,The length of the statement  "                    await Assert.ThrowsAsync<MessageLockLostException>(async () => await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken)); " is 137.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionalSessionDispositionTest,The length of the statement  "                    await Assert.ThrowsAsync<SessionLockLostException>(async () => await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken)); " is 137.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionalRequestResponseDispositionTest,The length of the statement  "                    await Assert.ThrowsAsync<MessageLockLostException>(async () => await receiver.CompleteAsync(deferredMessage.SystemProperties.LockToken)); " is 137.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionCommitWorksAcrossClientsUsingSameConnectionToSameEntity,The length of the statement  "                    await Assert.ThrowsAsync<MessageLockLostException>(async () => await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken)); " is 137.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionalSendViaCommitTest,The length of the statement  "                var destination1ReceiverName = EntityNameHelper.FormatSubscriptionPath(destination1.TopicName' destination1.SubscriptionName); " is 126.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionalSendViaCommitTest,The length of the statement  "                    SafeCloseAllAsync(intermediateSender' intermediateReceiver' destination1Sender' destination1ViaSender' destination2ViaSender' destination1Receiver' destination2Receiver)' " is 170.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests,WebSocketsEnd2EndTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\WebSocketsEnd2EndTests.cs,SendAndReceiveWithWebSocketsTest,The length of the statement  "                var queueClient = new QueueClient(TestUtility.WebSocketsNamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete); " is 124.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.API,ApiApprovals,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\API\APIApprovals.cs,ApproveAzureServiceBus,The length of the statement  "            var publicApi = Filter(PublicApiGenerator.ApiGenerator.GeneratePublicApi(assembly' whitelistedNamespacePrefixes: new[] { "Microsoft.Azure.ServiceBus." })); " is 155.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.API,ApiApprovals,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\API\APIApprovals.cs,CleanApprovalsTempFiles,The length of the statement  "            foreach (var file in Directory.EnumerateFiles(approvalsWorkingdDirectory' $"{ nameof(ApiApprovals) }.*received.txt"' SearchOption.AllDirectories)) " is 146.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.API,ApiApprovals,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\API\APIApprovals.cs,CleanApprovalsTempFiles,The length of the statement  "                    // Avoid using the TestUtility class here' as it has a static dependency on the connection string environment variable' but this is " is 131.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.API,ApiApprovals,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\API\APIApprovals.cs,CleanApprovalsTempFiles,The length of the statement  "                    var message = $"Unable to remove the test asset [{ file }].  This non-critical but may leave remnants for a local run."; " is 120.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,SendAndHandlerFireEvents,The length of the statement  "                        AssertCompleteStart(queueName' completeStart.eventName' completeStart.payload' completeStart.activity' processStart.activity); " is 126.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,SendAndHandlerFireEvents,The length of the statement  "                        AssertCompleteStop(queueName' completeStop.eventName' completeStop.payload' completeStop.activity' completeStart.activity' processStart.activity); " is 146.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,AbandonCompleteFireEvents,The length of the statement  "                        AssertCompleteStop(queueName' completeStop.eventName' completeStop.payload' completeStop.activity' completeStart.activity' null); " is 129.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,ReceiveNoMessageFireEvents,The length of the statement  "                            var startCount = AssertReceiveStart(queueName' receiveStart.eventName' receiveStart.payload' receiveStart.activity' -1); " is 120.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,ReceiveNoMessageFireEvents,The length of the statement  "                            receivedStopCount += AssertReceiveStop(queueName' receiveStop.eventName' receiveStop.payload' receiveStop.activity' receiveStart.activity' null' startCount' -1); " is 161.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,BatchSendReceiveFireEvents,The length of the statement  "                            var startCount = AssertReceiveStart(queueName' receiveStart.eventName' receiveStart.payload' receiveStart.activity' -1); " is 120.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,BatchSendReceiveFireEvents,The length of the statement  "                                AssertReceiveStop(queueName' receiveStop.eventName' receiveStop.payload' receiveStop.activity' receiveStart.activity' null' startCount' -1); " is 140.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,PeekFireEvents,The length of the statement  "                        AssertPeekStop(queueName' peekStop.eventName' peekStop.payload' peekStop.activity' peekStart.activity' sendStart.activity); " is 123.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,DeadLetterFireEvents,The length of the statement  "                            deadLetterQueueClient = new QueueClient(TestUtility.NamespaceConnectionString' EntityNameHelper.FormatDeadLetterPath(queueClient.QueueName)' ReceiveMode.ReceiveAndDelete); " is 171.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,DeadLetterFireEvents,The length of the statement  "                        AssertDeadLetterStop(queueName' deadLetterStop.eventName' deadLetterStop.payload' deadLetterStop.activity' deadLetterStart.activity); " is 133.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,DeferReceiveDeferredFireEvents,The length of the statement  "                        AssertReceiveDeferredStart(queueName' receiveDeferredStart.eventName' receiveDeferredStart.payload' receiveDeferredStart.activity); " is 131.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,ScheduleAndCancelFireEvents,The length of the statement  "                        var sequenceNumber = await queueClient.InnerSender.ScheduleMessageAsync(new Message()' DateTimeOffset.UtcNow.AddHours(1)); " is 122.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SessionDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SessionDiagnosticsTests.cs,SessionHandlerFireEvents,The length of the statement  "                var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete' new NoRetry()) " is 128.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SessionDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SessionDiagnosticsTests.cs,SessionHandlerFireEvents,The length of the statement  "                        AssertProcessSessionStart(queueName' processStart.eventName' processStart.payload' processStart.activity' sendStart.activity); " is 126.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SubscriptionClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SubscriptionClientDiagnosticsTests.cs,AddRemoveGetFireEvents,The length of the statement  "                var subscriptionClient = new SubscriptionClient(TestUtility.NamespaceConnectionString' topicName' subscriptionName' ReceiveMode.ReceiveAndDelete); " is 146.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SubscriptionClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SubscriptionClientDiagnosticsTests.cs,AddRemoveGetFireEvents,The length of the statement  "                        AssertGetRulesStop(entityName' getRulesStop.eventName' getRulesStop.payload' getRulesStop.activity' getRulesStart.activity); " is 124.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SubscriptionClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SubscriptionClientDiagnosticsTests.cs,AddRemoveGetFireEvents,The length of the statement  "                        AssertRemoveRuleStop(entityName' removeRuleStop.eventName' removeRuleStop.payload' removeRuleStop.activity' removeRuleStart.activity); " is 134.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,FakeDiagnosticsListenerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure.Tests\FakeDiagnosticsListenerTests.cs,SubscriptionsEventsAreNotCapturedWhenDiagnosticsIsDisabled,The length of the statement  "                var subscriptionClient = new SubscriptionClient(TestUtility.NamespaceConnectionString' topicName' subscriptionName' ReceiveMode.ReceiveAndDelete); " is 146.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicRulesCrudTest,The length of the statement  "                var sqlFilter = new SqlFilter("stringValue = @stringParam AND intValue = @intParam AND longValue = @longParam AND dateValue = @dateParam AND timeSpanValue = @timeSpanParam"); " is 174.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,GetTopicAndSubscriptionRuntimeInfoTest,The length of the statement  "            var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' EntityNameHelper.FormatSubscriptionPath(topicName' subscriptionName)); " is 144.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,ForwardingEntitySetupTest,The length of the statement  "                await Task.WhenAll(SafeDeleteQueue(client' queueName)' SafeDeleteQueue(client' destinationName)' SafeDeleteQueue(client' dlqDestinationName)); " is 142.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,AuthRulesEqualityCheckTest,The length of the statement  "            var rule1 = new SharedAccessAuthorizationRule("sendListen"' new List<AccessRights> { AccessRights.Listen' AccessRights.Send }); " is 127.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,AuthRulesEqualityCheckTest,The length of the statement  "            var rule2 = new SharedAccessAuthorizationRule("manage"' new List<AccessRights> { AccessRights.Listen' AccessRights.Send' AccessRights.Manage }); " is 144.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,AuthRulesEqualityCheckTest,The length of the statement  "            qd2.AuthorizationRules.Add(new SharedAccessAuthorizationRule(rule2.KeyName' rule2.PrimaryKey' rule2.SecondaryKey' rule2.Rights)); " is 129.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,AuthRulesEqualityCheckTest,The length of the statement  "            qd2.AuthorizationRules.Add(new SharedAccessAuthorizationRule(rule1.KeyName' rule1.PrimaryKey' rule1.SecondaryKey' rule1.Rights)); " is 129.
Long Statement,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,GetNamespaceInfoTest,The length of the statement  "                Assert.Equal(MessagingSku.Standard' nsInfo.MessagingSku);    // Most CI systems generally use standard' hence this check just to ensure the API is working. " is 155.
Empty Catch Block,Microsoft.Azure.ServiceBus.UnitTests,TaskExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure.Tests\TaskExtensionTests.cs,WithTimeoutInvokesTheCancellationTokenWhenATimeoutOccurs,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.ServiceBus.UnitTests,TaskExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure.Tests\TaskExtensionTests.cs,WithTimeoutGenericInvokesTheCancellationTokenWhenATimeoutOccurs,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.ServiceBus.UnitTests,TestUtility,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\TestUtility.cs,Log,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.ServiceBus.UnitTests,SubscriptionClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SubscriptionClientTests.cs,SqlActionTestCase,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,SafeCloseAllAsync,The method has an empty catch block.
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,AmqpConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\AmqpConverterTests.cs,Convert_SB_message_to_Amqp_message_and_back,The following statement contains a magic number: var timeToLive = TimeSpan.FromDays(5);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,AmqpConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\AmqpConverterTests.cs,When_message_is_peeked_should_have_delivery_count_set_to_zero,The following statement contains a magic number: amqpMessage.Header.DeliveryCount = 2;
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,AmqpConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\AmqpConverterTests.cs,When_message_is_peeked_should_have_delivery_count_set_to_zero,The following statement contains a magic number: Assert.Equal(2' sbMessage.SystemProperties.DeliveryCount);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,AmqpConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\AmqpConverterTests.cs,When_message_is_received_should_have_delivery_count_increased,The following statement contains a magic number: amqpMessage.Header.DeliveryCount = 2;
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,AmqpConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\AmqpConverterTests.cs,When_message_is_received_should_have_delivery_count_increased,The following statement contains a magic number: Assert.Equal(3' sbMessage.SystemProperties.DeliveryCount);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,ExpectedMessagingExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ExpectedMessagingExceptionTests.cs,MessageLockLostExceptionTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  const int messageCount = 2;                    var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.PeekLock);                    try                  {                      await TestUtility.SendMessagesAsync(sender' messageCount);                      var receivedMessages = await TestUtility.ReceiveMessagesAsync(receiver' messageCount);                        Assert.True(receivedMessages.Count == messageCount);                        // Let the messages expire                      await Task.Delay(TimeSpan.FromMinutes(1));                        // Complete should throw                      await                          Assert.ThrowsAsync<MessageLockLostException>(                              async () => await TestUtility.CompleteMessagesAsync(receiver' receivedMessages));                        receivedMessages = await TestUtility.ReceiveMessagesAsync(receiver' messageCount);                      Assert.True(receivedMessages.Count == messageCount);                        await TestUtility.CompleteMessagesAsync(receiver' receivedMessages);                  }                  finally                  {                      await sender.CloseAsync();                      await receiver.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,ExpectedMessagingExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ExpectedMessagingExceptionTests.cs,SessionLockLostExceptionTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: true' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var sessionClient = new SessionClient(TestUtility.NamespaceConnectionString' queueName);                    try                  {                      var messageId = "test-message1";                      var sessionId = Guid.NewGuid().ToString();                      await sender.SendAsync(new Message { MessageId = messageId' SessionId = sessionId });                      TestUtility.Log($"Sent Message: {messageId} to Session: {sessionId}");                        var sessionReceiver = await sessionClient.AcceptMessageSessionAsync(sessionId);                      Assert.NotNull(sessionReceiver);                      TestUtility.Log($"Received Session: SessionId: {sessionReceiver.SessionId}: LockedUntilUtc: {sessionReceiver.LockedUntilUtc}");                        var message = await sessionReceiver.ReceiveAsync();                      Assert.True(message.MessageId == messageId);                      TestUtility.Log($"Received Message: MessageId: {message.MessageId}");                        // Let the Session expire with some buffer time                      TestUtility.Log($"Waiting for session lock to time out...");                      await Task.Delay((sessionReceiver.LockedUntilUtc - DateTime.UtcNow) + TimeSpan.FromSeconds(10));                        await Assert.ThrowsAsync<SessionLockLostException>(async () => await sessionReceiver.ReceiveAsync());                      await Assert.ThrowsAsync<SessionLockLostException>(async () => await sessionReceiver.RenewSessionLockAsync());                      await Assert.ThrowsAsync<SessionLockLostException>(async () => await sessionReceiver.GetStateAsync());                      await Assert.ThrowsAsync<SessionLockLostException>(async () => await sessionReceiver.SetStateAsync(null));                      await Assert.ThrowsAsync<SessionLockLostException>(async () => await sessionReceiver.CompleteAsync(message.SystemProperties.LockToken));                        await sessionReceiver.CloseAsync();                      TestUtility.Log($"Closed Session Receiver...");                        //Accept a new Session and Complete the message                      sessionReceiver = await sessionClient.AcceptMessageSessionAsync(sessionId);                      Assert.NotNull(sessionReceiver);                      TestUtility.Log($"Received Session: SessionId: {sessionReceiver.SessionId}");                      message = await sessionReceiver.ReceiveAsync();                      TestUtility.Log($"Received Message: MessageId: {message.MessageId}");                      await sessionReceiver.CompleteAsync(message.SystemProperties.LockToken);                      await sessionReceiver.CloseAsync();                  }                  finally                  {                      await sender.CloseAsync();                      await sessionClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\ServiceBusScope.cs,CreateQueueAsync,The following statement contains a magic number: var name = $"{ caller }-{ Guid.NewGuid().ToString("D").Substring(0' 8) }";
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Infrastructure\ServiceBusScope.cs,CreateTopicAsync,The following statement contains a magic number: var topicName = $"{ caller }-{ Guid.NewGuid().ToString("D").Substring(0' 8) }";
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,MessageTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,LargeMessageShouldThrowMessageSizeExceededException,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.PeekLock);                    try                  {                      // 2 MB message.                      var message = new Message(new byte[1024 * 1024 * 2]);                      await Assert.ThrowsAsync<MessageSizeExceededException>(async () => await queueClient.SendAsync(message));                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                      throw;                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,MessageTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,LargeMessageShouldThrowMessageSizeExceededException,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.PeekLock);                    try                  {                      // 2 MB message.                      var message = new Message(new byte[1024 * 1024 * 2]);                      await Assert.ThrowsAsync<MessageSizeExceededException>(async () => await queueClient.SendAsync(message));                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                      throw;                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,MessageTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,LargeMessageShouldThrowMessageSizeExceededException,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.PeekLock);                    try                  {                      // 2 MB message.                      var message = new Message(new byte[1024 * 1024 * 2]);                      await Assert.ThrowsAsync<MessageSizeExceededException>(async () => await queueClient.SendAsync(message));                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                      throw;                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,MessageTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,MessagePropertiesShouldSupportValidPropertyTypes,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    /// Only following value types are supported:                  /// byte' sbyte' char' short' ushort' int' uint' long' ulong' float' double' decimal'                  /// bool' Guid' string' Uri' DateTime' DateTimeOffset' TimeSpan                  var msg = new Message();                  msg.UserProperties.Add("byte"' (byte)2);                  msg.UserProperties.Add("sbyte"' (sbyte)3);                  msg.UserProperties.Add("char"' 'c');                  msg.UserProperties.Add("short"' (short)4);                  msg.UserProperties.Add("ushort"' (ushort)5);                  msg.UserProperties.Add("int"' (int)6);                  msg.UserProperties.Add("uint"' (uint)7);                  msg.UserProperties.Add("long"' (long)8);                  msg.UserProperties.Add("ulong"' (ulong)9);                  msg.UserProperties.Add("float"' (float)10.0);                  msg.UserProperties.Add("double"' (double)11.0);                  msg.UserProperties.Add("decimal"' (decimal)12.0);                  msg.UserProperties.Add("bool"' true);                  msg.UserProperties.Add("Guid"' Guid.NewGuid());                  msg.UserProperties.Add("string"' "value");                  msg.UserProperties.Add("Uri"' new Uri("http://nonExistingServiceBusWebsite.com"));                  msg.UserProperties.Add("DateTime"' DateTime.UtcNow);                  msg.UserProperties.Add("DateTimeOffset"' DateTimeOffset.UtcNow);                  msg.UserProperties.Add("TimeSpan"' TimeSpan.FromMinutes(5));                    await sender.SendAsync(msg);                  var receivedMsg = await receiver.ReceiveAsync();                    Assert.IsType<byte>(receivedMsg.UserProperties["byte"]);                  Assert.IsType<sbyte>(receivedMsg.UserProperties["sbyte"]);                  Assert.IsType<char>(receivedMsg.UserProperties["char"]);                  Assert.IsType<short>(receivedMsg.UserProperties["short"]);                  Assert.IsType<ushort>(receivedMsg.UserProperties["ushort"]);                  Assert.IsType<int>(receivedMsg.UserProperties["int"]);                  Assert.IsType<uint>(receivedMsg.UserProperties["uint"]);                  Assert.IsType<long>(receivedMsg.UserProperties["long"]);                  Assert.IsType<ulong>(receivedMsg.UserProperties["ulong"]);                  Assert.IsType<float>(receivedMsg.UserProperties["float"]);                  Assert.IsType<double>(receivedMsg.UserProperties["double"]);                  Assert.IsType<decimal>(receivedMsg.UserProperties["decimal"]);                  Assert.IsType<bool>(receivedMsg.UserProperties["bool"]);                  Assert.IsType<Guid>(receivedMsg.UserProperties["Guid"]);                  Assert.IsType<string>(receivedMsg.UserProperties["string"]);                  Assert.IsType<Uri>(receivedMsg.UserProperties["Uri"]);                  Assert.IsType<DateTime>(receivedMsg.UserProperties["DateTime"]);                  Assert.IsType<DateTimeOffset>(receivedMsg.UserProperties["DateTimeOffset"]);                  Assert.IsType<TimeSpan>(receivedMsg.UserProperties["TimeSpan"]);                          });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,MessageTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,MessagePropertiesShouldSupportValidPropertyTypes,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    /// Only following value types are supported:                  /// byte' sbyte' char' short' ushort' int' uint' long' ulong' float' double' decimal'                  /// bool' Guid' string' Uri' DateTime' DateTimeOffset' TimeSpan                  var msg = new Message();                  msg.UserProperties.Add("byte"' (byte)2);                  msg.UserProperties.Add("sbyte"' (sbyte)3);                  msg.UserProperties.Add("char"' 'c');                  msg.UserProperties.Add("short"' (short)4);                  msg.UserProperties.Add("ushort"' (ushort)5);                  msg.UserProperties.Add("int"' (int)6);                  msg.UserProperties.Add("uint"' (uint)7);                  msg.UserProperties.Add("long"' (long)8);                  msg.UserProperties.Add("ulong"' (ulong)9);                  msg.UserProperties.Add("float"' (float)10.0);                  msg.UserProperties.Add("double"' (double)11.0);                  msg.UserProperties.Add("decimal"' (decimal)12.0);                  msg.UserProperties.Add("bool"' true);                  msg.UserProperties.Add("Guid"' Guid.NewGuid());                  msg.UserProperties.Add("string"' "value");                  msg.UserProperties.Add("Uri"' new Uri("http://nonExistingServiceBusWebsite.com"));                  msg.UserProperties.Add("DateTime"' DateTime.UtcNow);                  msg.UserProperties.Add("DateTimeOffset"' DateTimeOffset.UtcNow);                  msg.UserProperties.Add("TimeSpan"' TimeSpan.FromMinutes(5));                    await sender.SendAsync(msg);                  var receivedMsg = await receiver.ReceiveAsync();                    Assert.IsType<byte>(receivedMsg.UserProperties["byte"]);                  Assert.IsType<sbyte>(receivedMsg.UserProperties["sbyte"]);                  Assert.IsType<char>(receivedMsg.UserProperties["char"]);                  Assert.IsType<short>(receivedMsg.UserProperties["short"]);                  Assert.IsType<ushort>(receivedMsg.UserProperties["ushort"]);                  Assert.IsType<int>(receivedMsg.UserProperties["int"]);                  Assert.IsType<uint>(receivedMsg.UserProperties["uint"]);                  Assert.IsType<long>(receivedMsg.UserProperties["long"]);                  Assert.IsType<ulong>(receivedMsg.UserProperties["ulong"]);                  Assert.IsType<float>(receivedMsg.UserProperties["float"]);                  Assert.IsType<double>(receivedMsg.UserProperties["double"]);                  Assert.IsType<decimal>(receivedMsg.UserProperties["decimal"]);                  Assert.IsType<bool>(receivedMsg.UserProperties["bool"]);                  Assert.IsType<Guid>(receivedMsg.UserProperties["Guid"]);                  Assert.IsType<string>(receivedMsg.UserProperties["string"]);                  Assert.IsType<Uri>(receivedMsg.UserProperties["Uri"]);                  Assert.IsType<DateTime>(receivedMsg.UserProperties["DateTime"]);                  Assert.IsType<DateTimeOffset>(receivedMsg.UserProperties["DateTimeOffset"]);                  Assert.IsType<TimeSpan>(receivedMsg.UserProperties["TimeSpan"]);                          });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,MessageTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,MessagePropertiesShouldSupportValidPropertyTypes,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    /// Only following value types are supported:                  /// byte' sbyte' char' short' ushort' int' uint' long' ulong' float' double' decimal'                  /// bool' Guid' string' Uri' DateTime' DateTimeOffset' TimeSpan                  var msg = new Message();                  msg.UserProperties.Add("byte"' (byte)2);                  msg.UserProperties.Add("sbyte"' (sbyte)3);                  msg.UserProperties.Add("char"' 'c');                  msg.UserProperties.Add("short"' (short)4);                  msg.UserProperties.Add("ushort"' (ushort)5);                  msg.UserProperties.Add("int"' (int)6);                  msg.UserProperties.Add("uint"' (uint)7);                  msg.UserProperties.Add("long"' (long)8);                  msg.UserProperties.Add("ulong"' (ulong)9);                  msg.UserProperties.Add("float"' (float)10.0);                  msg.UserProperties.Add("double"' (double)11.0);                  msg.UserProperties.Add("decimal"' (decimal)12.0);                  msg.UserProperties.Add("bool"' true);                  msg.UserProperties.Add("Guid"' Guid.NewGuid());                  msg.UserProperties.Add("string"' "value");                  msg.UserProperties.Add("Uri"' new Uri("http://nonExistingServiceBusWebsite.com"));                  msg.UserProperties.Add("DateTime"' DateTime.UtcNow);                  msg.UserProperties.Add("DateTimeOffset"' DateTimeOffset.UtcNow);                  msg.UserProperties.Add("TimeSpan"' TimeSpan.FromMinutes(5));                    await sender.SendAsync(msg);                  var receivedMsg = await receiver.ReceiveAsync();                    Assert.IsType<byte>(receivedMsg.UserProperties["byte"]);                  Assert.IsType<sbyte>(receivedMsg.UserProperties["sbyte"]);                  Assert.IsType<char>(receivedMsg.UserProperties["char"]);                  Assert.IsType<short>(receivedMsg.UserProperties["short"]);                  Assert.IsType<ushort>(receivedMsg.UserProperties["ushort"]);                  Assert.IsType<int>(receivedMsg.UserProperties["int"]);                  Assert.IsType<uint>(receivedMsg.UserProperties["uint"]);                  Assert.IsType<long>(receivedMsg.UserProperties["long"]);                  Assert.IsType<ulong>(receivedMsg.UserProperties["ulong"]);                  Assert.IsType<float>(receivedMsg.UserProperties["float"]);                  Assert.IsType<double>(receivedMsg.UserProperties["double"]);                  Assert.IsType<decimal>(receivedMsg.UserProperties["decimal"]);                  Assert.IsType<bool>(receivedMsg.UserProperties["bool"]);                  Assert.IsType<Guid>(receivedMsg.UserProperties["Guid"]);                  Assert.IsType<string>(receivedMsg.UserProperties["string"]);                  Assert.IsType<Uri>(receivedMsg.UserProperties["Uri"]);                  Assert.IsType<DateTime>(receivedMsg.UserProperties["DateTime"]);                  Assert.IsType<DateTimeOffset>(receivedMsg.UserProperties["DateTimeOffset"]);                  Assert.IsType<TimeSpan>(receivedMsg.UserProperties["TimeSpan"]);                          });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,MessageTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,MessagePropertiesShouldSupportValidPropertyTypes,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    /// Only following value types are supported:                  /// byte' sbyte' char' short' ushort' int' uint' long' ulong' float' double' decimal'                  /// bool' Guid' string' Uri' DateTime' DateTimeOffset' TimeSpan                  var msg = new Message();                  msg.UserProperties.Add("byte"' (byte)2);                  msg.UserProperties.Add("sbyte"' (sbyte)3);                  msg.UserProperties.Add("char"' 'c');                  msg.UserProperties.Add("short"' (short)4);                  msg.UserProperties.Add("ushort"' (ushort)5);                  msg.UserProperties.Add("int"' (int)6);                  msg.UserProperties.Add("uint"' (uint)7);                  msg.UserProperties.Add("long"' (long)8);                  msg.UserProperties.Add("ulong"' (ulong)9);                  msg.UserProperties.Add("float"' (float)10.0);                  msg.UserProperties.Add("double"' (double)11.0);                  msg.UserProperties.Add("decimal"' (decimal)12.0);                  msg.UserProperties.Add("bool"' true);                  msg.UserProperties.Add("Guid"' Guid.NewGuid());                  msg.UserProperties.Add("string"' "value");                  msg.UserProperties.Add("Uri"' new Uri("http://nonExistingServiceBusWebsite.com"));                  msg.UserProperties.Add("DateTime"' DateTime.UtcNow);                  msg.UserProperties.Add("DateTimeOffset"' DateTimeOffset.UtcNow);                  msg.UserProperties.Add("TimeSpan"' TimeSpan.FromMinutes(5));                    await sender.SendAsync(msg);                  var receivedMsg = await receiver.ReceiveAsync();                    Assert.IsType<byte>(receivedMsg.UserProperties["byte"]);                  Assert.IsType<sbyte>(receivedMsg.UserProperties["sbyte"]);                  Assert.IsType<char>(receivedMsg.UserProperties["char"]);                  Assert.IsType<short>(receivedMsg.UserProperties["short"]);                  Assert.IsType<ushort>(receivedMsg.UserProperties["ushort"]);                  Assert.IsType<int>(receivedMsg.UserProperties["int"]);                  Assert.IsType<uint>(receivedMsg.UserProperties["uint"]);                  Assert.IsType<long>(receivedMsg.UserProperties["long"]);                  Assert.IsType<ulong>(receivedMsg.UserProperties["ulong"]);                  Assert.IsType<float>(receivedMsg.UserProperties["float"]);                  Assert.IsType<double>(receivedMsg.UserProperties["double"]);                  Assert.IsType<decimal>(receivedMsg.UserProperties["decimal"]);                  Assert.IsType<bool>(receivedMsg.UserProperties["bool"]);                  Assert.IsType<Guid>(receivedMsg.UserProperties["Guid"]);                  Assert.IsType<string>(receivedMsg.UserProperties["string"]);                  Assert.IsType<Uri>(receivedMsg.UserProperties["Uri"]);                  Assert.IsType<DateTime>(receivedMsg.UserProperties["DateTime"]);                  Assert.IsType<DateTimeOffset>(receivedMsg.UserProperties["DateTimeOffset"]);                  Assert.IsType<TimeSpan>(receivedMsg.UserProperties["TimeSpan"]);                          });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,MessageTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,MessagePropertiesShouldSupportValidPropertyTypes,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    /// Only following value types are supported:                  /// byte' sbyte' char' short' ushort' int' uint' long' ulong' float' double' decimal'                  /// bool' Guid' string' Uri' DateTime' DateTimeOffset' TimeSpan                  var msg = new Message();                  msg.UserProperties.Add("byte"' (byte)2);                  msg.UserProperties.Add("sbyte"' (sbyte)3);                  msg.UserProperties.Add("char"' 'c');                  msg.UserProperties.Add("short"' (short)4);                  msg.UserProperties.Add("ushort"' (ushort)5);                  msg.UserProperties.Add("int"' (int)6);                  msg.UserProperties.Add("uint"' (uint)7);                  msg.UserProperties.Add("long"' (long)8);                  msg.UserProperties.Add("ulong"' (ulong)9);                  msg.UserProperties.Add("float"' (float)10.0);                  msg.UserProperties.Add("double"' (double)11.0);                  msg.UserProperties.Add("decimal"' (decimal)12.0);                  msg.UserProperties.Add("bool"' true);                  msg.UserProperties.Add("Guid"' Guid.NewGuid());                  msg.UserProperties.Add("string"' "value");                  msg.UserProperties.Add("Uri"' new Uri("http://nonExistingServiceBusWebsite.com"));                  msg.UserProperties.Add("DateTime"' DateTime.UtcNow);                  msg.UserProperties.Add("DateTimeOffset"' DateTimeOffset.UtcNow);                  msg.UserProperties.Add("TimeSpan"' TimeSpan.FromMinutes(5));                    await sender.SendAsync(msg);                  var receivedMsg = await receiver.ReceiveAsync();                    Assert.IsType<byte>(receivedMsg.UserProperties["byte"]);                  Assert.IsType<sbyte>(receivedMsg.UserProperties["sbyte"]);                  Assert.IsType<char>(receivedMsg.UserProperties["char"]);                  Assert.IsType<short>(receivedMsg.UserProperties["short"]);                  Assert.IsType<ushort>(receivedMsg.UserProperties["ushort"]);                  Assert.IsType<int>(receivedMsg.UserProperties["int"]);                  Assert.IsType<uint>(receivedMsg.UserProperties["uint"]);                  Assert.IsType<long>(receivedMsg.UserProperties["long"]);                  Assert.IsType<ulong>(receivedMsg.UserProperties["ulong"]);                  Assert.IsType<float>(receivedMsg.UserProperties["float"]);                  Assert.IsType<double>(receivedMsg.UserProperties["double"]);                  Assert.IsType<decimal>(receivedMsg.UserProperties["decimal"]);                  Assert.IsType<bool>(receivedMsg.UserProperties["bool"]);                  Assert.IsType<Guid>(receivedMsg.UserProperties["Guid"]);                  Assert.IsType<string>(receivedMsg.UserProperties["string"]);                  Assert.IsType<Uri>(receivedMsg.UserProperties["Uri"]);                  Assert.IsType<DateTime>(receivedMsg.UserProperties["DateTime"]);                  Assert.IsType<DateTimeOffset>(receivedMsg.UserProperties["DateTimeOffset"]);                  Assert.IsType<TimeSpan>(receivedMsg.UserProperties["TimeSpan"]);                          });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,MessageTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,MessagePropertiesShouldSupportValidPropertyTypes,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    /// Only following value types are supported:                  /// byte' sbyte' char' short' ushort' int' uint' long' ulong' float' double' decimal'                  /// bool' Guid' string' Uri' DateTime' DateTimeOffset' TimeSpan                  var msg = new Message();                  msg.UserProperties.Add("byte"' (byte)2);                  msg.UserProperties.Add("sbyte"' (sbyte)3);                  msg.UserProperties.Add("char"' 'c');                  msg.UserProperties.Add("short"' (short)4);                  msg.UserProperties.Add("ushort"' (ushort)5);                  msg.UserProperties.Add("int"' (int)6);                  msg.UserProperties.Add("uint"' (uint)7);                  msg.UserProperties.Add("long"' (long)8);                  msg.UserProperties.Add("ulong"' (ulong)9);                  msg.UserProperties.Add("float"' (float)10.0);                  msg.UserProperties.Add("double"' (double)11.0);                  msg.UserProperties.Add("decimal"' (decimal)12.0);                  msg.UserProperties.Add("bool"' true);                  msg.UserProperties.Add("Guid"' Guid.NewGuid());                  msg.UserProperties.Add("string"' "value");                  msg.UserProperties.Add("Uri"' new Uri("http://nonExistingServiceBusWebsite.com"));                  msg.UserProperties.Add("DateTime"' DateTime.UtcNow);                  msg.UserProperties.Add("DateTimeOffset"' DateTimeOffset.UtcNow);                  msg.UserProperties.Add("TimeSpan"' TimeSpan.FromMinutes(5));                    await sender.SendAsync(msg);                  var receivedMsg = await receiver.ReceiveAsync();                    Assert.IsType<byte>(receivedMsg.UserProperties["byte"]);                  Assert.IsType<sbyte>(receivedMsg.UserProperties["sbyte"]);                  Assert.IsType<char>(receivedMsg.UserProperties["char"]);                  Assert.IsType<short>(receivedMsg.UserProperties["short"]);                  Assert.IsType<ushort>(receivedMsg.UserProperties["ushort"]);                  Assert.IsType<int>(receivedMsg.UserProperties["int"]);                  Assert.IsType<uint>(receivedMsg.UserProperties["uint"]);                  Assert.IsType<long>(receivedMsg.UserProperties["long"]);                  Assert.IsType<ulong>(receivedMsg.UserProperties["ulong"]);                  Assert.IsType<float>(receivedMsg.UserProperties["float"]);                  Assert.IsType<double>(receivedMsg.UserProperties["double"]);                  Assert.IsType<decimal>(receivedMsg.UserProperties["decimal"]);                  Assert.IsType<bool>(receivedMsg.UserProperties["bool"]);                  Assert.IsType<Guid>(receivedMsg.UserProperties["Guid"]);                  Assert.IsType<string>(receivedMsg.UserProperties["string"]);                  Assert.IsType<Uri>(receivedMsg.UserProperties["Uri"]);                  Assert.IsType<DateTime>(receivedMsg.UserProperties["DateTime"]);                  Assert.IsType<DateTimeOffset>(receivedMsg.UserProperties["DateTimeOffset"]);                  Assert.IsType<TimeSpan>(receivedMsg.UserProperties["TimeSpan"]);                          });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,MessageTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,MessagePropertiesShouldSupportValidPropertyTypes,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    /// Only following value types are supported:                  /// byte' sbyte' char' short' ushort' int' uint' long' ulong' float' double' decimal'                  /// bool' Guid' string' Uri' DateTime' DateTimeOffset' TimeSpan                  var msg = new Message();                  msg.UserProperties.Add("byte"' (byte)2);                  msg.UserProperties.Add("sbyte"' (sbyte)3);                  msg.UserProperties.Add("char"' 'c');                  msg.UserProperties.Add("short"' (short)4);                  msg.UserProperties.Add("ushort"' (ushort)5);                  msg.UserProperties.Add("int"' (int)6);                  msg.UserProperties.Add("uint"' (uint)7);                  msg.UserProperties.Add("long"' (long)8);                  msg.UserProperties.Add("ulong"' (ulong)9);                  msg.UserProperties.Add("float"' (float)10.0);                  msg.UserProperties.Add("double"' (double)11.0);                  msg.UserProperties.Add("decimal"' (decimal)12.0);                  msg.UserProperties.Add("bool"' true);                  msg.UserProperties.Add("Guid"' Guid.NewGuid());                  msg.UserProperties.Add("string"' "value");                  msg.UserProperties.Add("Uri"' new Uri("http://nonExistingServiceBusWebsite.com"));                  msg.UserProperties.Add("DateTime"' DateTime.UtcNow);                  msg.UserProperties.Add("DateTimeOffset"' DateTimeOffset.UtcNow);                  msg.UserProperties.Add("TimeSpan"' TimeSpan.FromMinutes(5));                    await sender.SendAsync(msg);                  var receivedMsg = await receiver.ReceiveAsync();                    Assert.IsType<byte>(receivedMsg.UserProperties["byte"]);                  Assert.IsType<sbyte>(receivedMsg.UserProperties["sbyte"]);                  Assert.IsType<char>(receivedMsg.UserProperties["char"]);                  Assert.IsType<short>(receivedMsg.UserProperties["short"]);                  Assert.IsType<ushort>(receivedMsg.UserProperties["ushort"]);                  Assert.IsType<int>(receivedMsg.UserProperties["int"]);                  Assert.IsType<uint>(receivedMsg.UserProperties["uint"]);                  Assert.IsType<long>(receivedMsg.UserProperties["long"]);                  Assert.IsType<ulong>(receivedMsg.UserProperties["ulong"]);                  Assert.IsType<float>(receivedMsg.UserProperties["float"]);                  Assert.IsType<double>(receivedMsg.UserProperties["double"]);                  Assert.IsType<decimal>(receivedMsg.UserProperties["decimal"]);                  Assert.IsType<bool>(receivedMsg.UserProperties["bool"]);                  Assert.IsType<Guid>(receivedMsg.UserProperties["Guid"]);                  Assert.IsType<string>(receivedMsg.UserProperties["string"]);                  Assert.IsType<Uri>(receivedMsg.UserProperties["Uri"]);                  Assert.IsType<DateTime>(receivedMsg.UserProperties["DateTime"]);                  Assert.IsType<DateTimeOffset>(receivedMsg.UserProperties["DateTimeOffset"]);                  Assert.IsType<TimeSpan>(receivedMsg.UserProperties["TimeSpan"]);                          });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,MessageTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,MessagePropertiesShouldSupportValidPropertyTypes,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    /// Only following value types are supported:                  /// byte' sbyte' char' short' ushort' int' uint' long' ulong' float' double' decimal'                  /// bool' Guid' string' Uri' DateTime' DateTimeOffset' TimeSpan                  var msg = new Message();                  msg.UserProperties.Add("byte"' (byte)2);                  msg.UserProperties.Add("sbyte"' (sbyte)3);                  msg.UserProperties.Add("char"' 'c');                  msg.UserProperties.Add("short"' (short)4);                  msg.UserProperties.Add("ushort"' (ushort)5);                  msg.UserProperties.Add("int"' (int)6);                  msg.UserProperties.Add("uint"' (uint)7);                  msg.UserProperties.Add("long"' (long)8);                  msg.UserProperties.Add("ulong"' (ulong)9);                  msg.UserProperties.Add("float"' (float)10.0);                  msg.UserProperties.Add("double"' (double)11.0);                  msg.UserProperties.Add("decimal"' (decimal)12.0);                  msg.UserProperties.Add("bool"' true);                  msg.UserProperties.Add("Guid"' Guid.NewGuid());                  msg.UserProperties.Add("string"' "value");                  msg.UserProperties.Add("Uri"' new Uri("http://nonExistingServiceBusWebsite.com"));                  msg.UserProperties.Add("DateTime"' DateTime.UtcNow);                  msg.UserProperties.Add("DateTimeOffset"' DateTimeOffset.UtcNow);                  msg.UserProperties.Add("TimeSpan"' TimeSpan.FromMinutes(5));                    await sender.SendAsync(msg);                  var receivedMsg = await receiver.ReceiveAsync();                    Assert.IsType<byte>(receivedMsg.UserProperties["byte"]);                  Assert.IsType<sbyte>(receivedMsg.UserProperties["sbyte"]);                  Assert.IsType<char>(receivedMsg.UserProperties["char"]);                  Assert.IsType<short>(receivedMsg.UserProperties["short"]);                  Assert.IsType<ushort>(receivedMsg.UserProperties["ushort"]);                  Assert.IsType<int>(receivedMsg.UserProperties["int"]);                  Assert.IsType<uint>(receivedMsg.UserProperties["uint"]);                  Assert.IsType<long>(receivedMsg.UserProperties["long"]);                  Assert.IsType<ulong>(receivedMsg.UserProperties["ulong"]);                  Assert.IsType<float>(receivedMsg.UserProperties["float"]);                  Assert.IsType<double>(receivedMsg.UserProperties["double"]);                  Assert.IsType<decimal>(receivedMsg.UserProperties["decimal"]);                  Assert.IsType<bool>(receivedMsg.UserProperties["bool"]);                  Assert.IsType<Guid>(receivedMsg.UserProperties["Guid"]);                  Assert.IsType<string>(receivedMsg.UserProperties["string"]);                  Assert.IsType<Uri>(receivedMsg.UserProperties["Uri"]);                  Assert.IsType<DateTime>(receivedMsg.UserProperties["DateTime"]);                  Assert.IsType<DateTimeOffset>(receivedMsg.UserProperties["DateTimeOffset"]);                  Assert.IsType<TimeSpan>(receivedMsg.UserProperties["TimeSpan"]);                          });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,MessageTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,MessagePropertiesShouldSupportValidPropertyTypes,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    /// Only following value types are supported:                  /// byte' sbyte' char' short' ushort' int' uint' long' ulong' float' double' decimal'                  /// bool' Guid' string' Uri' DateTime' DateTimeOffset' TimeSpan                  var msg = new Message();                  msg.UserProperties.Add("byte"' (byte)2);                  msg.UserProperties.Add("sbyte"' (sbyte)3);                  msg.UserProperties.Add("char"' 'c');                  msg.UserProperties.Add("short"' (short)4);                  msg.UserProperties.Add("ushort"' (ushort)5);                  msg.UserProperties.Add("int"' (int)6);                  msg.UserProperties.Add("uint"' (uint)7);                  msg.UserProperties.Add("long"' (long)8);                  msg.UserProperties.Add("ulong"' (ulong)9);                  msg.UserProperties.Add("float"' (float)10.0);                  msg.UserProperties.Add("double"' (double)11.0);                  msg.UserProperties.Add("decimal"' (decimal)12.0);                  msg.UserProperties.Add("bool"' true);                  msg.UserProperties.Add("Guid"' Guid.NewGuid());                  msg.UserProperties.Add("string"' "value");                  msg.UserProperties.Add("Uri"' new Uri("http://nonExistingServiceBusWebsite.com"));                  msg.UserProperties.Add("DateTime"' DateTime.UtcNow);                  msg.UserProperties.Add("DateTimeOffset"' DateTimeOffset.UtcNow);                  msg.UserProperties.Add("TimeSpan"' TimeSpan.FromMinutes(5));                    await sender.SendAsync(msg);                  var receivedMsg = await receiver.ReceiveAsync();                    Assert.IsType<byte>(receivedMsg.UserProperties["byte"]);                  Assert.IsType<sbyte>(receivedMsg.UserProperties["sbyte"]);                  Assert.IsType<char>(receivedMsg.UserProperties["char"]);                  Assert.IsType<short>(receivedMsg.UserProperties["short"]);                  Assert.IsType<ushort>(receivedMsg.UserProperties["ushort"]);                  Assert.IsType<int>(receivedMsg.UserProperties["int"]);                  Assert.IsType<uint>(receivedMsg.UserProperties["uint"]);                  Assert.IsType<long>(receivedMsg.UserProperties["long"]);                  Assert.IsType<ulong>(receivedMsg.UserProperties["ulong"]);                  Assert.IsType<float>(receivedMsg.UserProperties["float"]);                  Assert.IsType<double>(receivedMsg.UserProperties["double"]);                  Assert.IsType<decimal>(receivedMsg.UserProperties["decimal"]);                  Assert.IsType<bool>(receivedMsg.UserProperties["bool"]);                  Assert.IsType<Guid>(receivedMsg.UserProperties["Guid"]);                  Assert.IsType<string>(receivedMsg.UserProperties["string"]);                  Assert.IsType<Uri>(receivedMsg.UserProperties["Uri"]);                  Assert.IsType<DateTime>(receivedMsg.UserProperties["DateTime"]);                  Assert.IsType<DateTimeOffset>(receivedMsg.UserProperties["DateTimeOffset"]);                  Assert.IsType<TimeSpan>(receivedMsg.UserProperties["TimeSpan"]);                          });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,MessageTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,MessagePropertiesShouldSupportValidPropertyTypes,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    /// Only following value types are supported:                  /// byte' sbyte' char' short' ushort' int' uint' long' ulong' float' double' decimal'                  /// bool' Guid' string' Uri' DateTime' DateTimeOffset' TimeSpan                  var msg = new Message();                  msg.UserProperties.Add("byte"' (byte)2);                  msg.UserProperties.Add("sbyte"' (sbyte)3);                  msg.UserProperties.Add("char"' 'c');                  msg.UserProperties.Add("short"' (short)4);                  msg.UserProperties.Add("ushort"' (ushort)5);                  msg.UserProperties.Add("int"' (int)6);                  msg.UserProperties.Add("uint"' (uint)7);                  msg.UserProperties.Add("long"' (long)8);                  msg.UserProperties.Add("ulong"' (ulong)9);                  msg.UserProperties.Add("float"' (float)10.0);                  msg.UserProperties.Add("double"' (double)11.0);                  msg.UserProperties.Add("decimal"' (decimal)12.0);                  msg.UserProperties.Add("bool"' true);                  msg.UserProperties.Add("Guid"' Guid.NewGuid());                  msg.UserProperties.Add("string"' "value");                  msg.UserProperties.Add("Uri"' new Uri("http://nonExistingServiceBusWebsite.com"));                  msg.UserProperties.Add("DateTime"' DateTime.UtcNow);                  msg.UserProperties.Add("DateTimeOffset"' DateTimeOffset.UtcNow);                  msg.UserProperties.Add("TimeSpan"' TimeSpan.FromMinutes(5));                    await sender.SendAsync(msg);                  var receivedMsg = await receiver.ReceiveAsync();                    Assert.IsType<byte>(receivedMsg.UserProperties["byte"]);                  Assert.IsType<sbyte>(receivedMsg.UserProperties["sbyte"]);                  Assert.IsType<char>(receivedMsg.UserProperties["char"]);                  Assert.IsType<short>(receivedMsg.UserProperties["short"]);                  Assert.IsType<ushort>(receivedMsg.UserProperties["ushort"]);                  Assert.IsType<int>(receivedMsg.UserProperties["int"]);                  Assert.IsType<uint>(receivedMsg.UserProperties["uint"]);                  Assert.IsType<long>(receivedMsg.UserProperties["long"]);                  Assert.IsType<ulong>(receivedMsg.UserProperties["ulong"]);                  Assert.IsType<float>(receivedMsg.UserProperties["float"]);                  Assert.IsType<double>(receivedMsg.UserProperties["double"]);                  Assert.IsType<decimal>(receivedMsg.UserProperties["decimal"]);                  Assert.IsType<bool>(receivedMsg.UserProperties["bool"]);                  Assert.IsType<Guid>(receivedMsg.UserProperties["Guid"]);                  Assert.IsType<string>(receivedMsg.UserProperties["string"]);                  Assert.IsType<Uri>(receivedMsg.UserProperties["Uri"]);                  Assert.IsType<DateTime>(receivedMsg.UserProperties["DateTime"]);                  Assert.IsType<DateTimeOffset>(receivedMsg.UserProperties["DateTimeOffset"]);                  Assert.IsType<TimeSpan>(receivedMsg.UserProperties["TimeSpan"]);                          });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,MessageTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,MessagePropertiesShouldSupportValidPropertyTypes,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    /// Only following value types are supported:                  /// byte' sbyte' char' short' ushort' int' uint' long' ulong' float' double' decimal'                  /// bool' Guid' string' Uri' DateTime' DateTimeOffset' TimeSpan                  var msg = new Message();                  msg.UserProperties.Add("byte"' (byte)2);                  msg.UserProperties.Add("sbyte"' (sbyte)3);                  msg.UserProperties.Add("char"' 'c');                  msg.UserProperties.Add("short"' (short)4);                  msg.UserProperties.Add("ushort"' (ushort)5);                  msg.UserProperties.Add("int"' (int)6);                  msg.UserProperties.Add("uint"' (uint)7);                  msg.UserProperties.Add("long"' (long)8);                  msg.UserProperties.Add("ulong"' (ulong)9);                  msg.UserProperties.Add("float"' (float)10.0);                  msg.UserProperties.Add("double"' (double)11.0);                  msg.UserProperties.Add("decimal"' (decimal)12.0);                  msg.UserProperties.Add("bool"' true);                  msg.UserProperties.Add("Guid"' Guid.NewGuid());                  msg.UserProperties.Add("string"' "value");                  msg.UserProperties.Add("Uri"' new Uri("http://nonExistingServiceBusWebsite.com"));                  msg.UserProperties.Add("DateTime"' DateTime.UtcNow);                  msg.UserProperties.Add("DateTimeOffset"' DateTimeOffset.UtcNow);                  msg.UserProperties.Add("TimeSpan"' TimeSpan.FromMinutes(5));                    await sender.SendAsync(msg);                  var receivedMsg = await receiver.ReceiveAsync();                    Assert.IsType<byte>(receivedMsg.UserProperties["byte"]);                  Assert.IsType<sbyte>(receivedMsg.UserProperties["sbyte"]);                  Assert.IsType<char>(receivedMsg.UserProperties["char"]);                  Assert.IsType<short>(receivedMsg.UserProperties["short"]);                  Assert.IsType<ushort>(receivedMsg.UserProperties["ushort"]);                  Assert.IsType<int>(receivedMsg.UserProperties["int"]);                  Assert.IsType<uint>(receivedMsg.UserProperties["uint"]);                  Assert.IsType<long>(receivedMsg.UserProperties["long"]);                  Assert.IsType<ulong>(receivedMsg.UserProperties["ulong"]);                  Assert.IsType<float>(receivedMsg.UserProperties["float"]);                  Assert.IsType<double>(receivedMsg.UserProperties["double"]);                  Assert.IsType<decimal>(receivedMsg.UserProperties["decimal"]);                  Assert.IsType<bool>(receivedMsg.UserProperties["bool"]);                  Assert.IsType<Guid>(receivedMsg.UserProperties["Guid"]);                  Assert.IsType<string>(receivedMsg.UserProperties["string"]);                  Assert.IsType<Uri>(receivedMsg.UserProperties["Uri"]);                  Assert.IsType<DateTime>(receivedMsg.UserProperties["DateTime"]);                  Assert.IsType<DateTimeOffset>(receivedMsg.UserProperties["DateTimeOffset"]);                  Assert.IsType<TimeSpan>(receivedMsg.UserProperties["TimeSpan"]);                          });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,MessageTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,MessagePropertiesShouldSupportValidPropertyTypes,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    /// Only following value types are supported:                  /// byte' sbyte' char' short' ushort' int' uint' long' ulong' float' double' decimal'                  /// bool' Guid' string' Uri' DateTime' DateTimeOffset' TimeSpan                  var msg = new Message();                  msg.UserProperties.Add("byte"' (byte)2);                  msg.UserProperties.Add("sbyte"' (sbyte)3);                  msg.UserProperties.Add("char"' 'c');                  msg.UserProperties.Add("short"' (short)4);                  msg.UserProperties.Add("ushort"' (ushort)5);                  msg.UserProperties.Add("int"' (int)6);                  msg.UserProperties.Add("uint"' (uint)7);                  msg.UserProperties.Add("long"' (long)8);                  msg.UserProperties.Add("ulong"' (ulong)9);                  msg.UserProperties.Add("float"' (float)10.0);                  msg.UserProperties.Add("double"' (double)11.0);                  msg.UserProperties.Add("decimal"' (decimal)12.0);                  msg.UserProperties.Add("bool"' true);                  msg.UserProperties.Add("Guid"' Guid.NewGuid());                  msg.UserProperties.Add("string"' "value");                  msg.UserProperties.Add("Uri"' new Uri("http://nonExistingServiceBusWebsite.com"));                  msg.UserProperties.Add("DateTime"' DateTime.UtcNow);                  msg.UserProperties.Add("DateTimeOffset"' DateTimeOffset.UtcNow);                  msg.UserProperties.Add("TimeSpan"' TimeSpan.FromMinutes(5));                    await sender.SendAsync(msg);                  var receivedMsg = await receiver.ReceiveAsync();                    Assert.IsType<byte>(receivedMsg.UserProperties["byte"]);                  Assert.IsType<sbyte>(receivedMsg.UserProperties["sbyte"]);                  Assert.IsType<char>(receivedMsg.UserProperties["char"]);                  Assert.IsType<short>(receivedMsg.UserProperties["short"]);                  Assert.IsType<ushort>(receivedMsg.UserProperties["ushort"]);                  Assert.IsType<int>(receivedMsg.UserProperties["int"]);                  Assert.IsType<uint>(receivedMsg.UserProperties["uint"]);                  Assert.IsType<long>(receivedMsg.UserProperties["long"]);                  Assert.IsType<ulong>(receivedMsg.UserProperties["ulong"]);                  Assert.IsType<float>(receivedMsg.UserProperties["float"]);                  Assert.IsType<double>(receivedMsg.UserProperties["double"]);                  Assert.IsType<decimal>(receivedMsg.UserProperties["decimal"]);                  Assert.IsType<bool>(receivedMsg.UserProperties["bool"]);                  Assert.IsType<Guid>(receivedMsg.UserProperties["Guid"]);                  Assert.IsType<string>(receivedMsg.UserProperties["string"]);                  Assert.IsType<Uri>(receivedMsg.UserProperties["Uri"]);                  Assert.IsType<DateTime>(receivedMsg.UserProperties["DateTime"]);                  Assert.IsType<DateTimeOffset>(receivedMsg.UserProperties["DateTimeOffset"]);                  Assert.IsType<TimeSpan>(receivedMsg.UserProperties["TimeSpan"]);                          });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,WhenQueryingIsReceivedProperty,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,MessageWithMaxMessageSizeShouldWorkAsExpected,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>                  {                      var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.PeekLock);                        try                      {                           var maxMessageSize = (256 * 1024) - 77;     // 77 bytes is the current serialization hit.                          var maxPayload = Enumerable.Repeat<byte>(0x20' maxMessageSize).ToArray();                           var maxSizeMessage = new Message(maxPayload);                            await queueClient.SendAsync(maxSizeMessage);                            var receivedMaxSizeMessage = await queueClient.InnerReceiver.ReceiveAsync();                          await queueClient.CompleteAsync(receivedMaxSizeMessage.SystemProperties.LockToken);                          Assert.Equal(maxPayload' receivedMaxSizeMessage.Body);                      }                      finally                      {                          await queueClient.CloseAsync();                      }                  });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,WhenQueryingIsReceivedProperty,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,MessageWithMaxMessageSizeShouldWorkAsExpected,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>                  {                      var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.PeekLock);                        try                      {                           var maxMessageSize = (256 * 1024) - 77;     // 77 bytes is the current serialization hit.                          var maxPayload = Enumerable.Repeat<byte>(0x20' maxMessageSize).ToArray();                           var maxSizeMessage = new Message(maxPayload);                            await queueClient.SendAsync(maxSizeMessage);                            var receivedMaxSizeMessage = await queueClient.InnerReceiver.ReceiveAsync();                          await queueClient.CompleteAsync(receivedMaxSizeMessage.SystemProperties.LockToken);                          Assert.Equal(maxPayload' receivedMaxSizeMessage.Body);                      }                      finally                      {                          await queueClient.CloseAsync();                      }                  });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,WhenQueryingIsReceivedProperty,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageTests.cs,MessageWithMaxMessageSizeShouldWorkAsExpected,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>                  {                      var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.PeekLock);                        try                      {                           var maxMessageSize = (256 * 1024) - 77;     // 77 bytes is the current serialization hit.                          var maxPayload = Enumerable.Repeat<byte>(0x20' maxMessageSize).ToArray();                           var maxSizeMessage = new Message(maxPayload);                            await queueClient.SendAsync(maxSizeMessage);                            var receivedMaxSizeMessage = await queueClient.InnerReceiver.ReceiveAsync();                          await queueClient.CompleteAsync(receivedMaxSizeMessage.SystemProperties.LockToken);                          Assert.Equal(maxPayload' receivedMaxSizeMessage.Body);                      }                      finally                      {                          await queueClient.CloseAsync();                      }                  });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,OnMessageQueueTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnMessageQueueTests.cs,OnMessageExceptionHandlerCalledTest,The following statement contains a magic number: stopwatch.Elapsed.TotalSeconds <= 10
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,OnMessageQueueTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnMessageQueueTests.cs,OnMessageTestAsync,The following statement contains a magic number: const int messageCount = 10;
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,OnMessageTopicSubscriptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnMessageTopicSubscriptionTests.cs,OnMessageTestAsync,The following statement contains a magic number: const int messageCount = 10;
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,OnSessionQueueTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnSessionQueueTests.cs,OnSessionCanStartWithNullMessageButReturnSessionLater,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: true' async queueName =>              {                  var queueClient = new QueueClient(                      TestUtility.NamespaceConnectionString'                      queueName'                      ReceiveMode.PeekLock);                  try                  {                      var sessionHandlerOptions =                          new SessionHandlerOptions(ExceptionReceivedHandler)                          {                              MaxConcurrentSessions = 5'                              MessageWaitTimeout = TimeSpan.FromSeconds(5)'                              AutoComplete = true                          };                        var testSessionHandler = new TestSessionHandler(                          queueClient.ReceiveMode'                          sessionHandlerOptions'                          queueClient.InnerSender'                          queueClient.SessionPumpHost);                        // Register handler first without any messages                      testSessionHandler.RegisterSessionHandler(sessionHandlerOptions);                        // Send messages to Session                      await testSessionHandler.SendSessionMessages();                        // Verify messages were received.                      await testSessionHandler.VerifyRun();                        // Clear the data and re-run the scenario.                      testSessionHandler.ClearData();                      await testSessionHandler.SendSessionMessages();                        // Verify messages were received.                      await testSessionHandler.VerifyRun();                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,OnSessionQueueTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnSessionQueueTests.cs,OnSessionCanStartWithNullMessageButReturnSessionLater,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: true' async queueName =>              {                  var queueClient = new QueueClient(                      TestUtility.NamespaceConnectionString'                      queueName'                      ReceiveMode.PeekLock);                  try                  {                      var sessionHandlerOptions =                          new SessionHandlerOptions(ExceptionReceivedHandler)                          {                              MaxConcurrentSessions = 5'                              MessageWaitTimeout = TimeSpan.FromSeconds(5)'                              AutoComplete = true                          };                        var testSessionHandler = new TestSessionHandler(                          queueClient.ReceiveMode'                          sessionHandlerOptions'                          queueClient.InnerSender'                          queueClient.SessionPumpHost);                        // Register handler first without any messages                      testSessionHandler.RegisterSessionHandler(sessionHandlerOptions);                        // Send messages to Session                      await testSessionHandler.SendSessionMessages();                        // Verify messages were received.                      await testSessionHandler.VerifyRun();                        // Clear the data and re-run the scenario.                      testSessionHandler.ClearData();                      await testSessionHandler.SendSessionMessages();                        // Verify messages were received.                      await testSessionHandler.VerifyRun();                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,OnSessionQueueTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnSessionQueueTests.cs,OnSessionExceptionHandlerCalledWhenRegisteredOnNonSessionFulQueue,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var exceptionReceivedHandlerCalled = false;                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName);                    try                  {                      var sessionHandlerOptions = new SessionHandlerOptions(                      (eventArgs) =>                      {                          Assert.NotNull(eventArgs);                          Assert.NotNull(eventArgs.Exception);                          if (eventArgs.Exception is InvalidOperationException)                          {                              exceptionReceivedHandlerCalled = true;                          }                          return Task.CompletedTask;                      })                      { MaxConcurrentSessions = 1 };                        queueClient.RegisterSessionHandler(                         (session' message' token) =>                         {                             return Task.CompletedTask;                         }'                         sessionHandlerOptions);                        var stopwatch = Stopwatch.StartNew();                      while (stopwatch.Elapsed.TotalSeconds <= 10)                      {                          if (exceptionReceivedHandlerCalled)                          {                              break;                          }                            await Task.Delay(TimeSpan.FromSeconds(1));                      }                        Assert.True(exceptionReceivedHandlerCalled);                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,OnSessionQueueTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnSessionQueueTests.cs,OnSessionTestAsync,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned' sessionEnabled' async queueName =>              {                  TestUtility.Log($"Queue: {queueName}' MaxConcurrentCalls: {maxConcurrentCalls}' Receive Mode: {mode.ToString()}' AutoComplete: {autoComplete}");                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' mode);                  try                  {                      var handlerOptions =                          new SessionHandlerOptions(ExceptionReceivedHandler)                          {                              MaxConcurrentSessions = maxConcurrentCalls'                              MessageWaitTimeout = TimeSpan.FromSeconds(5)'                              AutoComplete = autoComplete                          };                        var testSessionHandler = new TestSessionHandler(                          queueClient.ReceiveMode'                          handlerOptions'                          queueClient.InnerSender'                          queueClient.SessionPumpHost);                        // Send messages to Session first                      await testSessionHandler.SendSessionMessages();                        // Register handler                      testSessionHandler.RegisterSessionHandler(handlerOptions);                        // Verify messages were received.                      await testSessionHandler.VerifyRun();                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,OnSessionTopicSubscriptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnSessionTopicSubscriptionTests.cs,OnSessionExceptionHandlerCalledWhenRegisteredOnNonSessionFulSubscription,The following statement contains a magic number: await ServiceBusScope.UsingTopicAsync(partitioned: false' sessionEnabled: false' async (topicName' subscriptionName) =>              {                  var exceptionReceivedHandlerCalled = false;                  var topicClient = new TopicClient(TestUtility.NamespaceConnectionString' topicName);                  var subscriptionClient = new SubscriptionClient(                      TestUtility.NamespaceConnectionString'                      topicClient.TopicName'                      subscriptionName'                      ReceiveMode.PeekLock);                    var sessionHandlerOptions = new SessionHandlerOptions(eventArgs =>                  {                      Assert.NotNull(eventArgs);                      Assert.NotNull(eventArgs.Exception);                      if (eventArgs.Exception is InvalidOperationException)                      {                          exceptionReceivedHandlerCalled = true;                      }                      return Task.CompletedTask;                  })                  { MaxConcurrentSessions = 1 };                    subscriptionClient.RegisterSessionHandler(                     (session' message' token) => Task.CompletedTask'                     sessionHandlerOptions);                    try                  {                      var stopwatch = Stopwatch.StartNew();                      while (stopwatch.Elapsed.TotalSeconds <= 10)                      {                          if (exceptionReceivedHandlerCalled)                          {                              break;                          }                            await Task.Delay(TimeSpan.FromSeconds(1));                      }                        TestUtility.Log($"{DateTime.Now}: ExceptionReceivedHandlerCalled: {exceptionReceivedHandlerCalled}");                      Assert.True(exceptionReceivedHandlerCalled);                  }                  finally                  {                      await subscriptionClient.CloseAsync();                      await topicClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,OnSessionTopicSubscriptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnSessionTopicSubscriptionTests.cs,OnSessionTestAsync,The following statement contains a magic number: await ServiceBusScope.UsingTopicAsync(partitioned' sessionEnabled' async (topicName' subscriptionName) =>              {                  TestUtility.Log($"Topic: {topicName}' MaxConcurrentCalls: {maxConcurrentCalls}' Receive Mode: {mode.ToString()}' AutoComplete: {autoComplete}");                  var topicClient = new TopicClient(TestUtility.NamespaceConnectionString' topicName);                  var subscriptionClient = new SubscriptionClient(                      TestUtility.NamespaceConnectionString'                      topicClient.TopicName'                      subscriptionName'                      ReceiveMode.PeekLock);                    try                  {                      var sessionHandlerOptions =                          new SessionHandlerOptions(ExceptionReceivedHandler)                          {                              MaxConcurrentSessions = 5'                              MessageWaitTimeout = TimeSpan.FromSeconds(5)'                              AutoComplete = true                          };                        var testSessionHandler = new TestSessionHandler(                          subscriptionClient.ReceiveMode'                          sessionHandlerOptions'                          topicClient.InnerSender'                          subscriptionClient.SessionPumpHost);                        // Send messages to Session                      await testSessionHandler.SendSessionMessages();                        // Register handler                      testSessionHandler.RegisterSessionHandler(sessionHandlerOptions);                        // Verify messages were received.                      await testSessionHandler.VerifyRun();                  }                  finally                  {                      await subscriptionClient.CloseAsync();                      await topicClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,OnSessionTopicSubscriptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\OnSessionTopicSubscriptionTests.cs,OnSessionTestAsync,The following statement contains a magic number: await ServiceBusScope.UsingTopicAsync(partitioned' sessionEnabled' async (topicName' subscriptionName) =>              {                  TestUtility.Log($"Topic: {topicName}' MaxConcurrentCalls: {maxConcurrentCalls}' Receive Mode: {mode.ToString()}' AutoComplete: {autoComplete}");                  var topicClient = new TopicClient(TestUtility.NamespaceConnectionString' topicName);                  var subscriptionClient = new SubscriptionClient(                      TestUtility.NamespaceConnectionString'                      topicClient.TopicName'                      subscriptionName'                      ReceiveMode.PeekLock);                    try                  {                      var sessionHandlerOptions =                          new SessionHandlerOptions(ExceptionReceivedHandler)                          {                              MaxConcurrentSessions = 5'                              MessageWaitTimeout = TimeSpan.FromSeconds(5)'                              AutoComplete = true                          };                        var testSessionHandler = new TestSessionHandler(                          subscriptionClient.ReceiveMode'                          sessionHandlerOptions'                          topicClient.InnerSender'                          subscriptionClient.SessionPumpHost);                        // Send messages to Session                      await testSessionHandler.SendSessionMessages();                        // Register handler                      testSessionHandler.RegisterSessionHandler(sessionHandlerOptions);                        // Verify messages were received.                      await testSessionHandler.VerifyRun();                  }                  finally                  {                      await subscriptionClient.CloseAsync();                      await topicClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,PluginTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\PluginTests.cs,QueueClientShouldPassPluginsToMessageSession,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: true' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName);                  try                  {                      var messageReceived = false;                      var sendReceivePlugin = new SendReceivePlugin();                      queueClient.RegisterPlugin(sendReceivePlugin);                        var sendMessage = new Message(Encoding.UTF8.GetBytes("Test message"))                      {                          MessageId = Guid.NewGuid().ToString()'                          SessionId = Guid.NewGuid().ToString()                      };                      await queueClient.SendAsync(sendMessage);                        // Ensure the plugin is called.                      Assert.True(sendReceivePlugin.MessageBodies.ContainsKey(sendMessage.MessageId));                        queueClient.RegisterSessionHandler(                          (session' message' cancellationToken) =>                          {                              Assert.Equal(sendMessage.SessionId' session.SessionId);                              Assert.True(session.RegisteredPlugins.Contains(sendReceivePlugin));                              Assert.Equal(sendMessage.Body' message.Body);                                messageReceived = true;                              return Task.CompletedTask;                          }'                          exceptionArgs => Task.CompletedTask);                        for (var i = 0; i < 20; i++)                      {                          if (messageReceived)                          {                              break;                          }                          await Task.Delay(TimeSpan.FromSeconds(2));                      }                        Assert.True(messageReceived);                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,PluginTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\PluginTests.cs,QueueClientShouldPassPluginsToMessageSession,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: true' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName);                  try                  {                      var messageReceived = false;                      var sendReceivePlugin = new SendReceivePlugin();                      queueClient.RegisterPlugin(sendReceivePlugin);                        var sendMessage = new Message(Encoding.UTF8.GetBytes("Test message"))                      {                          MessageId = Guid.NewGuid().ToString()'                          SessionId = Guid.NewGuid().ToString()                      };                      await queueClient.SendAsync(sendMessage);                        // Ensure the plugin is called.                      Assert.True(sendReceivePlugin.MessageBodies.ContainsKey(sendMessage.MessageId));                        queueClient.RegisterSessionHandler(                          (session' message' cancellationToken) =>                          {                              Assert.Equal(sendMessage.SessionId' session.SessionId);                              Assert.True(session.RegisteredPlugins.Contains(sendReceivePlugin));                              Assert.Equal(sendMessage.Body' message.Body);                                messageReceived = true;                              return Task.CompletedTask;                          }'                          exceptionArgs => Task.CompletedTask);                        for (var i = 0; i < 20; i++)                      {                          if (messageReceived)                          {                              break;                          }                          await Task.Delay(TimeSpan.FromSeconds(2));                      }                        Assert.True(messageReceived);                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,QueueClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueClientTests.cs,UpdatingPrefetchCountOnQueueClientUpdatesTheReceiverPrefetchCount,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    try                  {                      Assert.Equal(0' queueClient.PrefetchCount);                        queueClient.PrefetchCount = 2;                      Assert.Equal(2' queueClient.PrefetchCount);                        // Message receiver should be created with latest prefetch count (lazy load).                      Assert.Equal(2' queueClient.InnerReceiver.PrefetchCount);                        queueClient.PrefetchCount = 3;                      Assert.Equal(3' queueClient.PrefetchCount);                        // Already created message receiver should have its prefetch value updated.                      Assert.Equal(3' queueClient.InnerReceiver.PrefetchCount);                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,QueueClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueClientTests.cs,UpdatingPrefetchCountOnQueueClientUpdatesTheReceiverPrefetchCount,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    try                  {                      Assert.Equal(0' queueClient.PrefetchCount);                        queueClient.PrefetchCount = 2;                      Assert.Equal(2' queueClient.PrefetchCount);                        // Message receiver should be created with latest prefetch count (lazy load).                      Assert.Equal(2' queueClient.InnerReceiver.PrefetchCount);                        queueClient.PrefetchCount = 3;                      Assert.Equal(3' queueClient.PrefetchCount);                        // Already created message receiver should have its prefetch value updated.                      Assert.Equal(3' queueClient.InnerReceiver.PrefetchCount);                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,QueueClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueClientTests.cs,UpdatingPrefetchCountOnQueueClientUpdatesTheReceiverPrefetchCount,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    try                  {                      Assert.Equal(0' queueClient.PrefetchCount);                        queueClient.PrefetchCount = 2;                      Assert.Equal(2' queueClient.PrefetchCount);                        // Message receiver should be created with latest prefetch count (lazy load).                      Assert.Equal(2' queueClient.InnerReceiver.PrefetchCount);                        queueClient.PrefetchCount = 3;                      Assert.Equal(3' queueClient.PrefetchCount);                        // Already created message receiver should have its prefetch value updated.                      Assert.Equal(3' queueClient.InnerReceiver.PrefetchCount);                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,QueueClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueClientTests.cs,UpdatingPrefetchCountOnQueueClientUpdatesTheReceiverPrefetchCount,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    try                  {                      Assert.Equal(0' queueClient.PrefetchCount);                        queueClient.PrefetchCount = 2;                      Assert.Equal(2' queueClient.PrefetchCount);                        // Message receiver should be created with latest prefetch count (lazy load).                      Assert.Equal(2' queueClient.InnerReceiver.PrefetchCount);                        queueClient.PrefetchCount = 3;                      Assert.Equal(3' queueClient.PrefetchCount);                        // Already created message receiver should have its prefetch value updated.                      Assert.Equal(3' queueClient.InnerReceiver.PrefetchCount);                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,QueueClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueClientTests.cs,UpdatingPrefetchCountOnQueueClientUpdatesTheReceiverPrefetchCount,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    try                  {                      Assert.Equal(0' queueClient.PrefetchCount);                        queueClient.PrefetchCount = 2;                      Assert.Equal(2' queueClient.PrefetchCount);                        // Message receiver should be created with latest prefetch count (lazy load).                      Assert.Equal(2' queueClient.InnerReceiver.PrefetchCount);                        queueClient.PrefetchCount = 3;                      Assert.Equal(3' queueClient.PrefetchCount);                        // Already created message receiver should have its prefetch value updated.                      Assert.Equal(3' queueClient.InnerReceiver.PrefetchCount);                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,QueueClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueClientTests.cs,UpdatingPrefetchCountOnQueueClientUpdatesTheReceiverPrefetchCount,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    try                  {                      Assert.Equal(0' queueClient.PrefetchCount);                        queueClient.PrefetchCount = 2;                      Assert.Equal(2' queueClient.PrefetchCount);                        // Message receiver should be created with latest prefetch count (lazy load).                      Assert.Equal(2' queueClient.InnerReceiver.PrefetchCount);                        queueClient.PrefetchCount = 3;                      Assert.Equal(3' queueClient.PrefetchCount);                        // Already created message receiver should have its prefetch value updated.                      Assert.Equal(3' queueClient.InnerReceiver.PrefetchCount);                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,QueueSessionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueSessionTests.cs,SessionRenewLockTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned' sessionEnabled' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var sessionClient = new SessionClient(TestUtility.NamespaceConnectionString' queueName);                    try                  {                      var messageId = "test-message1";                      var sessionId = Guid.NewGuid().ToString();                      await sender.SendAsync(new Message { MessageId = messageId' SessionId = sessionId });                      TestUtility.Log($"Sent Message: {messageId} to Session: {sessionId}");                        var sessionReceiver = await sessionClient.AcceptMessageSessionAsync(sessionId);                      Assert.NotNull(sessionReceiver);                      TestUtility.Log($"Session LockedUntilUTC: {sessionReceiver.LockedUntilUtc} for Session: {sessionReceiver.SessionId}");                      var message = await sessionReceiver.ReceiveAsync();                      TestUtility.Log($"Received Message: {message.MessageId} from Session: {sessionReceiver.SessionId}");                      Assert.True(message.MessageId == messageId);                        TestUtility.Log("Sleeping 10 seconds...");                      await Task.Delay(TimeSpan.FromSeconds(10));                        // For session it looks like when the session is received' sometimes the session LockedUntil UTC                      // is turning out slightly more than the Default Lock Duration(lock is for 1 minute' but the session was locked                      // for 1 min and 2 seconds. We will need to look at if this is an issue on service or some kind of time skew.                      // Temporarily changing this test to look at the renew request time instead.                      var renewRequestTime = DateTime.UtcNow;                      await sessionReceiver.RenewSessionLockAsync();                      var firstLockedUntilUtcTime = sessionReceiver.LockedUntilUtc;                      TestUtility.Log($"After Renew Session LockedUntilUTC: {firstLockedUntilUtcTime} for Session: {sessionReceiver.SessionId}");                      Assert.True(firstLockedUntilUtcTime >= renewRequestTime + TimeSpan.FromSeconds(10));                        TestUtility.Log("Sleeping 5 seconds...");                      await Task.Delay(TimeSpan.FromSeconds(5));                        renewRequestTime = DateTime.UtcNow;                      await sessionReceiver.RenewSessionLockAsync();                      TestUtility.Log($"After Second Renew Session LockedUntilUTC: {sessionReceiver.LockedUntilUtc} for Session: {sessionReceiver.SessionId}");                      Assert.True(sessionReceiver.LockedUntilUtc >= renewRequestTime + TimeSpan.FromSeconds(5));                      await sessionReceiver.CompleteAsync(message.SystemProperties.LockToken);                      TestUtility.Log($"Completed Message: {message.MessageId} for Session: {sessionReceiver.SessionId}");                      await sessionReceiver.CloseAsync();                  }                  finally                  {                      await sender.CloseAsync();                      await sessionClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,QueueSessionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueSessionTests.cs,SessionRenewLockTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned' sessionEnabled' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var sessionClient = new SessionClient(TestUtility.NamespaceConnectionString' queueName);                    try                  {                      var messageId = "test-message1";                      var sessionId = Guid.NewGuid().ToString();                      await sender.SendAsync(new Message { MessageId = messageId' SessionId = sessionId });                      TestUtility.Log($"Sent Message: {messageId} to Session: {sessionId}");                        var sessionReceiver = await sessionClient.AcceptMessageSessionAsync(sessionId);                      Assert.NotNull(sessionReceiver);                      TestUtility.Log($"Session LockedUntilUTC: {sessionReceiver.LockedUntilUtc} for Session: {sessionReceiver.SessionId}");                      var message = await sessionReceiver.ReceiveAsync();                      TestUtility.Log($"Received Message: {message.MessageId} from Session: {sessionReceiver.SessionId}");                      Assert.True(message.MessageId == messageId);                        TestUtility.Log("Sleeping 10 seconds...");                      await Task.Delay(TimeSpan.FromSeconds(10));                        // For session it looks like when the session is received' sometimes the session LockedUntil UTC                      // is turning out slightly more than the Default Lock Duration(lock is for 1 minute' but the session was locked                      // for 1 min and 2 seconds. We will need to look at if this is an issue on service or some kind of time skew.                      // Temporarily changing this test to look at the renew request time instead.                      var renewRequestTime = DateTime.UtcNow;                      await sessionReceiver.RenewSessionLockAsync();                      var firstLockedUntilUtcTime = sessionReceiver.LockedUntilUtc;                      TestUtility.Log($"After Renew Session LockedUntilUTC: {firstLockedUntilUtcTime} for Session: {sessionReceiver.SessionId}");                      Assert.True(firstLockedUntilUtcTime >= renewRequestTime + TimeSpan.FromSeconds(10));                        TestUtility.Log("Sleeping 5 seconds...");                      await Task.Delay(TimeSpan.FromSeconds(5));                        renewRequestTime = DateTime.UtcNow;                      await sessionReceiver.RenewSessionLockAsync();                      TestUtility.Log($"After Second Renew Session LockedUntilUTC: {sessionReceiver.LockedUntilUtc} for Session: {sessionReceiver.SessionId}");                      Assert.True(sessionReceiver.LockedUntilUtc >= renewRequestTime + TimeSpan.FromSeconds(5));                      await sessionReceiver.CompleteAsync(message.SystemProperties.LockToken);                      TestUtility.Log($"Completed Message: {message.MessageId} for Session: {sessionReceiver.SessionId}");                      await sessionReceiver.CloseAsync();                  }                  finally                  {                      await sender.CloseAsync();                      await sessionClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,QueueSessionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueSessionTests.cs,SessionRenewLockTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned' sessionEnabled' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var sessionClient = new SessionClient(TestUtility.NamespaceConnectionString' queueName);                    try                  {                      var messageId = "test-message1";                      var sessionId = Guid.NewGuid().ToString();                      await sender.SendAsync(new Message { MessageId = messageId' SessionId = sessionId });                      TestUtility.Log($"Sent Message: {messageId} to Session: {sessionId}");                        var sessionReceiver = await sessionClient.AcceptMessageSessionAsync(sessionId);                      Assert.NotNull(sessionReceiver);                      TestUtility.Log($"Session LockedUntilUTC: {sessionReceiver.LockedUntilUtc} for Session: {sessionReceiver.SessionId}");                      var message = await sessionReceiver.ReceiveAsync();                      TestUtility.Log($"Received Message: {message.MessageId} from Session: {sessionReceiver.SessionId}");                      Assert.True(message.MessageId == messageId);                        TestUtility.Log("Sleeping 10 seconds...");                      await Task.Delay(TimeSpan.FromSeconds(10));                        // For session it looks like when the session is received' sometimes the session LockedUntil UTC                      // is turning out slightly more than the Default Lock Duration(lock is for 1 minute' but the session was locked                      // for 1 min and 2 seconds. We will need to look at if this is an issue on service or some kind of time skew.                      // Temporarily changing this test to look at the renew request time instead.                      var renewRequestTime = DateTime.UtcNow;                      await sessionReceiver.RenewSessionLockAsync();                      var firstLockedUntilUtcTime = sessionReceiver.LockedUntilUtc;                      TestUtility.Log($"After Renew Session LockedUntilUTC: {firstLockedUntilUtcTime} for Session: {sessionReceiver.SessionId}");                      Assert.True(firstLockedUntilUtcTime >= renewRequestTime + TimeSpan.FromSeconds(10));                        TestUtility.Log("Sleeping 5 seconds...");                      await Task.Delay(TimeSpan.FromSeconds(5));                        renewRequestTime = DateTime.UtcNow;                      await sessionReceiver.RenewSessionLockAsync();                      TestUtility.Log($"After Second Renew Session LockedUntilUTC: {sessionReceiver.LockedUntilUtc} for Session: {sessionReceiver.SessionId}");                      Assert.True(sessionReceiver.LockedUntilUtc >= renewRequestTime + TimeSpan.FromSeconds(5));                      await sessionReceiver.CompleteAsync(message.SystemProperties.LockToken);                      TestUtility.Log($"Completed Message: {message.MessageId} for Session: {sessionReceiver.SessionId}");                      await sessionReceiver.CloseAsync();                  }                  finally                  {                      await sender.CloseAsync();                      await sessionClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,QueueSessionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueSessionTests.cs,SessionRenewLockTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned' sessionEnabled' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var sessionClient = new SessionClient(TestUtility.NamespaceConnectionString' queueName);                    try                  {                      var messageId = "test-message1";                      var sessionId = Guid.NewGuid().ToString();                      await sender.SendAsync(new Message { MessageId = messageId' SessionId = sessionId });                      TestUtility.Log($"Sent Message: {messageId} to Session: {sessionId}");                        var sessionReceiver = await sessionClient.AcceptMessageSessionAsync(sessionId);                      Assert.NotNull(sessionReceiver);                      TestUtility.Log($"Session LockedUntilUTC: {sessionReceiver.LockedUntilUtc} for Session: {sessionReceiver.SessionId}");                      var message = await sessionReceiver.ReceiveAsync();                      TestUtility.Log($"Received Message: {message.MessageId} from Session: {sessionReceiver.SessionId}");                      Assert.True(message.MessageId == messageId);                        TestUtility.Log("Sleeping 10 seconds...");                      await Task.Delay(TimeSpan.FromSeconds(10));                        // For session it looks like when the session is received' sometimes the session LockedUntil UTC                      // is turning out slightly more than the Default Lock Duration(lock is for 1 minute' but the session was locked                      // for 1 min and 2 seconds. We will need to look at if this is an issue on service or some kind of time skew.                      // Temporarily changing this test to look at the renew request time instead.                      var renewRequestTime = DateTime.UtcNow;                      await sessionReceiver.RenewSessionLockAsync();                      var firstLockedUntilUtcTime = sessionReceiver.LockedUntilUtc;                      TestUtility.Log($"After Renew Session LockedUntilUTC: {firstLockedUntilUtcTime} for Session: {sessionReceiver.SessionId}");                      Assert.True(firstLockedUntilUtcTime >= renewRequestTime + TimeSpan.FromSeconds(10));                        TestUtility.Log("Sleeping 5 seconds...");                      await Task.Delay(TimeSpan.FromSeconds(5));                        renewRequestTime = DateTime.UtcNow;                      await sessionReceiver.RenewSessionLockAsync();                      TestUtility.Log($"After Second Renew Session LockedUntilUTC: {sessionReceiver.LockedUntilUtc} for Session: {sessionReceiver.SessionId}");                      Assert.True(sessionReceiver.LockedUntilUtc >= renewRequestTime + TimeSpan.FromSeconds(5));                      await sessionReceiver.CompleteAsync(message.SystemProperties.LockToken);                      TestUtility.Log($"Completed Message: {message.MessageId} for Session: {sessionReceiver.SessionId}");                      await sessionReceiver.CloseAsync();                  }                  finally                  {                      await sender.CloseAsync();                      await sessionClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,QueueSessionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueSessionTests.cs,ReceiveDeferredMessageForSessionTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned' sessionEnabled' async queueName =>              {                  var sessionId = Guid.NewGuid().ToString("N").Substring(0' 8);                  var messageId = Guid.NewGuid().ToString("N").Substring(0' 8);                  var sender = default(MessageSender);                  var sessionClient = default(SessionClient);                  var messageSession = default(IMessageSession);                    try                  {                      sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                      await sender.SendAsync(new Message() { SessionId = sessionId' MessageId = messageId });                        sessionClient = new SessionClient(TestUtility.NamespaceConnectionString' queueName);                      messageSession = await sessionClient.AcceptMessageSessionAsync(sessionId);                      var msg = await messageSession.ReceiveAsync();                      var seqNum = msg.SystemProperties.SequenceNumber;                      await messageSession.DeferAsync(msg.SystemProperties.LockToken);                      var msg2 = await messageSession.ReceiveDeferredMessageAsync(seqNum);                        Assert.Equal(seqNum' msg2.SystemProperties.SequenceNumber);                      Assert.Equal(messageId' msg2.MessageId);                  }                  finally                  {                      await sender?.CloseAsync();                      await sessionClient?.CloseAsync();                      await messageSession?.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,QueueSessionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\QueueSessionTests.cs,ReceiveDeferredMessageForSessionTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned' sessionEnabled' async queueName =>              {                  var sessionId = Guid.NewGuid().ToString("N").Substring(0' 8);                  var messageId = Guid.NewGuid().ToString("N").Substring(0' 8);                  var sender = default(MessageSender);                  var sessionClient = default(SessionClient);                  var messageSession = default(IMessageSession);                    try                  {                      sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                      await sender.SendAsync(new Message() { SessionId = sessionId' MessageId = messageId });                        sessionClient = new SessionClient(TestUtility.NamespaceConnectionString' queueName);                      messageSession = await sessionClient.AcceptMessageSessionAsync(sessionId);                      var msg = await messageSession.ReceiveAsync();                      var seqNum = msg.SystemProperties.SequenceNumber;                      await messageSession.DeferAsync(msg.SystemProperties.LockToken);                      var msg2 = await messageSession.ReceiveDeferredMessageAsync(seqNum);                        Assert.Equal(seqNum' msg2.SystemProperties.SequenceNumber);                      Assert.Equal(messageId' msg2.MessageId);                  }                  finally                  {                      await sender?.CloseAsync();                      await sessionClient?.CloseAsync();                      await messageSession?.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryPolicyTests.cs,Should_retry_when_throttled_and_no_ambient_transaction_is_detected,The following statement contains a magic number: await retryPolicy.RunOperation(() =>              {                  if (numberOfExecutions > 1)                  {                      return Task.CompletedTask;                  }                    numberOfExecutions++;                    throw new ServerBusyException("Rico KABOOM!");              }' TimeSpan.FromSeconds(30));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryPolicyTests.cs,Should_retry_when_throttled_and_no_ambient_transaction_is_detected,The following statement contains a magic number: Assert.Equal(2' numberOfExecutions);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryPolicyTests.cs,Should_not_retry_when_throttled_and_ambient_transaction_is_detected,The following statement contains a magic number: await Assert.ThrowsAsync<ServerBusyException>(() =>                      retryPolicy.RunOperation(() =>                      {                          if (numberOfExecutions > 1)                          {                              return Task.CompletedTask;                          }                            numberOfExecutions++;                            throw new ServerBusyException("Rico KABOOM!");                      }' TimeSpan.FromSeconds(30)));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RetryExponentialShouldRetryTest,The following statement contains a magic number: var retry = new RetryExponential(TimeSpan.FromSeconds(1)' TimeSpan.FromSeconds(20)' 5);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RetryExponentialShouldRetryTest,The following statement contains a magic number: var retry = new RetryExponential(TimeSpan.FromSeconds(1)' TimeSpan.FromSeconds(20)' 5);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RetryExponentialEnsureRandomTest,The following statement contains a magic number: i < 10
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RetryExponentialEnsureRandomTest,The following statement contains a magic number: Assert.True(retryMatchingInstances <= 3' "Out of 10 times we have 3 or more matching instances' which is alarming.");
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RetryExponentialServerBusyShouldSelfResetTest,The following statement contains a magic number: await Task.Delay(3000);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RetryExponentialServerBusyShouldSelfResetTest,The following statement contains a magic number: await Task.Delay(9000);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RetryExponentialServerBusyShouldSelfResetTest,The following statement contains a magic number: await Task.Delay(2000);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RunOperationShouldReturnImmediatelyIfRetryIntervalIsGreaterThanOperationTimeout,The following statement contains a magic number: await Assert.ThrowsAsync<ServiceBusException>(async () => await policy.RunOperation(                      () => throw new ServiceBusException(true' string.Empty)' TimeSpan.FromSeconds(8)))                  .ConfigureAwait(false);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RunOperationShouldReturnImmediatelyIfRetryIntervalIsGreaterThanOperationTimeout,The following statement contains a magic number: Assert.True(watch.Elapsed.TotalSeconds < 7);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RunOperationShouldWaitFor10SecondsForOperationIfServerBusy,The following statement contains a magic number: await policy.RunOperation(                  () => Task.CompletedTask' TimeSpan.FromMinutes(3))                  .ConfigureAwait(false);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RunOperationShouldWaitFor10SecondsForOperationIfServerBusy,The following statement contains a magic number: Assert.True(watch.Elapsed.TotalSeconds > 9);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RunOperationShouldWaitForAllOperationsToSucceed,The following statement contains a magic number: await policy.RunOperation(                  async () =>                  {                      for (var i = 0; i < 5; i++)                      {                          var task = Task.Delay(TimeSpan.FromSeconds(2));                          tasks.Add(task);                          await task;                      }                  }' TimeSpan.FromMinutes(3));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RunOperationShouldWaitForAllOperationsToSucceed,The following statement contains a magic number: await policy.RunOperation(                  async () =>                  {                      for (var i = 0; i < 5; i++)                      {                          var task = Task.Delay(TimeSpan.FromSeconds(2));                          tasks.Add(task);                          await task;                      }                  }' TimeSpan.FromMinutes(3));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RunOperationShouldWaitForAllOperationsToSucceed,The following statement contains a magic number: await policy.RunOperation(                  async () =>                  {                      for (var i = 0; i < 5; i++)                      {                          var task = Task.Delay(TimeSpan.FromSeconds(2));                          tasks.Add(task);                          await task;                      }                  }' TimeSpan.FromMinutes(3));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\RetryTests.cs,RunOperationShouldWaitForAllOperationsToSucceed,The following statement contains a magic number: Assert.True(watch.Elapsed.TotalSeconds > 9);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,ReceiveDeleteTestCase,The following statement contains a magic number: var receivedMessages = await TestUtility.ReceiveMessagesAsync(messageReceiver' messageCount' TimeSpan.FromSeconds(10));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,PeekLockWithAbandonTestCase,The following statement contains a magic number: var abandonMessagesCount = 5;
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,PeekLockWithAbandonTestCase,The following statement contains a magic number: var messagesWithDeliveryCount2 = receivedMessages.Where(message => message.SystemProperties.DeliveryCount == 2).Count();
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,PeekLockWithDeadLetterTestCase,The following statement contains a magic number: var deadLetterMessageCount = 5;
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,PeekLockDeferTestCase,The following statement contains a magic number: var deferMessagesCount = 5;
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,PeekLockDeferTestCase,The following statement contains a magic number: Assert.True(receivedMessages.Count == 5);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,PeekLockDeferTestCase,The following statement contains a magic number: var count = receivedMessages.Count(message => message.SystemProperties.DeliveryCount == 3);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,RenewLockTestCase,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,RenewLockTestCase,The following statement contains a magic number: Assert.True(message.SystemProperties.LockedUntilUtc >= firstLockedUntilUtcTime + TimeSpan.FromSeconds(10));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,RenewLockTestCase,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,RenewLockTestCase,The following statement contains a magic number: Assert.True(message.SystemProperties.LockedUntilUtc >= firstLockedUntilUtcTime + TimeSpan.FromSeconds(5));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,ReceiveShouldReturnNoLaterThanServerWaitTimeTestCase,The following statement contains a magic number: var message = await messageReceiver.ReceiveAsync(TimeSpan.FromSeconds(2));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,ReceiveShouldReturnNoLaterThanServerWaitTimeTestCase,The following statement contains a magic number: Assert.True(timer.Elapsed.TotalSeconds < 40);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,ScheduleMessagesAppearAfterScheduledTimeAsyncTestCase,The following statement contains a magic number: var scheduleTime = new DateTimeOffset(DateTime.UtcNow).AddSeconds(5);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,ScheduleMessagesAppearAfterScheduledTimeAsyncTestCase,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,ScheduleMessagesAppearAfterScheduledTimeAsyncTestCase,The following statement contains a magic number: Assert.True(Math.Ceiling(message.ScheduledEnqueueTimeUtc.Subtract(startTime).TotalSeconds) >= 5);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,CancelScheduledMessagesAsyncTestCase,The following statement contains a magic number: var scheduleTime = new DateTimeOffset(DateTime.UtcNow).AddSeconds(30);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,CancelScheduledMessagesAsyncTestCase,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(30));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,CancelScheduledMessagesAsyncTestCase,The following statement contains a magic number: var retryCount = 5;
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,CancelScheduledMessagesAsyncTestCase,The following statement contains a magic number: messages = await messageReceiver.ReceiveAsync(2);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,OnMessageAsyncTestCase,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,OnMessageAsyncTestCase,The following statement contains a magic number: stopwatch.Elapsed.TotalSeconds <= 60
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,OnMessageRegistrationWithoutPendingMessagesTestCase,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverClientTestBase.cs,OnMessageRegistrationWithoutPendingMessagesTestCase,The following statement contains a magic number: stopwatch.Elapsed.TotalSeconds <= 20
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,ReceiverShouldUseTheLatestPrefetchCount,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                    var receiver1 = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete);                  var receiver2 = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete' prefetchCount: 1);                    Assert.Equal(0' receiver1.PrefetchCount);                  Assert.Equal(1' receiver2.PrefetchCount);                    try                  {                      for (var i = 0; i < 9; i++)                      {                          var message = new Message(Encoding.UTF8.GetBytes("test" + i))                          {                              Label = "prefetch" + i                          };                          await sender.SendAsync(message).ConfigureAwait(false);                      }                        // Default prefetch count should be 0 for receiver 1.                      Assert.Equal("prefetch0"' (await receiver1.ReceiveAsync().ConfigureAwait(false)).Label);                        // The first ReceiveAsync() would initialize the link and block prefetch2 for receiver2                      Assert.Equal("prefetch1"' (await receiver2.ReceiveAsync().ConfigureAwait(false)).Label);                      await Task.Delay(TwoSeconds);                        // Updating prefetch count on receiver1.                      receiver1.PrefetchCount = 2;                      await Task.Delay(TwoSeconds);                        // The next operation should fetch prefetch3 and prefetch4.                      Assert.Equal("prefetch3"' (await receiver1.ReceiveAsync().ConfigureAwait(false)).Label);                      await Task.Delay(TwoSeconds);                        Assert.Equal("prefetch2"' (await receiver2.ReceiveAsync().ConfigureAwait(false)).Label);                      await Task.Delay(TwoSeconds);                        // The next operation should block prefetch6 for receiver2.                      Assert.Equal("prefetch5"' (await receiver2.ReceiveAsync().ConfigureAwait(false)).Label);                      await Task.Delay(TwoSeconds);                        // Updates in prefetch count of receiver1 should not affect receiver2.                      // Receiver2 should continue with 1 prefetch.                      Assert.Equal("prefetch4"' (await receiver1.ReceiveAsync().ConfigureAwait(false)).Label);                      Assert.Equal("prefetch7"' (await receiver1.ReceiveAsync().ConfigureAwait(false)).Label);                      Assert.Equal("prefetch8"' (await receiver1.ReceiveAsync().ConfigureAwait(false)).Label);                  }                  catch (Exception)                  {                      // Cleanup                      Message message;                      do                      {                          message = await receiver1.ReceiveAsync(TimeSpan.FromSeconds(3)).ConfigureAwait(false);                      } while (message != null);                  }                  finally                  {                      await sender.CloseAsync();                      await receiver1.CloseAsync();                      await receiver2.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,ReceiverShouldUseTheLatestPrefetchCount,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                    var receiver1 = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete);                  var receiver2 = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete' prefetchCount: 1);                    Assert.Equal(0' receiver1.PrefetchCount);                  Assert.Equal(1' receiver2.PrefetchCount);                    try                  {                      for (var i = 0; i < 9; i++)                      {                          var message = new Message(Encoding.UTF8.GetBytes("test" + i))                          {                              Label = "prefetch" + i                          };                          await sender.SendAsync(message).ConfigureAwait(false);                      }                        // Default prefetch count should be 0 for receiver 1.                      Assert.Equal("prefetch0"' (await receiver1.ReceiveAsync().ConfigureAwait(false)).Label);                        // The first ReceiveAsync() would initialize the link and block prefetch2 for receiver2                      Assert.Equal("prefetch1"' (await receiver2.ReceiveAsync().ConfigureAwait(false)).Label);                      await Task.Delay(TwoSeconds);                        // Updating prefetch count on receiver1.                      receiver1.PrefetchCount = 2;                      await Task.Delay(TwoSeconds);                        // The next operation should fetch prefetch3 and prefetch4.                      Assert.Equal("prefetch3"' (await receiver1.ReceiveAsync().ConfigureAwait(false)).Label);                      await Task.Delay(TwoSeconds);                        Assert.Equal("prefetch2"' (await receiver2.ReceiveAsync().ConfigureAwait(false)).Label);                      await Task.Delay(TwoSeconds);                        // The next operation should block prefetch6 for receiver2.                      Assert.Equal("prefetch5"' (await receiver2.ReceiveAsync().ConfigureAwait(false)).Label);                      await Task.Delay(TwoSeconds);                        // Updates in prefetch count of receiver1 should not affect receiver2.                      // Receiver2 should continue with 1 prefetch.                      Assert.Equal("prefetch4"' (await receiver1.ReceiveAsync().ConfigureAwait(false)).Label);                      Assert.Equal("prefetch7"' (await receiver1.ReceiveAsync().ConfigureAwait(false)).Label);                      Assert.Equal("prefetch8"' (await receiver1.ReceiveAsync().ConfigureAwait(false)).Label);                  }                  catch (Exception)                  {                      // Cleanup                      Message message;                      do                      {                          message = await receiver1.ReceiveAsync(TimeSpan.FromSeconds(3)).ConfigureAwait(false);                      } while (message != null);                  }                  finally                  {                      await sender.CloseAsync();                      await receiver1.CloseAsync();                      await receiver2.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,ReceiverShouldUseTheLatestPrefetchCount,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                    var receiver1 = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete);                  var receiver2 = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' receiveMode: ReceiveMode.ReceiveAndDelete' prefetchCount: 1);                    Assert.Equal(0' receiver1.PrefetchCount);                  Assert.Equal(1' receiver2.PrefetchCount);                    try                  {                      for (var i = 0; i < 9; i++)                      {                          var message = new Message(Encoding.UTF8.GetBytes("test" + i))                          {                              Label = "prefetch" + i                          };                          await sender.SendAsync(message).ConfigureAwait(false);                      }                        // Default prefetch count should be 0 for receiver 1.                      Assert.Equal("prefetch0"' (await receiver1.ReceiveAsync().ConfigureAwait(false)).Label);                        // The first ReceiveAsync() would initialize the link and block prefetch2 for receiver2                      Assert.Equal("prefetch1"' (await receiver2.ReceiveAsync().ConfigureAwait(false)).Label);                      await Task.Delay(TwoSeconds);                        // Updating prefetch count on receiver1.                      receiver1.PrefetchCount = 2;                      await Task.Delay(TwoSeconds);                        // The next operation should fetch prefetch3 and prefetch4.                      Assert.Equal("prefetch3"' (await receiver1.ReceiveAsync().ConfigureAwait(false)).Label);                      await Task.Delay(TwoSeconds);                        Assert.Equal("prefetch2"' (await receiver2.ReceiveAsync().ConfigureAwait(false)).Label);                      await Task.Delay(TwoSeconds);                        // The next operation should block prefetch6 for receiver2.                      Assert.Equal("prefetch5"' (await receiver2.ReceiveAsync().ConfigureAwait(false)).Label);                      await Task.Delay(TwoSeconds);                        // Updates in prefetch count of receiver1 should not affect receiver2.                      // Receiver2 should continue with 1 prefetch.                      Assert.Equal("prefetch4"' (await receiver1.ReceiveAsync().ConfigureAwait(false)).Label);                      Assert.Equal("prefetch7"' (await receiver1.ReceiveAsync().ConfigureAwait(false)).Label);                      Assert.Equal("prefetch8"' (await receiver1.ReceiveAsync().ConfigureAwait(false)).Label);                  }                  catch (Exception)                  {                      // Cleanup                      Message message;                      do                      {                          message = await receiver1.ReceiveAsync(TimeSpan.FromSeconds(3)).ConfigureAwait(false);                      } while (message != null);                  }                  finally                  {                      await sender.CloseAsync();                      await receiver1.CloseAsync();                      await receiver2.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,WaitingReceiveShouldReturnImmediatelyWhenReceiverIsClosed,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    TestUtility.Log("Begin to receive from an empty queue.");                  Task quickTask;                  try                  {                      quickTask = Task.Run(async () =>                      {                          try                          {                              await receiver.ReceiveAsync(TimeSpan.FromSeconds(40));                          }                          catch (Exception e)                          {                              TestUtility.Log("Unexpected exception: " + e);                          }                      });                      await Task.Delay(2000);                      TestUtility.Log("Waited for 2 Seconds for the ReceiveAsync to establish connection.");                  }                  finally                  {                      await receiver.CloseAsync();                      TestUtility.Log("Closed Receiver");                  }                    TestUtility.Log("Waiting for maximum 10 Secs");                  bool receiverReturnedInTime = false;                  using (var timeoutCancellationTokenSource = new CancellationTokenSource())                  {                        var completedTask = await Task.WhenAny(quickTask' Task.Delay(10000' timeoutCancellationTokenSource.Token));                      if (completedTask == quickTask)                      {                          timeoutCancellationTokenSource.Cancel();                          receiverReturnedInTime = true;                          TestUtility.Log("The Receiver closed in time.");                      }                      else                      {                          TestUtility.Log("The Receiver did not close in time.");                      }                  }                    Assert.True(receiverReturnedInTime);              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,WaitingReceiveShouldReturnImmediatelyWhenReceiverIsClosed,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    TestUtility.Log("Begin to receive from an empty queue.");                  Task quickTask;                  try                  {                      quickTask = Task.Run(async () =>                      {                          try                          {                              await receiver.ReceiveAsync(TimeSpan.FromSeconds(40));                          }                          catch (Exception e)                          {                              TestUtility.Log("Unexpected exception: " + e);                          }                      });                      await Task.Delay(2000);                      TestUtility.Log("Waited for 2 Seconds for the ReceiveAsync to establish connection.");                  }                  finally                  {                      await receiver.CloseAsync();                      TestUtility.Log("Closed Receiver");                  }                    TestUtility.Log("Waiting for maximum 10 Secs");                  bool receiverReturnedInTime = false;                  using (var timeoutCancellationTokenSource = new CancellationTokenSource())                  {                        var completedTask = await Task.WhenAny(quickTask' Task.Delay(10000' timeoutCancellationTokenSource.Token));                      if (completedTask == quickTask)                      {                          timeoutCancellationTokenSource.Cancel();                          receiverReturnedInTime = true;                          TestUtility.Log("The Receiver closed in time.");                      }                      else                      {                          TestUtility.Log("The Receiver did not close in time.");                      }                  }                    Assert.True(receiverReturnedInTime);              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,WaitingReceiveShouldReturnImmediatelyWhenReceiverIsClosed,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    TestUtility.Log("Begin to receive from an empty queue.");                  Task quickTask;                  try                  {                      quickTask = Task.Run(async () =>                      {                          try                          {                              await receiver.ReceiveAsync(TimeSpan.FromSeconds(40));                          }                          catch (Exception e)                          {                              TestUtility.Log("Unexpected exception: " + e);                          }                      });                      await Task.Delay(2000);                      TestUtility.Log("Waited for 2 Seconds for the ReceiveAsync to establish connection.");                  }                  finally                  {                      await receiver.CloseAsync();                      TestUtility.Log("Closed Receiver");                  }                    TestUtility.Log("Waiting for maximum 10 Secs");                  bool receiverReturnedInTime = false;                  using (var timeoutCancellationTokenSource = new CancellationTokenSource())                  {                        var completedTask = await Task.WhenAny(quickTask' Task.Delay(10000' timeoutCancellationTokenSource.Token));                      if (completedTask == quickTask)                      {                          timeoutCancellationTokenSource.Cancel();                          receiverReturnedInTime = true;                          TestUtility.Log("The Receiver closed in time.");                      }                      else                      {                          TestUtility.Log("The Receiver did not close in time.");                      }                  }                    Assert.True(receiverReturnedInTime);              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,CancelScheduledMessageShouldThrowMessageNotFoundException,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                    try                  {                      long nonExistingSequenceNumber = 1000;                      await Assert.ThrowsAsync<MessageNotFoundException>(                          async () => await sender.CancelScheduledMessageAsync(nonExistingSequenceNumber));                  }                  finally                  {                      await sender.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,ClientThrowsUnauthorizedExceptionWhenUserDoesntHaveAccess,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var csb = new ServiceBusConnectionStringBuilder(TestUtility.NamespaceConnectionString);                  csb.SasKeyName = "nonExistingKey";                  csb.EntityPath = queueName;                    var sender = new MessageSender(csb);                    try                  {                      await Assert.ThrowsAsync<UnauthorizedException>(                          async () => await sender.SendAsync(new Message()));                        long nonExistingSequenceNumber = 1000;                      await Assert.ThrowsAsync<UnauthorizedException>(                          async () => await sender.CancelScheduledMessageAsync(nonExistingSequenceNumber));                  }                  finally                  {                      await sender.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SenderReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SenderReceiverTests.cs,MessageSenderShouldNotThrowWhenSendingEmptyCollection,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(TestUtility.NamespaceConnectionString' queueName);                  var receiver = new MessageReceiver(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    try                  {                      await sender.SendAsync(new List<Message>());                      var message = await receiver.ReceiveAsync(TimeSpan.FromSeconds(3));                      Assert.True(message == null' "Expected not to find any messages' but a message was received.");                  }                  finally                  {                      await sender.CloseAsync();                      await receiver.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderShouldTrimTrailingSemicolon,The following statement contains a magic number: csBuilder.OperationTimeout = TimeSpan.FromSeconds(42);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderShouldParseOperationTimeoutAsInteger,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMinutes(2)' csBuilder.OperationTimeout);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderShouldParseOperationTimeoutAsTimeSpan,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMinutes(12).Add(TimeSpan.FromSeconds(34))' csBuilder.OperationTimeout);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,ConnectionStringBuilderShouldParseOperationTimeoutAsTimeSpan,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMinutes(12).Add(TimeSpan.FromSeconds(34))' csBuilder.OperationTimeout);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,ServiceBusConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\ServiceBusConnectionStringBuilderTests.cs,NonAmqpUriSchemesShouldWorkAsExpected,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var csb = new ServiceBusConnectionStringBuilder(TestUtility.NamespaceConnectionString);                  csb.Endpoint = new UriBuilder(csb.Endpoint)                  {                      Scheme = Uri.UriSchemeHttps                  }.Uri.ToString();                  csb.EntityPath = queueName;                    var receiver = new MessageReceiver(csb);                  var msg = await receiver.ReceiveAsync(TimeSpan.FromSeconds(5));                    await receiver.CloseAsync();              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SubscriptionClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SubscriptionClientTests.cs,CorrelationFilterTestCase,The following statement contains a magic number: await ServiceBusScope.UsingTopicAsync(partitioned' sessionEnabled' async (topicName' subscriptionName) =>              {                  var topicClient = new TopicClient(TestUtility.NamespaceConnectionString' topicName);                  var subscriptionClient = new SubscriptionClient(                      TestUtility.NamespaceConnectionString'                      topicName'                      subscriptionName'                      ReceiveMode.ReceiveAndDelete);                    try                  {                      try                      {                          await subscriptionClient.RemoveRuleAsync(RuleDescription.DefaultRuleName);                      }                      catch (Exception e)                      {                          TestUtility.Log($"Remove Default Rule failed with Exception: {e.Message}");                      }                        await subscriptionClient.AddRuleAsync(new RuleDescription                      {                          Filter = new CorrelationFilter { Label = "Red" }'                          Name = "RedCorrelation"                      });                        var messageId1 = Guid.NewGuid().ToString();                      await topicClient.SendAsync(new Message { MessageId = messageId1' Label = "Blue" });                      TestUtility.Log($"Sent Message: {messageId1}");                        var messageId2 = Guid.NewGuid().ToString();                      await topicClient.SendAsync(new Message { MessageId = messageId2' Label = "Red" });                      TestUtility.Log($"Sent Message: {messageId2}");                        var messages = await subscriptionClient.InnerSubscriptionClient.InnerReceiver.ReceiveAsync(maxMessageCount: 2);                      Assert.NotNull(messages);                      Assert.True(messages.Count == 1);                      Assert.Equal(messageId2' messages.First().MessageId);                  }                  finally                  {                      try                      {                          await subscriptionClient.RemoveRuleAsync("RedCorrelation");                          await subscriptionClient.AddRuleAsync(RuleDescription.DefaultRuleName' new TrueFilter());                      }                      catch (Exception e)                      {                          TestUtility.Log($" Cleanup failed with Exception: {e.Message}");                      }                        await subscriptionClient.CloseAsync();                      await topicClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SubscriptionClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SubscriptionClientTests.cs,SqlFilterTestCase,The following statement contains a magic number: await ServiceBusScope.UsingTopicAsync(partitioned' sessionEnabled' async (topicName' subscriptionName) =>              {                  var topicClient = new TopicClient(TestUtility.NamespaceConnectionString' topicName);                  var subscriptionClient = new SubscriptionClient(                      TestUtility.NamespaceConnectionString'                      topicName'                      subscriptionName'                      ReceiveMode.ReceiveAndDelete);                    try                  {                      try                      {                          await subscriptionClient.RemoveRuleAsync(RuleDescription.DefaultRuleName);                      }                      catch(Exception e)                      {                          TestUtility.Log($"Remove Default Rule failed with: {e.Message}");                      }                        await subscriptionClient.AddRuleAsync(new RuleDescription                      {                          Filter = new SqlFilter("Color = 'RedSql'")'                          Name = "RedSql"                      });                        var messageId1 = Guid.NewGuid().ToString();                      await topicClient.SendAsync(new Message                      {                          MessageId = messageId1'                          Label = "BlueSql"'                          UserProperties = { { "color"' "BlueSql" } }                      });                      TestUtility.Log($"Sent Message: {messageId1}");                        var messageId2 = Guid.NewGuid().ToString();                      await topicClient.SendAsync(new Message                      {                          MessageId = messageId2'                          Label = "RedSql"'                          UserProperties = { { "color"' "RedSql" } }                      });                      TestUtility.Log($"Sent Message: {messageId2}");                        var messages = await subscriptionClient.InnerSubscriptionClient.InnerReceiver.ReceiveAsync(maxMessageCount: 2);                      Assert.NotNull(messages);                      Assert.True(messages.Count == 1);                      Assert.Equal(messageId2' messages.First().MessageId);                  }                  finally                  {                      try                      {                          await subscriptionClient.RemoveRuleAsync("RedSql");                          await subscriptionClient.AddRuleAsync(RuleDescription.DefaultRuleName' new TrueFilter());                      }                      catch (Exception e)                      {                          TestUtility.Log($" Cleanup failed with Exception: {e.Message}");                      }                        await subscriptionClient.CloseAsync();                      await topicClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SubscriptionClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SubscriptionClientTests.cs,SqlActionTestCase,The following statement contains a magic number: await ServiceBusScope.UsingTopicAsync(partitioned' sessionEnabled' async (topicName' subscriptionName) =>              {                  var topicClient = new TopicClient(TestUtility.NamespaceConnectionString' topicName);                  var subscriptionClient = new SubscriptionClient(                      TestUtility.NamespaceConnectionString'                      topicName'                      subscriptionName'                      ReceiveMode.ReceiveAndDelete);                    try                  {                      try                      {                          await subscriptionClient.RemoveRuleAsync(RuleDescription.DefaultRuleName);                      }                      catch                      {                          // ignored                      }                        await subscriptionClient.AddRuleAsync(new RuleDescription                      {                          Filter = new SqlFilter("Color = 'RedSqlAction'")'                          Action = new SqlRuleAction("SET Color = 'RedSqlActionProcessed'")'                          Name = "RedSqlAction"                      });                        var messageId1 = Guid.NewGuid().ToString();                      await topicClient.SendAsync(new Message                      {                          MessageId = messageId1'                          Label = "BlueSqlAction"'                          UserProperties = { { "color"' "BlueSqlAction" } }                      });                      TestUtility.Log($"Sent Message: {messageId1}");                        var messageId2 = Guid.NewGuid().ToString();                      await topicClient.SendAsync(new Message                      {                          MessageId = messageId2'                          Label = "RedSqlAction"'                          UserProperties = { { "color"' "RedSqlAction" } }                      });                      TestUtility.Log($"Sent Message: {messageId2}");                        var messages = await subscriptionClient.InnerSubscriptionClient.InnerReceiver.ReceiveAsync(maxMessageCount: 2);                      Assert.NotNull(messages);                      Assert.True(messages.Count == 1);                      Assert.Equal(messageId2' messages.First().MessageId);                      Assert.True(messages.First().UserProperties["color"].Equals("RedSqlActionProcessed"));                  }                  finally                  {                      await subscriptionClient.RemoveRuleAsync("RedSqlAction");                      await subscriptionClient.AddRuleAsync(RuleDescription.DefaultRuleName' new TrueFilter());                      await subscriptionClient.CloseAsync();                      await topicClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SubscriptionClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SubscriptionClientTests.cs,GetRulesTestCase,The following statement contains a magic number: await ServiceBusScope.UsingTopicAsync(partitioned: false' sessionEnabled: false' async (topicName' subscriptionName) =>              {                  var subscriptionClient = new SubscriptionClient(                      TestUtility.NamespaceConnectionString'                      topicName'                      subscriptionName'                      ReceiveMode.ReceiveAndDelete);                  var sqlRuleName = "sqlRule";                  var correlationRuleName = "correlationRule";                    try                  {                      var rules = (await subscriptionClient.GetRulesAsync()).ToList();                      Assert.Single(rules);                      var firstRule = rules[0];                      Assert.Equal(RuleDescription.DefaultRuleName' firstRule.Name);                      Assert.IsAssignableFrom<SqlFilter>(firstRule.Filter);                      Assert.Null(firstRule.Action);                        await subscriptionClient.AddRuleAsync(sqlRuleName' new SqlFilter("price > 10"));                        var ruleDescription = new RuleDescription(correlationRuleName)                      {                          Filter = new CorrelationFilter                          {                              CorrelationId = "correlationId"'                              Label = "label"'                              MessageId = "messageId"'                              Properties =                              {                                  {"key1"' "value1"}                              }'                              ReplyTo = "replyTo"'                              ReplyToSessionId = "replyToSessionId"'                              SessionId = "sessionId"'                              To = "to"                          }'                          Action = new SqlRuleAction("Set CorrelationId = 'newValue'")                      };                      await subscriptionClient.AddRuleAsync(ruleDescription);                        rules = (await subscriptionClient.GetRulesAsync()).ToList();                      Assert.Equal(3' rules.Count);                        var sqlRule = rules.FirstOrDefault(rule => rule.Name.Equals(sqlRuleName));                      Assert.NotNull(sqlRule);                      Assert.Null(sqlRule.Action);                      Assert.IsType<SqlFilter>(sqlRule.Filter);                      Assert.Equal("price > 10"' ((SqlFilter) sqlRule.Filter).SqlExpression);                        var correlationRule = rules.FirstOrDefault(rule => rule.Name.Equals(correlationRuleName));                      Assert.NotNull(correlationRule);                      Assert.IsType<SqlRuleAction>(correlationRule.Action);                      var sqlRuleAction = correlationRule.Action as SqlRuleAction;                      Assert.NotNull(sqlRuleAction);                      Assert.Equal("Set CorrelationId = 'newValue'"' sqlRuleAction.SqlExpression);                      Assert.IsType<CorrelationFilter>(correlationRule.Filter);                      var correlationFilter = correlationRule.Filter as CorrelationFilter;                      Assert.NotNull(correlationFilter);                      Assert.Equal("correlationId"' correlationFilter.CorrelationId);                      Assert.Equal("label"' correlationFilter.Label);                      Assert.Equal("messageId"' correlationFilter.MessageId);                      Assert.Equal("replyTo"' correlationFilter.ReplyTo);                      Assert.Equal("replyToSessionId"' correlationFilter.ReplyToSessionId);                      Assert.Equal("sessionId"' correlationFilter.SessionId);                      Assert.Equal("to"' correlationFilter.To);                      Assert.NotNull(correlationFilter.Properties);                      Assert.Equal("value1"' correlationFilter.Properties["key1"]);                  }                  finally                  {                      // Attempt to cleanup rules that may or may not exist; ignore any exceptions' as they're expected.                      var _ = Task.WhenAll(                          subscriptionClient.RemoveRuleAsync(sqlRuleName)'                          subscriptionClient.RemoveRuleAsync(correlationRuleName)).ConfigureAwait(false);                        await subscriptionClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SubscriptionClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SubscriptionClientTests.cs,UpdatingPrefetchCountOnSubscriptionClientUpdatesTheReceiverPrefetchCount,The following statement contains a magic number: await ServiceBusScope.UsingTopicAsync(partitioned: false' sessionEnabled: false' async (topicName' subscriptionName) =>              {                  var subscriptionClient = new SubscriptionClient(                      TestUtility.NamespaceConnectionString'                      topicName'                      subscriptionName'                      ReceiveMode.ReceiveAndDelete);                    try                  {                      Assert.Equal(0' subscriptionClient.PrefetchCount);                        subscriptionClient.PrefetchCount = 2;                      Assert.Equal(2' subscriptionClient.PrefetchCount);                      // Message receiver should be created with latest prefetch count (lazy load).                      Assert.Equal(2' subscriptionClient.InnerSubscriptionClient.InnerReceiver.PrefetchCount);                        subscriptionClient.PrefetchCount = 3;                      Assert.Equal(3' subscriptionClient.PrefetchCount);                      // Already created message receiver should have its prefetch value updated.                      Assert.Equal(3' subscriptionClient.InnerSubscriptionClient.InnerReceiver.PrefetchCount);                  }                  finally                  {                      await subscriptionClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SubscriptionClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SubscriptionClientTests.cs,UpdatingPrefetchCountOnSubscriptionClientUpdatesTheReceiverPrefetchCount,The following statement contains a magic number: await ServiceBusScope.UsingTopicAsync(partitioned: false' sessionEnabled: false' async (topicName' subscriptionName) =>              {                  var subscriptionClient = new SubscriptionClient(                      TestUtility.NamespaceConnectionString'                      topicName'                      subscriptionName'                      ReceiveMode.ReceiveAndDelete);                    try                  {                      Assert.Equal(0' subscriptionClient.PrefetchCount);                        subscriptionClient.PrefetchCount = 2;                      Assert.Equal(2' subscriptionClient.PrefetchCount);                      // Message receiver should be created with latest prefetch count (lazy load).                      Assert.Equal(2' subscriptionClient.InnerSubscriptionClient.InnerReceiver.PrefetchCount);                        subscriptionClient.PrefetchCount = 3;                      Assert.Equal(3' subscriptionClient.PrefetchCount);                      // Already created message receiver should have its prefetch value updated.                      Assert.Equal(3' subscriptionClient.InnerSubscriptionClient.InnerReceiver.PrefetchCount);                  }                  finally                  {                      await subscriptionClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SubscriptionClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SubscriptionClientTests.cs,UpdatingPrefetchCountOnSubscriptionClientUpdatesTheReceiverPrefetchCount,The following statement contains a magic number: await ServiceBusScope.UsingTopicAsync(partitioned: false' sessionEnabled: false' async (topicName' subscriptionName) =>              {                  var subscriptionClient = new SubscriptionClient(                      TestUtility.NamespaceConnectionString'                      topicName'                      subscriptionName'                      ReceiveMode.ReceiveAndDelete);                    try                  {                      Assert.Equal(0' subscriptionClient.PrefetchCount);                        subscriptionClient.PrefetchCount = 2;                      Assert.Equal(2' subscriptionClient.PrefetchCount);                      // Message receiver should be created with latest prefetch count (lazy load).                      Assert.Equal(2' subscriptionClient.InnerSubscriptionClient.InnerReceiver.PrefetchCount);                        subscriptionClient.PrefetchCount = 3;                      Assert.Equal(3' subscriptionClient.PrefetchCount);                      // Already created message receiver should have its prefetch value updated.                      Assert.Equal(3' subscriptionClient.InnerSubscriptionClient.InnerReceiver.PrefetchCount);                  }                  finally                  {                      await subscriptionClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SubscriptionClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SubscriptionClientTests.cs,UpdatingPrefetchCountOnSubscriptionClientUpdatesTheReceiverPrefetchCount,The following statement contains a magic number: await ServiceBusScope.UsingTopicAsync(partitioned: false' sessionEnabled: false' async (topicName' subscriptionName) =>              {                  var subscriptionClient = new SubscriptionClient(                      TestUtility.NamespaceConnectionString'                      topicName'                      subscriptionName'                      ReceiveMode.ReceiveAndDelete);                    try                  {                      Assert.Equal(0' subscriptionClient.PrefetchCount);                        subscriptionClient.PrefetchCount = 2;                      Assert.Equal(2' subscriptionClient.PrefetchCount);                      // Message receiver should be created with latest prefetch count (lazy load).                      Assert.Equal(2' subscriptionClient.InnerSubscriptionClient.InnerReceiver.PrefetchCount);                        subscriptionClient.PrefetchCount = 3;                      Assert.Equal(3' subscriptionClient.PrefetchCount);                      // Already created message receiver should have its prefetch value updated.                      Assert.Equal(3' subscriptionClient.InnerSubscriptionClient.InnerReceiver.PrefetchCount);                  }                  finally                  {                      await subscriptionClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SubscriptionClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SubscriptionClientTests.cs,UpdatingPrefetchCountOnSubscriptionClientUpdatesTheReceiverPrefetchCount,The following statement contains a magic number: await ServiceBusScope.UsingTopicAsync(partitioned: false' sessionEnabled: false' async (topicName' subscriptionName) =>              {                  var subscriptionClient = new SubscriptionClient(                      TestUtility.NamespaceConnectionString'                      topicName'                      subscriptionName'                      ReceiveMode.ReceiveAndDelete);                    try                  {                      Assert.Equal(0' subscriptionClient.PrefetchCount);                        subscriptionClient.PrefetchCount = 2;                      Assert.Equal(2' subscriptionClient.PrefetchCount);                      // Message receiver should be created with latest prefetch count (lazy load).                      Assert.Equal(2' subscriptionClient.InnerSubscriptionClient.InnerReceiver.PrefetchCount);                        subscriptionClient.PrefetchCount = 3;                      Assert.Equal(3' subscriptionClient.PrefetchCount);                      // Already created message receiver should have its prefetch value updated.                      Assert.Equal(3' subscriptionClient.InnerSubscriptionClient.InnerReceiver.PrefetchCount);                  }                  finally                  {                      await subscriptionClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,SubscriptionClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\SubscriptionClientTests.cs,UpdatingPrefetchCountOnSubscriptionClientUpdatesTheReceiverPrefetchCount,The following statement contains a magic number: await ServiceBusScope.UsingTopicAsync(partitioned: false' sessionEnabled: false' async (topicName' subscriptionName) =>              {                  var subscriptionClient = new SubscriptionClient(                      TestUtility.NamespaceConnectionString'                      topicName'                      subscriptionName'                      ReceiveMode.ReceiveAndDelete);                    try                  {                      Assert.Equal(0' subscriptionClient.PrefetchCount);                        subscriptionClient.PrefetchCount = 2;                      Assert.Equal(2' subscriptionClient.PrefetchCount);                      // Message receiver should be created with latest prefetch count (lazy load).                      Assert.Equal(2' subscriptionClient.InnerSubscriptionClient.InnerReceiver.PrefetchCount);                        subscriptionClient.PrefetchCount = 3;                      Assert.Equal(3' subscriptionClient.PrefetchCount);                      // Already created message receiver should have its prefetch value updated.                      Assert.Equal(3' subscriptionClient.InnerSubscriptionClient.InnerReceiver.PrefetchCount);                  }                  finally                  {                      await subscriptionClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TestSessionHandler,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TestSessionHandler.cs,VerifyRun,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TestSessionHandler,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TestSessionHandler.cs,VerifyRun,The following statement contains a magic number: stopwatch.Elapsed.TotalSeconds <= 180
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TokenProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TokenProviderTests.cs,SasTokenWithLargeExpiryTimeShouldBeAccepted,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var csb = new ServiceBusConnectionStringBuilder(TestUtility.NamespaceConnectionString);                  var tokenProvider = TokenProvider.CreateSharedAccessSignatureTokenProvider(csb.SasKeyName' csb.SasKey' TimeSpan.FromDays(100));                  var connection = new ServiceBusConnection(csb)                  {                      TokenProvider = tokenProvider                  };                  var receiver = new MessageReceiver(connection' queueName' ReceiveMode.PeekLock' RetryPolicy.Default);                    try                  {                      var msg = await receiver.ReceiveAsync(TimeSpan.FromSeconds(5)).ConfigureAwait(false);                  }                  finally                  {                      await receiver.CloseAsync().ConfigureAwait(false);                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TokenProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TokenProviderTests.cs,SasTokenWithLargeExpiryTimeShouldBeAccepted,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var csb = new ServiceBusConnectionStringBuilder(TestUtility.NamespaceConnectionString);                  var tokenProvider = TokenProvider.CreateSharedAccessSignatureTokenProvider(csb.SasKeyName' csb.SasKey' TimeSpan.FromDays(100));                  var connection = new ServiceBusConnection(csb)                  {                      TokenProvider = tokenProvider                  };                  var receiver = new MessageReceiver(connection' queueName' ReceiveMode.PeekLock' RetryPolicy.Default);                    try                  {                      var msg = await receiver.ReceiveAsync(TimeSpan.FromSeconds(5)).ConfigureAwait(false);                  }                  finally                  {                      await receiver.CloseAsync().ConfigureAwait(false);                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TokenProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TokenProviderTests.cs,AzureActiveDirectoryTokenProviderAuthCallbackTest,The following statement contains a magic number: var token = await aadTokenProvider.GetTokenAsync(csb.Endpoint' TimeSpan.FromSeconds(60));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionalSendRollbackTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned' sessionEnabled' async queueName =>              {                  var sender = new MessageSender(ConnectionString' queueName);                  var receiver = new MessageReceiver(ConnectionString' queueName);                    try                  {                      string body = Guid.NewGuid().ToString("N");                      var message = new Message(body.GetBytes()) { PartitionKey = "pk" };                      using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                      {                          await sender.SendAsync(message).ConfigureAwait(false);                      }                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        var receivedMessage = await receiver.ReceiveAsync(ReceiveTimeout);                      Assert.Null(receivedMessage);                  }                  finally                  {                      await sender.CloseAsync();                      await receiver.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionalCompleteCommitTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned' sessionEnabled' async queueName =>              {                  var sender = new MessageSender(ConnectionString' queueName);                  var receiver = new MessageReceiver(ConnectionString' queueName);                    try                  {                      string body = Guid.NewGuid().ToString("N");                      var message = new Message(body.GetBytes());                      await sender.SendAsync(message).ConfigureAwait(false);                        var receivedMessage = await receiver.ReceiveAsync(ReceiveTimeout);                      Assert.NotNull(receivedMessage);                      Assert.Equal(body' receivedMessage.Body.GetString());                        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                      {                          await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken);                          ts.Complete();                      }                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        await Assert.ThrowsAsync<MessageLockLostException>(async () => await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken));                  }                  finally                  {                      await sender.CloseAsync();                      await receiver.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionalCompleteRollbackTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned' sessionEnabled' async queueName =>              {                  var sender = new MessageSender(ConnectionString' queueName);                  var receiver = new MessageReceiver(ConnectionString' queueName);                    try                  {                      string body = Guid.NewGuid().ToString("N");                      var message = new Message(body.GetBytes());                      await sender.SendAsync(message).ConfigureAwait(false);                        var receivedMessage = await receiver.ReceiveAsync(ReceiveTimeout);                      Assert.NotNull(receivedMessage);                      Assert.Equal(body' receivedMessage.Body.GetString());                        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                      {                          await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken);                      }                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken);                  }                  finally                  {                      await sender.CloseAsync();                      await receiver.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionalSessionDispositionTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned' sessionEnabled' async queueName =>              {                  var sender = new MessageSender(ConnectionString' queueName);                  var sessionClient = new SessionClient(ConnectionString' queueName);                  IMessageSession receiver = null;                    try                  {                      string body = Guid.NewGuid().ToString("N");                      var message = new Message(body.GetBytes())                      {                          SessionId = body                      };                      await sender.SendAsync(message).ConfigureAwait(false);                        receiver = await sessionClient.AcceptMessageSessionAsync(body);                        var receivedMessage = await receiver.ReceiveAsync(ReceiveTimeout);                      Assert.NotNull(receivedMessage);                      Assert.Equal(body' receivedMessage.Body.GetString());                        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                      {                          await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken);                      }                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                      {                          await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken);                          ts.Complete();                      }                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        await Assert.ThrowsAsync<SessionLockLostException>(async () => await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken));                  }                  finally                  {                      await sender.CloseAsync();                      await sessionClient.CloseAsync();                      await receiver?.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionalSessionDispositionTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned' sessionEnabled' async queueName =>              {                  var sender = new MessageSender(ConnectionString' queueName);                  var sessionClient = new SessionClient(ConnectionString' queueName);                  IMessageSession receiver = null;                    try                  {                      string body = Guid.NewGuid().ToString("N");                      var message = new Message(body.GetBytes())                      {                          SessionId = body                      };                      await sender.SendAsync(message).ConfigureAwait(false);                        receiver = await sessionClient.AcceptMessageSessionAsync(body);                        var receivedMessage = await receiver.ReceiveAsync(ReceiveTimeout);                      Assert.NotNull(receivedMessage);                      Assert.Equal(body' receivedMessage.Body.GetString());                        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                      {                          await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken);                      }                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                      {                          await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken);                          ts.Complete();                      }                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        await Assert.ThrowsAsync<SessionLockLostException>(async () => await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken));                  }                  finally                  {                      await sender.CloseAsync();                      await sessionClient.CloseAsync();                      await receiver?.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionalRequestResponseDispositionTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned' sessionEnabled' async queueName =>              {                  var sender = new MessageSender(ConnectionString' queueName);                  var receiver = new MessageReceiver(ConnectionString' queueName);                    try                  {                      string body = Guid.NewGuid().ToString("N");                      var message = new Message(body.GetBytes());                      await sender.SendAsync(message).ConfigureAwait(false);                        var receivedMessage = await receiver.ReceiveAsync(ReceiveTimeout);                      Assert.NotNull(receivedMessage);                      Assert.Equal(body' receivedMessage.Body.GetString());                      var sequenceNumber = receivedMessage.SystemProperties.SequenceNumber;                      await receiver.DeferAsync(receivedMessage.SystemProperties.LockToken);                        var deferredMessage = await receiver.ReceiveDeferredMessageAsync(sequenceNumber);                        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                      {                          await receiver.CompleteAsync(deferredMessage.SystemProperties.LockToken);                      }                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                      {                          await receiver.CompleteAsync(deferredMessage.SystemProperties.LockToken);                          ts.Complete();                      }                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        await Assert.ThrowsAsync<MessageLockLostException>(async () => await receiver.CompleteAsync(deferredMessage.SystemProperties.LockToken));                  }                  finally                  {                      await sender.CloseAsync();                      await receiver.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionalRequestResponseDispositionTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned' sessionEnabled' async queueName =>              {                  var sender = new MessageSender(ConnectionString' queueName);                  var receiver = new MessageReceiver(ConnectionString' queueName);                    try                  {                      string body = Guid.NewGuid().ToString("N");                      var message = new Message(body.GetBytes());                      await sender.SendAsync(message).ConfigureAwait(false);                        var receivedMessage = await receiver.ReceiveAsync(ReceiveTimeout);                      Assert.NotNull(receivedMessage);                      Assert.Equal(body' receivedMessage.Body.GetString());                      var sequenceNumber = receivedMessage.SystemProperties.SequenceNumber;                      await receiver.DeferAsync(receivedMessage.SystemProperties.LockToken);                        var deferredMessage = await receiver.ReceiveDeferredMessageAsync(sequenceNumber);                        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                      {                          await receiver.CompleteAsync(deferredMessage.SystemProperties.LockToken);                      }                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                      {                          await receiver.CompleteAsync(deferredMessage.SystemProperties.LockToken);                          ts.Complete();                      }                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        await Assert.ThrowsAsync<MessageLockLostException>(async () => await receiver.CompleteAsync(deferredMessage.SystemProperties.LockToken));                  }                  finally                  {                      await sender.CloseAsync();                      await receiver.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionThrowsWhenOperationsOfDifferentPartitionsAreInSameTransaction,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(ConnectionString' queueName);                  var receiver = new MessageReceiver(ConnectionString' queueName);                    try                  {                      string body = Guid.NewGuid().ToString("N");                      var message1 = new Message((body + "1").GetBytes())                      {                          PartitionKey = "1"                      };                      var message2 = new Message((body + "2").GetBytes())                      {                          PartitionKey = "2"                      };                        // Two send operations to different partitions.                      var transaction = new CommittableTransaction();                      using (TransactionScope ts = new TransactionScope(transaction' TransactionScopeAsyncFlowOption.Enabled))                      {                          await sender.SendAsync(message1);                            await Assert.ThrowsAsync<InvalidOperationException>(                              async () => await sender.SendAsync(message2));                          ts.Complete();                      }                        transaction.Rollback();                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        // Two complete operations to different partitions.                      await sender.SendAsync(message1);                      await sender.SendAsync(message2);                        var receivedMessage1 = await receiver.ReceiveAsync(ReceiveTimeout);                      Assert.NotNull(receivedMessage1);                      var receivedMessage2 = await receiver.ReceiveAsync(ReceiveTimeout);                      Assert.NotNull(receivedMessage2);                        transaction = new CommittableTransaction();                      using (TransactionScope ts = new TransactionScope(transaction' TransactionScopeAsyncFlowOption.Enabled))                      {                          await receiver.CompleteAsync(receivedMessage1.SystemProperties.LockToken);                            await Assert.ThrowsAsync<InvalidOperationException>(                              async () => await receiver.CompleteAsync(receivedMessage2.SystemProperties.LockToken));                          ts.Complete();                      }                        transaction.Rollback();                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        await receiver.CompleteAsync(receivedMessage1.SystemProperties.LockToken);                      await receiver.CompleteAsync(receivedMessage2.SystemProperties.LockToken);                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                  }                  finally                  {                      await sender.CloseAsync();                      await receiver.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionThrowsWhenOperationsOfDifferentPartitionsAreInSameTransaction,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var sender = new MessageSender(ConnectionString' queueName);                  var receiver = new MessageReceiver(ConnectionString' queueName);                    try                  {                      string body = Guid.NewGuid().ToString("N");                      var message1 = new Message((body + "1").GetBytes())                      {                          PartitionKey = "1"                      };                      var message2 = new Message((body + "2").GetBytes())                      {                          PartitionKey = "2"                      };                        // Two send operations to different partitions.                      var transaction = new CommittableTransaction();                      using (TransactionScope ts = new TransactionScope(transaction' TransactionScopeAsyncFlowOption.Enabled))                      {                          await sender.SendAsync(message1);                            await Assert.ThrowsAsync<InvalidOperationException>(                              async () => await sender.SendAsync(message2));                          ts.Complete();                      }                        transaction.Rollback();                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        // Two complete operations to different partitions.                      await sender.SendAsync(message1);                      await sender.SendAsync(message2);                        var receivedMessage1 = await receiver.ReceiveAsync(ReceiveTimeout);                      Assert.NotNull(receivedMessage1);                      var receivedMessage2 = await receiver.ReceiveAsync(ReceiveTimeout);                      Assert.NotNull(receivedMessage2);                        transaction = new CommittableTransaction();                      using (TransactionScope ts = new TransactionScope(transaction' TransactionScopeAsyncFlowOption.Enabled))                      {                          await receiver.CompleteAsync(receivedMessage1.SystemProperties.LockToken);                            await Assert.ThrowsAsync<InvalidOperationException>(                              async () => await receiver.CompleteAsync(receivedMessage2.SystemProperties.LockToken));                          ts.Complete();                      }                        transaction.Rollback();                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        await receiver.CompleteAsync(receivedMessage1.SystemProperties.LockToken);                      await receiver.CompleteAsync(receivedMessage2.SystemProperties.LockToken);                  }                  catch (Exception e)                  {                      Console.WriteLine(e);                  }                  finally                  {                      await sender.CloseAsync();                      await receiver.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionCommitWorksAcrossClientsUsingSameConnectionToSameEntity,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var connection = new ServiceBusConnection(ConnectionString);                  var sender = new MessageSender(connection' queueName);                  var receiver = new MessageReceiver(connection' queueName);                    try                  {                      string body1 = Guid.NewGuid().ToString("N");                      string body2 = Guid.NewGuid().ToString("N");                      var message = new Message(body1.GetBytes());                      var message2 = new Message(body2.GetBytes());                      await sender.SendAsync(message).ConfigureAwait(false);                        var receivedMessage = await receiver.ReceiveAsync(ReceiveTimeout);                      Assert.NotNull(receivedMessage);                      Assert.Equal(body1' receivedMessage.Body.GetString());                        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                      {                          await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken);                          await sender.SendAsync(message2).ConfigureAwait(false);                          ts.Complete();                      }                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        // Assert that complete did succeed                      await Assert.ThrowsAsync<MessageLockLostException>(async () => await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken));                        // Assert that send did succeed                      receivedMessage = await receiver.ReceiveAsync(ReceiveTimeout);                      Assert.NotNull(receivedMessage);                      Assert.Equal(body2' receivedMessage.Body.GetString());                      await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken);                  }                  finally                  {                      await sender.CloseAsync();                      await receiver.CloseAsync();                      await connection.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,TransactionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\TransactionTests.cs,TransactionRollbackWorksAcrossClientsUsingSameConnectionToSameEntity,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var connection = new ServiceBusConnection(ConnectionString);                  var sender = new MessageSender(connection' queueName);                  var receiver = new MessageReceiver(connection' queueName);                    try                  {                      string body1 = Guid.NewGuid().ToString("N");                      string body2 = Guid.NewGuid().ToString("N");                      var message = new Message(body1.GetBytes());                      var message2 = new Message(body2.GetBytes());                      await sender.SendAsync(message).ConfigureAwait(false);                        var receivedMessage = await receiver.ReceiveAsync(ReceiveTimeout);                      Assert.NotNull(receivedMessage);                      Assert.Equal(body1' receivedMessage.Body.GetString());                        using (var ts = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                      {                          await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken);                          await sender.SendAsync(message2).ConfigureAwait(false);                      }                        // Adding delay since transaction Commit/Rollback is an asynchronous operation.                      // Operating on the same message should not be done.                      await Task.Delay(TimeSpan.FromSeconds(2));                        // Following should succeed without exceptions                      await receiver.CompleteAsync(receivedMessage.SystemProperties.LockToken);                        // Assert that send failed                      receivedMessage = await receiver.ReceiveAsync(ReceiveTimeout);                      Assert.Null(receivedMessage);                  }                  finally                  {                      await sender.CloseAsync();                      await receiver.CloseAsync();                      await connection.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests,WebSocketsEnd2EndTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\WebSocketsEnd2EndTests.cs,SendAndReceiveWithWebSocketsTest,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var tcs = new TaskCompletionSource<Message>(TaskCreationOptions.RunContinuationsAsynchronously);                  var queueClient = new QueueClient(TestUtility.WebSocketsNamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                    try                  {                      var random = new Random();                      var contentAsBytes = new byte[8];                      random.NextBytes(contentAsBytes);                        queueClient.RegisterMessageHandler((message' token) =>                      {                          tcs.TrySetResult(message);                          return Task.CompletedTask;                      }'                      exceptionReceivedArgs =>                      {                          tcs.TrySetException(exceptionReceivedArgs.Exception);                          return Task.CompletedTask;                      });                        await queueClient.SendAsync(new Message(contentAsBytes));                        var receivedMessage = await tcs.Task.WithTimeout(Timeout);                      Assert.Equal(contentAsBytes' receivedMessage.Body);                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,ExtractActivityTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\ExtractActivityTests.cs,ValidIdAndMultipleContextAreExtracted,The following statement contains a magic number: Assert.Equal(3' baggage.Count);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,SendAndHandlerFireEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.PeekLock);                  var eventQueue = this.CreateEventQueue();                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          listener.Enable((name' queue' arg) => !name.Contains("Receive") && !name.Contains("Exception"));                            var parentActivity = new Activity("test").AddBaggage("k1"' "v1").AddBaggage("k2"' "v2");                            parentActivity.Start();                          await TestUtility.SendSessionMessagesAsync(queueClient.InnerSender' 1' 1);                          parentActivity.Stop();                            var exceptionCalled = false;                          var tcs = new TaskCompletionSource<Activity>(TaskCreationOptions.RunContinuationsAsynchronously);                            queueClient.RegisterMessageHandler((msg' ct) =>                          {                              tcs.TrySetResult(Activity.Current);                              return Task.CompletedTask;                          }'                          exArgs =>                          {                              // Do not set the completion source exception to avoid throwing                              // when the task is awaited.  The sentinal variable is checked to detect                              // exception cases.                              exceptionCalled = true;                              return Task.CompletedTask;                          });                            var processActivity = await tcs.Task.WithTimeout(DefaultTimeout);                            Assert.True(eventQueue.TryDequeue(out var sendStart));                          AssertSendStart(queueName' sendStart.eventName' sendStart.payload' sendStart.activity' parentActivity);                            Assert.True(eventQueue.TryDequeue(out var sendStop));                          AssertSendStop(queueName' sendStop.eventName' sendStop.payload' sendStop.activity' sendStart.activity);                            Assert.True(eventQueue.TryDequeue(out var processStart));                          AssertProcessStart(queueName' processStart.eventName' processStart.payload' processStart.activity' sendStart.activity);                            // message is processed' but complete happens after that                          // let's wat until Complete starts and ends and Process ends                          int wait = 0;                          while (wait++ < MaxWaitSec && eventQueue.Count < 3)                          {                              await Task.Delay(TimeSpan.FromSeconds(1));                          }                            Assert.True(eventQueue.TryDequeue(out var completeStart));                          AssertCompleteStart(queueName' completeStart.eventName' completeStart.payload' completeStart.activity' processStart.activity);                            Assert.True(eventQueue.TryDequeue(out var completeStop));                          AssertCompleteStop(queueName' completeStop.eventName' completeStop.payload' completeStop.activity' completeStart.activity' processStart.activity);                            Assert.True(eventQueue.TryDequeue(out var processStop));                          AssertProcessStop(queueName' processStop.eventName' processStop.payload' processStop.activity' processStart.activity);                            Assert.False(eventQueue.TryDequeue(out var evnt));                            Assert.Equal(processStop.activity' processActivity);                          Assert.False(exceptionCalled);                      }                  }                  finally                  {                      await queueClient?.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,SendAndHandlerFireExceptionEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.PeekLock);                  var eventQueue = this.CreateEventQueue();                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 1);                          listener.Enable((name' queue' arg) => !name.EndsWith(".Start") && !name.Contains("Receive") );                            var count = 0;                          var exceptionCalled = false;                          var tcs = new TaskCompletionSource<int>(TaskCreationOptions.RunContinuationsAsynchronously);                            queueClient.RegisterMessageHandler((msg' ct) =>                          {                              if (count++ == 0)                              {                                  throw new Exception("123");                              }                              tcs.TrySetResult(count);                              return Task.CompletedTask;                          }'                          exArgs =>                          {                              // Do not set the completion source exception to avoid throwing                              // when the task is awaited.  The sentinal variable is checked to detect                              // exception cases.                              exceptionCalled = true;                              return Task.CompletedTask;                          });                            await tcs.Task.WithTimeout(DefaultTimeout);                          Assert.True(exceptionCalled);                            // message is processed' but abandon happens after that                          // let's spin until Complete call starts and ends                          int wait = 0;                          while (wait++ < MaxWaitSec && eventQueue.Count < 3)                          {                              await Task.Delay(TimeSpan.FromSeconds(1));                          }                            Assert.True(eventQueue.TryDequeue(out var abandonStop));                          AssertAbandonStop(queueName' abandonStop.eventName' abandonStop.payload' abandonStop.activity' null);                            Assert.True(eventQueue.TryDequeue(out var exception));                          AssertException(queueName' exception.eventName' exception.payload' exception.activity' null);                            Assert.True(eventQueue.TryDequeue(out var processStop));                          AssertProcessStop(queueName' processStop.eventName' processStop.payload' processStop.activity' null);                            Assert.Equal(processStop.activity' abandonStop.activity.Parent);                          Assert.Equal(processStop.activity' exception.activity);                            // message will be processed and compelted again                          wait = 0;                          while (wait++ < MaxWaitSec && eventQueue.Count < 2 )                          {                              await Task.Delay(TimeSpan.FromSeconds(1));                          }                            Assert.True(eventQueue.TryDequeue(out var completeStop));                          AssertCompleteStop(queueName' completeStop.eventName' completeStop.payload' completeStop.activity' null' null);                            Assert.True(eventQueue.TryDequeue(out processStop));                          AssertProcessStop(queueName' processStop.eventName' processStop.payload' processStop.activity' null);                            Assert.True(eventQueue.IsEmpty' "There were events present when none were expected");                      }                  }                  finally                  {                      await queueClient?.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,SendAndHandlerFireExceptionEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.PeekLock);                  var eventQueue = this.CreateEventQueue();                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 1);                          listener.Enable((name' queue' arg) => !name.EndsWith(".Start") && !name.Contains("Receive") );                            var count = 0;                          var exceptionCalled = false;                          var tcs = new TaskCompletionSource<int>(TaskCreationOptions.RunContinuationsAsynchronously);                            queueClient.RegisterMessageHandler((msg' ct) =>                          {                              if (count++ == 0)                              {                                  throw new Exception("123");                              }                              tcs.TrySetResult(count);                              return Task.CompletedTask;                          }'                          exArgs =>                          {                              // Do not set the completion source exception to avoid throwing                              // when the task is awaited.  The sentinal variable is checked to detect                              // exception cases.                              exceptionCalled = true;                              return Task.CompletedTask;                          });                            await tcs.Task.WithTimeout(DefaultTimeout);                          Assert.True(exceptionCalled);                            // message is processed' but abandon happens after that                          // let's spin until Complete call starts and ends                          int wait = 0;                          while (wait++ < MaxWaitSec && eventQueue.Count < 3)                          {                              await Task.Delay(TimeSpan.FromSeconds(1));                          }                            Assert.True(eventQueue.TryDequeue(out var abandonStop));                          AssertAbandonStop(queueName' abandonStop.eventName' abandonStop.payload' abandonStop.activity' null);                            Assert.True(eventQueue.TryDequeue(out var exception));                          AssertException(queueName' exception.eventName' exception.payload' exception.activity' null);                            Assert.True(eventQueue.TryDequeue(out var processStop));                          AssertProcessStop(queueName' processStop.eventName' processStop.payload' processStop.activity' null);                            Assert.Equal(processStop.activity' abandonStop.activity.Parent);                          Assert.Equal(processStop.activity' exception.activity);                            // message will be processed and compelted again                          wait = 0;                          while (wait++ < MaxWaitSec && eventQueue.Count < 2 )                          {                              await Task.Delay(TimeSpan.FromSeconds(1));                          }                            Assert.True(eventQueue.TryDequeue(out var completeStop));                          AssertCompleteStop(queueName' completeStop.eventName' completeStop.payload' completeStop.activity' null' null);                            Assert.True(eventQueue.TryDequeue(out processStop));                          AssertProcessStop(queueName' processStop.eventName' processStop.payload' processStop.activity' null);                            Assert.True(eventQueue.IsEmpty' "There were events present when none were expected");                      }                  }                  finally                  {                      await queueClient?.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,ReceiveNoMessageFireEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                  var eventQueue = this.CreateEventQueue();                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          listener.Enable((name' queue' arg) => name.Contains("Send") || name.Contains("Receive"));                          var messages = await queueClient.InnerReceiver.ReceiveAsync(2' TimeSpan.FromSeconds(5));                            int receivedStopCount = 0;                          Assert.Equal(2' eventQueue.Count);                          while (eventQueue.TryDequeue(out var receiveStart))                          {                              var startCount = AssertReceiveStart(queueName' receiveStart.eventName' receiveStart.payload' receiveStart.activity' -1);                                Assert.True(eventQueue.TryDequeue(out var receiveStop));                              receivedStopCount += AssertReceiveStop(queueName' receiveStop.eventName' receiveStop.payload' receiveStop.activity' receiveStart.activity' null' startCount' -1);                          }                            Assert.Equal(0' receivedStopCount);                          Assert.True(eventQueue.IsEmpty' "There were events present when none were expected");                      }                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,ReceiveNoMessageFireEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                  var eventQueue = this.CreateEventQueue();                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          listener.Enable((name' queue' arg) => name.Contains("Send") || name.Contains("Receive"));                          var messages = await queueClient.InnerReceiver.ReceiveAsync(2' TimeSpan.FromSeconds(5));                            int receivedStopCount = 0;                          Assert.Equal(2' eventQueue.Count);                          while (eventQueue.TryDequeue(out var receiveStart))                          {                              var startCount = AssertReceiveStart(queueName' receiveStart.eventName' receiveStart.payload' receiveStart.activity' -1);                                Assert.True(eventQueue.TryDequeue(out var receiveStop));                              receivedStopCount += AssertReceiveStop(queueName' receiveStop.eventName' receiveStop.payload' receiveStop.activity' receiveStart.activity' null' startCount' -1);                          }                            Assert.Equal(0' receivedStopCount);                          Assert.True(eventQueue.IsEmpty' "There were events present when none were expected");                      }                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,ReceiveNoMessageFireEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                  var eventQueue = this.CreateEventQueue();                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          listener.Enable((name' queue' arg) => name.Contains("Send") || name.Contains("Receive"));                          var messages = await queueClient.InnerReceiver.ReceiveAsync(2' TimeSpan.FromSeconds(5));                            int receivedStopCount = 0;                          Assert.Equal(2' eventQueue.Count);                          while (eventQueue.TryDequeue(out var receiveStart))                          {                              var startCount = AssertReceiveStart(queueName' receiveStart.eventName' receiveStart.payload' receiveStart.activity' -1);                                Assert.True(eventQueue.TryDequeue(out var receiveStop));                              receivedStopCount += AssertReceiveStop(queueName' receiveStop.eventName' receiveStop.payload' receiveStop.activity' receiveStart.activity' null' startCount' -1);                          }                            Assert.Equal(0' receivedStopCount);                          Assert.True(eventQueue.IsEmpty' "There were events present when none were expected");                      }                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,BatchSendReceiveFireEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                  var eventQueue = this.CreateEventQueue();                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          listener.Enable( (name' queue' arg) => name.Contains("Send") || name.Contains("Receive") );                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 2);                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 3);                          var messages = await TestUtility.ReceiveMessagesAsync(queueClient.InnerReceiver' 5);                            Assert.True(eventQueue.TryDequeue(out var sendStart1));                          AssertSendStart(queueName' sendStart1.eventName' sendStart1.payload' sendStart1.activity' null' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStop1));                          AssertSendStop(queueName' sendStop1.eventName' sendStop1.payload' sendStop1.activity' sendStop1.activity' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStart2));                          AssertSendStart(queueName' sendStart2.eventName' sendStart2.payload' sendStart2.activity' null' 3);                            Assert.True(eventQueue.TryDequeue(out var sendStop2));                          AssertSendStop(queueName' sendStop2.eventName' sendStop2.payload' sendStop2.activity' sendStop2.activity' 3);                            int receivedStopCount = 0;                          string relatedTo = "";                          while (eventQueue.TryDequeue(out var receiveStart))                          {                              var startCount = AssertReceiveStart(queueName' receiveStart.eventName' receiveStart.payload' receiveStart.activity' -1);                                Assert.True(eventQueue.TryDequeue(out var receiveStop));                                receivedStopCount +=                                  AssertReceiveStop(queueName' receiveStop.eventName' receiveStop.payload' receiveStop.activity' receiveStart.activity' null' startCount' -1);                                relatedTo += receiveStop.activity.Tags.Single(t => t.Key == "RelatedTo").Value;                          }                            Assert.Equal(5' receivedStopCount);                          Assert.Contains(sendStart1.activity.Id' relatedTo);                          Assert.Contains(sendStart2.activity.Id' relatedTo);                            Assert.True(eventQueue.IsEmpty' "There were events present when none were expected");                      }                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,BatchSendReceiveFireEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                  var eventQueue = this.CreateEventQueue();                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          listener.Enable( (name' queue' arg) => name.Contains("Send") || name.Contains("Receive") );                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 2);                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 3);                          var messages = await TestUtility.ReceiveMessagesAsync(queueClient.InnerReceiver' 5);                            Assert.True(eventQueue.TryDequeue(out var sendStart1));                          AssertSendStart(queueName' sendStart1.eventName' sendStart1.payload' sendStart1.activity' null' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStop1));                          AssertSendStop(queueName' sendStop1.eventName' sendStop1.payload' sendStop1.activity' sendStop1.activity' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStart2));                          AssertSendStart(queueName' sendStart2.eventName' sendStart2.payload' sendStart2.activity' null' 3);                            Assert.True(eventQueue.TryDequeue(out var sendStop2));                          AssertSendStop(queueName' sendStop2.eventName' sendStop2.payload' sendStop2.activity' sendStop2.activity' 3);                            int receivedStopCount = 0;                          string relatedTo = "";                          while (eventQueue.TryDequeue(out var receiveStart))                          {                              var startCount = AssertReceiveStart(queueName' receiveStart.eventName' receiveStart.payload' receiveStart.activity' -1);                                Assert.True(eventQueue.TryDequeue(out var receiveStop));                                receivedStopCount +=                                  AssertReceiveStop(queueName' receiveStop.eventName' receiveStop.payload' receiveStop.activity' receiveStart.activity' null' startCount' -1);                                relatedTo += receiveStop.activity.Tags.Single(t => t.Key == "RelatedTo").Value;                          }                            Assert.Equal(5' receivedStopCount);                          Assert.Contains(sendStart1.activity.Id' relatedTo);                          Assert.Contains(sendStart2.activity.Id' relatedTo);                            Assert.True(eventQueue.IsEmpty' "There were events present when none were expected");                      }                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,BatchSendReceiveFireEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                  var eventQueue = this.CreateEventQueue();                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          listener.Enable( (name' queue' arg) => name.Contains("Send") || name.Contains("Receive") );                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 2);                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 3);                          var messages = await TestUtility.ReceiveMessagesAsync(queueClient.InnerReceiver' 5);                            Assert.True(eventQueue.TryDequeue(out var sendStart1));                          AssertSendStart(queueName' sendStart1.eventName' sendStart1.payload' sendStart1.activity' null' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStop1));                          AssertSendStop(queueName' sendStop1.eventName' sendStop1.payload' sendStop1.activity' sendStop1.activity' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStart2));                          AssertSendStart(queueName' sendStart2.eventName' sendStart2.payload' sendStart2.activity' null' 3);                            Assert.True(eventQueue.TryDequeue(out var sendStop2));                          AssertSendStop(queueName' sendStop2.eventName' sendStop2.payload' sendStop2.activity' sendStop2.activity' 3);                            int receivedStopCount = 0;                          string relatedTo = "";                          while (eventQueue.TryDequeue(out var receiveStart))                          {                              var startCount = AssertReceiveStart(queueName' receiveStart.eventName' receiveStart.payload' receiveStart.activity' -1);                                Assert.True(eventQueue.TryDequeue(out var receiveStop));                                receivedStopCount +=                                  AssertReceiveStop(queueName' receiveStop.eventName' receiveStop.payload' receiveStop.activity' receiveStart.activity' null' startCount' -1);                                relatedTo += receiveStop.activity.Tags.Single(t => t.Key == "RelatedTo").Value;                          }                            Assert.Equal(5' receivedStopCount);                          Assert.Contains(sendStart1.activity.Id' relatedTo);                          Assert.Contains(sendStart2.activity.Id' relatedTo);                            Assert.True(eventQueue.IsEmpty' "There were events present when none were expected");                      }                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,BatchSendReceiveFireEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                  var eventQueue = this.CreateEventQueue();                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          listener.Enable( (name' queue' arg) => name.Contains("Send") || name.Contains("Receive") );                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 2);                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 3);                          var messages = await TestUtility.ReceiveMessagesAsync(queueClient.InnerReceiver' 5);                            Assert.True(eventQueue.TryDequeue(out var sendStart1));                          AssertSendStart(queueName' sendStart1.eventName' sendStart1.payload' sendStart1.activity' null' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStop1));                          AssertSendStop(queueName' sendStop1.eventName' sendStop1.payload' sendStop1.activity' sendStop1.activity' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStart2));                          AssertSendStart(queueName' sendStart2.eventName' sendStart2.payload' sendStart2.activity' null' 3);                            Assert.True(eventQueue.TryDequeue(out var sendStop2));                          AssertSendStop(queueName' sendStop2.eventName' sendStop2.payload' sendStop2.activity' sendStop2.activity' 3);                            int receivedStopCount = 0;                          string relatedTo = "";                          while (eventQueue.TryDequeue(out var receiveStart))                          {                              var startCount = AssertReceiveStart(queueName' receiveStart.eventName' receiveStart.payload' receiveStart.activity' -1);                                Assert.True(eventQueue.TryDequeue(out var receiveStop));                                receivedStopCount +=                                  AssertReceiveStop(queueName' receiveStop.eventName' receiveStop.payload' receiveStop.activity' receiveStart.activity' null' startCount' -1);                                relatedTo += receiveStop.activity.Tags.Single(t => t.Key == "RelatedTo").Value;                          }                            Assert.Equal(5' receivedStopCount);                          Assert.Contains(sendStart1.activity.Id' relatedTo);                          Assert.Contains(sendStart2.activity.Id' relatedTo);                            Assert.True(eventQueue.IsEmpty' "There were events present when none were expected");                      }                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,BatchSendReceiveFireEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                  var eventQueue = this.CreateEventQueue();                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          listener.Enable( (name' queue' arg) => name.Contains("Send") || name.Contains("Receive") );                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 2);                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 3);                          var messages = await TestUtility.ReceiveMessagesAsync(queueClient.InnerReceiver' 5);                            Assert.True(eventQueue.TryDequeue(out var sendStart1));                          AssertSendStart(queueName' sendStart1.eventName' sendStart1.payload' sendStart1.activity' null' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStop1));                          AssertSendStop(queueName' sendStop1.eventName' sendStop1.payload' sendStop1.activity' sendStop1.activity' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStart2));                          AssertSendStart(queueName' sendStart2.eventName' sendStart2.payload' sendStart2.activity' null' 3);                            Assert.True(eventQueue.TryDequeue(out var sendStop2));                          AssertSendStop(queueName' sendStop2.eventName' sendStop2.payload' sendStop2.activity' sendStop2.activity' 3);                            int receivedStopCount = 0;                          string relatedTo = "";                          while (eventQueue.TryDequeue(out var receiveStart))                          {                              var startCount = AssertReceiveStart(queueName' receiveStart.eventName' receiveStart.payload' receiveStart.activity' -1);                                Assert.True(eventQueue.TryDequeue(out var receiveStop));                                receivedStopCount +=                                  AssertReceiveStop(queueName' receiveStop.eventName' receiveStop.payload' receiveStop.activity' receiveStart.activity' null' startCount' -1);                                relatedTo += receiveStop.activity.Tags.Single(t => t.Key == "RelatedTo").Value;                          }                            Assert.Equal(5' receivedStopCount);                          Assert.Contains(sendStart1.activity.Id' relatedTo);                          Assert.Contains(sendStart2.activity.Id' relatedTo);                            Assert.True(eventQueue.IsEmpty' "There were events present when none were expected");                      }                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,BatchSendReceiveFireEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                  var eventQueue = this.CreateEventQueue();                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          listener.Enable( (name' queue' arg) => name.Contains("Send") || name.Contains("Receive") );                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 2);                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 3);                          var messages = await TestUtility.ReceiveMessagesAsync(queueClient.InnerReceiver' 5);                            Assert.True(eventQueue.TryDequeue(out var sendStart1));                          AssertSendStart(queueName' sendStart1.eventName' sendStart1.payload' sendStart1.activity' null' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStop1));                          AssertSendStop(queueName' sendStop1.eventName' sendStop1.payload' sendStop1.activity' sendStop1.activity' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStart2));                          AssertSendStart(queueName' sendStart2.eventName' sendStart2.payload' sendStart2.activity' null' 3);                            Assert.True(eventQueue.TryDequeue(out var sendStop2));                          AssertSendStop(queueName' sendStop2.eventName' sendStop2.payload' sendStop2.activity' sendStop2.activity' 3);                            int receivedStopCount = 0;                          string relatedTo = "";                          while (eventQueue.TryDequeue(out var receiveStart))                          {                              var startCount = AssertReceiveStart(queueName' receiveStart.eventName' receiveStart.payload' receiveStart.activity' -1);                                Assert.True(eventQueue.TryDequeue(out var receiveStop));                                receivedStopCount +=                                  AssertReceiveStop(queueName' receiveStop.eventName' receiveStop.payload' receiveStop.activity' receiveStart.activity' null' startCount' -1);                                relatedTo += receiveStop.activity.Tags.Single(t => t.Key == "RelatedTo").Value;                          }                            Assert.Equal(5' receivedStopCount);                          Assert.Contains(sendStart1.activity.Id' relatedTo);                          Assert.Contains(sendStart2.activity.Id' relatedTo);                            Assert.True(eventQueue.IsEmpty' "There were events present when none were expected");                      }                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,BatchSendReceiveFireEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                  var eventQueue = this.CreateEventQueue();                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          listener.Enable( (name' queue' arg) => name.Contains("Send") || name.Contains("Receive") );                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 2);                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 3);                          var messages = await TestUtility.ReceiveMessagesAsync(queueClient.InnerReceiver' 5);                            Assert.True(eventQueue.TryDequeue(out var sendStart1));                          AssertSendStart(queueName' sendStart1.eventName' sendStart1.payload' sendStart1.activity' null' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStop1));                          AssertSendStop(queueName' sendStop1.eventName' sendStop1.payload' sendStop1.activity' sendStop1.activity' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStart2));                          AssertSendStart(queueName' sendStart2.eventName' sendStart2.payload' sendStart2.activity' null' 3);                            Assert.True(eventQueue.TryDequeue(out var sendStop2));                          AssertSendStop(queueName' sendStop2.eventName' sendStop2.payload' sendStop2.activity' sendStop2.activity' 3);                            int receivedStopCount = 0;                          string relatedTo = "";                          while (eventQueue.TryDequeue(out var receiveStart))                          {                              var startCount = AssertReceiveStart(queueName' receiveStart.eventName' receiveStart.payload' receiveStart.activity' -1);                                Assert.True(eventQueue.TryDequeue(out var receiveStop));                                receivedStopCount +=                                  AssertReceiveStop(queueName' receiveStop.eventName' receiveStop.payload' receiveStop.activity' receiveStart.activity' null' startCount' -1);                                relatedTo += receiveStop.activity.Tags.Single(t => t.Key == "RelatedTo").Value;                          }                            Assert.Equal(5' receivedStopCount);                          Assert.Contains(sendStart1.activity.Id' relatedTo);                          Assert.Contains(sendStart2.activity.Id' relatedTo);                            Assert.True(eventQueue.IsEmpty' "There were events present when none were expected");                      }                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,QueueClientDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\QueueClientDiagnosticsTests.cs,BatchSendReceiveFireEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: false' async queueName =>              {                  var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete);                  var eventQueue = this.CreateEventQueue();                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          listener.Enable( (name' queue' arg) => name.Contains("Send") || name.Contains("Receive") );                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 2);                          await TestUtility.SendMessagesAsync(queueClient.InnerSender' 3);                          var messages = await TestUtility.ReceiveMessagesAsync(queueClient.InnerReceiver' 5);                            Assert.True(eventQueue.TryDequeue(out var sendStart1));                          AssertSendStart(queueName' sendStart1.eventName' sendStart1.payload' sendStart1.activity' null' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStop1));                          AssertSendStop(queueName' sendStop1.eventName' sendStop1.payload' sendStop1.activity' sendStop1.activity' 2);                            Assert.True(eventQueue.TryDequeue(out var sendStart2));                          AssertSendStart(queueName' sendStart2.eventName' sendStart2.payload' sendStart2.activity' null' 3);                            Assert.True(eventQueue.TryDequeue(out var sendStop2));                          AssertSendStop(queueName' sendStop2.eventName' sendStop2.payload' sendStop2.activity' sendStop2.activity' 3);                            int receivedStopCount = 0;                          string relatedTo = "";                          while (eventQueue.TryDequeue(out var receiveStart))                          {                              var startCount = AssertReceiveStart(queueName' receiveStart.eventName' receiveStart.payload' receiveStart.activity' -1);                                Assert.True(eventQueue.TryDequeue(out var receiveStop));                                receivedStopCount +=                                  AssertReceiveStop(queueName' receiveStop.eventName' receiveStop.payload' receiveStop.activity' receiveStart.activity' null' startCount' -1);                                relatedTo += receiveStop.activity.Tags.Single(t => t.Key == "RelatedTo").Value;                          }                            Assert.Equal(5' receivedStopCount);                          Assert.Contains(sendStart1.activity.Id' relatedTo);                          Assert.Contains(sendStart2.activity.Id' relatedTo);                            Assert.True(eventQueue.IsEmpty' "There were events present when none were expected");                      }                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SessionDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SessionDiagnosticsTests.cs,SessionHandlerFireEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: true' async queueName =>              {                  var timeout = TimeSpan.FromSeconds(5);                  var eventQueue = this.CreateEventQueue();                    var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete' new NoRetry())                  {                      OperationTimeout = timeout                  };                                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          queueClient.ServiceBusConnection.OperationTimeout = timeout;                          queueClient.SessionClient.OperationTimeout = timeout;                            var sw = Stopwatch.StartNew();                                            listener.Enable((name' queue' arg) => !name.Contains("AcceptMessageSession") &&                                                                     !name.Contains("Receive") &&                                                                     !name.Contains("Exception"));                          var sessionId = Guid.NewGuid().ToString();                          var message = new Message                          {                              MessageId = "messageId"'                              SessionId = sessionId                          };                          await queueClient.SendAsync(message);                            var tcs = new TaskCompletionSource<int>(TaskCreationOptions.RunContinuationsAsynchronously);                            queueClient.RegisterSessionHandler((session' msg' ct) =>                          {                              tcs.TrySetResult(0);                              return Task.CompletedTask;                          }'                          exArgs =>                           {                              tcs.TrySetException(exArgs.Exception);                              return Task.CompletedTask;                          });                            await tcs.Task.WithTimeout(DefaultTimeout);                            Assert.True(eventQueue.TryDequeue(out var sendStart));                          AssertSendStart(queueName' sendStart.eventName' sendStart.payload' sendStart.activity' null);                            Assert.True(eventQueue.TryDequeue(out var sendStop));                          AssertSendStop(queueName' sendStop.eventName' sendStop.payload' sendStop.activity' sendStart.activity);                            Assert.True(eventQueue.TryDequeue(out var processStart));                          AssertProcessSessionStart(queueName' processStart.eventName' processStart.payload' processStart.activity' sendStart.activity);                            int wait = 0;                          while (wait++ < MaxWaitSec && eventQueue.Count < 1)                          {                              await Task.Delay(TimeSpan.FromSeconds(1));                          }                            Assert.True(eventQueue.TryDequeue(out var processStop));                          AssertProcessSessionStop(queueName' processStop.eventName' processStop.payload' processStop.activity'                              processStart.activity);                            Assert.True(eventQueue.IsEmpty);                            // workaround for https://github.com/Azure/azure-service-bus-dotnet/issues/372:                          // SessionPumpTaskAsync calls AcceptMessageSessionAsync() without cancellation token.                          // Even after SessionPump is stopped' this Task may still wait for session during operation timeout                          // It may interferee with other tests by acception it's sessions and throwing exceptions.                          // So' let's wait for timeout and a bit more to make sure all created tasks are completed                          sw.Stop();                            var timeToWait = (timeout - sw.Elapsed).TotalMilliseconds + 1000;                          if (timeToWait > 0)                          {                              await Task.Delay((int)timeToWait);                          }                      }                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Diagnostics,SessionDiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Diagnostics\SessionDiagnosticsTests.cs,SessionHandlerFireEvents,The following statement contains a magic number: await ServiceBusScope.UsingQueueAsync(partitioned: false' sessionEnabled: true' async queueName =>              {                  var timeout = TimeSpan.FromSeconds(5);                  var eventQueue = this.CreateEventQueue();                    var queueClient = new QueueClient(TestUtility.NamespaceConnectionString' queueName' ReceiveMode.ReceiveAndDelete' new NoRetry())                  {                      OperationTimeout = timeout                  };                                    try                  {                      using (var listener = this.CreateEventListener(queueName' eventQueue))                      using (var subscription = this.SubscribeToEvents(listener))                      {                          queueClient.ServiceBusConnection.OperationTimeout = timeout;                          queueClient.SessionClient.OperationTimeout = timeout;                            var sw = Stopwatch.StartNew();                                            listener.Enable((name' queue' arg) => !name.Contains("AcceptMessageSession") &&                                                                     !name.Contains("Receive") &&                                                                     !name.Contains("Exception"));                          var sessionId = Guid.NewGuid().ToString();                          var message = new Message                          {                              MessageId = "messageId"'                              SessionId = sessionId                          };                          await queueClient.SendAsync(message);                            var tcs = new TaskCompletionSource<int>(TaskCreationOptions.RunContinuationsAsynchronously);                            queueClient.RegisterSessionHandler((session' msg' ct) =>                          {                              tcs.TrySetResult(0);                              return Task.CompletedTask;                          }'                          exArgs =>                           {                              tcs.TrySetException(exArgs.Exception);                              return Task.CompletedTask;                          });                            await tcs.Task.WithTimeout(DefaultTimeout);                            Assert.True(eventQueue.TryDequeue(out var sendStart));                          AssertSendStart(queueName' sendStart.eventName' sendStart.payload' sendStart.activity' null);                            Assert.True(eventQueue.TryDequeue(out var sendStop));                          AssertSendStop(queueName' sendStop.eventName' sendStop.payload' sendStop.activity' sendStart.activity);                            Assert.True(eventQueue.TryDequeue(out var processStart));                          AssertProcessSessionStart(queueName' processStart.eventName' processStart.payload' processStart.activity' sendStart.activity);                            int wait = 0;                          while (wait++ < MaxWaitSec && eventQueue.Count < 1)                          {                              await Task.Delay(TimeSpan.FromSeconds(1));                          }                            Assert.True(eventQueue.TryDequeue(out var processStop));                          AssertProcessSessionStop(queueName' processStop.eventName' processStop.payload' processStop.activity'                              processStart.activity);                            Assert.True(eventQueue.IsEmpty);                            // workaround for https://github.com/Azure/azure-service-bus-dotnet/issues/372:                          // SessionPumpTaskAsync calls AcceptMessageSessionAsync() without cancellation token.                          // Even after SessionPump is stopped' this Task may still wait for session during operation timeout                          // It may interferee with other tests by acception it's sessions and throwing exceptions.                          // So' let's wait for timeout and a bit more to make sure all created tasks are completed                          sw.Stop();                            var timeToWait = (timeout - sw.Elapsed).TotalMilliseconds + 1000;                          if (timeToWait > 0)                          {                              await Task.Delay((int)timeToWait);                          }                      }                  }                  finally                  {                      await queueClient.CloseAsync();                  }              });
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicQueueCrudTest,The following statement contains a magic number: var queueName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicQueueCrudTest,The following statement contains a magic number: var qd = new QueueDescription(queueName)                  {                      AutoDeleteOnIdle = TimeSpan.FromHours(1)'                      DefaultMessageTimeToLive = TimeSpan.FromDays(2)'                      DuplicateDetectionHistoryTimeWindow = TimeSpan.FromMinutes(1)'                      EnableBatchedOperations = true'                      EnableDeadLetteringOnMessageExpiration = true'                      EnablePartitioning = false'                      ForwardDeadLetteredMessagesTo = null'                      ForwardTo = null'                      LockDuration = TimeSpan.FromSeconds(45)'                      MaxDeliveryCount = 8'                      MaxSizeInMB = 2048'                      RequiresDuplicateDetection = true'                      RequiresSession = true'                      UserMetadata = nameof(BasicQueueCrudTest)                  };
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicQueueCrudTest,The following statement contains a magic number: var qd = new QueueDescription(queueName)                  {                      AutoDeleteOnIdle = TimeSpan.FromHours(1)'                      DefaultMessageTimeToLive = TimeSpan.FromDays(2)'                      DuplicateDetectionHistoryTimeWindow = TimeSpan.FromMinutes(1)'                      EnableBatchedOperations = true'                      EnableDeadLetteringOnMessageExpiration = true'                      EnablePartitioning = false'                      ForwardDeadLetteredMessagesTo = null'                      ForwardTo = null'                      LockDuration = TimeSpan.FromSeconds(45)'                      MaxDeliveryCount = 8'                      MaxSizeInMB = 2048'                      RequiresDuplicateDetection = true'                      RequiresSession = true'                      UserMetadata = nameof(BasicQueueCrudTest)                  };
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicQueueCrudTest,The following statement contains a magic number: var qd = new QueueDescription(queueName)                  {                      AutoDeleteOnIdle = TimeSpan.FromHours(1)'                      DefaultMessageTimeToLive = TimeSpan.FromDays(2)'                      DuplicateDetectionHistoryTimeWindow = TimeSpan.FromMinutes(1)'                      EnableBatchedOperations = true'                      EnableDeadLetteringOnMessageExpiration = true'                      EnablePartitioning = false'                      ForwardDeadLetteredMessagesTo = null'                      ForwardTo = null'                      LockDuration = TimeSpan.FromSeconds(45)'                      MaxDeliveryCount = 8'                      MaxSizeInMB = 2048'                      RequiresDuplicateDetection = true'                      RequiresSession = true'                      UserMetadata = nameof(BasicQueueCrudTest)                  };
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicQueueCrudTest,The following statement contains a magic number: var qd = new QueueDescription(queueName)                  {                      AutoDeleteOnIdle = TimeSpan.FromHours(1)'                      DefaultMessageTimeToLive = TimeSpan.FromDays(2)'                      DuplicateDetectionHistoryTimeWindow = TimeSpan.FromMinutes(1)'                      EnableBatchedOperations = true'                      EnableDeadLetteringOnMessageExpiration = true'                      EnablePartitioning = false'                      ForwardDeadLetteredMessagesTo = null'                      ForwardTo = null'                      LockDuration = TimeSpan.FromSeconds(45)'                      MaxDeliveryCount = 8'                      MaxSizeInMB = 2048'                      RequiresDuplicateDetection = true'                      RequiresSession = true'                      UserMetadata = nameof(BasicQueueCrudTest)                  };
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicQueueCrudTest,The following statement contains a magic number: getQ.MaxDeliveryCount = 9;
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicTopicCrudTest,The following statement contains a magic number: var topicName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicTopicCrudTest,The following statement contains a magic number: var td = new TopicDescription(topicName)                  {                      AutoDeleteOnIdle = TimeSpan.FromHours(1)'                      DefaultMessageTimeToLive = TimeSpan.FromDays(2)'                      DuplicateDetectionHistoryTimeWindow = TimeSpan.FromMinutes(1)'                      EnableBatchedOperations = true'                      EnablePartitioning = false'                      MaxSizeInMB = 2048'                      RequiresDuplicateDetection = true'                      UserMetadata = nameof(BasicTopicCrudTest)                  };
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicTopicCrudTest,The following statement contains a magic number: var td = new TopicDescription(topicName)                  {                      AutoDeleteOnIdle = TimeSpan.FromHours(1)'                      DefaultMessageTimeToLive = TimeSpan.FromDays(2)'                      DuplicateDetectionHistoryTimeWindow = TimeSpan.FromMinutes(1)'                      EnableBatchedOperations = true'                      EnablePartitioning = false'                      MaxSizeInMB = 2048'                      RequiresDuplicateDetection = true'                      UserMetadata = nameof(BasicTopicCrudTest)                  };
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicTopicCrudTest,The following statement contains a magic number: getT.DefaultMessageTimeToLive = TimeSpan.FromDays(3);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicSubscriptionCrudTest,The following statement contains a magic number: var topicName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicSubscriptionCrudTest,The following statement contains a magic number: var subscriptionName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicSubscriptionCrudTest,The following statement contains a magic number: var sd = new SubscriptionDescription(topicName' subscriptionName)                  {                      AutoDeleteOnIdle = TimeSpan.FromHours(1)'                      DefaultMessageTimeToLive = TimeSpan.FromDays(2)'                      EnableDeadLetteringOnMessageExpiration = true'                      EnableBatchedOperations = false'                      ForwardDeadLetteredMessagesTo = null'                      ForwardTo = null'                      LockDuration = TimeSpan.FromSeconds(45)'                      MaxDeliveryCount = 8'                      RequiresSession = true'                      UserMetadata = nameof(BasicSubscriptionCrudTest)                  };
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicSubscriptionCrudTest,The following statement contains a magic number: var sd = new SubscriptionDescription(topicName' subscriptionName)                  {                      AutoDeleteOnIdle = TimeSpan.FromHours(1)'                      DefaultMessageTimeToLive = TimeSpan.FromDays(2)'                      EnableDeadLetteringOnMessageExpiration = true'                      EnableBatchedOperations = false'                      ForwardDeadLetteredMessagesTo = null'                      ForwardTo = null'                      LockDuration = TimeSpan.FromSeconds(45)'                      MaxDeliveryCount = 8'                      RequiresSession = true'                      UserMetadata = nameof(BasicSubscriptionCrudTest)                  };
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicSubscriptionCrudTest,The following statement contains a magic number: var sd = new SubscriptionDescription(topicName' subscriptionName)                  {                      AutoDeleteOnIdle = TimeSpan.FromHours(1)'                      DefaultMessageTimeToLive = TimeSpan.FromDays(2)'                      EnableDeadLetteringOnMessageExpiration = true'                      EnableBatchedOperations = false'                      ForwardDeadLetteredMessagesTo = null'                      ForwardTo = null'                      LockDuration = TimeSpan.FromSeconds(45)'                      MaxDeliveryCount = 8'                      RequiresSession = true'                      UserMetadata = nameof(BasicSubscriptionCrudTest)                  };
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicSubscriptionCrudTest,The following statement contains a magic number: getS.DefaultMessageTimeToLive = TimeSpan.FromDays(3);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicSubscriptionCrudTest,The following statement contains a magic number: getS.MaxDeliveryCount = 9;
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicRulesCrudTest,The following statement contains a magic number: var topicName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicRulesCrudTest,The following statement contains a magic number: var subscriptionName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicRulesCrudTest,The following statement contains a magic number: sqlFilter.Parameters.Add("@longParam"' (long)12);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicRulesCrudTest,The following statement contains a magic number: Assert.True(rules.Count == 3);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,BasicRulesCrudTest,The following statement contains a magic number: Assert.Equal(rule2' rules[2]);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,GetQueueRuntimeInfoTest,The following statement contains a magic number: var queueName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,GetQueueRuntimeInfoTest,The following statement contains a magic number: qd.AutoDeleteOnIdle = TimeSpan.FromMinutes(100);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,GetQueueRuntimeInfoTest,The following statement contains a magic number: Assert.Equal(3' runtimeInfo.MessageCount);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,GetTopicAndSubscriptionRuntimeInfoTest,The following statement contains a magic number: var topicName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,GetTopicAndSubscriptionRuntimeInfoTest,The following statement contains a magic number: var subscriptionName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,GetTopicAndSubscriptionRuntimeInfoTest,The following statement contains a magic number: td.AutoDeleteOnIdle = TimeSpan.FromMinutes(100);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,GetTopicAndSubscriptionRuntimeInfoTest,The following statement contains a magic number: sd.AutoDeleteOnIdle = TimeSpan.FromMinutes(100);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,GetTopicAndSubscriptionRuntimeInfoTest,The following statement contains a magic number: Assert.Equal(2' subscriptionRI.MessageCount);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,MessagingEntityNotFoundExceptionTest,The following statement contains a magic number: var queueName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,MessagingEntityNotFoundExceptionTest,The following statement contains a magic number: var topicName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,MessagingEntityAlreadyExistsExceptionTest,The following statement contains a magic number: var queueName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,MessagingEntityAlreadyExistsExceptionTest,The following statement contains a magic number: var topicName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,MessagingEntityAlreadyExistsExceptionTest,The following statement contains a magic number: var subscriptionName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,ForwardingEntitySetupTest,The following statement contains a magic number: var queueName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,ForwardingEntitySetupTest,The following statement contains a magic number: var destinationName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,ForwardingEntitySetupTest,The following statement contains a magic number: var dlqDestinationName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,QueueDescriptionParsedFromResponseEqualityCheckTest,The following statement contains a magic number: var name = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,TopicDescriptionParsedFromResponseEqualityCheckTest,The following statement contains a magic number: var name = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,SqlFilterParamsTest,The following statement contains a magic number: var topicName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,SqlFilterParamsTest,The following statement contains a magic number: var subscriptionName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,SqlFilterParamsTest,The following statement contains a magic number: SqlFilter sqlFilter = new SqlFilter(                      "PROPERTY(@propertyName) = @stringPropertyValue " +                      "AND PROPERTY(intProperty) = @intPropertyValue " +                      "AND PROPERTY(longProperty) = @longPropertyValue " +                      "AND PROPERTY(boolProperty) = @boolPropertyValue " +                      "AND PROPERTY(doubleProperty) = @doublePropertyValue ")                  {                      Parameters =                         {                              { "@propertyName"' "MyProperty" }'                              { "@stringPropertyValue"' "string" }'                              { "@intPropertyValue"' 3 }'                              { "@longPropertyValue"' 3L }'                              { "@boolPropertyValue"' true }'                              { "@doublePropertyValue"' (double)3.0 }'                         }                  };
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,SqlFilterParamsTest,The following statement contains a magic number: SqlFilter sqlFilter = new SqlFilter(                      "PROPERTY(@propertyName) = @stringPropertyValue " +                      "AND PROPERTY(intProperty) = @intPropertyValue " +                      "AND PROPERTY(longProperty) = @longPropertyValue " +                      "AND PROPERTY(boolProperty) = @boolPropertyValue " +                      "AND PROPERTY(doubleProperty) = @doublePropertyValue ")                  {                      Parameters =                         {                              { "@propertyName"' "MyProperty" }'                              { "@stringPropertyValue"' "string" }'                              { "@intPropertyValue"' 3 }'                              { "@longPropertyValue"' 3L }'                              { "@boolPropertyValue"' true }'                              { "@doublePropertyValue"' (double)3.0 }'                         }                  };
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,SqlFilterParamsTest,The following statement contains a magic number: SqlFilter sqlFilter = new SqlFilter(                      "PROPERTY(@propertyName) = @stringPropertyValue " +                      "AND PROPERTY(intProperty) = @intPropertyValue " +                      "AND PROPERTY(longProperty) = @longPropertyValue " +                      "AND PROPERTY(boolProperty) = @boolPropertyValue " +                      "AND PROPERTY(doubleProperty) = @doublePropertyValue ")                  {                      Parameters =                         {                              { "@propertyName"' "MyProperty" }'                              { "@stringPropertyValue"' "string" }'                              { "@intPropertyValue"' 3 }'                              { "@longPropertyValue"' 3L }'                              { "@boolPropertyValue"' true }'                              { "@doublePropertyValue"' (double)3.0 }'                         }                  };
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,CorrelationFilterPropertiesTest,The following statement contains a magic number: var topicName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,CorrelationFilterPropertiesTest,The following statement contains a magic number: var subscriptionName = Guid.NewGuid().ToString("D").Substring(0' 8);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,CorrelationFilterPropertiesTest,The following statement contains a magic number: filter.Properties.Add("intKey"' 5);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Management,ManagementClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Management\ManagementClientTests.cs,CorrelationFilterPropertiesTest,The following statement contains a magic number: Assert.True(filter.Properties.Count == 3);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.MessageInterop,MessageInteropTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\MessageInterop\MessageInterOpTests.cs,RunSerializerTests,The following statement contains a magic number: var book = new TestBook("contoso"' 1' 5);
Magic Number,Microsoft.Azure.ServiceBus.Performance,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Performance\Program.cs,Main,The following statement contains a magic number: var messages = (args.Length >= 2 ? long.Parse(args[1]) : 10);
Magic Number,Microsoft.Azure.ServiceBus.Performance,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Performance\Program.cs,Main,The following statement contains a magic number: var messages = (args.Length >= 2 ? long.Parse(args[1]) : 10);
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Primitives,ConcurrentExpiringSetTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Primitives\ConcurrentExpiringSetTests.cs,Contains_returns_true_for_valid_entry,The following statement contains a magic number: set.AddOrUpdate("testKey"' DateTime.UtcNow + TimeSpan.FromSeconds(5));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Primitives,ConcurrentExpiringSetTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Primitives\ConcurrentExpiringSetTests.cs,Contains_returns_false_for_expired_entry,The following statement contains a magic number: set.AddOrUpdate("testKey"' DateTime.UtcNow - TimeSpan.FromSeconds(5));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Primitives,ConcurrentExpiringSetTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Primitives\ConcurrentExpiringSetTests.cs,Contains_throws_after_close,The following statement contains a magic number: set.AddOrUpdate("testKey"' DateTime.UtcNow + TimeSpan.FromSeconds(5));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Primitives,ConcurrentExpiringSetTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Primitives\ConcurrentExpiringSetTests.cs,AddOrUpdate_throws_after_close,The following statement contains a magic number: set.AddOrUpdate("testKey1"' DateTime.UtcNow + TimeSpan.FromSeconds(5));
Magic Number,Microsoft.Azure.ServiceBus.UnitTests.Primitives,ConcurrentExpiringSetTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\servicebus\Microsoft.Azure.ServiceBus\tests\Primitives\ConcurrentExpiringSetTests.cs,AddOrUpdate_throws_after_close,The following statement contains a magic number: Assert.Throws<ObjectDisposedException>(() => set.AddOrUpdate("testKey2"' DateTime.UtcNow - TimeSpan.FromSeconds(5)));
