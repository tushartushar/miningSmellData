Implementation smell,Namespace,Class,File,Method,Description
Long Method,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The method has 131 lines of code.
Complex Method,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,ParseArguments,Cyclomatic complexity of the method is 11
Complex Method,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,Cyclomatic complexity of the method is 10
Long Parameter List,Azure.Messaging.EventHubs.Samples.Infrastructure,IEventHubsIdentitySample,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Infrastructure\IEventHubsIdentitySample.cs,RunAsync,The method has 5 parameters. Parameters: fullyQualifiedNamespace' eventHubName' tenantId' clientId' secret
Long Parameter List,Azure.Messaging.EventHubs.Samples,Sample11_AuthenticateWithClientSecretCredential,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample11_AuthenticateWithClientSecretCredential.cs,RunAsync,The method has 5 parameters. Parameters: fullyQualifiedNamespace' eventHubName' tenantId' clientId' secret
Long Identifier,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,,The length of the parameter ExtraOptionsForIdentitySamples is 30.
Long Statement,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,PromptConnectionStringIfMissing,The length of the statement  "                Console.Write("Please provide the connection string for the Event Hubs namespace that you'd like to use and then press Enter: "); " is 129.
Long Statement,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,PromptFullyQualifiedNamespaceIfMissing,The length of the statement  "                Console.Write("Please provide the fully qualified Event Hubs namespace.  This is likely to be similar to {yournamespace}.servicebus.windows.net: "); " is 148.
Long Statement,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,DisplayHelp,The length of the statement  "            Console.WriteLine($"\tAzure.Messaging.EventHubs.Samples.exe { CommandLineArguments.ArgumentPrefix }{ nameof(CommandLineArguments.ConnectionString) } \"Endpoint=sb://fake.servicebus.windows.net/;SharedAccessKeyName=NotReal;SharedAccessKey=[FAKE];\" { CommandLineArguments.ArgumentPrefix }{ nameof(CommandLineArguments.EventHub) } \"SomeHub\""); " is 343.
Long Statement,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,DisplayHelp,The length of the statement  "            Console.WriteLine("\tAzure.Messaging.EventHubs.Samples.exe \"Endpoint=sb://fake.servicebus.windows.net/;SharedAccessKeyName=NotReal;SharedAccessKey=[FAKE];\" \"SomeHub\""); " is 172.
Long Statement,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,DisplayHelp,The length of the statement  "            Console.WriteLine($"\tAzure.Messaging.EventHubs.Samples.exe { CommandLineArguments.ArgumentPrefix }{ nameof(CommandLineArguments.Help) }"); " is 139.
Long Statement,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,ParseArguments,The length of the statement  "            if ((args.Length >= 2) && (!args[0].StartsWith(CommandLineArguments.ArgumentPrefix)) && (!args[1].StartsWith(CommandLineArguments.ArgumentPrefix))) " is 147.
Long Statement,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,ParseArguments,The length of the statement  "                if (args[index].Equals($"{ CommandLineArguments.ArgumentPrefix }{ nameof(CommandLineArguments.Help) }"' StringComparison.OrdinalIgnoreCase)) " is 140.
Long Statement,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,ParseArguments,The length of the statement  "                if (args[index].Equals($"{ CommandLineArguments.ArgumentPrefix }{ nameof(CommandLineArguments.ConnectionString) }"' StringComparison.OrdinalIgnoreCase)) " is 152.
Long Statement,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,ParseArguments,The length of the statement  "                else if (args[index].Equals($"{ CommandLineArguments.ArgumentPrefix }{ nameof(CommandLineArguments.EventHub) }"' StringComparison.OrdinalIgnoreCase)) " is 149.
Long Statement,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,ParseArguments,The length of the statement  "                else if (args[index].Equals($"{ CommandLineArguments.ArgumentPrefix }{ nameof(CommandLineArguments.Client) }"' StringComparison.OrdinalIgnoreCase)) " is 147.
Long Statement,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,ParseArguments,The length of the statement  "                else if (args[index].Equals($"{ CommandLineArguments.ArgumentPrefix }{ nameof(CommandLineArguments.FullyQualifiedNamespace) }"' StringComparison.OrdinalIgnoreCase)) " is 164.
Long Statement,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,ParseArguments,The length of the statement  "                else if (args[index].Equals($"{ CommandLineArguments.ArgumentPrefix }{ nameof(CommandLineArguments.Tenant) }"' StringComparison.OrdinalIgnoreCase)) " is 147.
Long Statement,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,ParseArguments,The length of the statement  "                else if (args[index].Equals($"{ CommandLineArguments.ArgumentPrefix }{ nameof(CommandLineArguments.Secret) }"' StringComparison.OrdinalIgnoreCase)) " is 147.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample01_HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample01_HelloWorld.cs,RunAsync,The length of the statement  "            // To interact with an Event Hubs' a client is needed.  There are clients associated with each of the core areas of functionality " is 129.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample01_HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample01_HelloWorld.cs,RunAsync,The length of the statement  "            // with an Event Hub' naming publishing events and consuming events.  Each of these clients manages resources and should be " is 123.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample01_HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample01_HelloWorld.cs,RunAsync,The length of the statement  "            // In this example' we will create a producer client and use it to inspect the properties of an Event Hub.  When complete' we take " is 130.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample01_HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample01_HelloWorld.cs,RunAsync,The length of the statement  "            // advantage of the new asynchronous dispose to ensure that clean-up is performed when we are done or when an exception is encountered. " is 135.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample01_HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample01_HelloWorld.cs,RunAsync,The length of the statement  "                Console.WriteLine($"\tThe Event Hub was created at: { properties.CreatedOn.ToString("yyyy-MM-dd hh:mm:ss tt (zzz)") }' in UTC."); " is 129.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample01_HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample01_HelloWorld.cs,RunAsync,The length of the statement  "                // Partitions of an Event Hub are an important concept.  Using the Event Hub properties' we'll inspect each of its partitions' " is 126.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample01_HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample01_HelloWorld.cs,RunAsync,The length of the statement  "                    Console.WriteLine($"\t\tThe first sequence number of an event in the partition is: { partitionProperties.BeginningSequenceNumber }"); " is 133.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample01_HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample01_HelloWorld.cs,RunAsync,The length of the statement  "                    Console.WriteLine($"\t\tThe last sequence number of an event in the partition is: { partitionProperties.LastEnqueuedSequenceNumber }"); " is 135.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample01_HelloWorld,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample01_HelloWorld.cs,RunAsync,The length of the statement  "                    Console.WriteLine($"\t\tThe last time that an event was enqueued in the partition is: { partitionProperties.LastEnqueuedTime.ToString("yyyy-MM-dd hh:mm:ss tt (zzz)") }' in UTC."); " is 179.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample02_ClientWithCustomOptions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample02_ClientWithCustomOptions.cs,RunAsync,The length of the statement  "            // The clients for an Event Hub client each offer additional options on creation' allowing you to control different aspects of its behavior " is 139.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample02_ClientWithCustomOptions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample02_ClientWithCustomOptions.cs,RunAsync,The length of the statement  "            // should your scenario have needs that differ from the common defaults.  If you choose not to provide these options' the default behaviors " is 139.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample02_ClientWithCustomOptions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample02_ClientWithCustomOptions.cs,RunAsync,The length of the statement  "            // Each different Event Hub client allows you to customize how it interacts with the Event Hubs service' such as by customizing how it connects " is 143.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample02_ClientWithCustomOptions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample02_ClientWithCustomOptions.cs,RunAsync,The length of the statement  "            // to the service by specifying the transport that communication should use and whether a proxy should be used for network communications.  Please " is 146.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample02_ClientWithCustomOptions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample02_ClientWithCustomOptions.cs,RunAsync,The length of the statement  "            // note that a proxy is only supported when using WebSockets as a transport; it isn't compatible with raw TCP or other transport channels. " is 138.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample02_ClientWithCustomOptions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample02_ClientWithCustomOptions.cs,RunAsync,The length of the statement  "            // The Event Hub clients each offer a common set of options' such as specifying the timeout and retry approach used while interacting with the " is 142.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample02_ClientWithCustomOptions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample02_ClientWithCustomOptions.cs,RunAsync,The length of the statement  "            // Event Hubs service.  A specific client will potentially allow you to customize behavior specific to its related operations. " is 126.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample02_ClientWithCustomOptions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample02_ClientWithCustomOptions.cs,RunAsync,The length of the statement  "            // This sample will customize the transport for the connection' using WebSockets and will adjust some of the retry-related values for " is 133.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample02_ClientWithCustomOptions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample02_ClientWithCustomOptions.cs,RunAsync,The length of the statement  "                Console.WriteLine($"\tThe Event Hub was created at: { properties.CreatedOn.ToString("yyyy-MM-dd hh:mm:ss tt (zzz)") }' in UTC."); " is 129.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample03_PublishAnEventBatch,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample03_PublishAnEventBatch.cs,RunAsync,The length of the statement  "            // To publish events' we will need to create a producer client.  Like any client' our Event Hub producer manages resources " is 122.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample04_ReadEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample04_ReadEvents.cs,RunAsync,The length of the statement  "            // To start' we'll publish a small number of events using a producer client.  To ensure that our client is appropriately closed' we'll " is 134.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample04_ReadEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample04_ReadEvents.cs,RunAsync,The length of the statement  "            // of the consumer in an application' such as "Telemetry" or "OrderProcessing".  When an Event Hub is created' a default " is 120.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample04_ReadEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample04_ReadEvents.cs,RunAsync,The length of the statement  "            // Each consumer has a unique view of the events in a partition that it reads from' meaning that events are available to all " is 124.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample04_ReadEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample04_ReadEvents.cs,RunAsync,The length of the statement  "            // consumers and are not removed from the partition when a consumer reads them.  This allows for one or more consumers to read and " is 130.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample04_ReadEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample04_ReadEvents.cs,RunAsync,The length of the statement  "            // (see: https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-faq#what-is-the-maximum-retention-period-for-events) " is 122.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample04_ReadEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample04_ReadEvents.cs,RunAsync,The length of the statement  "            // In this example' we will create our consumer client using the default consumer group that is created with an Event Hub. " is 122.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample04_ReadEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample04_ReadEvents.cs,RunAsync,The length of the statement  "            await using (var consumerClient = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString' eventHubName)) " is 142.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample04_ReadEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample04_ReadEvents.cs,RunAsync,The length of the statement  "                // To ensure that we do not wait for an indeterminate length of time' we'll stop reading after we receive three events.  For a " is 126.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample04_ReadEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample04_ReadEvents.cs,RunAsync,The length of the statement  "                // fresh Event Hub' those will be the three that we had published.  We'll also ask for cancellation after 30 seconds' just to be " is 128.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample06_PublishAnEventBatchToASpecificPartition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample06_PublishAnEventBatchToASpecificPartition.cs,RunAsync,The length of the statement  "                // When publishing events' it may be desirable to request that the Event Hubs service place a batch on a specific partition' " is 124.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample06_PublishAnEventBatchToASpecificPartition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample06_PublishAnEventBatchToASpecificPartition.cs,RunAsync,The length of the statement  "                // for organization and processing.  For example' you may have designated one partition of your Event Hub as being responsible " is 126.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample06_PublishAnEventBatchToASpecificPartition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample06_PublishAnEventBatchToASpecificPartition.cs,RunAsync,The length of the statement  "                // This can be accomplished by setting the identifier of the desired partition when creating the batch.  It is important to note " is 128.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample07_PublishEventsWithCustomMetadata,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample07_PublishEventsWithCustomMetadata.cs,RunAsync,The length of the statement  "                // In order to allow event publishers to offer better context for consumers' event data may also contain custom metadata' " is 121.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "            // In this example' our consumer will read from the latest position instead of the earliest.  As a result' it won't see events that " is 131.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "            // have previously been published.  Before we can publish the events and have them observed' we will need to ask the consumer " is 125.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "            // Each partition of an Event Hub represents potentially infinite stream of events.  When a consumer is reading' there is no definitive " is 135.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "            // point where it can assess that all events have been read and no more will be available.  As a result' when the consumer reaches the end of " is 141.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "            // the available events for a partition' it will continue to wait for new events to arrive so that it can surface them to be processed. During this " is 147.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "            // In order to prevent the consumer from waiting forever for events' and blocking other code' there are two methods available for developers to " is 143.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "            // control this behavior.  First' signaling the cancellation token passed when reading will cause the consumer to stop waiting and end iteration " is 144.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "            // immediately.  This is desirable when you have decided that you are done reading and do not wish to continue.  It is not ideal' however' when " is 143.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "            // In that scenario' you may specify a maximum wait time which is applied to each iteration of the enumerator.  If that interval passes without an " is 146.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "            // event being available to read' the enumerator will emit an empty event in order to return control to the loop body.  This allows you to take action' " is 151.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "            // For our loop' we'll specify a small wait time when we begin reading' which will allow control to return to our code so that we may publish " is 141.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "            await using (var consumerClient = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString' eventHubName)) " is 142.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "                // As a preventative measure' we'll also specify that cancellation should occur after 30 seconds' so that we don't iterate indefinitely " is 135.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "                // The reading of all events will default to the earliest events available in each partition; in order to begin reading at the " is 126.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "                await foreach (PartitionEvent currentEvent in consumerClient.ReadEventsAsync(startReadingAtEarliestEvent: false' readOptions' cancellationSource.Token)) " is 152.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The length of the statement  "                // Print out the events that we received; the body is an encoded string; we'll recover the message by reversing the encoding process. " is 133.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // In this example' we'll make use of multiple clients in order to publish an event that we will then read back and use as the starting point " is 141.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // for reading events in the partition.  Our initial consumer will begin watching for new events published to the first partition in our Event " is 142.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // Hub.  Before we can publish events and have them observed' we will need to ask the consumer to perform an operation for it to begin observing " is 144.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // Each event that a consumer reads will have attributes set that describe the event's location in the partition' such as its offset' sequence " is 142.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // number' and the date/time that it was enqueued.  These attributes can be used to create a new consumer that begins consuming at a known position. " is 148.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // With Event Hubs' it is the responsibility of an application consuming events to keep track of those that it has processed' " is 125.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // and to manage where in the partition the consumer begins reading events.  This is done by using the position information to track " is 132.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // The goal is to preserve the position of an event in some form of durable state' such as writing it to a database' so that if the " is 131.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // consuming application crashes or is otherwise restarted' it can retrieve that checkpoint information and use it to create a consumer that " is 140.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // It is important to note that there is potential for a consumer to process an event and be unable to preserve the checkpoint.  A well-designed " is 144.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // consumer must be able to deal with processing the same event multiple times without it causing data corruption or otherwise creating issues. " is 143.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // Event Hubs' like most event streaming systems' guarantees "at least once" delivery; even in cases where the consumer does not experience a restart' " is 150.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // To demonstrate' we will publish a batch of events to be read by an initial consumer.  The third event that is read will be captured " is 134.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // and another consumer will use its attributes to start reading the event that follows' reading the set of events that we published skipping over " is 146.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            await using (var initialConsumerClient = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString' eventHubName)) " is 149.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "                // As a preventative measure' we'll also specify that cancellation should occur after 30 seconds' so that we don't iterate indefinitely " is 135.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "                await foreach (PartitionEvent currentEvent in initialConsumerClient.ReadEventsFromPartitionAsync(firstPartition' EventPosition.Latest' readOptions' cancellationSource.Token)) " is 174.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "                            using EventDataBatch eventBatch = await producerClient.CreateBatchAsync(new CreateBatchOptions { PartitionId = firstPartition }); " is 129.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "                Console.WriteLine($"The initial consumer processed { receivedEvents.Count } events of the { eventBatchSize } that were published.  { eventBatchSize } were expected."); " is 167.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // Create a new consumer for the partition' specifying the sequence number of the third event as the location to begin reading. Because sequence numbers are non-inclusive " is 170.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // by default' the consumer will read the next available event following that sequence number' allowing it to read the set of published events beginning with the fourth one. " is 173.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            // Because our second consumer will begin watching the partition at a specific event' there is no need to ask for an initial operation to set our place; when " is 157.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "            await using (var newConsumerClient = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' connectionString' eventHubName)) " is 145.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "                await foreach (PartitionEvent currentEvent in newConsumerClient.ReadEventsFromPartitionAsync(firstPartition' startingPosition' cancellationSource.Token)) " is 153.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The length of the statement  "                Console.WriteLine($"The new consumer processed { receivedEvents.Count } events of the { eventBatchSize } that were published.  { expectedCount } were expected."); " is 162.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample10_PublishAnEventBatchWithCustomSizeLimit,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample10_PublishAnEventBatchWithCustomSizeLimit.cs,RunAsync,The length of the statement  "                // There is a limit to the size of an event or batch of events that can be published at once.  This limit varies and depends " is 124.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample10_PublishAnEventBatchWithCustomSizeLimit,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample10_PublishAnEventBatchWithCustomSizeLimit.cs,RunAsync,The length of the statement  "                // on the Event Hubs service and the properties of the namespace that owns the target Event Hub.  Because the size limit is based " is 129.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample10_PublishAnEventBatchWithCustomSizeLimit,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample10_PublishAnEventBatchWithCustomSizeLimit.cs,RunAsync,The length of the statement  "                // on the size of an event or batch as it would be sent over the network' it is not simple to understand the size of an event as " is 128.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample10_PublishAnEventBatchWithCustomSizeLimit,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample10_PublishAnEventBatchWithCustomSizeLimit.cs,RunAsync,The length of the statement  "                // In order to avoid failures when publishing' events are packaged into an Event Batch.  When created' the batch is informed " is 124.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample10_PublishAnEventBatchWithCustomSizeLimit,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample10_PublishAnEventBatchWithCustomSizeLimit.cs,RunAsync,The length of the statement  "                // of the size limit for the associated Event Hub.  Events can be added to the batch using a "TryAdd" pattern' allowing insight " is 127.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample10_PublishAnEventBatchWithCustomSizeLimit,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample10_PublishAnEventBatchWithCustomSizeLimit.cs,RunAsync,The length of the statement  "                // To support scenarios where bandwidth is limited or publishers need to maintain control over how much data is transmitted' " is 124.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample10_PublishAnEventBatchWithCustomSizeLimit,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample10_PublishAnEventBatchWithCustomSizeLimit.cs,RunAsync,The length of the statement  "                // a custom size limit (in bytes) may be specified when creating an event batch' overriding the default specified by the Event " is 126.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample11_AuthenticateWithClientSecretCredential,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample11_AuthenticateWithClientSecretCredential.cs,RunAsync,The length of the statement  "            // use of the ClientSecretCredential from the Azure.Identity library to enable the Event Hubs clients to perform authorization " is 126.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample11_AuthenticateWithClientSecretCredential,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample11_AuthenticateWithClientSecretCredential.cs,RunAsync,The length of the statement  "            // To start' we'll publish a small number of events using a producer client.  To ensure that our client is appropriately closed' we'll " is 134.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample11_AuthenticateWithClientSecretCredential,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample11_AuthenticateWithClientSecretCredential.cs,RunAsync,The length of the statement  "            // With our events published' we'll create a consumer client to read them.  We'll stop reading after we've received all events in the " is 133.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample11_AuthenticateWithClientSecretCredential,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample11_AuthenticateWithClientSecretCredential.cs,RunAsync,The length of the statement  "            await using (var consumerClient = new EventHubConsumerClient(EventHubConsumerClient.DefaultConsumerGroupName' fullyQualifiedNamespace' eventHubName' credential)) " is 161.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample11_AuthenticateWithClientSecretCredential,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample11_AuthenticateWithClientSecretCredential.cs,RunAsync,The length of the statement  "                // To ensure that we do not wait for an indeterminate length of time' we'll stop reading after we receive three events.  For a " is 126.
Long Statement,Azure.Messaging.EventHubs.Samples,Sample11_AuthenticateWithClientSecretCredential,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample11_AuthenticateWithClientSecretCredential.cs,RunAsync,The length of the statement  "                // fresh Event Hub' those will be the three that we had published.  We'll also ask for cancellation after 30 seconds' just to be " is 128.
Magic Number,Azure.Messaging.EventHubs.Samples,Program,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Program.cs,ParseArguments,The following statement contains a magic number: (args.Length >= 2) && (!args[0].StartsWith(CommandLineArguments.ArgumentPrefix)) && (!args[1].StartsWith(CommandLineArguments.ArgumentPrefix))
Magic Number,Azure.Messaging.EventHubs.Samples,Sample02_ClientWithCustomOptions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample02_ClientWithCustomOptions.cs,RunAsync,The following statement contains a magic number: var producerOptions = new EventHubProducerClientOptions              {                 ConnectionOptions = new EventHubConnectionOptions                  {                      TransportType = EventHubsTransportType.AmqpWebSockets'                      Proxy = (IWebProxy)null                  }'                    RetryOptions = new EventHubsRetryOptions                  {                     MaximumRetries = 5'                     TryTimeout = TimeSpan.FromMinutes(1)                  }              };
Magic Number,Azure.Messaging.EventHubs.Samples,Sample04_ReadEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample04_ReadEvents.cs,RunAsync,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Samples,Sample04_ReadEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample04_ReadEvents.cs,RunAsync,The following statement contains a magic number: int maximumEvents = 3;
Magic Number,Azure.Messaging.EventHubs.Samples,Sample07_PublishEventsWithCustomMetadata,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample07_PublishEventsWithCustomMetadata.cs,RunAsync,The following statement contains a magic number: firstEvent.Properties.Add("score"' 9.0);
Magic Number,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The following statement contains a magic number: ReadEventOptions readOptions = new ReadEventOptions                  {                      MaximumWaitTime = TimeSpan.FromMilliseconds(150)                  };
Magic Number,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Samples,Sample08_ReadOnlyNewEvents,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample08_ReadOnlyNewEvents.cs,RunAsync,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The following statement contains a magic number: int eventBatchSize = 50;
Magic Number,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The following statement contains a magic number: ReadEventOptions readOptions = new ReadEventOptions                  {                      MaximumWaitTime = TimeSpan.FromMilliseconds(150)                  };
Magic Number,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The following statement contains a magic number: await Task.Delay(250);
Magic Number,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The following statement contains a magic number: thirdEvent = receivedEvents[2];
Magic Number,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Samples,Sample09_ReadEventsFromAKnownPosition,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample09_ReadEventsFromAKnownPosition.cs,RunAsync,The following statement contains a magic number: int expectedCount = (eventBatchSize - 3);
Magic Number,Azure.Messaging.EventHubs.Samples,Sample10_PublishAnEventBatchWithCustomSizeLimit,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample10_PublishAnEventBatchWithCustomSizeLimit.cs,RunAsync,The following statement contains a magic number: CreateBatchOptions options = new CreateBatchOptions                  {                      MaximumSizeInBytes = 150                  };
Magic Number,Azure.Messaging.EventHubs.Samples,Sample11_AuthenticateWithClientSecretCredential,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs\samples\Sample11_AuthenticateWithClientSecretCredential.cs,RunAsync,The following statement contains a magic number: cancellationSource.CancelAfter(TimeSpan.FromSeconds(30));
