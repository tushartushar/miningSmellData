Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Azure.Messaging.EventHubs.Tests,EventDataExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventDataExtensions.cs,IsEquivalentTo,Cyclomatic complexity of the method is 13
Complex Method,Azure.Messaging.EventHubs.Core,ConnectionStringParser,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Core\ConnectionStringParser.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,Azure.Messaging.EventHubs.Authorization,SharedAccessSignature,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Authorization\SharedAccessSignature.cs,ParseSignature,Cyclomatic complexity of the method is 13
Complex Method,Azure.Core.Tests,ClientDiagnosticListener,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientDiagnosticListener.cs,OnNext,Cyclomatic complexity of the method is 9
Long Parameter List,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseCorrectlyParsesPartialConnectionStrings,The method has 5 parameters. Parameters: connectionString' endpoint' eventHub' sasKeyName' sasKey
Long Parameter List,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseDoesNotForceTokenOrdering,The method has 5 parameters. Parameters: connectionString' endpoint' eventHub' sasKeyName' sasKey
Long Parameter List,Azure.Messaging.EventHubs.Tests,MockEventData,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Testing\EventDataExtensionsTests.cs,MockEventData,The method has 7 parameters. Parameters: eventBody' properties' systemProperties' sequenceNumber' offset' enqueuedTime' partitionKey
Long Parameter List,Azure.Messaging.EventHubs.Authorization,SharedAccessSignature,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Authorization\SharedAccessSignature.cs,SharedAccessSignature,The method has 5 parameters. Parameters: eventHubResource' sharedAccessKeyName' sharedAccessKey' value' signatureExpiration
Long Parameter List,Azure.Core.Testing,SyncAsyncPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\SyncAsyncPolicyTestBase.cs,SendRequestAsync,The method has 5 parameters. Parameters: transport' requestAction' policy' responseClassifier' bufferResponse
Long Parameter List,Azure.Core.Testing,SyncAsyncPolicyTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\SyncAsyncPolicyTestBase.cs,SendGetRequest,The method has 5 parameters. Parameters: transport' policy' responseClassifier' bufferResponse' uri
Long Identifier,Azure.Messaging.EventHubs.Authorization,SharedAccessSignature,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Authorization\SharedAccessSignature.cs,,The length of the parameter SignedResourceFullIdentifierToken is 33.
Long Identifier,Azure.Messaging.EventHubs.Authorization,SharedAccessSignature,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Authorization\SharedAccessSignature.cs,,The length of the parameter DefaultSignatureValidityDuration is 32.
Long Identifier,Azure.Core.Testing,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientTestBase.cs,,The length of the parameter s_diagnosticScopeValidatingInterceptor is 38.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubSharedKeyCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubSharedKeyCredentialTests.cs,GetTokenIsNotPermitted,The length of the statement  "            Assert.That(() => new EventHubSharedKeyCredential("key"' "value").GetToken(new TokenRequestContext(new[] { "test" })' default)' Throws.InvalidOperationException); " is 162.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubSharedKeyCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubSharedKeyCredentialTests.cs,GetTokenAsyncIsNotPermitted,The length of the statement  "            Assert.That(async () => await (new EventHubSharedKeyCredential("key"' "value").GetTokenAsync(new TokenRequestContext(new[] { "thing" })' default))' Throws.InvalidOperationException); " is 182.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubSharedKeyCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubSharedKeyCredentialTests.cs,CovertToSharedAccessSignatureCredentialProducesTheExpectedCredential,The length of the statement  "            Assert.That(credentialSignature.SharedAccessKeyName' Is.EqualTo(signature.SharedAccessKeyName)' "The shared access key name should match."); " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubSharedKeyCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubSharedKeyCredentialTests.cs,CovertToSharedAccessSignatureCredentialProducesTheExpectedCredential,The length of the statement  "            Assert.That(credentialSignature.SharedAccessKey' Is.EqualTo(signature.SharedAccessKey)' "The shared access key should match."); " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubSharedKeyCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubSharedKeyCredentialTests.cs,CovertToSharedAccessSignatureCredentialProducesTheExpectedCredential,The length of the statement  "            Assert.That(credentialSignature.SignatureExpiration' Is.EqualTo(signature.SignatureExpiration).Within(TimeSpan.FromSeconds(5))' "The expiration should match."); " is 160.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubTokenCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubTokenCredentialTests.cs,ConstructorValidatesTheResource,The length of the statement  "            Assert.That(() => new EventHubTokenCredential(Mock.Of<TokenCredential>()' resource)' Throws.InstanceOf<ArgumentException>()); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubTokenCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubTokenCredentialTests.cs,GetTokenDelegatesToTheSourceCredential,The length of the statement  "                .Setup(cred => cred.GetToken(It.Is<TokenRequestContext>(value => value.Scopes.FirstOrDefault() == resource)' It.IsAny<CancellationToken>())) " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubTokenCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubTokenCredentialTests.cs,GetTokenAsyncDelegatesToTheSourceCredential,The length of the statement  "                .Setup(cred => cred.GetTokenAsync(It.Is<TokenRequestContext>(value => value.Scopes.FirstOrDefault() == resource)' It.IsAny<CancellationToken>())) " is 145.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubTokenCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubTokenCredentialTests.cs,GetTokenAsyncDelegatesToTheSourceCredential,The length of the statement  "            AccessToken tokenResult = await credential.GetTokenAsync(new TokenRequestContext(new[] { resource })' CancellationToken.None); " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureCredentialTests.cs,ConstructorInitializesProperties,The length of the statement  "            Assert.That(GetSharedAccessSignature(credential)' Is.SameAs(signature)' "The credential should allow the signature to be accessed."); " is 133.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureCredentialTests.cs,GetTokenReturnsTheSignatureValue,The length of the statement  "            Assert.That(credential.GetToken(new TokenRequestContext()' default).Token' Is.SameAs(signature.Value)' "The credential should return the signature as the token."); " is 163.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureCredentialTests.cs,GetTokenIgnoresScopeAndCancellationToken,The length of the statement  "            Assert.That(credential.GetToken(new TokenRequestContext(new[] { "test"' "this" })' CancellationToken.None).Token' Is.SameAs(signature.Value)' "The credential should return the signature as the token."); " is 202.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureCredentialTests.cs,GetTokenExtendsAnExpiredToken,The length of the statement  "            var signature = new SharedAccessSignature("hub-name"' "keyName"' "key"' value' DateTimeOffset.UtcNow.Subtract(TimeSpan.FromHours(2))); " is 134.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureCredentialTests.cs,GetTokenExtendsAnExpiredToken,The length of the statement  "            Assert.That(credential.GetToken(new TokenRequestContext()' default).ExpiresOn' Is.EqualTo(expectedExpiration).Within(TimeSpan.FromMinutes(1))); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureCredentialTests.cs,GetTokenExtendsATokenCloseToExpiring,The length of the statement  "            Assert.That(credential.GetToken(new TokenRequestContext()' default).ExpiresOn' Is.EqualTo(expectedExpiration).Within(TimeSpan.FromMinutes(1))); " is 143.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CompositeConstructorValidatesTheKeyName,The length of the statement  "            Assert.That(() => new SharedAccessSignature("amqps://some.namespace.com/hubName"' keyName' "OMG!"' TimeSpan.FromMilliseconds(500))' Throws.InstanceOf<ArgumentException>()); " is 172.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CompositeConstructorValidatesTheKey,The length of the statement  "            Assert.That(() => new SharedAccessSignature("amqps://some.namespace.com/hubName"' "myKey"' key' TimeSpan.FromMilliseconds(500))' Throws.InstanceOf<ArgumentException>()); " is 169.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CompositeConstructorDisallowsNegativeDuration,The length of the statement  "            Assert.That(() => new SharedAccessSignature("amqps://some.namespace.com/hubName"' "myKey"' "key"' TimeSpan.FromMilliseconds(-1))' Throws.InstanceOf<ArgumentException>()); " is 170.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CompositeConstructorSetsSimpleProperties,The length of the statement  "            var signature = new SharedAccessSignature("amqps://some.namespace.com/hubName"' keyName' keyValue' TimeSpan.FromSeconds(30)); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CompositeConstructorCreatesTheSignatureValue,The length of the statement  "            var signature = new SharedAccessSignature("amqps://some.namespace.com/hubName"' longLegalString' longLegalString' TimeSpan.FromDays(30)); " is 137.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,SignatureKeyConstructorValidatesTheKey,The length of the statement  "            Assert.That(() => new SharedAccessSignature("invalid-signature"' ThreeHundredCharacterString)' Throws.InstanceOf<ArgumentException>()); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,SignatureKeyConstructorSetsTheKey,The length of the statement  "            var signature = new SharedAccessSignature("SharedAccessSignature sr=amqps%3A%2F%2Fmy.eh.com%2Fsomepath%2F&sig=%2BLsuqDlN8Us5lp%2FGdyEUMnU1XA4HdXx%2BJUdtkRNr7qI%3D&se=1562258488&skn=keykeykey&notreal=123"' key); " is 210.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,SignatureOnlyConstructorDoesNotSetTheKey,The length of the statement  "            var signature = new SharedAccessSignature("SharedAccessSignature sr=amqps%3A%2F%2Fmy.eh.com%2Fsomepath%2F&sig=%2BLsuqDlN8Us5lp%2FGdyEUMnU1XA4HdXx%2BJUdtkRNr7qI%3D&se=1562258488&skn=keykeykey&notreal=123"); " is 205.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,SignatureConstructorsFailWithMalformedSignature,The length of the statement  "            Assert.That(() => constructor(invalid' "key")' Throws.ArgumentException' $"The { description } should fail for a malformed signature"); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,SignatureConstructorsParseTheSignature,The length of the statement  "            Assert.That(parsedSignature.SignatureExpiration' Is.EqualTo(expiration).Within(TimeSpan.FromSeconds(5))' "The expiration should be parsed."); " is 141.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,ParseExtractsValues,The length of the statement  "            var signature = "SharedAccessSignature sr=amqps%3A%2F%2Fmy.eh.com%2Fsomepath%2F&sig=%2BLsuqDlN8Us5lp%2FGdyEUMnU1XA4HdXx%2BJUdtkRNr7qI%3D&se=1562258488&skn=keykeykey"; " is 166.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,ExtendValidityValidatesTheDuration,The length of the statement  "            var signature = new SharedAccessSignature("SharedAccessSignature sr=amqps%3A%2F%2Fmy.eh.com%2Fsomepath%2F&sig=%2BLsuqDlN8Us5lp%2FGdyEUMnU1XA4HdXx%2BJUdtkRNr7qI%3D&se=1562258488&skn=keykeykey&notreal=123"); " is 205.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,ExtendValidityValidatesTheDuration,The length of the statement  "            Assert.That(() => signature.CloneWithNewExpiration(TimeSpan.FromMilliseconds(-1))' Throws.InstanceOf<ArgumentException>()); " is 123.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,ExtendValidityValidatesTheKey,The length of the statement  "            var signature = new SharedAccessSignature("SharedAccessSignature sr=amqps%3A%2F%2Fmy.eh.com%2Fsomepath%2F&sig=%2BLsuqDlN8Us5lp%2FGdyEUMnU1XA4HdXx%2BJUdtkRNr7qI%3D&se=1562258488&skn=keykeykey&notreal=123"); " is 205.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CloneProducesACopy,The length of the statement  "            Assert.That(clone.SignatureExpiration' Is.EqualTo(expectedCloneExpiration).Within(TimeSpan.FromSeconds(5))' "The expiration should have been extended."); " is 153.
Long Statement,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,ParseProducesCorrectValues,The length of the statement  "            Assert.That(parsed.ExpirationTime' Is.EqualTo(expiration).Within(TimeSpan.FromSeconds(5))' "The expiration should be parsed."); " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,ArgumentTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ArgumentTests.cs,ArgumentAtLeastEnforcesInvariants,The length of the statement  "            Assert.That(() => Argument.AssertAtLeast(value' minValue' nameof(value))' Throws.InstanceOf<ArgumentOutOfRangeException>()); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,ArgumentTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ArgumentTests.cs,ArgumentNotTooLongEnforcesInvariants,The length of the statement  "            Assert.That(() => Argument.AssertNotTooLong(value' maxLength' nameof(value))' Throws.InstanceOf<ArgumentOutOfRangeException>()); " is 128.
Long Statement,Azure.Messaging.EventHubs.Tests,ArgumentTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ArgumentTests.cs,NotDisposedEnforcesDisposed,The length of the statement  "            Assert.That(() => Argument.AssertNotDisposed(true' target)' Throws.InstanceOf<ObjectDisposedException>().And.Message.Contains(target)); " is 135.
Long Statement,Azure.Messaging.EventHubs.Tests,ArgumentTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ArgumentTests.cs,NotClosedEnforcesClosed,The length of the statement  "            Assert.That(() => Argument.AssertNotClosed(true' target)' Throws.InstanceOf<EventHubsClientClosedException>().And.Message.Contains(target)); " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,CancellationTokenExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\CancellationTokenExtensionsTests.cs,ThrowIfCancellationRequestedThrowsTheRequestedType,The length of the statement  "            Assert.That(() => source.Token.ThrowIfCancellationRequested<TaskCanceledException>()' Throws.InstanceOf<TaskCanceledException>()' "A TaskCanceledException was requested and should have been thrown."); " is 200.
Long Statement,Azure.Messaging.EventHubs.Tests,CancellationTokenExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\CancellationTokenExtensionsTests.cs,ThrowIfCancellationRequestedThrowsTheRequestedType,The length of the statement  "            Assert.That(() => source.Token.ThrowIfCancellationRequested<ArithmeticException>()' Throws.InstanceOf<ArithmeticException>()' "A ArithmeticException was requested and should have been thrown."); " is 194.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseDoesNotforceTokenOrderingCases,The length of the statement  "            yield return new object[] { $"Endpoint=sb://{ endpoint };SharedAccessKeyName={ sasKeyName };SharedAccessKey={ sasKey };EntityPath={ eventHub }"' endpoint' eventHub' sasKeyName' sasKey }; " is 186.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseDoesNotforceTokenOrderingCases,The length of the statement  "            yield return new object[] { $"Endpoint=sb://{ endpoint };SharedAccessKey={ sasKey };EntityPath={ eventHub };SharedAccessKeyName={ sasKeyName }"' endpoint' eventHub' sasKeyName' sasKey }; " is 186.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseDoesNotforceTokenOrderingCases,The length of the statement  "            yield return new object[] { $"Endpoint=sb://{ endpoint };EntityPath={ eventHub };SharedAccessKeyName={ sasKeyName };SharedAccessKey={ sasKey }"' endpoint' eventHub' sasKeyName' sasKey }; " is 186.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseDoesNotforceTokenOrderingCases,The length of the statement  "            yield return new object[] { $"SharedAccessKeyName={ sasKeyName };SharedAccessKey={ sasKey };Endpoint=sb://{ endpoint };EntityPath={ eventHub }"' endpoint' eventHub' sasKeyName' sasKey }; " is 186.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseDoesNotforceTokenOrderingCases,The length of the statement  "            yield return new object[] { $"EntityPath={ eventHub };SharedAccessKey={ sasKey };SharedAccessKeyName={ sasKeyName };Endpoint=sb://{ endpoint }"' endpoint' eventHub' sasKeyName' sasKey }; " is 186.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseCorrectlyParsesPartialConnectionStrings,The length of the statement  "            yield return new object[] { $"EntityPath={ eventHub };SharedAccessKeyName={ sasKeyName }"' null' eventHub' sasKeyName' null }; " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseCorrectlyParsesPartialConnectionStrings,The length of the statement  "            yield return new object[] { $"SharedAccessKeyName={ sasKeyName };SharedAccessKey={ sasKey }"' null' null' sasKeyName' sasKey }; " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseCorrectlyParsesPartialConnectionStrings,The length of the statement  "            yield return new object[] { $"EntityPath={ eventHub };SharedAccessKey={ sasKey };SharedAccessKeyName={ sasKeyName }"' null' eventHub' sasKeyName' sasKey }; " is 155.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseValidatesArguments,The length of the statement  "            ExactTypeConstraint typeConstraint = connectionString is null ? Throws.ArgumentNullException : Throws.ArgumentException; " is 120.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseCorrectlyParsesANamespaceConnectionString,The length of the statement  "            Assert.That(parsed.Endpoint?.Host' Is.EqualTo(endpoint).Using((IComparer<string>)StringComparer.OrdinalIgnoreCase)' "The endpoint host should match."); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseCorrectlyParsesAnEventHubConnectionString,The length of the statement  "            var connectionString = $"Endpoint=sb://{ endpoint };SharedAccessKeyName={ sasKeyName };SharedAccessKey={ sasKey };EntityPath={ eventHub }"; " is 139.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseCorrectlyParsesAnEventHubConnectionString,The length of the statement  "            Assert.That(parsed.Endpoint?.Host' Is.EqualTo(endpoint).Using((IComparer<string>)StringComparer.OrdinalIgnoreCase)' "The endpoint host should match."); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseCorrectlyParsesPartialConnectionStrings,The length of the statement  "            Assert.That(parsed.Endpoint?.Host' Is.EqualTo(endpoint).Using((IComparer<string>)StringComparer.OrdinalIgnoreCase)' "The endpoint host should match."); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseToleratesLeadingDelimiters,The length of the statement  "            var connectionString = $";Endpoint=sb://{ endpoint };SharedAccessKeyName={ sasKeyName };SharedAccessKey={ sasKey };EntityPath={ eventHub }"; " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseToleratesLeadingDelimiters,The length of the statement  "            Assert.That(parsed.Endpoint?.Host' Is.EqualTo(endpoint).Using((IComparer<string>)StringComparer.OrdinalIgnoreCase)' "The endpoint host should match."); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseToleratesTrailingDelimiters,The length of the statement  "            var connectionString = $"Endpoint=sb://{ endpoint };SharedAccessKeyName={ sasKeyName };SharedAccessKey={ sasKey };EntityPath={ eventHub };"; " is 140.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseToleratesTrailingDelimiters,The length of the statement  "            Assert.That(parsed.Endpoint?.Host' Is.EqualTo(endpoint).Using((IComparer<string>)StringComparer.OrdinalIgnoreCase)' "The endpoint host should match."); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseToleratesSpacesBetweenPairs,The length of the statement  "            var connectionString = $"Endpoint=sb://{ endpoint }; SharedAccessKeyName={ sasKeyName }; SharedAccessKey={ sasKey }; EntityPath={ eventHub }"; " is 142.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseToleratesSpacesBetweenPairs,The length of the statement  "            Assert.That(parsed.Endpoint?.Host' Is.EqualTo(endpoint).Using((IComparer<string>)StringComparer.OrdinalIgnoreCase)' "The endpoint host should match."); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseToleratesSpacesBetweenValues,The length of the statement  "            var connectionString = $"Endpoint = sb://{ endpoint };SharedAccessKeyName ={ sasKeyName };SharedAccessKey= { sasKey }; EntityPath  =  { eventHub }"; " is 148.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseToleratesSpacesBetweenValues,The length of the statement  "            Assert.That(parsed.Endpoint?.Host' Is.EqualTo(endpoint).Using((IComparer<string>)StringComparer.OrdinalIgnoreCase)' "The endpoint host should match."); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseDoesNotForceTokenOrdering,The length of the statement  "            Assert.That(parsed.Endpoint?.Host' Is.EqualTo(endpoint).Using((IComparer<string>)StringComparer.OrdinalIgnoreCase)' "The endpoint host should match."); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseIgnoresUnknownTokens,The length of the statement  "            var connectionString = $"Endpoint=sb://{ endpoint };SharedAccessKeyName={ sasKeyName };Unknown=INVALID;SharedAccessKey={ sasKey };EntityPath={ eventHub };Trailing=WHOAREYOU"; " is 174.
Long Statement,Azure.Messaging.EventHubs.Tests,ConnectionStringParserTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ConnectionStringParserTests.cs,ParseIgnoresUnknownTokens,The length of the statement  "            Assert.That(parsed.Endpoint?.Host' Is.EqualTo(endpoint).Using((IComparer<string>)StringComparer.OrdinalIgnoreCase)' "The endpoint host should match."); " is 151.
Long Statement,Azure.Messaging.EventHubs.Tests,TimeSpanExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\TimeSpanExtensionsTests.cs,CalculateRemainingTestCases,The length of the statement  "            yield return new object[] { TimeSpan.FromSeconds(10.279)' TimeSpan.FromSeconds(6.134)' TimeSpan.FromSeconds(10.279 - 6.134) }; " is 126.
Long Statement,Azure.Messaging.EventHubs.Tests,TimeSpanExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\TimeSpanExtensionsTests.cs,CalculateRemainingTestCases,The length of the statement  "            yield return new object[] { TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(25)' TimeSpan.FromMilliseconds(25) }; " is 122.
Long Statement,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayUsesFixedMode,The length of the statement  "                Assert.That(policy.CalculateRetryDelay(Mock.Of<TimeoutException>()' 88)' Is.EqualTo(policy.Options.Delay).Within(variance)' $"Iteration: { index } produced an unexpected delay."); " is 179.
Long Statement,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayUsesExponentialMode,The length of the statement  "                Assert.That(delay.Value' Is.GreaterThan(previousDelay.Add(variance))' $"Iteration: { index } produced an unexpected delay."); " is 125.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,CloneProducesACopy,The length of the statement  "            Assert.That(clone.MaximumRetries' Is.EqualTo(options.MaximumRetries)' "The maximum retry limit of the clone should match."); " is 124.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,ToRetryPolicyWithoutCustomPolicyCreatesThePolicy,The length of the statement  "            Assert.That(((BasicRetryPolicy)policy).Options' Is.SameAs(options)' "The options should have been used for the retry policy."); " is 127.
Long Statement,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,ToRetryPolicyWithoutCustomPolicyCreatesThePolicy,The length of the statement  "            Assert.That(policy' Is.Not.SameAs(options.CustomRetryPolicy)' "The custom retry policy should not have been used' since it was not populated."); " is 144.
Long Statement,Azure.Core,Argument,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\Argument.cs,AssertNotEmptyOrWhiteSpace,The length of the statement  "                throw new ArgumentException($"The argument '{argumentName}' may not be empty or white-space' though it may be null."' argumentName); " is 132.
Long Statement,Azure.Core,Argument,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\Argument.cs,AssertNotTooLong,The length of the statement  "                throw new ArgumentOutOfRangeException(argumentName' $"The argument '{argumentName}' cannot exceed {maximumLength} characters."); " is 128.
Long Statement,Azure.Core,Argument,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\Argument.cs,AssertNotNegative,The length of the statement  "                throw new ArgumentOutOfRangeException(argumentName' $"Argument {argumentName} must be a non-negative timespan value. The provided value was {argumentValue}."); " is 159.
Long Statement,Azure.Core,Argument,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\Argument.cs,AssertAtLeast,The length of the statement  "                throw new ArgumentOutOfRangeException(argumentName' $"The value supplied must be greater than or equal to {minimumValue}."); " is 124.
Long Statement,Azure.Core,Argument,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\Argument.cs,AssertNotDisposed,The length of the statement  "                throw new ObjectDisposedException(targetName' string.Format(CultureInfo.CurrentCulture' Resources.ClosedInstanceCannotPerformOperation' targetName)); " is 149.
Long Statement,Azure.Core,Argument,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\Argument.cs,AssertNotClosed,The length of the statement  "                throw new EventHubsClientClosedException(targetName' string.Format(CultureInfo.CurrentCulture' Resources.ClosedInstanceCannotPerformOperation' targetName)); " is 156.
Long Statement,Azure.Messaging.EventHubs.Core,BasicRetryPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Core\BasicRetryPolicy.cs,CalculateRetryDelay,The length of the statement  "                EventHubsRetryMode.Fixed => CalculateFixedDelay(Options.Delay.TotalSeconds' baseJitterSeconds' RandomNumberGenerator.Value)' " is 124.
Long Statement,Azure.Messaging.EventHubs.Core,BasicRetryPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Core\BasicRetryPolicy.cs,CalculateRetryDelay,The length of the statement  "                EventHubsRetryMode.Exponential => CalculateExponentialDelay(attemptCount' Options.Delay.TotalSeconds' baseJitterSeconds' RandomNumberGenerator.Value)' " is 150.
Long Statement,Azure.Messaging.EventHubs.Core,BasicRetryPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Core\BasicRetryPolicy.cs,CalculateRetryDelay,The length of the statement  "                _ => throw new NotSupportedException(string.Format(CultureInfo.CurrentCulture' Resources.UnknownRetryMode' Options.Mode.ToString()))' " is 133.
Long Statement,Azure.Messaging.EventHubs.Diagnostics,EventDataInstrumentation,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Diagnostics\EventDataInstrumentation.cs,TryExtractDiagnosticId,The length of the statement  "            if (eventData.Properties.TryGetValue(DiagnosticProperty.DiagnosticIdAttribute' out var objectId) && objectId is string stringId) " is 128.
Long Statement,Azure.Messaging.EventHubs.Authorization,SharedAccessSignature,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Authorization\SharedAccessSignature.cs,BuildSignature,The length of the statement  "                var signature = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes($"{ encodedAudience }\n{ expiration }"))); " is 121.
Long Statement,Azure.Core.Testing,AsyncValidatingStream,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\AsyncValidatingStream.cs,Validate,The length of the statement  "                throw new InvalidOperationException("All stream calls were expected to be " + (_isAsync ? "async" : "sync") + " but were " + (isAsync ? "async" : "sync")); " is 155.
Long Statement,Azure.Core.Testing,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientTestBase.cs,InstrumentClient,The length of the statement  "                        ClientValidation<TClient>.ValidationException = new InvalidOperationException($"Client type contains public non-virtual async method {methodInfo.Name}"); " is 153.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                bool strict = !invocation.Method.GetCustomAttributes(true).Any(a => a.GetType().FullName == "Azure.Core.ForwardsClientCallsAttribute"); " is 135.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                        MethodInfo getResultMethod = getAwaiterMethod.ReturnType.GetMethod("GetResult"' BindingFlags.Instance | BindingFlags.Public); " is 125.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                            (string Key' object Value' DiagnosticListener Listener) e = diagnosticListener.Events.FirstOrDefault(e => e.Key == expectedEvent); " is 130.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                                throw new InvalidOperationException($"Expected diagnostic event not fired {expectedEvent} {Environment.NewLine}    fired events {string.Join("' "' diagnosticListener.Events)} {Environment.NewLine}    You may have forgotten to set your operationId to {expectedEvent} in {methodName} or applied the Azure.Core.ForwardsClientCallsAttribute to {methodName}."); " is 356.
Long Statement,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The length of the statement  "                                throw new InvalidOperationException($"{e.Key} event was written into wrong DiagnosticSource {e.Listener.Name}' expected: {ns}"); " is 128.
Long Statement,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The length of the statement  "                    if (property.PropertyType == type && property.CanRead && !property.CanWrite && Includes(property.Name) && !Excludes(property.Name)) " is 131.
Long Statement,Azure.Core.Testing,UseSyncMethodsInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\UseSyncMethodsInterceptor.cs,Intercept,The length of the statement  "                throw new InvalidOperationException($"Unable to find a method with name {nonAsyncMethodName} and {string.Join<Type>("'"' parameterTypes)} parameters. " " is 151.
Long Statement,Azure.Core.Tests,ClientDiagnosticListener,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\ClientDiagnosticListener.cs,AssertScopeStarted,The length of the statement  "                                throw new InvalidOperationException($"Attribute {expectedAttribute} not found' existing attributes: {string.Join("'"' producedDiagnosticScope.Activity.Tags)}"); " is 160.
Complex Conditional,Azure.Messaging.EventHubs.Tests,EventDataExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Testing\EventDataExtensions.cs,IsEquivalentTo,The conditional expression  "(instance.Offset != other.Offset)                      || (instance.EnqueuedTime != other.EnqueuedTime)                      || (instance.PartitionKey != other.PartitionKey)                      || (instance.SequenceNumber != other.SequenceNumber)"  is complex.
Complex Conditional,Azure.Messaging.EventHubs.Core,BasicRetryPolicy,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\src\Core\BasicRetryPolicy.cs,CalculateRetryDelay,The conditional expression  "(Options.MaximumRetries <= 0)                  || (Options.Delay == TimeSpan.Zero)                  || (Options.MaximumDelay == TimeSpan.Zero)                  || (attemptCount > Options.MaximumRetries)                  || (!ShouldRetryException(lastException))"  is complex.
Complex Conditional,Azure.Core.Pipeline,TestFrameworkContentTypeUtilities,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\ContentTypeUtilities.cs,TryGetTextEncoding,The conditional expression  "contentType.StartsWith(textContentTypePrefix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(jsonSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(xmlSuffix' StringComparison.OrdinalIgnoreCase) ||                  contentType.EndsWith(urlEncodedSuffix' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The conditional expression  "property.PropertyType == type && property.CanRead && !property.CanWrite && Includes(property.Name) && !Excludes(property.Name)"  is complex.
Complex Conditional,Azure.Core.Testing,EnumValuesAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\EnumValuesAttribute.cs,GetMembersImpl,The conditional expression  "field.FieldType == type && (field.IsInitOnly || field.IsLiteral) && Includes(field.Name) && !Excludes(field.Name)"  is complex.
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubSharedKeyCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubSharedKeyCredentialTests.cs,CovertToSharedAccessSignatureCredentialProducesTheExpectedCredential,The following statement contains a magic number: var validSpan = TimeSpan.FromHours(4);
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubSharedKeyCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubSharedKeyCredentialTests.cs,CovertToSharedAccessSignatureCredentialProducesTheExpectedCredential,The following statement contains a magic number: Assert.That(credentialSignature.SignatureExpiration' Is.EqualTo(signature.SignatureExpiration).Within(TimeSpan.FromSeconds(5))' "The expiration should match.");
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubTokenCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubTokenCredentialTests.cs,SharedAccessSignatureCredentialTestCases,The following statement contains a magic number: var signature = new SharedAccessSignature("hub"' "keyName"' "key"' "TOkEn!"' DateTimeOffset.UtcNow.AddHours(4));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubTokenCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubTokenCredentialTests.cs,GetTokenDelegatesToTheSourceCredential,The following statement contains a magic number: var accessToken = new AccessToken("token"' new DateTimeOffset(2015' 10' 27' 12' 0' 0' TimeSpan.Zero));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubTokenCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubTokenCredentialTests.cs,GetTokenDelegatesToTheSourceCredential,The following statement contains a magic number: var accessToken = new AccessToken("token"' new DateTimeOffset(2015' 10' 27' 12' 0' 0' TimeSpan.Zero));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubTokenCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubTokenCredentialTests.cs,GetTokenDelegatesToTheSourceCredential,The following statement contains a magic number: var accessToken = new AccessToken("token"' new DateTimeOffset(2015' 10' 27' 12' 0' 0' TimeSpan.Zero));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubTokenCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubTokenCredentialTests.cs,GetTokenDelegatesToTheSourceCredential,The following statement contains a magic number: var accessToken = new AccessToken("token"' new DateTimeOffset(2015' 10' 27' 12' 0' 0' TimeSpan.Zero));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubTokenCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubTokenCredentialTests.cs,GetTokenAsyncDelegatesToTheSourceCredential,The following statement contains a magic number: var accessToken = new AccessToken("token"' new DateTimeOffset(2015' 10' 27' 12' 0' 0' TimeSpan.Zero));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubTokenCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubTokenCredentialTests.cs,GetTokenAsyncDelegatesToTheSourceCredential,The following statement contains a magic number: var accessToken = new AccessToken("token"' new DateTimeOffset(2015' 10' 27' 12' 0' 0' TimeSpan.Zero));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubTokenCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubTokenCredentialTests.cs,GetTokenAsyncDelegatesToTheSourceCredential,The following statement contains a magic number: var accessToken = new AccessToken("token"' new DateTimeOffset(2015' 10' 27' 12' 0' 0' TimeSpan.Zero));
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubTokenCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\EventHubTokenCredentialTests.cs,GetTokenAsyncDelegatesToTheSourceCredential,The following statement contains a magic number: var accessToken = new AccessToken("token"' new DateTimeOffset(2015' 10' 27' 12' 0' 0' TimeSpan.Zero));
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureCredentialTests.cs,ConstructorInitializesProperties,The following statement contains a magic number: var signature = new SharedAccessSignature("hub-name"' "keyName"' "key"' value' DateTimeOffset.UtcNow.AddHours(4));
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureCredentialTests.cs,GetTokenReturnsTheSignatureValue,The following statement contains a magic number: var signature = new SharedAccessSignature("hub-name"' "keyName"' "key"' value' DateTimeOffset.UtcNow.AddHours(4));
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureCredentialTests.cs,GetTokenIgnoresScopeAndCancellationToken,The following statement contains a magic number: var signature = new SharedAccessSignature("hub-name"' "keyName"' "key"' value' DateTimeOffset.UtcNow.AddHours(4));
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureCredentialTests.cs,GetTokenAsyncReturnsTheSignatureValue,The following statement contains a magic number: var signature = new SharedAccessSignature("hub-name"' "keyName"' "key"' value' DateTimeOffset.UtcNow.AddHours(4));
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureCredentialTests.cs,GetTokenAsyncIgnoresScopeAndCancellationToken,The following statement contains a magic number: var signature = new SharedAccessSignature("hub-name"' "keyName"' "key"' value' DateTimeOffset.UtcNow.AddHours(4));
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureCredentialTests.cs,GetTokenExtendsAnExpiredToken,The following statement contains a magic number: var signature = new SharedAccessSignature("hub-name"' "keyName"' "key"' value' DateTimeOffset.UtcNow.Subtract(TimeSpan.FromHours(2)));
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureCredentialTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureCredentialTests.cs,GetTokenExtendsATokenCloseToExpiring,The following statement contains a magic number: var tokenExpiration = DateTimeOffset.UtcNow.Add(TimeSpan.FromSeconds(GetSignatureRefreshBuffer().TotalSeconds / 2));
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,ToStringReflectsTheValue,The following statement contains a magic number: var signature = new SharedAccessSignature("hub"' "keyName"' "key"' expected' DateTimeOffset.UtcNow.AddHours(4));
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CompositeConstructorValidatesTheResource,The following statement contains a magic number: Assert.That(() => new SharedAccessSignature(resource' "Yay"' "OMG!"' TimeSpan.FromMilliseconds(500))' typeConstraint);
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CompositeConstructorValidatesTheKeyName,The following statement contains a magic number: Assert.That(() => new SharedAccessSignature("amqps://some.namespace.com/hubName"' keyName' "OMG!"' TimeSpan.FromMilliseconds(500))' Throws.InstanceOf<ArgumentException>());
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CompositeConstructorValidatesTheKey,The following statement contains a magic number: Assert.That(() => new SharedAccessSignature("amqps://some.namespace.com/hubName"' "myKey"' key' TimeSpan.FromMilliseconds(500))' Throws.InstanceOf<ArgumentException>());
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CompositeConstructorSetsSimpleProperties,The following statement contains a magic number: var signature = new SharedAccessSignature("amqps://some.namespace.com/hubName"' keyName' keyValue' TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CompositeConstructorComputesTheExpirationWhenProvided,The following statement contains a magic number: var timeToLive = TimeSpan.FromMinutes(10);
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CompositeConstructorComputesTheExpirationWhenProvided,The following statement contains a magic number: var allowedVariance = TimeSpan.FromSeconds(5);
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CompositePopulatesTheResource,The following statement contains a magic number: var signature = new SharedAccessSignature(resource' "theKey"' "keykeykey"' TimeSpan.FromSeconds(30));
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CompositeConstructorCreatesTheSignatureValue,The following statement contains a magic number: var longLegalString = new string('G'' 250);
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CompositeConstructorCreatesTheSignatureValue,The following statement contains a magic number: var signature = new SharedAccessSignature("amqps://some.namespace.com/hubName"' longLegalString' longLegalString' TimeSpan.FromDays(30));
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,SignatureConstructorsParseTheSignature,The following statement contains a magic number: var validFor = TimeSpan.FromMinutes(30);
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,SignatureConstructorsParseTheSignature,The following statement contains a magic number: Assert.That(parsedSignature.SignatureExpiration' Is.EqualTo(expiration).Within(TimeSpan.FromSeconds(5))' "The expiration should be parsed.");
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,ExtendValidityValidatesTheKey,The following statement contains a magic number: Assert.That(() => signature.CloneWithNewExpiration(TimeSpan.FromMilliseconds(21))' Throws.InvalidOperationException);
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CloneAndExtendExpirationUpdatesTheSignatureValue,The following statement contains a magic number: var validFor = TimeSpan.FromMinutes(30);
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CloneAndExtendExpirationUpdatesTheSignatureValue,The following statement contains a magic number: parsedSignature = parsedSignature.CloneWithNewExpiration(TimeSpan.FromHours(4));
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CloneAndExtendExpirationUpdatesTheExpirationTime,The following statement contains a magic number: var validFor = TimeSpan.FromMinutes(30);
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CloneAndExtendExpirationUpdatesTheExpirationTime,The following statement contains a magic number: Assert.That(parsedSignature.SignatureExpiration' Is.EqualTo(expiration).Within(TimeSpan.FromSeconds(5)));
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CloneProducesACopy,The following statement contains a magic number: var validFor = TimeSpan.FromMinutes(30);
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CloneProducesACopy,The following statement contains a magic number: var extendBy = TimeSpan.FromMinutes(12);
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,CloneProducesACopy,The following statement contains a magic number: Assert.That(clone.SignatureExpiration' Is.EqualTo(expectedCloneExpiration).Within(TimeSpan.FromSeconds(5))' "The expiration should have been extended.");
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,ParseProducesCorrectValues,The following statement contains a magic number: var validFor = TimeSpan.FromMinutes(30);
Magic Number,Azure.Messaging.EventHubs.Tests,SharedAccessSignatureTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Authorization\SharedAccessSignatureTests.cs,ParseProducesCorrectValues,The following statement contains a magic number: Assert.That(parsed.ExpirationTime' Is.EqualTo(expiration).Within(TimeSpan.FromSeconds(5))' "The expiration should be parsed.");
Magic Number,Azure.Messaging.EventHubs.Tests,ArgumentTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ArgumentTests.cs,ArgumentNotNegativeForTimeSpanInvalidCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromSeconds(-2) };
Magic Number,Azure.Messaging.EventHubs.Tests,ArgumentTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ArgumentTests.cs,ArgumentNotNegativeForTimeSpanInvalidCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromHours(-3) };
Magic Number,Azure.Messaging.EventHubs.Tests,ArgumentTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ArgumentTests.cs,ArgumentNotNegativeForTimeSpanInvalidCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromDays(-0.3) };
Magic Number,Azure.Messaging.EventHubs.Tests,ArgumentTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ArgumentTests.cs,ArgumentNotNegativeForTimeSpanInvalidCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromTicks(-100) };
Magic Number,Azure.Messaging.EventHubs.Tests,ArgumentTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\ArgumentTests.cs,ArgumentNotNegativeForTimeSpanValidCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromDays(0.3) };
Magic Number,Azure.Messaging.EventHubs.Tests,TimeSpanExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\TimeSpanExtensionsTests.cs,CalculateRemainingTestCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromSeconds(10)' TimeSpan.FromSeconds(9)' TimeSpan.FromSeconds(1) };
Magic Number,Azure.Messaging.EventHubs.Tests,TimeSpanExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\TimeSpanExtensionsTests.cs,CalculateRemainingTestCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromSeconds(10)' TimeSpan.FromSeconds(9)' TimeSpan.FromSeconds(1) };
Magic Number,Azure.Messaging.EventHubs.Tests,TimeSpanExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\TimeSpanExtensionsTests.cs,CalculateRemainingTestCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromSeconds(10.279)' TimeSpan.FromSeconds(6.134)' TimeSpan.FromSeconds(10.279 - 6.134) };
Magic Number,Azure.Messaging.EventHubs.Tests,TimeSpanExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\TimeSpanExtensionsTests.cs,CalculateRemainingTestCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromSeconds(10.279)' TimeSpan.FromSeconds(6.134)' TimeSpan.FromSeconds(10.279 - 6.134) };
Magic Number,Azure.Messaging.EventHubs.Tests,TimeSpanExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\TimeSpanExtensionsTests.cs,CalculateRemainingTestCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromSeconds(10.279)' TimeSpan.FromSeconds(6.134)' TimeSpan.FromSeconds(10.279 - 6.134) };
Magic Number,Azure.Messaging.EventHubs.Tests,TimeSpanExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\TimeSpanExtensionsTests.cs,CalculateRemainingTestCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromSeconds(10.279)' TimeSpan.FromSeconds(6.134)' TimeSpan.FromSeconds(10.279 - 6.134) };
Magic Number,Azure.Messaging.EventHubs.Tests,TimeSpanExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\TimeSpanExtensionsTests.cs,CalculateRemainingTestCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(25)' TimeSpan.FromMilliseconds(25) };
Magic Number,Azure.Messaging.EventHubs.Tests,TimeSpanExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\TimeSpanExtensionsTests.cs,CalculateRemainingTestCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(25)' TimeSpan.FromMilliseconds(25) };
Magic Number,Azure.Messaging.EventHubs.Tests,TimeSpanExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\TimeSpanExtensionsTests.cs,CalculateRemainingTestCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromMilliseconds(50)' TimeSpan.FromMilliseconds(25)' TimeSpan.FromMilliseconds(25) };
Magic Number,Azure.Messaging.EventHubs.Tests,TimeSpanExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\TimeSpanExtensionsTests.cs,CalculateRemainingTestCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromMilliseconds(50.2)' TimeSpan.FromMilliseconds(49.6)' TimeSpan.Zero };
Magic Number,Azure.Messaging.EventHubs.Tests,TimeSpanExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\TimeSpanExtensionsTests.cs,CalculateRemainingTestCases,The following statement contains a magic number: yield return new object[] { TimeSpan.FromMilliseconds(50.2)' TimeSpan.FromMilliseconds(49.6)' TimeSpan.Zero };
Magic Number,Azure.Messaging.EventHubs.Tests,TimeSpanExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Core\TimeSpanExtensionsTests.cs,CalculateRemainingWithNegativeTimeRemaining,The following statement contains a magic number: TimeSpan elapsed = time.Add(TimeSpan.FromMilliseconds(50));
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,RetriableExceptionTestCases,The following statement contains a magic number: yield return new object[] { new SocketException(500) };
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalulateTryTimeoutRespectsOptions,The following statement contains a magic number: var timeout = TimeSpan.FromSeconds(5);
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayDoesNotRetryWhenThereIsNoMaximumDelay,The following statement contains a magic number: var policy = new BasicRetryPolicy(new EventHubsRetryOptions              {                  MaximumRetries = 99'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.Zero'                  Mode = EventHubsRetryMode.Fixed              });
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayDoesNotRetryWhenThereIsNoMaximumDelay,The following statement contains a magic number: Assert.That(policy.CalculateRetryDelay(Mock.Of<TimeoutException>()' 88)' Is.Null);
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayDoesNotRetryWhenAttemptsExceedTheMaximum,The following statement contains a magic number: var policy = new BasicRetryPolicy(new EventHubsRetryOptions              {                  MaximumRetries = 5'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromHours(1)'                  Mode = EventHubsRetryMode.Fixed              });
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayAllowsRetryForTransientExceptions,The following statement contains a magic number: var policy = new BasicRetryPolicy(new EventHubsRetryOptions              {                  MaximumRetries = 99'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(100)'                  Mode = EventHubsRetryMode.Fixed              });
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayAllowsRetryForTransientExceptions,The following statement contains a magic number: var policy = new BasicRetryPolicy(new EventHubsRetryOptions              {                  MaximumRetries = 99'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(100)'                  Mode = EventHubsRetryMode.Fixed              });
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayAllowsRetryForTransientExceptions,The following statement contains a magic number: Assert.That(policy.CalculateRetryDelay(new EventHubsException(true' null' null)' 88)' Is.Not.Null);
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayAllowsRetryForKnownRetriableExceptions,The following statement contains a magic number: var policy = new BasicRetryPolicy(new EventHubsRetryOptions              {                  MaximumRetries = 99'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(100)'                  Mode = EventHubsRetryMode.Fixed              });
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayAllowsRetryForKnownRetriableExceptions,The following statement contains a magic number: var policy = new BasicRetryPolicy(new EventHubsRetryOptions              {                  MaximumRetries = 99'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(100)'                  Mode = EventHubsRetryMode.Fixed              });
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayAllowsRetryForKnownRetriableExceptions,The following statement contains a magic number: Assert.That(policy.CalculateRetryDelay(exception' 88)' Is.Not.Null);
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayDoesNotRetryForNotKnownRetriableExceptions,The following statement contains a magic number: var policy = new BasicRetryPolicy(new EventHubsRetryOptions              {                  MaximumRetries = 99'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(100)'                  Mode = EventHubsRetryMode.Fixed              });
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayDoesNotRetryForNotKnownRetriableExceptions,The following statement contains a magic number: var policy = new BasicRetryPolicy(new EventHubsRetryOptions              {                  MaximumRetries = 99'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(100)'                  Mode = EventHubsRetryMode.Fixed              });
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayDoesNotRetryForNotKnownRetriableExceptions,The following statement contains a magic number: Assert.That(policy.CalculateRetryDelay(exception' 88)' Is.Null);
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayRespectsMaximumDuration,The following statement contains a magic number: var policy = new BasicRetryPolicy(new EventHubsRetryOptions              {                  MaximumRetries = 99'                  Delay = TimeSpan.FromSeconds(delaySeconds)'                  MaximumDelay = TimeSpan.FromSeconds(1)'                  Mode = EventHubsRetryMode.Fixed              });
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayRespectsMaximumDuration,The following statement contains a magic number: Assert.That(policy.CalculateRetryDelay(Mock.Of<TimeoutException>()' 88)' Is.EqualTo(policy.Options.MaximumDelay));
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayUsesFixedMode,The following statement contains a magic number: var policy = new BasicRetryPolicy(new EventHubsRetryOptions              {                  MaximumRetries = 99'                  Delay = TimeSpan.FromSeconds(iterations)'                  MaximumDelay = TimeSpan.FromHours(72)'                  Mode = EventHubsRetryMode.Fixed              });
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayUsesFixedMode,The following statement contains a magic number: var policy = new BasicRetryPolicy(new EventHubsRetryOptions              {                  MaximumRetries = 99'                  Delay = TimeSpan.FromSeconds(iterations)'                  MaximumDelay = TimeSpan.FromHours(72)'                  Mode = EventHubsRetryMode.Fixed              });
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayUsesFixedMode,The following statement contains a magic number: Assert.That(policy.CalculateRetryDelay(Mock.Of<TimeoutException>()' 88)' Is.EqualTo(policy.Options.Delay).Within(variance)' $"Iteration: { index } produced an unexpected delay.");
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayUsesExponentialMode,The following statement contains a magic number: var policy = new BasicRetryPolicy(new EventHubsRetryOptions              {                  MaximumRetries = 99'                  Delay = TimeSpan.FromMilliseconds(15)'                  MaximumDelay = TimeSpan.FromHours(50000)'                  Mode = EventHubsRetryMode.Exponential              });
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayUsesExponentialMode,The following statement contains a magic number: var policy = new BasicRetryPolicy(new EventHubsRetryOptions              {                  MaximumRetries = 99'                  Delay = TimeSpan.FromMilliseconds(15)'                  MaximumDelay = TimeSpan.FromHours(50000)'                  Mode = EventHubsRetryMode.Exponential              });
Magic Number,Azure.Messaging.EventHubs.Tests,BasicRetryPolicyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\BasicRetryPolicyTests.cs,CalculateRetryDelayUsesExponentialMode,The following statement contains a magic number: var policy = new BasicRetryPolicy(new EventHubsRetryOptions              {                  MaximumRetries = 99'                  Delay = TimeSpan.FromMilliseconds(15)'                  MaximumDelay = TimeSpan.FromHours(50000)'                  Mode = EventHubsRetryMode.Exponential              });
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,CloneProducesACopy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = Mock.Of<EventHubsRetryPolicy>()              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,CloneProducesACopy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = Mock.Of<EventHubsRetryPolicy>()              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,CloneProducesACopy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = Mock.Of<EventHubsRetryPolicy>()              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,ToRetryPolicyWithoutCustomPolicyCreatesThePolicy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = null              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,ToRetryPolicyWithoutCustomPolicyCreatesThePolicy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = null              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,ToRetryPolicyWithoutCustomPolicyCreatesThePolicy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = null              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,ToRetryPolicyWithCustomPolicyUsesTheCustomPolicy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = Mock.Of<EventHubsRetryPolicy>()              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,ToRetryPolicyWithCustomPolicyUsesTheCustomPolicy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = Mock.Of<EventHubsRetryPolicy>()              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,ToRetryPolicyWithCustomPolicyUsesTheCustomPolicy,The following statement contains a magic number: var options = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 65'                  Delay = TimeSpan.FromSeconds(1)'                  MaximumDelay = TimeSpan.FromSeconds(2)'                  TryTimeout = TimeSpan.FromSeconds(3)'                  CustomRetryPolicy = Mock.Of<EventHubsRetryPolicy>()              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsMaximumRetries,The following statement contains a magic number: var first = new EventHubsRetryOptions { MaximumRetries = 7 };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsMaximumRetries,The following statement contains a magic number: var second = new EventHubsRetryOptions { MaximumRetries = 99 };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsMaximumDelay,The following statement contains a magic number: var first = new EventHubsRetryOptions { MaximumDelay = TimeSpan.FromSeconds(7) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsMaximumDelay,The following statement contains a magic number: var second = new EventHubsRetryOptions { MaximumDelay = TimeSpan.FromSeconds(8) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsDelay,The following statement contains a magic number: var first = new EventHubsRetryOptions { Delay = TimeSpan.FromSeconds(7) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsTryTimeout,The following statement contains a magic number: var first = new EventHubsRetryOptions { TryTimeout = TimeSpan.FromSeconds(9) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsTryTimeout,The following statement contains a magic number: var second = new EventHubsRetryOptions { TryTimeout = TimeSpan.FromSeconds(8) };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsSameInstance,The following statement contains a magic number: var first = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 99'                  MaximumDelay = TimeSpan.FromMinutes(3)'                  Delay = TimeSpan.FromSeconds(4)'                  TryTimeout = TimeSpan.Zero              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsSameInstance,The following statement contains a magic number: var first = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 99'                  MaximumDelay = TimeSpan.FromMinutes(3)'                  Delay = TimeSpan.FromSeconds(4)'                  TryTimeout = TimeSpan.Zero              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsSameInstance,The following statement contains a magic number: var first = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 99'                  MaximumDelay = TimeSpan.FromMinutes(3)'                  Delay = TimeSpan.FromSeconds(4)'                  TryTimeout = TimeSpan.Zero              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsNullInstance,The following statement contains a magic number: var first = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 99'                  MaximumDelay = TimeSpan.FromMinutes(3)'                  Delay = TimeSpan.FromSeconds(4)'                  TryTimeout = TimeSpan.Zero              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsNullInstance,The following statement contains a magic number: var first = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 99'                  MaximumDelay = TimeSpan.FromMinutes(3)'                  Delay = TimeSpan.FromSeconds(4)'                  TryTimeout = TimeSpan.Zero              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsNullInstance,The following statement contains a magic number: var first = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 99'                  MaximumDelay = TimeSpan.FromMinutes(3)'                  Delay = TimeSpan.FromSeconds(4)'                  TryTimeout = TimeSpan.Zero              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsNullArgument,The following statement contains a magic number: var first = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 99'                  MaximumDelay = TimeSpan.FromMinutes(3)'                  Delay = TimeSpan.FromSeconds(4)'                  TryTimeout = TimeSpan.Zero              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsNullArgument,The following statement contains a magic number: var first = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 99'                  MaximumDelay = TimeSpan.FromMinutes(3)'                  Delay = TimeSpan.FromSeconds(4)'                  TryTimeout = TimeSpan.Zero              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventHubsRetryOptionsExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\RetryPolicies\EventHubsRetryOptionsExtensionsTests.cs,IsEquivalentToDetectsNullArgument,The following statement contains a magic number: var first = new EventHubsRetryOptions              {                  Mode = EventHubsRetryMode.Fixed'                  MaximumRetries = 99'                  MaximumDelay = TimeSpan.FromMinutes(3)'                  Delay = TimeSpan.FromSeconds(4)'                  TryTimeout = TimeSpan.Zero              };
Magic Number,Azure.Messaging.EventHubs.Tests,EventDataExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Testing\EventDataExtensionsTests.cs,IsEquivalentToDetectsDifferentDifferentOffset,The following statement contains a magic number: var secondEvent = new MockEventData(                  eventBody: new byte[] { 0x22' 0x44 }'                  offset: 111'                  partitionKey: "hello"'                  systemProperties: new Dictionary<string' object> { { "test"' new object() } });
Magic Number,Azure.Messaging.EventHubs.Tests,EventDataExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Azure.Messaging.EventHubs.Shared\tests\Testing\EventDataExtensionsTests.cs,IsEquivalentToDetectsDifferentTypedSystemProperties,The following statement contains a magic number: var secondEvent = new MockEventData((byte[])body.Clone()' offset: 2);
Magic Number,Azure.Core.Pipeline,ActivityExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\DiagnosticScope.cs,SetW3CFormat,The following statement contains a magic number: s_setIdFormatMethod.Invoke(activity' new object[]{ 2 /* ActivityIdFormat.W3C */});
Magic Number,Azure.Core.Pipeline,ActivityExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\src\Shared\DiagnosticScope.cs,IsW3CFormat,The following statement contains a magic number: return (int)result == 2 /* ActivityIdFormat.W3C */;
Magic Number,Azure.Core.Testing,DiagnosticScopeValidatingInterceptor,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\DiagnosticScopeValidatingInterceptor.cs,Intercept,The following statement contains a magic number: var expectedEventPrefix = declaringType.FullName + "." + methodName.Substring(0' methodName.Length - 5);
Magic Number,Azure.Core.Testing,RandomExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\RandomExtensions.cs,NewGuid,The following statement contains a magic number: var bytes = new byte[16];
Magic Number,Azure.Core.Testing,TestRetryHelper,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\core\Azure.Core\tests\TestFramework\TestRetryHelper.cs,RetryAsync,The following statement contains a magic number: delay = TimeSpan.FromSeconds(5);
