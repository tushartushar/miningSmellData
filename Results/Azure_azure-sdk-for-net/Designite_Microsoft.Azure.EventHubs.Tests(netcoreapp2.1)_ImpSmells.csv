Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverWhenProcessEventsAsyncThrows,The method has 126 lines of code.
Long Parameter List,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,AssertSendStart,The method has 7 parameters. Parameters: name' payload' activity' parentActivity' partitionKey' connectionStringBuilder' eventCount
Long Parameter List,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,AssertSendException,The method has 6 parameters. Parameters: name' payload' activity' parentActivity' partitionKey' connectionStringBuilder
Long Parameter List,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,AssertSendStop,The method has 7 parameters. Parameters: name' payload' activity' sendActivity' partitionKey' connectionStringBuilder' isFaulted
Long Parameter List,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,AssertReceiveStart,The method has 5 parameters. Parameters: name' payload' activity' partitionKey' connectionStringBuilder
Long Parameter List,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,AssertReceiveStop,The method has 8 parameters. Parameters: name' payload' activity' receiveActivity' partitionKey' connectionStringBuilder' isFaulted' relatedId
Long Parameter List,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,RunGenericScenario,The method has 6 parameters. Parameters: eventProcessorHost' epo' totalNumberOfEventsToSend' checkpointLastEvent' checkpointBatch' checkpoingEveryEvent
Long Parameter List,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,InjectorPartitionReceiverMock,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,InjectorPartitionReceiverMock,The method has 6 parameters. Parameters: partitionId' sequenceNumber' token' pumpTimeout' options' injector
Long Parameter List,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,InjectorEventHubClientMock,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,CreateEpochReceiver,The method has 5 parameters. Parameters: consumerGroupName' partitionId' eventPosition' epoch' receiverOptions
Long Parameter List,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,MockReliableDictionary<X;Y>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\MockReliableDictionary.cs,SetAsync,The method has 5 parameters. Parameters: tx' key' value' timeout' cancellationToken
Long Parameter List,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,MockReliableDictionary<X;Y>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\MockReliableDictionary.cs,AddAsync,The method has 5 parameters. Parameters: tx' key' value' timeout' cancellationToken
Long Parameter List,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,MockReliableDictionary<X;Y>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\MockReliableDictionary.cs,AddOrUpdateAsync,The method has 6 parameters. Parameters: tx' key' addValueFactory' updateValueFactory' timeout' cancellationToken
Long Parameter List,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,MockReliableDictionary<X;Y>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\MockReliableDictionary.cs,AddOrUpdateAsync,The method has 6 parameters. Parameters: tx' key' addValue' updateValueFactory' timeout' cancellationToken
Long Parameter List,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,MockReliableDictionary<X;Y>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\MockReliableDictionary.cs,ContainsKeyAsync,The method has 5 parameters. Parameters: tx' key' lockMode' timeout' cancellationToken
Long Parameter List,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,MockReliableDictionary<X;Y>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\MockReliableDictionary.cs,GetOrAddAsync,The method has 5 parameters. Parameters: tx' key' valueFactory' timeout' cancellationToken
Long Parameter List,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,MockReliableDictionary<X;Y>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\MockReliableDictionary.cs,GetOrAddAsync,The method has 5 parameters. Parameters: tx' key' value' timeout' cancellationToken
Long Parameter List,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,MockReliableDictionary<X;Y>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\MockReliableDictionary.cs,TryAddAsync,The method has 5 parameters. Parameters: tx' key' value' timeout' cancellationToken
Long Parameter List,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,MockReliableDictionary<X;Y>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\MockReliableDictionary.cs,TryGetValueAsync,The method has 5 parameters. Parameters: tx' key' lockMode' timeout' cancellationToken
Long Parameter List,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,MockReliableDictionary<X;Y>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\MockReliableDictionary.cs,TryUpdateAsync,The method has 6 parameters. Parameters: tx' key' newValue' comparisonValue' timeout' cancellationToken
Long Parameter List,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,TimeoutEventHubClientMock,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\TimeoutTests.cs,CreateEpochReceiver,The method has 5 parameters. Parameters: consumerGroupName' partitionId' eventPosition' epoch' receiverOptions
Long Identifier,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,,The length of the parameter RetryExponentialBackoffSeconds is 30.
Long Identifier,Microsoft.Azure.EventHubs.Tests,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\TestConstants.cs,,The length of the parameter EventHubsSubscriptionEnvironmentVariableName is 44.
Long Identifier,Microsoft.Azure.EventHubs.Tests,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\TestConstants.cs,,The length of the parameter EventHubsResourceGroupEnvironmentVariableName is 45.
Long Identifier,Microsoft.Azure.EventHubs.Tests,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\TestConstants.cs,,The length of the parameter EventHubsTenantEnvironmentVariableName is 38.
Long Identifier,Microsoft.Azure.EventHubs.Tests,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\TestConstants.cs,,The length of the parameter EventHubsClientEnvironmentVariableName is 38.
Long Identifier,Microsoft.Azure.EventHubs.Tests,TestConstants,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\TestConstants.cs,,The length of the parameter EventHubsSecretEnvironmentVariableName is 38.
Long Identifier,Microsoft.Azure.EventHubs.Tests,TestUtility,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\TestUtility.cs,,The length of the parameter EventHubsResourceGroupInstance is 30.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ClientNegativeCases,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ClientNegativeCases.cs,ReceiveFromInvalidPartition,The length of the statement  "                            receiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' invalidPartitionId' EventPosition.FromStart()); " is 126.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ClientNegativeCases,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ClientNegativeCases.cs,ReceiveFromInvalidPartition,The length of the statement  "                            receiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' invalidPartitionId' EventPosition.FromStart()); " is 126.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ClientTestBase.cs,SendAndReceiveEventAsync,The length of the statement  "            PartitionReceiver partitionReceiver = client.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' partitionId' EventPosition.FromEnqueuedTime(DateTime.UtcNow.AddMinutes(-10))); " is 182.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ConnectionStringBuilderTests.cs,CustomEndpoint,The length of the statement  "                $"Generated connection string doesn't contain expected Endpoint. Expected: '{expectedLiteral}' in '{generatedConnectionString}'"); " is 130.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ConnectionStringBuilderTests.cs,CustomEndpoint,The length of the statement  "                $"Generated connection string doesn't contain expected SAS Name. Expected: '{expectedLiteral}' in '{generatedConnectionString}'"); " is 130.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ConnectionStringBuilderTests.cs,CustomEndpoint,The length of the statement  "                $"Generated connection string doesn't contain expected SAS Key. Expected: '{expectedLiteral}' in '{generatedConnectionString}'"); " is 129.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ConnectionStringBuilderTests.cs,CustomEndpoint,The length of the statement  "                $"Generated connection string doesn't contain expected SAS Key. Expected: '{expectedLiteral}' in '{generatedConnectionString}'"); " is 129.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ConnectionStringBuilderTests.cs,CustomEndpoint,The length of the statement  "            Assert.True(csbNew.Endpoint == csb.Endpoint' $"Original and New CSB mismatch at Endpoint. Original: {csb.Endpoint} New: {csbNew.Endpoint}"); " is 140.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ConnectionStringBuilderTests.cs,CustomEndpoint,The length of the statement  "            Assert.True(csbNew.SasKeyName == csb.SasKeyName' $"Original and New CSB mismatch at SasKeyName. Original: {csb.SasKeyName} New: {csbNew.SasKeyName}"); " is 150.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ConnectionStringBuilderTests.cs,CustomEndpoint,The length of the statement  "            Assert.True(csbNew.SasKey == csb.SasKey' $"Original and New CSB mismatch at SasKey. Original: {csb.SasKey} New: {csbNew.SasKey}"); " is 130.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ConnectionStringBuilderTests.cs,CustomEndpoint,The length of the statement  "            Assert.True(csbNew.EntityPath == csb.EntityPath' $"Original and New CSB mismatch at EntityPath. Original: {csb.EntityPath} New: {csbNew.EntityPath}"); " is 150.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ConnectionStringBuilderTests.cs,InvalidConnectionStrings,The length of the statement  "            invalidStrings.Add("Endpoint=sb://myehnamespace.servicebus.windows.net;SharedAccessKeyName=xxxxxx;SharedAccessKey=xxxx;SharedAccessSignature=xxxxx;"); " is 150.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ConnectionStringBuilderTests.cs,UseSharedAccessSignatureApi,The length of the statement  "                var csbNew = new EventHubsConnectionStringBuilder(csb.Endpoint' csb.EntityPath' sharedAccessSignature' TimeSpan.FromSeconds(60)); " is 129.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DataBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DataBatchTests.cs,SendWithEventDataBatch,The length of the statement  "                    receivers.Add(ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' partitionId' EventPosition.FromOffset(lastEvent.LastEnqueuedOffset))); " is 152.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DataBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DataBatchTests.cs,SendWithEventDataBatch,The length of the statement  "                        Assert.True(!targetPartition.Any(p => p.SystemProperties.PartitionKey != partitionKey)' "Identified at least one event with a different partition key value."); " is 159.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,SendFiresEvents,The length of the statement  "                        Assert.Equal(EventHubsDiagnosticSource.SerializeCorrelationContext(parentActivity.Baggage.ToList())' eventData.Properties[EventHubsDiagnosticSource.CorrelationContextPropertyName]); " is 181.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,SendFiresEvents,The length of the statement  "                        AssertSendStart(sendStart.eventName' sendStart.payload' sendStart.activity' parentActivity' partitionKey' ehClient.ConnectionStringBuilder); " is 140.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,SendFiresEvents,The length of the statement  "                        AssertSendStop(sendStop.eventName' sendStop.payload' sendStop.activity' sendStart.activity' partitionKey' ehClient.ConnectionStringBuilder); " is 140.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,SendFiresExceptionEvents,The length of the statement  "                        AssertSendException(exception.eventName' exception.payload' exception.activity' null' partitionKey' ehClient.ConnectionStringBuilder); " is 134.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,SendFiresExceptionEvents,The length of the statement  "                        AssertSendStop(sendStop.eventName' sendStop.payload' sendStop.activity' null' partitionKey' ehClient.ConnectionStringBuilder' isFaulted: true); " is 143.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,PartitionSenderSendFiresEvents,The length of the statement  "                        Assert.Equal(EventHubsDiagnosticSource.SerializeCorrelationContext(parentActivity.Baggage.ToList())' eventData.Properties[EventHubsDiagnosticSource.CorrelationContextPropertyName]); " is 181.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,PartitionSenderSendFiresEvents,The length of the statement  "                        AssertSendStart(sendStart.eventName' sendStart.payload' sendStart.activity' parentActivity' partitionKey' ehClient.ConnectionStringBuilder); " is 140.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,PartitionSenderSendFiresEvents,The length of the statement  "                        AssertSendStop(sendStop.eventName' sendStop.payload' sendStop.activity' sendStart.activity' partitionKey' ehClient.ConnectionStringBuilder); " is 140.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,PartitionSenderSendFiresExceptionEvents,The length of the statement  "                        AssertSendException(exception.eventName' exception.payload' exception.activity' null' partitionKey' ehClient.ConnectionStringBuilder); " is 134.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,PartitionSenderSendFiresExceptionEvents,The length of the statement  "                        AssertSendStop(sendStop.eventName' sendStop.payload' sendStop.activity' null' partitionKey' ehClient.ConnectionStringBuilder' isFaulted: true); " is 143.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,PartitionReceiverReceiveFiresEvents,The length of the statement  "                        var receiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' partitionKey' EventPosition.FromOffset(pInfo.LastEnqueuedOffset)); " is 149.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,PartitionReceiverReceiveFiresEvents,The length of the statement  "                        Assert.True(Encoding.UTF8.GetString(receivedEvent.Body.Array) == payloadString' "Received payload string isn't the same as sent payload string."); " is 146.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,PartitionReceiverReceiveFiresEvents,The length of the statement  "                        Assert.Equal(sendEvent.Properties[EventHubsDiagnosticSource.ActivityIdPropertyName]' receivedEvent.Properties[EventHubsDiagnosticSource.ActivityIdPropertyName]); " is 161.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,PartitionReceiverReceiveFiresEvents,The length of the statement  "                        Assert.Equal(sendEvent.Properties[EventHubsDiagnosticSource.CorrelationContextPropertyName]' receivedEvent.Properties[EventHubsDiagnosticSource.CorrelationContextPropertyName]); " is 177.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,PartitionReceiverReceiveFiresEvents,The length of the statement  "                        Assert.Equal(EventHubsDiagnosticSource.SerializeCorrelationContext(parentActivity.Baggage.ToList())' sendEvent.Properties[EventHubsDiagnosticSource.CorrelationContextPropertyName]); " is 181.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,PartitionReceiverReceiveFiresEvents,The length of the statement  "                        AssertSendStart(sendStart.eventName' sendStart.payload' sendStart.activity' parentActivity' partitionKey' ehClient.ConnectionStringBuilder); " is 140.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,PartitionReceiverReceiveFiresEvents,The length of the statement  "                        AssertSendStop(sendStop.eventName' sendStop.payload' sendStop.activity' sendStart.activity' partitionKey' ehClient.ConnectionStringBuilder); " is 140.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,PartitionReceiverReceiveFiresEvents,The length of the statement  "                        AssertReceiveStart(receiveStart.eventName' receiveStart.payload' receiveStart.activity' partitionKey' ehClient.ConnectionStringBuilder); " is 136.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,PartitionReceiverReceiveFiresEvents,The length of the statement  "                        AssertReceiveStop(receiveStop.eventName' receiveStop.payload' receiveStop.activity' receiveStart.activity' partitionKey' ehClient.ConnectionStringBuilder' relatedId: sendStop.activity.Id); " is 188.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,MiscTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\MiscTests.cs,PartitionKeyValidation,The length of the statement  "                                throw new Exception($"Received a message from partition {partitionId} with partition key {pk}' whereas the same key was observed on partition {partitionMap[pk]} before."); " is 171.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,MiscTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\MiscTests.cs,ClosingEventHubClientClosesReceiverEntities,The length of the statement  "                var ehReceiverEpoch = ehClient.CreateEpochReceiver(PartitionReceiver.DefaultConsumerGroupName' "0"' EventPosition.FromEnd()' 0); " is 128.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,SendReceiveBasic,The length of the statement  "                var partitionReceiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' partitionId' EventPosition.FromEnqueuedTime(DateTime.UtcNow.AddMinutes(-10))); " is 170.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,ReceiveHandlerReregister,The length of the statement  "                var partitionReceiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' partitionId' EventPosition.FromOffset(pInfo.LastEnqueuedOffset)); " is 157.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,ReceiveHandlerReregister,The length of the statement  "                    Assert.True(totalnumberOfMessagesReceived == totalNumberOfMessagesToSend * 2' $"Did not receive {totalNumberOfMessagesToSend * 2} messages' received {totalnumberOfMessagesReceived}."); " is 184.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,InvokeOnNull,The length of the statement  "                var partitionReceiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' "0"' EventPosition.FromEnd()); " is 122.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,DefaultBehaviorNoInvokeOnNull,The length of the statement  "                var partitionReceiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' "0"' EventPosition.FromEnd()); " is 122.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,DefaultBehaviorNoInvokeOnNull,The length of the statement  "                    await dataCompletionSource.Task.WithTimeout(TimeSpan.FromSeconds(60)' timeoutCallback: () => throw new TimeoutException("The data event was not received")); " is 156.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverRuntimeMetricsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverRuntimeMetricsTests.cs,DefaultBehaviorDisabled,The length of the statement  "                    partitionReceiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' targetPartitionId' EventPosition.FromStart()); " is 134.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,PartitionReceiverReceive,The length of the statement  "                        Assert.True(Encoding.UTF8.GetString(receivedEvent.Body.Array) == payloadString' "Received payload string isn't the same as sent payload string."); " is 146.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithEndOfStream,The length of the statement  "                    Assert.True(receivedMessages.Count() == 1' $"Didn't receive 1 message. Received {receivedMessages.Count()} messages(s)."); " is 122.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithOffset,The length of the statement  "                    receiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' partitionId' EventPosition.FromOffset(pInfo.LastEnqueuedOffset)); " is 144.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithOffset,The length of the statement  "                    Assert.True(receivedMessages.Count() == 1' $"Didn't receive 1 message. Received {receivedMessages.Count()} messages(s)."); " is 122.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithInclusiveOffset,The length of the statement  "                    receiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' partitionId' EventPosition.FromOffset(pInfo.LastEnqueuedOffset' true)); " is 150.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithInclusiveOffset,The length of the statement  "                    Assert.True(receivedMessages.Count() == 2' $"Didn't receive 2 messages. Received {receivedMessages.Count()} messages(s)."); " is 123.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithDateTime,The length of the statement  "                    receiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' partitionId' EventPosition.FromEnqueuedTime(pInfo.LastEnqueuedTimeUtc)); " is 151.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithDateTime,The length of the statement  "                    Assert.True(receivedMessages.Count() == 1' $"Didn't receive 1 message. Received {receivedMessages.Count()} messages(s)."); " is 122.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithSequenceNumber,The length of the statement  "                    receiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' partitionId' EventPosition.FromSequenceNumber(pInfo.LastEnqueuedSequenceNumber)); " is 160.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithSequenceNumber,The length of the statement  "                    Assert.True(receivedMessages.Count() == 1' $"Didn't receive 1 message. Received {receivedMessages.Count()} messages(s)."); " is 122.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithInclusiveSequenceNumber,The length of the statement  "                    receiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' partitionId' EventPosition.FromSequenceNumber(pInfo.LastEnqueuedSequenceNumber' true)); " is 166.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithInclusiveSequenceNumber,The length of the statement  "                    Assert.True(receivedMessages.Count() == 2' $"Didn't receive 2 messages. Received {receivedMessages.Count()} messages(s)."); " is 123.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,PartitionReceiverReceiveBatch,The length of the statement  "                var partitionReceiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' partitionId' EventPosition.FromEnqueuedTime(DateTime.UtcNow.AddMinutes(-10))); " is 170.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,PartitionReceiverReceiveBatch,The length of the statement  "                    Assert.True(maxReceivedBatchSize == MaxBatchSize' $"A max batch size of {MaxBatchSize} events was not honored! Actual {maxReceivedBatchSize}."); " is 144.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,PartitionReceiverEpochReceive,The length of the statement  "                var epochReceiver1 = ehClient.CreateEpochReceiver(PartitionReceiver.DefaultConsumerGroupName' "1"' EventPosition.FromStart()' 1); " is 129.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,PartitionReceiverEpochReceive,The length of the statement  "                var epochReceiver2 = ehClient.CreateEpochReceiver(PartitionReceiver.DefaultConsumerGroupName' "1"' EventPosition.FromStart()' 2); " is 129.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateNonEpochReceiverAfterEpochReceiver,The length of the statement  "                var epochReceiver = ehClient.CreateEpochReceiver(PartitionReceiver.DefaultConsumerGroupName' "1"' EventPosition.FromStart()' 1); " is 128.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateNonEpochReceiverAfterEpochReceiver,The length of the statement  "                var nonEpochReceiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' "1"' EventPosition.FromStart()); " is 123.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateEpochReceiverAfterNonEpochReceiver,The length of the statement  "                var nonEpochReceiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' "1"' EventPosition.FromStart()); " is 123.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateEpochReceiverAfterNonEpochReceiver,The length of the statement  "                var epochReceiver = ehClient.CreateEpochReceiver(PartitionReceiver.DefaultConsumerGroupName' "1"' EventPosition.FromStart()' 1); " is 128.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,ReceiverIdentifier,The length of the statement  "                            Assert.True(ex.Message.Contains(receiver.Identifier)' $"QuotaExceededException message is missing receiver identifier '{receiver.Identifier}'"); " is 144.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The length of the statement  "            TimeSpan? firstRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount); " is 137.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The length of the statement  "            TimeSpan? secondRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount); " is 138.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The length of the statement  "            TimeSpan? thirdRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount); " is 137.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The length of the statement  "            TimeSpan? fourthRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount); " is 138.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The length of the statement  "            TimeSpan? fifthRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount); " is 137.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The length of the statement  "            TimeSpan? sixthRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount); " is 137.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The length of the statement  "            TimeSpan? seventhRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount); " is 139.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The length of the statement  "            TimeSpan? nextRetryInterval = retry.GetNextRetryInterval(new EventHubsException(false)' TimeSpan.FromSeconds(60)' ++retryCount); " is 128.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The length of the statement  "            TimeSpan? firstRetryIntervalAfterReset = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount); " is 147.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The length of the statement  "            TimeSpan? noRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount); " is 134.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyCustom,The length of the statement  "                TimeSpan? thisRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' i + 1); " is 129.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyCustom,The length of the statement  "            TimeSpan? newRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' 6); " is 124.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ChildEntityShouldInheritRetryPolicyFromParent,The length of the statement  "                    $"Retry policy on the sender shows testMaxRetryCount as {(sender.RetryPolicy as RetryPolicyCustom).maximumRetryCount}"); " is 120.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ChildEntityShouldInheritRetryPolicyFromParent,The length of the statement  "                Assert.True(receiver.RetryPolicy is RetryPolicyCustom' "Receiver failed to inherit parent client's RetryPolicy setting."); " is 122.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ChildEntityShouldInheritRetryPolicyFromParent,The length of the statement  "                    $"Retry policy on the receiver shows testMaxRetryCount as {(receiver.RetryPolicy as RetryPolicyCustom).maximumRetryCount}"); " is 124.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RuntimeInformationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RuntimeInformationTests.cs,GetEventHubRuntimeInformation,The length of the statement  "                    Assert.True(eventHubRuntimeInformation.PartitionIds.Length != 0' "eventHubRuntimeInformation.PartitionIds.Length was 0!"); " is 122.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RuntimeInformationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RuntimeInformationTests.cs,GetEventHubPartitionRuntimeInformation,The length of the statement  "                            TestUtility.Log($"Path:{partition.Path} PartitionId:{partition.PartitionId} BeginSequenceNumber:{partition.BeginSequenceNumber} LastEnqueuedOffset:{partition.LastEnqueuedOffset} LastEnqueuedTimeUtc:{partition.LastEnqueuedTimeUtc} LastEnqueuedSequenceNumber:{partition.LastEnqueuedSequenceNumber}"); " is 298.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RuntimeInformationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RuntimeInformationTests.cs,GetEventHubPartitionRuntimeInformation,The length of the statement  "                            Assert.True(partition.LastEnqueuedSequenceNumber >= 0' $"Returned LastEnqueuedSequenceNumber is {partition.LastEnqueuedSequenceNumber}"); " is 137.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,RuntimeInformationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RuntimeInformationTests.cs,GetEventHubPartitionRuntimeInformation,The length of the statement  "                            Assert.True(partition.LastEnqueuedTimeUtc >= DateTime.UtcNow.AddSeconds(-60)' $"Returned LastEnqueuedTimeUtc is {partition.LastEnqueuedTimeUtc}"); " is 146.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,SendTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\SendTests.cs,SendAndReceiveArraySegmentEventData,The length of the statement  "                        Assert.True(edReceived.Body.Count == byteArr.Count()' $"Sent {byteArr.Count()} bytes and received {edReceived.Body.Count}"); " is 124.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,SendTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\SendTests.cs,SendBatchWithPartitionKey,The length of the statement  "                    receiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' targetPartition' EventPosition.FromOffset(partitions[targetPartition])); " is 151.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\TimeoutTests.cs,ReceiveTimeout,The length of the statement  "                            receiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' "0"' EventPosition.FromEnqueuedTime(DateTime.UtcNow.AddMinutes(1))); " is 147.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\TimeoutTests.cs,ReceiveTimeout,The length of the statement  "                            Assert.True(diff >= receiveTimeoutInSeconds - 0.1' $"Hit timeout {diff} seconds into Receive call while testing {receiveTimeoutInSeconds} seconds timeout."); " is 157.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\TimeoutTests.cs,ReceiveTimeout,The length of the statement  "                            Assert.True(diff < receiveTimeoutInSeconds + 5' $"Hit timeout {diff} seconds into Receive call while testing {receiveTimeoutInSeconds} seconds timeout."); " is 154.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\TimeoutTests.cs,SmallReceiveTimeout,The length of the statement  "                        receiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' "0"' EventPosition.FromEnqueuedTime(DateTime.UtcNow.AddMinutes(1))); " is 147.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,WebSocketTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\WebSocketTests.cs,GetEventHubRuntimeInformation,The length of the statement  "                Assert.True(eventHubRuntimeInformation.PartitionIds.Length != 0' "eventHubRuntimeInformation.PartitionIds.Length was 0!"); " is 122.
Long Statement,Microsoft.Azure.EventHubs.Tests.Client,WebSocketTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\WebSocketTests.cs,SendAndReceive,The length of the statement  "                    receiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' targetPartitionId' EventPosition.FromStart()); " is 125.
Long Statement,Microsoft.Azure.EventHubs.Tests,DisplayTestMethodNameAttribute,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\DisplayTestMethodNameAttribute.cs,Before,The length of the statement  "            TestUtility.Log($"Begin {methodUnderTest.DeclaringType}.{methodUnderTest.Name} on {PlatformServices.Default.Application.RuntimeFramework}"); " is 140.
Long Statement,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,DisposeAsync,The length of the statement  "            var client = new EventHubManagementClient(new TokenCredentials(token)) { SubscriptionId = TestUtility.EventHubsSubscription }; " is 126.
Long Statement,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,DisposeAsync,The length of the statement  "                await CreateRetryPolicy().ExecuteAsync(() => client.EventHubs.DeleteAsync(resourceGroup' eventHubNamespace' EventHubName)); " is 123.
Long Statement,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateAsync,The length of the statement  "            using (var client = new EventHubManagementClient(new TokenCredentials(token)) { SubscriptionId = TestUtility.EventHubsSubscription }) " is 133.
Long Statement,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateAsync,The length of the statement  "                eventHub = await CreateRetryPolicy<Eventhub>().ExecuteAsync(() => client.EventHubs.CreateOrUpdateAsync(resourceGroup' eventHubNamespace' CreateName()' eventHub)); " is 162.
Long Statement,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateAsync,The length of the statement  "                        return consumerPolicy.ExecuteAsync(() => client.ConsumerGroups.CreateOrUpdateAsync(resourceGroup' eventHubNamespace' eventHub.Name' groupName' group)); " is 151.
Long Statement,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateNamespaceAsync,The length of the statement  "                var eventHubsNamespace = new EHNamespace(sku: new Sku("Standard"' "Standard"' 12)' tags: GetResourceTags()' isAutoInflateEnabled: true' maximumThroughputUnits: 20' location: location); " is 184.
Long Statement,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateNamespaceAsync,The length of the statement  "                eventHubsNamespace = await CreateRetryPolicy<EHNamespace>().ExecuteAsync(() => client.Namespaces.CreateOrUpdateAsync(resourceGroup' CreateName()' eventHubsNamespace)); " is 167.
Long Statement,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateNamespaceAsync,The length of the statement  "                var accessKey = await CreateRetryPolicy<AccessKeys>().ExecuteAsync(() => client.Namespaces.ListKeysAsync(resourceGroup' eventHubsNamespace.Name' "RootManageSharedAccessKey")); " is 175.
Long Statement,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateStorageAsync,The length of the statement  "                var parameters = new StorageManagement.StorageAccountCreateParameters(sku' StorageManagement.Kind.BlobStorage' location: location' tags: GetResourceTags()' accessTier: StorageManagement.AccessTier.Hot); " is 202.
Long Statement,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateStorageAsync,The length of the statement  "                var storageAccount = await CreateRetryPolicy<StorageManagement.StorageAccount>().ExecuteAsync(() => client.StorageAccounts.CreateAsync(resourceGroup' CreateName()' parameters)); " is 177.
Long Statement,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateStorageAsync,The length of the statement  "                var storageKeys = await CreateRetryPolicy<StorageManagement.StorageAccountListKeysResult>().ExecuteAsync(() => client.StorageAccounts.ListKeysAsync(resourceGroup' storageAccount.Name)); " is 185.
Long Statement,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateStorageAsync,The length of the statement  "                return new AzureResourceProperties(storageAccount.Name' $"DefaultEndpointsProtocol=https;AccountName={ storageAccount.Name };AccountKey={ storageKeys.Keys[0].Value };EndpointSuffix=core.windows.net"); " is 200.
Long Statement,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,QueryResourceGroupLocationAsync,The length of the statement  "            using (var client = new ResourceManagementClient(new TokenCredentials(accessToken)) { SubscriptionId = subscriptionId }) " is 120.
Long Statement,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,QueryResourceGroupLocationAsync,The length of the statement  "                var resourceGroup = await CreateRetryPolicy<Microsoft.Azure.Management.ResourceManager.Models.ResourceGroup>().ExecuteAsync(() => client.ResourceGroups.GetAsync(resourceGroupName)); " is 181.
Long Statement,Microsoft.Azure.EventHubs.Tests,TestRunFixture,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\TestRunFixture.cs,Dispose,The length of the statement  "                    Task.WhenAll(namespaceDeleteTask ?? Task.CompletedTask' storageDeleteTask ?? Task.CompletedTask).GetAwaiter().GetResult(); " is 122.
Long Statement,Microsoft.Azure.EventHubs.Tests,TestUtility,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\TestUtility.cs,SendToPartitionAsync,The length of the statement  "            return SendToPartitionAsync(ehClient' partitionId' new EventData(Encoding.UTF8.GetBytes(messageBody))' numberOfMessages); " is 121.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,MultipleProcessorHosts,The length of the statement  "                            processor.OnOpen += (_' partitionContext) => TestUtility.Log($"{hostName} > Partition {partitionId} TestEventProcessor opened"); " is 128.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,MultipleProcessorHosts,The length of the statement  "                            processor.OnClose += (_' closeArgs) => TestUtility.Log($"{hostName} > Partition {partitionId} TestEventProcessor closing: {closeArgs.Item2}"); " is 142.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,MultipleProcessorHosts,The length of the statement  "                            processor.OnProcessError += (_' errorArgs) => TestUtility.Log($"{hostName} > Partition {partitionId} TestEventProcessor process error {errorArgs.Item2.Message}"); " is 162.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InitialOffsetProviderWithDateTime,The length of the statement  "                Assert.False(runResult.ReceivedEvents.Any(kvp => kvp.Value.Count != 1)' "One of the partitions didn't return exactly 1 event"); " is 127.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InitialOffsetProviderWithOffset,The length of the statement  "                Assert.False(runResult.ReceivedEvents.Any(kvp => kvp.Value.Count != 1)' "One of the partitions didn't return exactly 1 event"); " is 127.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InitialOffsetProviderWithEndOfStream,The length of the statement  "                Assert.False(runResult.ReceivedEvents.Any(kvp => kvp.Value.Count != 1)' "One of the partitions didn't return exactly 1 event"); " is 127.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InitialOffsetProviderOverrideBehavior,The length of the statement  "                Assert.False(runResult.ReceivedEvents.Any(kvp => kvp.Value.Count != 1)' "One of the partitions didn't return exactly 1 event"); " is 127.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,CheckpointEventDataShouldHold,The length of the statement  "                Assert.False(runResult.ReceivedEvents.Any(kvp => kvp.Value.Count != 1)' "One of the partitions didn't return exactly 1 event"); " is 127.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,CheckpointBatchShouldHold,The length of the statement  "                Assert.False(runResult.ReceivedEvents.Any(kvp => kvp.Value.Count != 1)' "One of the partitions didn't return exactly 1 event"); " is 127.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,NoCheckpointThenNewHostReadsFromStart,The length of the statement  "                    $"Second host received {totalEventsFromSecondHost} events where as first host receive {totalEventsFromFirstHost} events."); " is 123.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverWhenProcessEventsAsyncThrows,The length of the statement  "                    processor.OnOpen += (_' partitionContext) => TestUtility.Log($"{hostName} > {consumerGroupName} > Partition {partitionId} TestEventProcessor opened"); " is 150.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverWhenProcessEventsAsyncThrows,The length of the statement  "                    processor.OnClose += (_' closeArgs) => TestUtility.Log($"{hostName} > {consumerGroupName} > Partition {partitionId} TestEventProcessor closing: {closeArgs.Item2}"); " is 164.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverWhenProcessEventsAsyncThrows,The length of the statement  "                        TestUtility.Log($"{hostName} > {consumerGroupName} > Partition {partitionId} TestEventProcessor process error {errorArgs.Item2.Message}"); " is 138.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverWhenProcessEventsAsyncThrows,The length of the statement  "                        TestUtility.Log($"{hostName} > {consumerGroupName} > Partition {partitionId} TestEventProcessor processing {eventCount} event(s)"); " is 131.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverWhenProcessEventsAsyncThrows,The length of the statement  "                        Assert.True(receivedEventCount >= 2' $"Partition {partitionId} received {receivedEventCount} where as at least 2 expected!"); " is 125.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,ReRegisterAfterLeaseExpiry,The length of the statement  "                Assert.False(runResult.ReceivedEvents.Any(kvp => kvp.Value.Count != 1)' "First host: One of the partitions didn't return exactly 1 event"); " is 139.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,ReRegisterAfterLeaseExpiry,The length of the statement  "                Assert.False(runResult.ReceivedEvents.Any(kvp => kvp.Value.Count != 1)' "Second host: One of the partitions didn't return exactly 1 event"); " is 140.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,RunGenericScenario,The length of the statement  "                    processor.OnOpen += (_' partitionContext) => TestUtility.Log($"{hostName} > Partition {partitionId} TestEventProcessor opened"); " is 128.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,RunGenericScenario,The length of the statement  "                    processor.OnClose += (_' closeArgs) => TestUtility.Log($"{hostName} > Partition {partitionId} TestEventProcessor closing: {closeArgs.Item2}"); " is 142.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,RunGenericScenario,The length of the statement  "                    var ehClient = EventHubClient.CreateFromConnectionString(TestUtility.BuildEventHubsConnectionString(eventProcessorHost.EventHubPath)); " is 134.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,RunGenericScenario,The length of the statement  "                        sendTasks.Add(TestUtility.SendToPartitionAsync(ehClient' partitionId' $"{partitionId} event."' totalNumberOfEventsToSend)); " is 123.
Long Statement,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,RunGenericScenario,The length of the statement  "                        $"Partition {partitionId} didn't receive expected number of messages. Expected {totalNumberOfEventsToSend}' received {runResult.ReceivedEvents[partitionId].Count}."); " is 166.
Long Statement,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,CheckpointingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\CheckpointingTests.cs,CheckpointBatchTest,The length of the statement  "                $"Unexpected change in sequence number from {checkpointedEvent.SystemProperties.SequenceNumber} to {restartEvent.SystemProperties.SequenceNumber}"); " is 148.
Long Statement,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,CheckpointingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\CheckpointingTests.cs,CheckpointEventTest,The length of the statement  "                $"Unexpected change in sequence number from {checkpointedEvent.SystemProperties.SequenceNumber} to {restartEvent.SystemProperties.SequenceNumber}"); " is 148.
Long Statement,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,SimpleOptionsTest,The length of the statement  "            Assert.True(testReceiver.PrefetchCount == testPrefetchCount' $"Unexpected prefetch count {testReceiver.PrefetchCount}"); " is 120.
Long Statement,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,UseInitialPositionProviderTest,The length of the statement  "            state.Options.InitialPositionProvider = (partitionId) => { return EventPosition.FromSequenceNumber(firstSequenceNumber); }; " is 123.
Long Statement,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,IgnoreInitialPositionProviderTest,The length of the statement  "            state.Options.InitialPositionProvider = (partitionId) => { return EventPosition.FromSequenceNumber(ippSequenceNumber); }; " is 121.
Long Statement,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,IgnoreInitialPositionProviderTest,The length of the statement  "                state.StateManager.GetOrAddAsync<IReliableDictionary<string' Dictionary<string' object>>>("EventProcessorCheckpointDictionary").Result; " is 135.
Long Statement,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,RuntimeInformationTest,The length of the statement  "            Assert.True(state.Processor.LatestContext.RuntimeInformation.LastSequenceNumber == state.Processor.LastEvent.SystemProperties.SequenceNumber); " is 142.
Long Statement,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,SFPtestbase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\SFPtestbase.cs,innerPartitionCountEnforcement,The length of the statement  "            Assert.Equal($"Service partition count {servicePartitions} does not match event hub partition count {eventHubPartitions}"' " is 122.
Long Statement,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,TestState,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\TestState.cs,Initialize,The length of the statement  "            this.ConnectionString = "Endpoint=sb://NOTREAL.servicebus.windows.net/;SharedAccessKeyName=blah;SharedAccessKey=bloo;EntityPath=testhub"; " is 137.
Long Statement,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,UserExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\UserExceptionTests.cs,EventException,The length of the statement  "                $"Unexpected exception type {state.Processor.LastError.GetType().Name}.  Expected { nameof(NotImplementedException) }"); " is 120.
Empty Catch Block,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,SendFiresExceptionEvents,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,DisposeAsync,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.EventHubs.Tests,TestRunFixture,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\TestRunFixture.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.EventHubs.Tests,TaskExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Instrastructure.Tests\TaskExtensionTests.cs,WithTimeoutInvokesTheCancellationTokenWhenATimeoutOccurs,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.EventHubs.Tests,TaskExtensionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Instrastructure.Tests\TaskExtensionTests.cs,WithTimeoutGenericInvokesTheCancellationTokenWhenATimeoutOccurs,The method has an empty catch block.
Magic Number,Microsoft.Azure.EventHubs.Tests.Amqp,AmqpMessageCoverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Amqp\AmqpMEssageCoverterTests.cs,UpdateEventDataHeaderAndPropertiesReceiveCorrelationIdAndCopyItsValueToEventData,The following statement contains a magic number: var message = AmqpMessage.Create(new MemoryStream(new byte[12])' true);
Magic Number,Microsoft.Azure.EventHubs.Tests.Amqp,AmqpMessageCoverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Amqp\AmqpMEssageCoverterTests.cs,UpdateEventDataHeaderAndPropertiesReceiveCorrelationIdAndCopyItsValueToEventData,The following statement contains a magic number: ArraySegment<byte>[] buffers = ReadMessagePayLoad(message' 71);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ClientNegativeCases,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ClientNegativeCases.cs,MessageSizeExceededException,The following statement contains a magic number: await Assert.ThrowsAsync<MessageSizeExceededException>(async () =>                      {                          TestUtility.Log("Sending large event via EventHubClient.SendAsync(EventData)");                          var eventData = new EventData(new byte[1100000]);                          await ehClient.SendAsync(eventData);                      });
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ClientNegativeCases,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ClientNegativeCases.cs,InvalidPrefetchCount,The following statement contains a magic number: await Assert.ThrowsAsync<ArgumentOutOfRangeException>(() =>                      {                          receiver.PrefetchCount = 3;                          throw new Exception("Setting PrefetchCount to 3 didn't fail.");                      });
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ClientNegativeCases,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ClientNegativeCases.cs,InvalidPrefetchCount,The following statement contains a magic number: receiver.PrefetchCount = 10;
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ClientTestBase.cs,SendAndReceiveEventAsync,The following statement contains a magic number: PartitionReceiver partitionReceiver = client.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' partitionId' EventPosition.FromEnqueuedTime(DateTime.UtcNow.AddMinutes(-10)));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ClientTestBase.cs,SendAndReceiveEventAsync,The following statement contains a magic number: IEnumerable<EventData> eventDatas = await partitionReceiver.ReceiveAsync(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ClientTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ClientTestBase.cs,ReceiveAllMessagesAsync,The following statement contains a magic number: var receivedEvents = await receiver.ReceiveAsync(100);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ConnectionStringBuilderTests.cs,ParseAndBuild,The following statement contains a magic number: csb.OperationTimeout = TimeSpan.FromSeconds(100);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ConnectionStringBuilderTests.cs,ParseAndBuild,The following statement contains a magic number: Assert.Equal(TimeSpan.FromSeconds(100)' newCsb.OperationTimeout);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ConnectionStringBuilderTests.cs,UseSharedAccessSignatureApi,The following statement contains a magic number: var token = await tokenProvider.GetTokenAsync(csb.Endpoint.ToString()' TimeSpan.FromSeconds(120));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ConnectionStringBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ConnectionStringBuilderTests.cs,UseSharedAccessSignatureApi,The following statement contains a magic number: var csbNew = new EventHubsConnectionStringBuilder(csb.Endpoint' csb.EntityPath' sharedAccessSignature' TimeSpan.FromSeconds(60));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,DataBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DataBatchTests.cs,SendSmallMessages,The following statement contains a magic number: await SendWithEventDataBatch(maxPayloadSize: 8' minimumNumberOfMessagesToSend: 50000);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,DataBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DataBatchTests.cs,SendSmallMessages,The following statement contains a magic number: await SendWithEventDataBatch(maxPayloadSize: 8' minimumNumberOfMessagesToSend: 50000);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,DataBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DataBatchTests.cs,SendLargeMessages,The following statement contains a magic number: await SendWithEventDataBatch(maxPayloadSize: 262000' minimumNumberOfMessagesToSend: 100);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,DataBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DataBatchTests.cs,SendLargeMessages,The following statement contains a magic number: await SendWithEventDataBatch(maxPayloadSize: 262000' minimumNumberOfMessagesToSend: 100);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,DataBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DataBatchTests.cs,AllowFirstMessageInBatch,The following statement contains a magic number: await SendWithEventDataBatch(maxPayloadSize: 900 * 1024' minimumNumberOfMessagesToSend: 1);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,DataBatchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DataBatchTests.cs,AllowFirstMessageInBatch,The following statement contains a magic number: await SendWithEventDataBatch(maxPayloadSize: 900 * 1024' minimumNumberOfMessagesToSend: 1);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,PartitionReceiverReceiveFiresEvents,The following statement contains a magic number: var messages = await receiver.ReceiveAsync(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,DiagnosticsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\DiagnosticsTests.cs,ExtractsActivityWithIdAndMultiContext,The following statement contains a magic number: Assert.Equal(3' baggage.Count);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,MiscTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\MiscTests.cs,PartitionKeyValidation,The following statement contains a magic number: var NumberOfMessagesToSend = 100;
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,MiscTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\MiscTests.cs,PartitionKeyValidation,The following statement contains a magic number: var partitionKey = rnd.Next(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,MiscTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\MiscTests.cs,SendAndReceiveLargeMessage,The following statement contains a magic number: var bodySize = 250 * 1024;
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,MiscTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\MiscTests.cs,SendAndReceiveLargeMessage,The following statement contains a magic number: var bodySize = 250 * 1024;
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,SendReceiveBasic,The following statement contains a magic number: var partitionReceiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' partitionId' EventPosition.FromEnqueuedTime(DateTime.UtcNow.AddMinutes(-10)));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,SendReceiveBasic,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(60));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,SendReceiveBasic,The following statement contains a magic number: !dataReceivedEvent.WaitOne(TimeSpan.FromSeconds(20))
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,ReceiveHandlerReregister,The following statement contains a magic number: var totalNumberOfMessagesToSend = 100;
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,ReceiveHandlerReregister,The following statement contains a magic number: await Task.Delay(3000);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,ReceiveHandlerReregister,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(60));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,ReceiveHandlerReregister,The following statement contains a magic number: Assert.True(totalnumberOfMessagesReceived == totalNumberOfMessagesToSend * 2' $"Did not receive {totalNumberOfMessagesToSend * 2} messages' received {totalnumberOfMessagesReceived}.");
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,ReceiveHandlerReregister,The following statement contains a magic number: Assert.True(totalnumberOfMessagesReceived == totalNumberOfMessagesToSend * 2' $"Did not receive {totalNumberOfMessagesToSend * 2} messages' received {totalnumberOfMessagesReceived}.");
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,InvokeOnNull,The following statement contains a magic number: await tcs.Task.WithTimeout(TimeSpan.FromSeconds(240));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,DefaultBehaviorNoInvokeOnNull,The following statement contains a magic number: await Assert.ThrowsAsync<TimeoutException>(() => nullCompletionSource.Task.WithTimeout(TimeSpan.FromSeconds(120)));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,PartitionPumpTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\PartitionPumpTests.cs,DefaultBehaviorNoInvokeOnNull,The following statement contains a magic number: await dataCompletionSource.Task.WithTimeout(TimeSpan.FromSeconds(60)' timeoutCallback: () => throw new TimeoutException("The data event was not received"));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverRuntimeMetricsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverRuntimeMetricsTests.cs,BasicValidation,The following statement contains a magic number: await TestUtility.SendToPartitionAsync(ehClient' targetPartitionId' "this is the message body"' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverRuntimeMetricsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverRuntimeMetricsTests.cs,ClientSettingInherited,The following statement contains a magic number: await TestUtility.SendToPartitionAsync(ehClient' targetPartitionId' "this is the message body"' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverRuntimeMetricsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverRuntimeMetricsTests.cs,ValidateEnabledBehavior,The following statement contains a magic number: Assert.True(partitionReceiver.RuntimeInfo.RetrievalTime > DateTime.UtcNow.AddSeconds(-60)'                  $"FAILED partitionReceiver.RuntimeInfo.RetrievalTime == {partitionReceiver.RuntimeInfo.RetrievalTime}");
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithEndOfStream,The following statement contains a magic number: i < 10
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithEndOfStream,The following statement contains a magic number: var receiveTask = receiver.ReceiveAsync(100);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithEndOfStream,The following statement contains a magic number: await Task.Delay(5000);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithEndOfStream,The following statement contains a magic number: receivedMessages = await receiver.ReceiveAsync(100' TimeSpan.FromSeconds(15));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithEndOfStream,The following statement contains a magic number: receivedMessages = await receiver.ReceiveAsync(100' TimeSpan.FromSeconds(15));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithOffset,The following statement contains a magic number: var receivedMessages = await receiver.ReceiveAsync(100);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithOffset,The following statement contains a magic number: receivedMessages = await receiver.ReceiveAsync(100' TimeSpan.FromSeconds(15));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithOffset,The following statement contains a magic number: receivedMessages = await receiver.ReceiveAsync(100' TimeSpan.FromSeconds(15));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithInclusiveOffset,The following statement contains a magic number: Assert.True(receivedMessages.Count() == 2' $"Didn't receive 2 messages. Received {receivedMessages.Count()} messages(s).");
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithInclusiveOffset,The following statement contains a magic number: var expectNull = await receiver.ReceiveAsync(100' TimeSpan.FromSeconds(15));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithInclusiveOffset,The following statement contains a magic number: var expectNull = await receiver.ReceiveAsync(100' TimeSpan.FromSeconds(15));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithDateTime,The following statement contains a magic number: var receivedMessages = await receiver.ReceiveAsync(100);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithDateTime,The following statement contains a magic number: receivedMessages = await receiver.ReceiveAsync(100' TimeSpan.FromSeconds(15));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithDateTime,The following statement contains a magic number: receivedMessages = await receiver.ReceiveAsync(100' TimeSpan.FromSeconds(15));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithSequenceNumber,The following statement contains a magic number: var receivedMessages = await receiver.ReceiveAsync(100);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithSequenceNumber,The following statement contains a magic number: receivedMessages = await receiver.ReceiveAsync(100' TimeSpan.FromSeconds(15));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithSequenceNumber,The following statement contains a magic number: receivedMessages = await receiver.ReceiveAsync(100' TimeSpan.FromSeconds(15));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithInclusiveSequenceNumber,The following statement contains a magic number: var receivedMessages = await receiver.ReceiveAsync(100);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithInclusiveSequenceNumber,The following statement contains a magic number: Assert.True(receivedMessages.Count() == 2' $"Didn't receive 2 messages. Received {receivedMessages.Count()} messages(s).");
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithInclusiveSequenceNumber,The following statement contains a magic number: receivedMessages = await receiver.ReceiveAsync(100' TimeSpan.FromSeconds(15));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateReceiverWithInclusiveSequenceNumber,The following statement contains a magic number: receivedMessages = await receiver.ReceiveAsync(100' TimeSpan.FromSeconds(15));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,PartitionReceiverReceiveBatch,The following statement contains a magic number: const int MaxBatchSize = 5;
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,PartitionReceiverReceiveBatch,The following statement contains a magic number: var partitionReceiver = ehClient.CreateReceiver(PartitionReceiver.DefaultConsumerGroupName' partitionId' EventPosition.FromEnqueuedTime(DateTime.UtcNow.AddMinutes(-10)));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,PartitionReceiverReceiveBatch,The following statement contains a magic number: int eventCount = 20;
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,PartitionReceiverEpochReceive,The following statement contains a magic number: var epochReceiver2 = ehClient.CreateEpochReceiver(PartitionReceiver.DefaultConsumerGroupName' "1"' EventPosition.FromStart()' 2);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,PartitionReceiverEpochReceive,The following statement contains a magic number: events = await epochReceiver1.ReceiveAsync(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,PartitionReceiverEpochReceive,The following statement contains a magic number: var epoch2ReceiveTask = epochReceiver2.ReceiveAsync(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,PartitionReceiverEpochReceive,The following statement contains a magic number: DateTime stopTime = DateTime.UtcNow.AddSeconds(30);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,PartitionReceiverEpochReceive,The following statement contains a magic number: events = await epochReceiver1.ReceiveAsync(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateNonEpochReceiverAfterEpochReceiver,The following statement contains a magic number: await epochReceiver.ReceiveAsync(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateNonEpochReceiverAfterEpochReceiver,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateNonEpochReceiverAfterEpochReceiver,The following statement contains a magic number: await nonEpochReceiver.ReceiveAsync(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateEpochReceiverAfterNonEpochReceiver,The following statement contains a magic number: await nonEpochReceiver.ReceiveAsync(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateEpochReceiverAfterNonEpochReceiver,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateEpochReceiverAfterNonEpochReceiver,The following statement contains a magic number: await epochReceiver.ReceiveAsync(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateEpochReceiverAfterNonEpochReceiver,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(10));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,CreateEpochReceiverAfterNonEpochReceiver,The following statement contains a magic number: await nonEpochReceiver.ReceiveAsync(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,ReceiverIdentifier,The following statement contains a magic number: await newReceiver.ReceiveAsync(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,ReceiverIdentifier,The following statement contains a magic number: i < 5
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,ReceiverTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\ReceiverTests.cs,ReceiverIdentifier,The following statement contains a magic number: await failReceiver.ReceiveAsync(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The following statement contains a magic number: TimeSpan? firstRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The following statement contains a magic number: TimeSpan? secondRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The following statement contains a magic number: TimeSpan? thirdRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The following statement contains a magic number: TimeSpan? fourthRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The following statement contains a magic number: TimeSpan? fifthRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The following statement contains a magic number: TimeSpan? sixthRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The following statement contains a magic number: TimeSpan? seventhRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The following statement contains a magic number: TimeSpan? nextRetryInterval = retry.GetNextRetryInterval(new EventHubsException(false)' TimeSpan.FromSeconds(60)' ++retryCount);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The following statement contains a magic number: TimeSpan? firstRetryIntervalAfterReset = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyBuiltIn,The following statement contains a magic number: TimeSpan? noRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' ++retryCount);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyCustom,The following statement contains a magic number: RetryPolicy retry = new RetryPolicyCustom(5);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyCustom,The following statement contains a magic number: TimeSpan? thisRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' i + 1);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyCustom,The following statement contains a magic number: Assert.True(thisRetryInterval.Value.TotalSeconds == 2 + i);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyCustom,The following statement contains a magic number: i < 4
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyCustom,The following statement contains a magic number: TimeSpan? newRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' 6);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ValidateRetryPolicyCustom,The following statement contains a magic number: TimeSpan? newRetryInterval = retry.GetNextRetryInterval(new ServerBusyException(string.Empty)' TimeSpan.FromSeconds(60)' 6);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RetryTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RetryTests.cs,ChildEntityShouldInheritRetryPolicyFromParent,The following statement contains a magic number: var testMaxRetryCount = 99;
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RuntimeInformationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RuntimeInformationTests.cs,GetEventHubPartitionRuntimeInformation,The following statement contains a magic number: var tasks = partitions.Select(async (pid) =>                      {                          // Send some messages so we can have meaningful data returned from service call.                          PartitionSender partitionSender = ehClient.CreatePartitionSender(pid);                            try                          {                              TestUtility.Log($"Sending single event to partition {pid}");                              var eDataToSend = new EventData(new byte[1]);                              await partitionSender.SendAsync(eDataToSend);                                TestUtility.Log($"Getting partition runtime information on partition {pid}");                              var partition = await ehClient.GetPartitionRuntimeInformationAsync(pid);                              TestUtility.Log($"Path:{partition.Path} PartitionId:{partition.PartitionId} BeginSequenceNumber:{partition.BeginSequenceNumber} LastEnqueuedOffset:{partition.LastEnqueuedOffset} LastEnqueuedTimeUtc:{partition.LastEnqueuedTimeUtc} LastEnqueuedSequenceNumber:{partition.LastEnqueuedSequenceNumber}");                                // Validations.                              Assert.True(partition.Path == csb.EntityPath' $"Returned path {partition.Path} is different than {csb.EntityPath}");                              Assert.True(partition.PartitionId == pid' $"Returned partition id {partition.PartitionId} is different than {pid}");                              Assert.True(partition.LastEnqueuedOffset != null' "Returned LastEnqueuedOffset is null");                              Assert.True(partition.LastEnqueuedTimeUtc != null' "Returned LastEnqueuedTimeUtc is null");                                // Validate returned data regarding recently sent event.                              // Account 60 seconds of max clock skew.                              Assert.True(partition.LastEnqueuedOffset != "-1"' $"Returned LastEnqueuedOffset is {partition.LastEnqueuedOffset}");                              Assert.True(partition.BeginSequenceNumber >= 0' $"Returned BeginSequenceNumber is {partition.BeginSequenceNumber}");                              Assert.True(partition.LastEnqueuedSequenceNumber >= 0' $"Returned LastEnqueuedSequenceNumber is {partition.LastEnqueuedSequenceNumber}");                              Assert.True(partition.LastEnqueuedTimeUtc >= DateTime.UtcNow.AddSeconds(-60)' $"Returned LastEnqueuedTimeUtc is {partition.LastEnqueuedTimeUtc}");                          }                          finally                          {                              await partitionSender.CloseAsync();                          }                      });
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RuntimeInformationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RuntimeInformationTests.cs,MultipleClientsGetRuntimeInformation,The following statement contains a magic number: var maxNumberOfClients = 100;
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,RuntimeInformationTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\RuntimeInformationTests.cs,MultipleClientsGetRuntimeInformation,The following statement contains a magic number: await Task.Delay(10000);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,SendTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\SendTests.cs,SendAndReceiveArraySegmentEventData,The following statement contains a magic number: var byteArr = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,SendTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\SendTests.cs,SendAndReceiveArraySegmentEventData,The following statement contains a magic number: var byteArr = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,SendTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\SendTests.cs,SendAndReceiveArraySegmentEventData,The following statement contains a magic number: var byteArr = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,SendTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\SendTests.cs,SendAndReceiveArraySegmentEventData,The following statement contains a magic number: var byteArr = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,SendTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\SendTests.cs,SendAndReceiveArraySegmentEventData,The following statement contains a magic number: var byteArr = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,SendTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\SendTests.cs,SendAndReceiveArraySegmentEventData,The following statement contains a magic number: var byteArr = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,SendTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\SendTests.cs,SendAndReceiveArraySegmentEventData,The following statement contains a magic number: var byteArr = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,SendTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\SendTests.cs,SendAndReceiveArraySegmentEventData,The following statement contains a magic number: var byteArr = new byte[] { 0' 1' 2' 3' 4' 5' 6' 7' 8' 9 };
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,SendTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\SendTests.cs,MultipleClientsSend,The following statement contains a magic number: var maxNumberOfClients = 100;
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,SendTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\SendTests.cs,MultipleClientsSend,The following statement contains a magic number: await Task.Delay(10000);
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,SendTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\SendTests.cs,SendBatchWithPartitionKey,The following statement contains a magic number: Assert.True(messages.Count == 2' $"Received {messages.Count} messages instead of 2.");
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\TimeoutTests.cs,ReceiveTimeout,The following statement contains a magic number: var testValues = new[] { 30' 60' 120 };
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\TimeoutTests.cs,ReceiveTimeout,The following statement contains a magic number: var testValues = new[] { 30' 60' 120 };
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\TimeoutTests.cs,ReceiveTimeout,The following statement contains a magic number: var testValues = new[] { 30' 60' 120 };
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\TimeoutTests.cs,ReceiveTimeout,The following statement contains a magic number: Assert.True(diff >= receiveTimeoutInSeconds - 0.1' $"Hit timeout {diff} seconds into Receive call while testing {receiveTimeoutInSeconds} seconds timeout.");
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\TimeoutTests.cs,ReceiveTimeout,The following statement contains a magic number: Assert.True(diff < receiveTimeoutInSeconds + 5' $"Hit timeout {diff} seconds into Receive call while testing {receiveTimeoutInSeconds} seconds timeout.");
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\TimeoutTests.cs,SmallReceiveTimeout,The following statement contains a magic number: var maxClients = 4;
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,TokenProviderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\TokenProviderTests.cs,UseSharedAccessSignature,The following statement contains a magic number: var token = await tokenProvider.GetTokenAsync(csb.Endpoint.ToString()' TimeSpan.FromSeconds(120));
Magic Number,Microsoft.Azure.EventHubs.Tests.Client,WebSocketTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Client\WebSocketTests.cs,GetWebSocketConnectionString,The following statement contains a magic number: csb.OperationTimeout = TimeSpan.FromMinutes(5);
Magic Number,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateAsync,The following statement contains a magic number: caller = (caller.Length < 16) ? caller : caller.Substring(0' 15);
Magic Number,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateAsync,The following statement contains a magic number: caller = (caller.Length < 16) ? caller : caller.Substring(0' 15);
Magic Number,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateAsync,The following statement contains a magic number: string CreateName() => $"{ Guid.NewGuid().ToString("D").Substring(0' 13) }-{ caller }";
Magic Number,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateNamespaceAsync,The following statement contains a magic number: string CreateName() => $"net-eventhubs-track-one-{ Guid.NewGuid().ToString("D").Substring(0' 8) }";
Magic Number,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateNamespaceAsync,The following statement contains a magic number: var eventHubsNamespace = new EHNamespace(sku: new Sku("Standard"' "Standard"' 12)' tags: GetResourceTags()' isAutoInflateEnabled: true' maximumThroughputUnits: 20' location: location);
Magic Number,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateNamespaceAsync,The following statement contains a magic number: var eventHubsNamespace = new EHNamespace(sku: new Sku("Standard"' "Standard"' 12)' tags: GetResourceTags()' isAutoInflateEnabled: true' maximumThroughputUnits: 20' location: location);
Magic Number,Microsoft.Azure.EventHubs.Tests,EventHubScope,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Infrastructure\EventHubScope.cs,CreateStorageAsync,The following statement contains a magic number: string CreateName() => $"neteventhubstrackone{ Guid.NewGuid().ToString("D").Substring(0' 4) }";
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,NegativeCases,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorNegativeCases.cs,InvalidPartitionManagerOptions,The following statement contains a magic number: var pmo = new PartitionManagerOptions()              {                  LeaseDuration = TimeSpan.FromSeconds(30)'                  RenewInterval = TimeSpan.FromSeconds(20)              };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,NegativeCases,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorNegativeCases.cs,InvalidPartitionManagerOptions,The following statement contains a magic number: var pmo = new PartitionManagerOptions()              {                  LeaseDuration = TimeSpan.FromSeconds(30)'                  RenewInterval = TimeSpan.FromSeconds(20)              };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,NegativeCases,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorNegativeCases.cs,InvalidPartitionManagerOptions,The following statement contains a magic number: Assert.Throws<ArgumentException>(() =>              {                  TestUtility.Log("Setting lease duration smaller than the renew interval should fail.");                  pmo.LeaseDuration = TimeSpan.FromSeconds(15);              });
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,NegativeCases,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorNegativeCases.cs,InvalidPartitionManagerOptions,The following statement contains a magic number: Assert.Throws<ArgumentException>(() =>              {                  TestUtility.Log("Setting renew interval greater than the lease duration should fail.");                  pmo.RenewInterval = TimeSpan.FromSeconds(45);              });
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,NegativeCases,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorNegativeCases.cs,InvalidPartitionManagerOptions,The following statement contains a magic number: Assert.Throws<ArgumentException>(() =>              {                  TestUtility.Log("Setting lease duration outside of allowed range should fail.");                  pmo.LeaseDuration = TimeSpan.FromSeconds(65);              });
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,MultipleProcessorHosts,The following statement contains a magic number: int hostCount = 3;
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,MultipleProcessorHosts,The following statement contains a magic number: var processorOptions = new EventProcessorOptions                          {                              ReceiveTimeout = TimeSpan.FromSeconds(10)'                              InvokeProcessorAfterReceiveTimeout = true'                              MaxBatchSize = 100'                              InitialOffsetProvider = pId => EventPosition.FromEnqueuedTime(DateTime.UtcNow.Subtract(TimeSpan.FromSeconds(60)))                          };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,MultipleProcessorHosts,The following statement contains a magic number: var processorOptions = new EventProcessorOptions                          {                              ReceiveTimeout = TimeSpan.FromSeconds(10)'                              InvokeProcessorAfterReceiveTimeout = true'                              MaxBatchSize = 100'                              InitialOffsetProvider = pId => EventPosition.FromEnqueuedTime(DateTime.UtcNow.Subtract(TimeSpan.FromSeconds(60)))                          };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,MultipleProcessorHosts,The following statement contains a magic number: var processorOptions = new EventProcessorOptions                          {                              ReceiveTimeout = TimeSpan.FromSeconds(10)'                              InvokeProcessorAfterReceiveTimeout = true'                              MaxBatchSize = 100'                              InitialOffsetProvider = pId => EventPosition.FromEnqueuedTime(DateTime.UtcNow.Subtract(TimeSpan.FromSeconds(60)))                          };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,MultipleProcessorHosts,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(60));
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,MultipleProcessorHosts,The following statement contains a magic number: bool ret = await e.Value.WaitAsync(TimeSpan.FromSeconds(30));
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,MultipleProcessorHosts,The following statement contains a magic number: bool ret = await e.Value.WaitAsync(TimeSpan.FromSeconds(30));
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InvokeAfterReceiveTimeoutTrue,The following statement contains a magic number: const int ReceiveTimeoutInSeconds = 15;
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InvokeAfterReceiveTimeoutTrue,The following statement contains a magic number: bool emptyBatchReceived = await emptyBatchReceiveEvent.WaitAsync(TimeSpan.FromSeconds(ReceiveTimeoutInSeconds * 2));
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InvokeAfterReceiveTimeoutFalse,The following statement contains a magic number: const int ReceiveTimeoutInSeconds = 15;
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InvokeAfterReceiveTimeoutFalse,The following statement contains a magic number: var processorOptions = new EventProcessorOptions                  {                      ReceiveTimeout = TimeSpan.FromSeconds(ReceiveTimeoutInSeconds)'                      InvokeProcessorAfterReceiveTimeout = false'                      MaxBatchSize = 100                  };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InvokeAfterReceiveTimeoutFalse,The following statement contains a magic number: bool waitSucceeded = await emptyBatchReceiveEvent.WaitAsync(TimeSpan.FromSeconds(ReceiveTimeoutInSeconds * 2));
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InitialOffsetProviderWithDateTime,The following statement contains a magic number: var processorOptions = new EventProcessorOptions                  {                      ReceiveTimeout = TimeSpan.FromSeconds(15)'                      InitialOffsetProvider = partitionId => EventPosition.FromEnqueuedTime(lastEnqueueDateTime)'                      MaxBatchSize = 100                  };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InitialOffsetProviderWithDateTime,The following statement contains a magic number: var processorOptions = new EventProcessorOptions                  {                      ReceiveTimeout = TimeSpan.FromSeconds(15)'                      InitialOffsetProvider = partitionId => EventPosition.FromEnqueuedTime(lastEnqueueDateTime)'                      MaxBatchSize = 100                  };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InitialOffsetProviderWithOffset,The following statement contains a magic number: var processorOptions = new EventProcessorOptions                  {                      ReceiveTimeout = TimeSpan.FromSeconds(15)'                      InitialOffsetProvider = partitionId => EventPosition.FromOffset(partitions[partitionId].Item1)'                      MaxBatchSize = 100                  };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InitialOffsetProviderWithOffset,The following statement contains a magic number: var processorOptions = new EventProcessorOptions                  {                      ReceiveTimeout = TimeSpan.FromSeconds(15)'                      InitialOffsetProvider = partitionId => EventPosition.FromOffset(partitions[partitionId].Item1)'                      MaxBatchSize = 100                  };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InitialOffsetProviderWithEndOfStream,The following statement contains a magic number: var processorOptions = new EventProcessorOptions                  {                      ReceiveTimeout = TimeSpan.FromSeconds(15)'                      InitialOffsetProvider = partitionId => EventPosition.FromEnd()'                      MaxBatchSize = 100                  };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InitialOffsetProviderWithEndOfStream,The following statement contains a magic number: var processorOptions = new EventProcessorOptions                  {                      ReceiveTimeout = TimeSpan.FromSeconds(15)'                      InitialOffsetProvider = partitionId => EventPosition.FromEnd()'                      MaxBatchSize = 100                  };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InitialOffsetProviderOverrideBehavior,The following statement contains a magic number: var processorOptions = new EventProcessorOptions                  {                      ReceiveTimeout = TimeSpan.FromSeconds(15)'                      InitialOffsetProvider = partitionId => EventPosition.FromStart()'                      MaxBatchSize = 100                  };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,InitialOffsetProviderOverrideBehavior,The following statement contains a magic number: var processorOptions = new EventProcessorOptions                  {                      ReceiveTimeout = TimeSpan.FromSeconds(15)'                      InitialOffsetProvider = partitionId => EventPosition.FromStart()'                      MaxBatchSize = 100                  };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverAfterReceiverDisconnection,The following statement contains a magic number: epo.ReceiveTimeout = TimeSpan.FromSeconds(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverAfterReceiverDisconnection,The following statement contains a magic number: await Task.Delay(15000);
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverAfterReceiverDisconnection,The following statement contains a magic number: externalReceiver = ehClient.CreateEpochReceiver(PartitionReceiver.DefaultConsumerGroupName'                          targetPartition' EventPosition.FromStart()' 2);
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverAfterReceiverDisconnection,The following statement contains a magic number: await externalReceiver.ReceiveAsync(100' TimeSpan.FromSeconds(5));
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverAfterReceiverDisconnection,The following statement contains a magic number: await externalReceiver.ReceiveAsync(100' TimeSpan.FromSeconds(5));
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverAfterReceiverDisconnection,The following statement contains a magic number: await Task.Delay(60000);
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverAfterReceiverDisconnection,The following statement contains a magic number: Assert.True(targetPartitionOpens == 2' $"Host opened target partition {targetPartitionOpens} times!");
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,CheckpointEveryMessageReceived,The following statement contains a magic number: var runResult = await RunGenericScenario(eventProcessorHost' epo' totalNumberOfEventsToSend: 10'                      checkpointLastEvent: false' checkpoingEveryEvent: true);
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverWhenProcessEventsAsyncThrows,The following statement contains a magic number: var epo = new EventProcessorOptions()                      {                          MaxBatchSize = 100'                          InitialOffsetProvider = pId => EventPosition.FromEnqueuedTime(DateTime.UtcNow.Subtract(TimeSpan.FromSeconds(60)))                      };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverWhenProcessEventsAsyncThrows,The following statement contains a magic number: var epo = new EventProcessorOptions()                      {                          MaxBatchSize = 100'                          InitialOffsetProvider = pId => EventPosition.FromEnqueuedTime(DateTime.UtcNow.Subtract(TimeSpan.FromSeconds(60)))                      };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverWhenProcessEventsAsyncThrows,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(5));
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverWhenProcessEventsAsyncThrows,The following statement contains a magic number: await Task.Delay(30000);
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverWhenProcessEventsAsyncThrows,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverWhenProcessEventsAsyncThrows,The following statement contains a magic number: lastReceivedAt > DateTime.Now.AddSeconds(-60)
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,HostShouldRecoverWhenProcessEventsAsyncThrows,The following statement contains a magic number: Assert.True(receivedEventCount >= 2' $"Partition {partitionId} received {receivedEventCount} where as at least 2 expected!");
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,ReRegisterAfterLeaseExpiry,The following statement contains a magic number: await Task.Delay(60);
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,RunGenericScenario,The following statement contains a magic number: epo = new EventProcessorOptions                  {                      ReceiveTimeout = TimeSpan.FromSeconds(15)'                      MaxBatchSize = 100                  };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,RunGenericScenario,The following statement contains a magic number: epo = new EventProcessorOptions                  {                      ReceiveTimeout = TimeSpan.FromSeconds(15)'                      MaxBatchSize = 100                  };
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,RunGenericScenario,The following statement contains a magic number: await Task.Delay(5000);
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,RunGenericScenario,The following statement contains a magic number: await Task.Delay(1000);
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,RunGenericScenario,The following statement contains a magic number: lastReceivedAt > DateTime.Now.AddSeconds(-30)
Magic Number,Microsoft.Azure.EventHubs.Tests.Processor,ProcessorTestBase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\Processor\ProcessorTestBase.cs,GetOptionsAsync,The following statement contains a magic number: return new EventProcessorOptions              {                  MaxBatchSize = 100'                  InitialOffsetProvider = pId => EventPosition.FromOffset(partitions[pId].Item1)              };
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,CheckpointingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\CheckpointingTests.cs,CheckpointBatchTest,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,CheckpointingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\CheckpointingTests.cs,CheckpointBatchTest,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,CheckpointingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\CheckpointingTests.cs,CheckpointBatchTest,The following statement contains a magic number: state.RunForNBatches(1' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,CheckpointingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\CheckpointingTests.cs,CheckpointEventTest,The following statement contains a magic number: const long checkpointAt = 57L;
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,CheckpointingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\CheckpointingTests.cs,CheckpointEventTest,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,CheckpointingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\CheckpointingTests.cs,CheckpointEventTest,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,CheckpointingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\CheckpointingTests.cs,CheckpointEventTest,The following statement contains a magic number: state.RunForNBatches(1' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,EventHubExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,NoFailures,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,EventHubExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,NoFailures,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,EventHubExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,NoFailures,The following statement contains a magic number: Assert.True(state.Processor.TotalBatches >= 20' $"Run ended at {state.Processor.TotalBatches} batches");
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,EventHubExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,TransientEventHubReceiveFailure,The following statement contains a magic number: state.VerifyNormalStartup(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,EventHubExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,TransientEventHubReceiveFailure,The following statement contains a magic number: int batchesAlreadyDone = state.CountNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,EventHubExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,TransientEventHubReceiveFailure,The following statement contains a magic number: int batchesAlreadyDone = state.CountNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,EventHubExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,TransientEventHubReceiveFailure,The following statement contains a magic number: const int errorCount = 10;
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,EventHubExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,TransientEventHubReceiveFailure,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,EventHubExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,TransientEventHubReceiveFailure,The following statement contains a magic number: state.CountNBatches(batchesAlreadyDone * 2' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,EventHubExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,TransientEventHubReceiveFailure,The following statement contains a magic number: state.CountNBatches(batchesAlreadyDone * 2' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,EventHubExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,TransientEventHubReceiveFailure,The following statement contains a magic number: state.DoNormalShutdown(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,EventHubExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,TransientEventHubReceiveFailure,The following statement contains a magic number: Assert.True(state.Processor.TotalBatches >= 20' $"Run ended at {state.Processor.TotalBatches} batches");
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,EventHubExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,EventHubReceiveFailure,The following statement contains a magic number: state.VerifyNormalStartup(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,EventHubExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,EventHubReceiveFailure,The following statement contains a magic number: state.CountNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,EventHubExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\EventHubExceptionTests.cs,EventHubReceiveFailure,The following statement contains a magic number: state.CountNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,SimpleOptionsTest,The following statement contains a magic number: const int testBatchSize = 42;
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,SimpleOptionsTest,The following statement contains a magic number: const int testPrefetchCount = 444;
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,SimpleOptionsTest,The following statement contains a magic number: TimeSpan testReceiveTimeout = TimeSpan.FromSeconds(10.0);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,SimpleOptionsTest,The following statement contains a magic number: state.VerifyNormalStartup(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,SimpleOptionsTest,The following statement contains a magic number: state.CountNBatches(5' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,SimpleOptionsTest,The following statement contains a magic number: state.CountNBatches(5' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,SimpleOptionsTest,The following statement contains a magic number: state.DoNormalShutdown(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,UseInitialPositionProviderTest,The following statement contains a magic number: const long firstSequenceNumber = 3456L;
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,UseInitialPositionProviderTest,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,UseInitialPositionProviderTest,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,IgnoreInitialPositionProviderTest,The following statement contains a magic number: const long ippSequenceNumber = 3456L;
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,IgnoreInitialPositionProviderTest,The following statement contains a magic number: const long checkpointSequenceNumber = 8888L;
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,IgnoreInitialPositionProviderTest,The following statement contains a magic number: Checkpoint fake = new Checkpoint((checkpointSequenceNumber * 100L).ToString()' checkpointSequenceNumber);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,IgnoreInitialPositionProviderTest,The following statement contains a magic number: store.SetAsync(tx' "0"' fake.ToDictionary()' TimeSpan.FromSeconds(5.0)' CancellationToken.None).Wait();
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,IgnoreInitialPositionProviderTest,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,IgnoreInitialPositionProviderTest,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,RuntimeInformationTest,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,OptionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\OptionsTests.cs,RuntimeInformationTest,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,SFPtestbase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\SFPtestbase.cs,TestMockStatefulServicePartition,The following statement contains a magic number: loadMetrics.Add(new LoadMetric("mockMetric"' 42));
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,SFPtestbase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\SFPtestbase.cs,TestMockReliableDictionary,The following statement contains a magic number: TimeSpan timeout = TimeSpan.FromSeconds(10.0);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,SFPtestbase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\SFPtestbase.cs,TestMockReliableDictionary,The following statement contains a magic number: Checkpoint ck2 = new Checkpoint("7777"' 2);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,SFPtestbase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\SFPtestbase.cs,TestMockReliableDictionary,The following statement contains a magic number: Checkpoint ck3 = new Checkpoint("88888"' 3);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,SFPtestbase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\SFPtestbase.cs,SmokeTest,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,SFPtestbase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\SFPtestbase.cs,SmokeTest,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,SFPtestbase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\SFPtestbase.cs,PartitionCountEnforcement,The following statement contains a magic number: innerPartitionCountEnforcement(4' 16);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,SFPtestbase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\SFPtestbase.cs,PartitionCountEnforcement,The following statement contains a magic number: innerPartitionCountEnforcement(4' 16);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,SFPtestbase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\SFPtestbase.cs,PartitionCountEnforcement,The following statement contains a magic number: innerPartitionCountEnforcement(4' 2);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,SFPtestbase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\SFPtestbase.cs,PartitionCountEnforcement,The following statement contains a magic number: innerPartitionCountEnforcement(4' 2);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,SFPtestbase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\SFPtestbase.cs,innerPartitionCountEnforcement,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,SFPtestbase,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\SFPtestbase.cs,innerPartitionCountEnforcement,The following statement contains a magic number: !state.HasShutDown && (retries < 10)
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,TestState,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\TestState.cs,CountNBatches,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,TestState,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\TestState.cs,VerifyNormalStartup,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,TestState,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\TestState.cs,DoNormalShutdown,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,TestState,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\TestState.cs,DoNormalShutdown,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\TimeoutTests.cs,TimeoutSuppressTest,The following statement contains a magic number: state.Options.ReceiveTimeout = TimeSpan.FromSeconds(5.0);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\TimeoutTests.cs,TimeoutSuppressTest,The following statement contains a magic number: state.VerifyNormalStartup(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\TimeoutTests.cs,TimeoutSuppressTest,The following statement contains a magic number: Thread.Sleep(20000);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\TimeoutTests.cs,TimeoutSuppressTest,The following statement contains a magic number: state.DoNormalShutdown(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\TimeoutTests.cs,TimeoutInvokeTest,The following statement contains a magic number: state.Options.ReceiveTimeout = TimeSpan.FromSeconds(5.0);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\TimeoutTests.cs,TimeoutInvokeTest,The following statement contains a magic number: state.VerifyNormalStartup(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\TimeoutTests.cs,TimeoutInvokeTest,The following statement contains a magic number: Thread.Sleep(20000);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,TimeoutTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\TimeoutTests.cs,TimeoutInvokeTest,The following statement contains a magic number: state.DoNormalShutdown(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,UserExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\UserExceptionTests.cs,CloseException,The following statement contains a magic number: state.VerifyNormalStartup(10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,UserExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\UserExceptionTests.cs,CloseException,The following statement contains a magic number: state.CountNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,UserExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\UserExceptionTests.cs,CloseException,The following statement contains a magic number: state.CountNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,UserExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\UserExceptionTests.cs,EventException,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,UserExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\UserExceptionTests.cs,EventException,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,UserExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\UserExceptionTests.cs,ErrorException,The following statement contains a magic number: state.RunForNBatches(20' 10);
Magic Number,Microsoft.Azure.EventHubs.Tests.ServiceFabricProcessor,UserExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\eventhub\Microsoft.Azure.EventHubs\tests\ServiceFabricProcessor\UserExceptionTests.cs,ErrorException,The following statement contains a magic number: state.RunForNBatches(20' 10);
