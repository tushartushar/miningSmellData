Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The method has 251 lines of code.
Long Method,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The method has 139 lines of code.
Long Method,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The method has 139 lines of code.
Long Method,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The method has 139 lines of code.
Long Method,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The method has 129 lines of code.
Long Method,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The method has 128 lines of code.
Long Method,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The method has 133 lines of code.
Long Method,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanRoundtripBoundaryValues,The method has 112 lines of code.
Long Method,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The method has 124 lines of code.
Complex Method,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,SelectPopulatedFields,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,AssertTokenInfoEqual,The method has 5 parameters. Parameters: expectedToken' expectedStartOffset' expectedEndOffset' expectedPosition' actual
Long Identifier,Microsoft.Azure.Search.Tests.Utilities,IndexerFixture,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Utilities\IndexerFixture.cs,,The length of the parameter AzureSqlReadOnlyConnectionString is 32.
Long Identifier,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The length of the parameter expectedIndexWithSpecialDefaults is 32.
Long Identifier,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentNames,The length of the parameter analyzerWithAllTokenFiltersAndCharFilters is 41.
Long Identifier,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentOptions,The length of the parameter tokenizerWithAllTokenCharacterKinds is 35.
Long Identifier,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentOptions,The length of the parameter tokenizersWithAllMicrosoftLanguages is 35.
Long Identifier,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentOptions,The length of the parameter tokenizersWithAllMicrosoftStemmingLanguages is 43.
Long Identifier,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentOptions,The length of the parameter tokenFiltersWithAllEdgeNGramSides is 33.
Long Identifier,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentOptions,The length of the parameter tokenFiltersWithAllPhoneticEncoders is 35.
Long Identifier,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentOptions,The length of the parameter tokenFiltersWithAllSnowballLanguages is 36.
Long Identifier,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentOptions,The length of the parameter tokenFiltersWithAllStemmerLanguages is 35.
Long Identifier,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentOptions,The length of the parameter tokenFiltersWithAllStopwordLists is 32.
Long Identifier,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,AssertIndexContainsAllAnalysisComponents,The length of the parameter analysisTypesPresentInAllIndexes is 32.
Long Statement,Microsoft.Azure.Search.Tests.Utilities,DataPlaneModelComparer<T>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\ModelComparer\DataPlaneModelComparer.cs,CompareNull,The length of the statement  "            // DataPlaneModelComparer is used to compare model classes that map to OData JSON payloads. In OData' the default value of " is 122.
Long Statement,Microsoft.Azure.Search.Tests.Utilities,DataPlaneModelComparer<T>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\ModelComparer\DataPlaneModelComparer.cs,CompareNull,The length of the statement  "            // a collection is an empty collection' not null. However' in .NET' missing JSON properties are modeled as null. To compensate " is 126.
Long Statement,Microsoft.Azure.Search.Tests.Utilities,DataPlaneModelComparer<T>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\ModelComparer\DataPlaneModelComparer.cs,CompareNull,The length of the statement  "            // For value types' we go by the rule that null is equal to default(T). This works for cases where a client omits a property in " is 127.
Long Statement,Microsoft.Azure.Search.Tests.Utilities,DataPlaneModelComparer<T>,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\ModelComparer\DataPlaneModelComparer.cs,IsETagProperty,The length of the statement  "                return type == resourceWithETagType ? type : typeInfo.ImplementedInterfaces.FirstOrDefault(t => t == resourceWithETagType); " is 123.
Long Statement,Microsoft.Azure.Search.Tests.Utilities,IndexerFixture,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Utilities\IndexerFixture.cs,CreateTestIndexerWithSkillset,The length of the statement  "            return new Indexer(name: SearchTestUtilities.GenerateName()' dataSourceName: DataSourceName' targetIndexName: TargetIndexName' skillsetName: skillsetName) " is 154.
Long Statement,Microsoft.Azure.Search.Tests,AutocompleteTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\AutocompleteTests.cs,TestAutocompleteStaticallyTypedDocuments,The length of the statement  "            var expectedQueryPlusText = new List<string>() { "very point"' "very police"' "very polite"' "very pool"' "very popular" }; " is 123.
Long Statement,Microsoft.Azure.Search.Tests,AutocompleteTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\AutocompleteTests.cs,TestAutocompleteStaticallyTypedDocuments,The length of the statement  "            var autocompleteParameters = new AutocompleteParameters() { AutocompleteMode = AutocompleteMode.OneTerm' UseFuzzyMatching = false }; " is 132.
Long Statement,Microsoft.Azure.Search.Tests,AutocompleteTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\AutocompleteTests.cs,TestAutocompleteThrowsWhenRequestIsMalformed,The length of the statement  "                "Cannot find fields enabled for suggestions. Please provide a value for 'suggesterName' in the query.\r\nParameter name: suggestions"); " is 135.
Long Statement,Microsoft.Azure.Search.Tests,AutocompleteTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\AutocompleteTests.cs,TestAutocompleteTwoTerms,The length of the statement  "            var expectedQueryPlusText = new List<string>() { "point motel"' "police station"' "polite staff"' "pool a"' "popular hotel" }; " is 126.
Long Statement,Microsoft.Azure.Search.Tests,AutocompleteTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\AutocompleteTests.cs,TestAutocompleteOneTermWithContext,The length of the statement  "            var expectedQueryPlusText = new List<string>() { "looking for very police"' "looking for very polite"' "looking for very popular" }; " is 132.
Long Statement,Microsoft.Azure.Search.Tests,AutocompleteTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\AutocompleteTests.cs,TestAutocompleteOneTermWithFuzzy,The length of the statement  "            var autocompleteParameters = new AutocompleteParameters() { AutocompleteMode = AutocompleteMode.OneTerm' UseFuzzyMatching = true }; " is 131.
Long Statement,Microsoft.Azure.Search.Tests,AutocompleteTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\AutocompleteTests.cs,TestAutocompleteTwoTermsWithFuzzy,The length of the statement  "            var expectedText = new List<string>() { "model suites"' "modern architecture"' "modern stay"' "morel coverings"' "motel" }; " is 123.
Long Statement,Microsoft.Azure.Search.Tests,AutocompleteTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\AutocompleteTests.cs,TestAutocompleteTwoTermsWithFuzzy,The length of the statement  "            var expectedQueryPlusText = new List<string>() { "model suites"' "modern architecture"' "modern stay"' "morel coverings"' "motel" }; " is 132.
Long Statement,Microsoft.Azure.Search.Tests,AutocompleteTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\AutocompleteTests.cs,TestAutocompleteTwoTermsWithFuzzy,The length of the statement  "            var autocompleteParameters = new AutocompleteParameters() { AutocompleteMode = AutocompleteMode.TwoTerms' UseFuzzyMatching = true }; " is 132.
Long Statement,Microsoft.Azure.Search.Tests,AutocompleteTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\AutocompleteTests.cs,TestAutocompleteOneTermWithContextWithFuzzy,The length of the statement  "            var autocompleteParameters = new AutocompleteParameters() { AutocompleteMode = AutocompleteMode.OneTermWithContext' UseFuzzyMatching = true }; " is 142.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanAnalyze,The length of the statement  "                AssertTokenInfoEqual("One"' expectedStartOffset: 0' expectedEndOffset: 3' expectedPosition: 0' actual: result.Tokens[0]); " is 121.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanAnalyze,The length of the statement  "                AssertTokenInfoEqual("two"' expectedStartOffset: 4' expectedEndOffset: 7' expectedPosition: 1' actual: result.Tokens[1]); " is 121.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanAnalyze,The length of the statement  "                AssertTokenInfoEqual("One"' expectedStartOffset: 0' expectedEndOffset: 5' expectedPosition: 0' actual: result.Tokens[0]); " is 121.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The length of the statement  "                    new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above. " is 121.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The length of the statement  "                    new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })' " is 128.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The length of the statement  "                    new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)' " is 125.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The length of the statement  "                    new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)' " is 124.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The length of the statement  "                    new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)' " is 127.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The length of the statement  "                    new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above. " is 129.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The length of the statement  "                // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that " is 129.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The length of the statement  "                // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API. " is 130.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentNames,The length of the statement  "                    new CustomAnalyzer(SearchTestUtilities.GenerateName()' TokenizerName.Lowercase' allTokenFilterNames' allCharFilterNames); " is 121.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentOptions,The length of the statement  "                    GetAllEnumValues<SnowballTokenFilterLanguage>().Select(l => new SnowballTokenFilter(SearchTestUtilities.GenerateName()' l)); " is 124.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentOptions,The length of the statement  "                    GetAllEnumValues<StemmerTokenFilterLanguage>().Select(l => new StemmerTokenFilter(SearchTestUtilities.GenerateName()' l)); " is 122.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentOptions,The length of the statement  "                IEnumerable<TokenFilter> tokenFiltersWithAllStopwordLists = GetAllEnumValues<StopwordsList>().Select(CreateStopTokenFilter); " is 124.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,AssertIndexContainsAllAnalysisComponents,The length of the statement  "            IEnumerable<Type> allAnalysisComponentTypes = typeof(Index).GetTypeInfo().Assembly.ExportedTypes.Where((Type type) => IsAnalysisComponentType(type) && !IsDeprecatedType(type)); " is 176.
Long Statement,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,TestAnalysisComponents,The length of the statement  "            foreach (var testCase in SplitIndex(index).Zip(SplitIndex(expectedIndex)' (i' e) => new { Index = i' ExpectedIndex = e })) " is 122.
Long Statement,Microsoft.Azure.Search.Tests,DataSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\DataSourceTests.cs,CreateTestCosmosDbDataSource,The length of the statement  "                cosmosDbConnectionString: "AccountEndpoint=https://NotaRealAccount.documents.azure.com;AccountKey=fake;Database=someFakeDatabase"' // [SuppressMessage("Microsoft.Security"' "CS001:SecretInline"' Justification = "This is not a real secret")] " is 240.
Long Statement,Microsoft.Azure.Search.Tests,DataSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\DataSourceTests.cs,CreateTestBlobDataSource,The length of the statement  "                storageConnectionString: "DefaultEndpointsProtocol=https;AccountName=NotaRealAccount;AccountKey=fake;"' // [SuppressMessage("Microsoft.Security"' "CS001:SecretInline"' Justification = "This is not a real secret")] " is 213.
Long Statement,Microsoft.Azure.Search.Tests,DataSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\DataSourceTests.cs,CreateTestTableDataSource,The length of the statement  "                storageConnectionString: "DefaultEndpointsProtocol=https;AccountName=NotaRealAccount;AccountKey=fake;"' // [SuppressMessage("Microsoft.Security"' "CS001:SecretInline"' Justification = "This is not a real secret")] " is 213.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,ReportsIsSearchableOnlyOnPropertiesWithIsSearchableAttribute,The length of the statement  "                nameof(ReflectableModel.Complex) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.City)' " is 122.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,ReportsIsSearchableOnlyOnPropertiesWithIsSearchableAttribute,The length of the statement  "                nameof(ReflectableModel.ComplexArray) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.City)' " is 127.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,ReportsIsSearchableOnlyOnPropertiesWithIsSearchableAttribute,The length of the statement  "                nameof(ReflectableModel.ComplexIList) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.City)' " is 127.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,ReportsIsSearchableOnlyOnPropertiesWithIsSearchableAttribute,The length of the statement  "                nameof(ReflectableModel.ComplexList) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.City)' " is 126.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,ReportsIsSearchableOnlyOnPropertiesWithIsSearchableAttribute,The length of the statement  "                nameof(ReflectableModel.ComplexIEnumerable) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.City)' " is 133.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,ReportsIsSearchableOnlyOnPropertiesWithIsSearchableAttribute,The length of the statement  "                nameof(ReflectableModel.ComplexICollection) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.City)); " is 134.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,IsFilterableOnlyOnPropertiesWithIsFilterableAttribute,The length of the statement  "                nameof(ReflectableModel.Complex) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.Country)' " is 125.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,IsFilterableOnlyOnPropertiesWithIsFilterableAttribute,The length of the statement  "                nameof(ReflectableModel.ComplexArray) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.Country)' " is 130.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,IsFilterableOnlyOnPropertiesWithIsFilterableAttribute,The length of the statement  "                nameof(ReflectableModel.ComplexIList) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.Country)' " is 130.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,IsFilterableOnlyOnPropertiesWithIsFilterableAttribute,The length of the statement  "                nameof(ReflectableModel.ComplexList) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.Country)' " is 129.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,IsFilterableOnlyOnPropertiesWithIsFilterableAttribute,The length of the statement  "                nameof(ReflectableModel.ComplexIEnumerable) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.Country)' " is 136.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,IsFilterableOnlyOnPropertiesWithIsFilterableAttribute,The length of the statement  "                nameof(ReflectableModel.ComplexICollection) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.Country)); " is 137.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,IsFacetableOnlyOnPropertiesWithIsFacetableAttribute,The length of the statement  "                nameof(ReflectableModel.Complex) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.Country)' " is 125.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,IsFacetableOnlyOnPropertiesWithIsFacetableAttribute,The length of the statement  "                nameof(ReflectableModel.ComplexArray) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.Country)' " is 130.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,IsFacetableOnlyOnPropertiesWithIsFacetableAttribute,The length of the statement  "                nameof(ReflectableModel.ComplexIList) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.Country)' " is 130.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,IsFacetableOnlyOnPropertiesWithIsFacetableAttribute,The length of the statement  "                nameof(ReflectableModel.ComplexList) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.Country)' " is 129.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,IsFacetableOnlyOnPropertiesWithIsFacetableAttribute,The length of the statement  "                nameof(ReflectableModel.ComplexIEnumerable) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.Country)' " is 136.
Long Statement,Microsoft.Azure.Search.Tests,FieldBuilderTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldBuilderTests.cs,IsFacetableOnlyOnPropertiesWithIsFacetableAttribute,The length of the statement  "                nameof(ReflectableModel.ComplexICollection) + "/" + nameof(ReflectableComplexObject.Address) + "/" + nameof(ReflectableAddress.Country)); " is 137.
Long Statement,Microsoft.Azure.Search.Tests,FieldTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\FieldTests.cs,ComplexFieldConstructorThrowsOnNoSubfields,The length of the statement  "            Assert.Throws<ArgumentOutOfRangeException>(() => new Field("test"' DataType.Collection(DataType.Complex)' fields: new Field[0])); " is 129.
Long Statement,Microsoft.Azure.Search.Tests,IndexingParametersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingParametersTests.cs,IndexFileNameExtensionsSetCorrectly,The length of the statement  "            var parameters = new IndexingParameters().IndexFileNameExtensions(".pdf"' "docx"); // . should be prefixed automatically  " is 120.
Long Statement,Microsoft.Azure.Search.Tests,IndexingParametersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingParametersTests.cs,IndexFileNameExtensionsAreValidated,The length of the statement  "            Assert.Throws<ArgumentException>(() => new IndexingParameters().IndexFileNameExtensions(new string[] { String.Empty })); " is 120.
Long Statement,Microsoft.Azure.Search.Tests,IndexingParametersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingParametersTests.cs,ExcludeFileNameExtensionsSetCorrectly,The length of the statement  "            var parameters = new IndexingParameters().ExcludeFileNameExtensions(".pdf"' "docx"); // . should be prefixed automatically " is 122.
Long Statement,Microsoft.Azure.Search.Tests,IndexingParametersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingParametersTests.cs,ExcludeFileNameExtensionsAreValidated,The length of the statement  "            Assert.Throws<ArgumentException>(() => new IndexingParameters().ExcludeFileNameExtensions(new string[] { String.Empty })); " is 122.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The length of the statement  "                            ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."' " is 303.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The length of the statement  "                            ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."' " is 336.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The length of the statement  "                            ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."' " is 185.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The length of the statement  "                            ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."' " is 223.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The length of the statement  "                            Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."' " is 299.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The length of the statement  "                            DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."' " is 332.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The length of the statement  "                            Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."' " is 181.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The length of the statement  "                            DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."' " is 219.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The length of the statement  "                            Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."' " is 299.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The length of the statement  "                            DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."' " is 332.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The length of the statement  "                            Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."' " is 181.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The length of the statement  "                            DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."' " is 219.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The length of the statement  "                        ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."' " is 303.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The length of the statement  "                        ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."' " is 336.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The length of the statement  "                        ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."' " is 336.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The length of the statement  "                        Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."' " is 299.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The length of the statement  "                        DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."' " is 332.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The length of the statement  "                        Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."' " is 299.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The length of the statement  "                        DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."' " is 332.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The length of the statement  "                        DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."' " is 299.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The length of the statement  "                        DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."' " is 336.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The length of the statement  "                        DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."' " is 336.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveWithCustomContractResolver,The length of the statement  "                        DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."' " is 299.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveWithCustomContractResolver,The length of the statement  "                        DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."' " is 336.
Long Statement,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanRoundtripBoundaryValues,The length of the statement  "                        Category = "test"'  // No meaningful string max since there is no length limit (other than payload size or term length). " is 120.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The length of the statement  "                    Field.New("hotelId"' DataType.String' isKey: true' isSearchable: false' isFilterable: true' isSortable: true' isFacetable: true)' " is 129.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The length of the statement  "                    Field.NewSearchableString("description"' AnalyzerName.EnLucene' isKey: false' isFilterable: false' isSortable: false' isFacetable: false)' " is 138.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The length of the statement  "                    Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene' isFilterable: false' isSortable: false' isFacetable: false)' " is 126.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The length of the statement  "                    Field.New("description_custom"' DataType.String' isSearchable: true' isFilterable: false' isSortable: false' isFacetable: false' searchAnalyzerName: AnalyzerName.Stop' indexAnalyzerName: AnalyzerName.Stop)' " is 206.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The length of the statement  "                    Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)' " is 134.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The length of the statement  "                        Field.New("stateProvince"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)' " is 121.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The length of the statement  "                    Field.New("location"' DataType.GeographyPoint' isFilterable: true' isSortable: true' isFacetable: false' isRetrievable: true)' " is 126.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The length of the statement  "                        Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true) " is 133.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The length of the statement  "                    Field.New("totalGuests"' DataType.Int64' isFilterable: true' isSortable: true' isFacetable: true' isRetrievable: false)' " is 120.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The length of the statement  "                            // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we " is 123.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The length of the statement  "                            new MagnitudeScoringFunction("rating"' 3.0' new MagnitudeScoringParameters(0' 10) { ShouldBoostBeyondRangeByConstant = false }) " is 127.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The length of the statement  "                            // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we " is 123.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The length of the statement  "                            new MagnitudeScoringFunction("rating"' 3.14' new MagnitudeScoringParameters(1' 5) { ShouldBoostBeyondRangeByConstant = false }) " is 127.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateOrUpdateIndexIfNotExistsFailsOnExistingResource,The length of the statement  "            Run(() => AccessConditionTests.CreateOrUpdateIfNotExistsFailsOnExistingResource(CreateOrUpdateIndex' CreateTestIndex' MutateIndex)); " is 132.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,UpdateIndexIfExistsSucceedsOnExistingResource,The length of the statement  "            Run(() => AccessConditionTests.UpdateIfExistsSucceedsOnExistingResource(CreateOrUpdateIndex' CreateTestIndex' MutateIndex)); " is 124.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,UpdateIndexIfNotChangedSucceedsWhenResourceUnchanged,The length of the statement  "            Run(() => AccessConditionTests.UpdateIfNotChangedSucceedsWhenResourceUnchanged(CreateOrUpdateIndex' CreateTestIndex' MutateIndex)); " is 131.
Long Statement,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,UpdateIndexIfNotChangedFailsWhenResourceChanged,The length of the statement  "            Run(() => AccessConditionTests.UpdateIfNotChangedFailsWhenResourceChanged(CreateOrUpdateIndex' CreateTestIndex' MutateIndex)); " is 126.
Long Statement,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDynamicDocument,The length of the statement  "                        ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."' " is 303.
Long Statement,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDynamicDocument,The length of the statement  "                        ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."' " is 336.
Long Statement,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetStaticallyTypedDocument,The length of the statement  "                        Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."' " is 299.
Long Statement,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetStaticallyTypedDocument,The length of the statement  "                        DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."' " is 332.
Long Statement,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentMappedToStruct,The length of the statement  "                        Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."' " is 299.
Long Statement,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentMappedToStruct,The length of the statement  "                        DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."' " is 332.
Long Statement,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetStaticallyTypedDocumentSetsUnselectedFieldsToNull,The length of the statement  "                        Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."' " is 181.
Long Statement,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetStaticallyTypedDocumentSetsUnselectedFieldsToNull,The length of the statement  "                        DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."' " is 219.
Long Statement,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetStaticallyTypedDocumentSetsUnselectedFieldsToNull,The length of the statement  "                        Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."' " is 181.
Long Statement,Microsoft.Azure.Search.Tests,SearchIndexClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchIndexClientTests.cs,ConstructorThrowsForBadParameters,The length of the statement  "                () => new SearchIndexClient(searchServiceName: String.Empty' indexName: indexName' credentials: creds' rootHandler: handler)); " is 126.
Long Statement,Microsoft.Azure.Search.Tests,SearchIndexClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchIndexClientTests.cs,ConstructorThrowsForBadParameters,The length of the statement  "                () => new SearchIndexClient(searchServiceName: invalidName' indexName: indexName' credentials: creds' rootHandler: handler)); " is 125.
Long Statement,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithRangeFacets,The length of the statement  "                new RangeFacetResult<DateTimeOffset>(count: 2' from: new DateTimeOffset(2000' 1' 1' 0' 0' 0' TimeSpan.Zero)' to: null)); " is 120.
Long Statement,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestNullCannotBeConvertedToValueType,The length of the statement  "            SerializationException e = Assert.Throws<SerializationException>(() => indexClient.Documents.Search<ModelWithValueTypes>("123")); " is 129.
Long Statement,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestNullCannotBeConvertedToValueType,The length of the statement  "            Assert.Contains("Error converting value {null} to type 'Microsoft.Azure.Search.Tests.SearchTests+Bucket'. Path 'Bucket'."' e.ToString()); " is 137.
Long Statement,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanFilterNonNullableType,The length of the statement  "            DocumentSearchResult<ModelWithValueTypes> response = indexClient.Documents.Search<ModelWithValueTypes>("*"' parameters); " is 120.
Long Statement,Microsoft.Azure.Search.Tests,Pinning,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,ArraysWithOnlyNullsReadAsStringArrays,The length of the statement  "                // With only null elements' we can't tell what type of collection it is. For backward compatibility' we assume type string. " is 123.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetReturnsCorrectDefinitionOcrKeyPhrase,The length of the statement  "                CreateAndValidateSkillset(searchClient' CreateTestSkillsetOcrKeyPhrase(OcrSkillLanguage.En' KeyPhraseExtractionSkillLanguage.En)); " is 130.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetReturnsCorrectDefinitionOcrKeyPhrase,The length of the statement  "                CreateAndValidateSkillset(searchClient' CreateTestSkillsetOcrKeyPhrase(OcrSkillLanguage.Fr' KeyPhraseExtractionSkillLanguage.Fr)); " is 130.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetReturnsCorrectDefinitionOcrKeyPhrase,The length of the statement  "                CreateAndValidateSkillset(searchClient' CreateTestSkillsetOcrKeyPhrase(OcrSkillLanguage.Es' KeyPhraseExtractionSkillLanguage.Es)); " is 130.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetReturnsCorrectDefinitionOcrHandwritingSentiment,The length of the statement  "                CreateAndValidateSkillset(searchClient' CreateTestSkillsetOcrSentiment(OcrSkillLanguage.Pt' SentimentSkillLanguage.PtPT' TextExtractionAlgorithm.Printed)); " is 155.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetReturnsCorrectDefinitionOcrHandwritingSentiment,The length of the statement  "                CreateAndValidateSkillset(searchClient' CreateTestSkillsetOcrSentiment(OcrSkillLanguage.Fi' SentimentSkillLanguage.Fi' TextExtractionAlgorithm.Printed)); " is 153.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetReturnsCorrectDefinitionOcrHandwritingSentiment,The length of the statement  "                CreateAndValidateSkillset(searchClient' CreateTestSkillsetOcrSentiment(OcrSkillLanguage.En' SentimentSkillLanguage.En' TextExtractionAlgorithm.Handwritten)); " is 157.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetReturnsCorrectDefinitionOcrEntity,The length of the statement  "                CreateAndValidateSkillset(searchClient' CreateTestSkillsetOcrEntity(TextExtractionAlgorithm.Printed' new List<EntityCategory> { EntityCategory.Location' EntityCategory.Organization' EntityCategory.Person })); " is 208.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetReturnsCorrectDefinitionOcrSplitText,The length of the statement  "                CreateAndValidateSkillset(searchClient' CreateTestSkillsetOcrSplitText(OcrSkillLanguage.En' SplitSkillLanguage.En' TextSplitMode.Pages)); " is 137.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetReturnsCorrectDefinitionOcrSplitText,The length of the statement  "                CreateAndValidateSkillset(searchClient' CreateTestSkillsetOcrSplitText(OcrSkillLanguage.Fr' SplitSkillLanguage.Fr' TextSplitMode.Pages)); " is 137.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetReturnsCorrectDefinitionOcrSplitText,The length of the statement  "                CreateAndValidateSkillset(searchClient' CreateTestSkillsetOcrSplitText(OcrSkillLanguage.Fi' SplitSkillLanguage.Fi' TextSplitMode.Sentences)); " is 141.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetReturnsCorrectDefinitionOcrSplitText,The length of the statement  "                CreateAndValidateSkillset(searchClient' CreateTestSkillsetOcrSplitText(OcrSkillLanguage.Da' SplitSkillLanguage.Da' TextSplitMode.Sentences)); " is 141.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetReturnsCorrectDefinitionTextTranslation,The length of the statement  "                CreateAndValidateSkillset(searchClient' CreateTestSkillsetTextTranslation(TextTranslationSkillLanguage.Es' defaultFromLanguageCode: TextTranslationSkillLanguage.En)); " is 166.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetReturnsCorrectDefinitionTextTranslation,The length of the statement  "                CreateAndValidateSkillset(searchClient' CreateTestSkillsetTextTranslation(TextTranslationSkillLanguage.Es' suggestedFrom: TextTranslationSkillLanguage.En)); " is 156.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetReturnsCorrectDefinitionTextTranslation,The length of the statement  "                CreateAndValidateSkillset(searchClient' CreateTestSkillsetTextTranslation(TextTranslationSkillLanguage.Es' TextTranslationSkillLanguage.En' TextTranslationSkillLanguage.En)); " is 174.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,GetOcrSkillsetWithShouldDetectOrientationReturnsCorrectDefinition,The length of the statement  "                CreateAndGetSkillset(searchClient' CreateTestOcrSkillset(repeat: 1' algorithm: TextExtractionAlgorithm.Printed' shouldDetectOrientation: true)); " is 144.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetWithOcrDefaultSettings,The length of the statement  "            return new Skillset(SearchTestUtilities.GenerateName()' description: "Skillset for testing default configuration"' skills: skills); " is 131.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetWithImageAnalysisDefaultSettings,The length of the statement  "            return new Skillset(SearchTestUtilities.GenerateName()' description: "Skillset for testing default configuration"' skills: skills); " is 131.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetWithKeyPhraseExtractionDefaultSettings,The length of the statement  "            return new Skillset(SearchTestUtilities.GenerateName()' description: "Skillset for testing default configuration"' skills: skills); " is 131.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetWithMergeDefaultSettings,The length of the statement  "            return new Skillset(SearchTestUtilities.GenerateName()' description: "Skillset for testing default configuration"' skills: skills); " is 131.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetWithEntityRecognitionDefaultSettings,The length of the statement  "            return new Skillset(SearchTestUtilities.GenerateName()' description: "Skillset for testing default configuration"' skills: skills); " is 131.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetWithSentimentDefaultSettings,The length of the statement  "            return new Skillset(SearchTestUtilities.GenerateName()' description: "Skillset for testing default configuration"' skills: skills); " is 131.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateSkillsetWithSplitDefaultSettings,The length of the statement  "            return new Skillset(SearchTestUtilities.GenerateName()' description: "Skillset for testing default configuration"' skills: skills); " is 131.
Long Statement,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateTestOcrSkillset,The length of the statement  "            return new Skillset(name: name ?? SearchTestUtilities.GenerateName()' description: "Skillset for testing OCR"' skills: skills); " is 127.
Magic Number,Microsoft.Azure.Search.Tests.Utilities,DocumentsFixture,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Utilities\DocumentsFixture.cs,IndexDocuments,The following statement contains a magic number: IEnumerable<Hotel> nextHotels = hotels.Skip(i).Take(1000);
Magic Number,Microsoft.Azure.Search.Tests.Utilities,IndexFixture,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Utilities\IndexFixture.cs,Initialize,The following statement contains a magic number: TestUtilities.Wait(TimeSpan.FromSeconds(20));
Magic Number,Microsoft.Azure.Search.Tests,DataPlaneModelComparerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\ModelComparer\DataPlaneModelComparerTests.cs,NullEqualsDefault,The following statement contains a magic number: int? maybeFive = 5;
Magic Number,Microsoft.Azure.Search.Tests,DataPlaneModelComparerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\ModelComparer\DataPlaneModelComparerTests.cs,ComparisonIgnoresETags,The following statement contains a magic number: var model = new Model() { Name = "Magical Trevor"' Age = 11' ETag = "1" };
Magic Number,Microsoft.Azure.Search.Tests,AutocompleteTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\AutocompleteTests.cs,TestAutocompleteTopTrimsResults,The following statement contains a magic number: var autocompleteParameters = new AutocompleteParameters()              {                  AutocompleteMode = AutocompleteMode.OneTerm'                  Top = 2              };
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalyzerNamesInIndexDefinition,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient client = Data.GetSearchServiceClient();                    Index index =                      new Index()                      {                          Name = SearchTestUtilities.GenerateName()'                          Fields = new[] { new Field("id"' DataType.String) { IsKey = true } }.ToList()                      };                    AnalyzerName[] allAnalyzers = GetAllExtensibleEnumValues<AnalyzerName>();                    int fieldNumber = 0;                    // All analyzer names can be set on the analyzer property.                  for (int i = 0; i < allAnalyzers.Length; i++)                  {                      DataType fieldType = (i % 2 == 0) ? DataType.String : DataType.Collection(DataType.String);                      index.Fields.Add(new Field($"field{fieldNumber++}"' fieldType' allAnalyzers[i]));                  }                    // Only non-language analyzer names can be set on the searchAnalyzer and indexAnalyzer properties.                  // ASSUMPTION: Only language analyzers end in .lucene or .microsoft.                  var allNonLanguageAnalyzers =                       allAnalyzers.Where(a => !a.ToString().EndsWith(".lucene") && !a.ToString().EndsWith(".microsoft")).ToArray();                    for (int i = 0; i < allNonLanguageAnalyzers.Length; i++)                  {                      DataType fieldType = (i % 2 == 0) ? DataType.String : DataType.Collection(DataType.String);                        var field =                           new Field($"field{fieldNumber++}"' fieldType)                          {                              IsSearchable = true'                              SearchAnalyzer = allNonLanguageAnalyzers[i]'                              IndexAnalyzer = allNonLanguageAnalyzers[i]                          };                        index.Fields.Add(field);                  }                    client.Indexes.Create(index);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalyzerNamesInIndexDefinition,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient client = Data.GetSearchServiceClient();                    Index index =                      new Index()                      {                          Name = SearchTestUtilities.GenerateName()'                          Fields = new[] { new Field("id"' DataType.String) { IsKey = true } }.ToList()                      };                    AnalyzerName[] allAnalyzers = GetAllExtensibleEnumValues<AnalyzerName>();                    int fieldNumber = 0;                    // All analyzer names can be set on the analyzer property.                  for (int i = 0; i < allAnalyzers.Length; i++)                  {                      DataType fieldType = (i % 2 == 0) ? DataType.String : DataType.Collection(DataType.String);                      index.Fields.Add(new Field($"field{fieldNumber++}"' fieldType' allAnalyzers[i]));                  }                    // Only non-language analyzer names can be set on the searchAnalyzer and indexAnalyzer properties.                  // ASSUMPTION: Only language analyzers end in .lucene or .microsoft.                  var allNonLanguageAnalyzers =                       allAnalyzers.Where(a => !a.ToString().EndsWith(".lucene") && !a.ToString().EndsWith(".microsoft")).ToArray();                    for (int i = 0; i < allNonLanguageAnalyzers.Length; i++)                  {                      DataType fieldType = (i % 2 == 0) ? DataType.String : DataType.Collection(DataType.String);                        var field =                           new Field($"field{fieldNumber++}"' fieldType)                          {                              IsSearchable = true'                              SearchAnalyzer = allNonLanguageAnalyzers[i]'                              IndexAnalyzer = allNonLanguageAnalyzers[i]                          };                        index.Fields.Add(field);                  }                    client.Indexes.Create(index);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanAnalyze,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient client = Data.GetSearchServiceClient();                    Index index = CreateTestIndex();                  client.Indexes.Create(index);                    var request = new AnalyzeRequest()                  {                      Text = "One two"'                      Analyzer = AnalyzerName.Whitespace                  };                    AnalyzeResult result = client.Indexes.Analyze(index.Name' request);                    Assert.Equal(2' result.Tokens.Count);                  AssertTokenInfoEqual("One"' expectedStartOffset: 0' expectedEndOffset: 3' expectedPosition: 0' actual: result.Tokens[0]);                  AssertTokenInfoEqual("two"' expectedStartOffset: 4' expectedEndOffset: 7' expectedPosition: 1' actual: result.Tokens[1]);                    request = new AnalyzeRequest()                  {                      Text = "One's <two/>"'                      Tokenizer = TokenizerName.Whitespace'                      TokenFilters = new[] { TokenFilterName.Apostrophe }'                      CharFilters = new[] { CharFilterName.HtmlStrip }                  };                    result = client.Indexes.Analyze(index.Name' request);                    Assert.Equal(1' result.Tokens.Count);                    // End offset is based on the original token' not the one emitted by the filters.                  AssertTokenInfoEqual("One"' expectedStartOffset: 0' expectedEndOffset: 5' expectedPosition: 0' actual: result.Tokens[0]);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanAnalyze,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient client = Data.GetSearchServiceClient();                    Index index = CreateTestIndex();                  client.Indexes.Create(index);                    var request = new AnalyzeRequest()                  {                      Text = "One two"'                      Analyzer = AnalyzerName.Whitespace                  };                    AnalyzeResult result = client.Indexes.Analyze(index.Name' request);                    Assert.Equal(2' result.Tokens.Count);                  AssertTokenInfoEqual("One"' expectedStartOffset: 0' expectedEndOffset: 3' expectedPosition: 0' actual: result.Tokens[0]);                  AssertTokenInfoEqual("two"' expectedStartOffset: 4' expectedEndOffset: 7' expectedPosition: 1' actual: result.Tokens[1]);                    request = new AnalyzeRequest()                  {                      Text = "One's <two/>"'                      Tokenizer = TokenizerName.Whitespace'                      TokenFilters = new[] { TokenFilterName.Apostrophe }'                      CharFilters = new[] { CharFilterName.HtmlStrip }                  };                    result = client.Indexes.Analyze(index.Name' request);                    Assert.Equal(1' result.Tokens.Count);                    // End offset is based on the original token' not the one emitted by the filters.                  AssertTokenInfoEqual("One"' expectedStartOffset: 0' expectedEndOffset: 5' expectedPosition: 0' actual: result.Tokens[0]);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanAnalyze,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient client = Data.GetSearchServiceClient();                    Index index = CreateTestIndex();                  client.Indexes.Create(index);                    var request = new AnalyzeRequest()                  {                      Text = "One two"'                      Analyzer = AnalyzerName.Whitespace                  };                    AnalyzeResult result = client.Indexes.Analyze(index.Name' request);                    Assert.Equal(2' result.Tokens.Count);                  AssertTokenInfoEqual("One"' expectedStartOffset: 0' expectedEndOffset: 3' expectedPosition: 0' actual: result.Tokens[0]);                  AssertTokenInfoEqual("two"' expectedStartOffset: 4' expectedEndOffset: 7' expectedPosition: 1' actual: result.Tokens[1]);                    request = new AnalyzeRequest()                  {                      Text = "One's <two/>"'                      Tokenizer = TokenizerName.Whitespace'                      TokenFilters = new[] { TokenFilterName.Apostrophe }'                      CharFilters = new[] { CharFilterName.HtmlStrip }                  };                    result = client.Indexes.Analyze(index.Name' request);                    Assert.Equal(1' result.Tokens.Count);                    // End offset is based on the original token' not the one emitted by the filters.                  AssertTokenInfoEqual("One"' expectedStartOffset: 0' expectedEndOffset: 5' expectedPosition: 0' actual: result.Tokens[0]);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanAnalyze,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient client = Data.GetSearchServiceClient();                    Index index = CreateTestIndex();                  client.Indexes.Create(index);                    var request = new AnalyzeRequest()                  {                      Text = "One two"'                      Analyzer = AnalyzerName.Whitespace                  };                    AnalyzeResult result = client.Indexes.Analyze(index.Name' request);                    Assert.Equal(2' result.Tokens.Count);                  AssertTokenInfoEqual("One"' expectedStartOffset: 0' expectedEndOffset: 3' expectedPosition: 0' actual: result.Tokens[0]);                  AssertTokenInfoEqual("two"' expectedStartOffset: 4' expectedEndOffset: 7' expectedPosition: 1' actual: result.Tokens[1]);                    request = new AnalyzeRequest()                  {                      Text = "One's <two/>"'                      Tokenizer = TokenizerName.Whitespace'                      TokenFilters = new[] { TokenFilterName.Apostrophe }'                      CharFilters = new[] { CharFilterName.HtmlStrip }                  };                    result = client.Indexes.Analyze(index.Name' request);                    Assert.Equal(1' result.Tokens.Count);                    // End offset is based on the original token' not the one emitted by the filters.                  AssertTokenInfoEqual("One"' expectedStartOffset: 0' expectedEndOffset: 5' expectedPosition: 0' actual: result.Tokens[0]);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanAnalyze,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient client = Data.GetSearchServiceClient();                    Index index = CreateTestIndex();                  client.Indexes.Create(index);                    var request = new AnalyzeRequest()                  {                      Text = "One two"'                      Analyzer = AnalyzerName.Whitespace                  };                    AnalyzeResult result = client.Indexes.Analyze(index.Name' request);                    Assert.Equal(2' result.Tokens.Count);                  AssertTokenInfoEqual("One"' expectedStartOffset: 0' expectedEndOffset: 3' expectedPosition: 0' actual: result.Tokens[0]);                  AssertTokenInfoEqual("two"' expectedStartOffset: 4' expectedEndOffset: 7' expectedPosition: 1' actual: result.Tokens[1]);                    request = new AnalyzeRequest()                  {                      Text = "One's <two/>"'                      Tokenizer = TokenizerName.Whitespace'                      TokenFilters = new[] { TokenFilterName.Apostrophe }'                      CharFilters = new[] { CharFilterName.HtmlStrip }                  };                    result = client.Indexes.Analyze(index.Name' request);                    Assert.Equal(1' result.Tokens.Count);                    // End offset is based on the original token' not the one emitted by the filters.                  AssertTokenInfoEqual("One"' expectedStartOffset: 0' expectedEndOffset: 5' expectedPosition: 0' actual: result.Tokens[0]);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanCreateAllAnalysisComponents,The following statement contains a magic number: Run(() =>              {                  // Declare some custom component names to use with CustomAnalyzer. All other names will be randomly generated.                  const string CustomTokenizerName = "my_tokenizer";                  const string CustomTokenFilterName = "my_tokenfilter";                  const string CustomCharFilterName = "my_charfilter";                    Index index = CreateTestIndex();                  index.Analyzers = new Analyzer[]                  {                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                           CustomTokenizerName'                           new TokenFilterName[] { CustomTokenFilterName }'                           new CharFilterName[] { CustomCharFilterName })'                      new CustomAnalyzer(                          SearchTestUtilities.GenerateName()'                          TokenizerName.EdgeNGram)'                      new PatternAnalyzer(                          SearchTestUtilities.GenerateName()'                          lowerCaseTerms: false'                           pattern: "abc"'                           flags: RegexFlags.DotAll'                           stopwords: new[] { "the" })'                      new StandardAnalyzer(SearchTestUtilities.GenerateName()' maxTokenLength: 100' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName()' stopwords: new[] { "the" })'                      new StopAnalyzer(SearchTestUtilities.GenerateName())                  };                    index.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(CustomTokenizerName' minGram: 1' maxGram: 2)'    // One custom tokenizer for CustomAnalyzer above.                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 2'                           maxGram: 4'                           tokenChars: new[] { TokenCharacterKind.Letter })'                      new NGramTokenizer(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 4' tokenChars: new[] { TokenCharacterKind.Letter })'                      new ClassicTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new KeywordTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftStemmingTokenizerLanguage.Croatian)'                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                           maxTokenLength: 100'                           isSearchTokenizer: true'                           language: MicrosoftTokenizerLanguage.Thai)'                      new PathHierarchyTokenizerV2(                          SearchTestUtilities.GenerateName()'                           delimiter: ':''                           replacement: '_''                           maxTokenLength: 300'                           reverseTokenOrder: true'                           numberOfTokensToSkip: 2)'                      new PatternTokenizer(                          SearchTestUtilities.GenerateName()'                           pattern: ".*"'                           flags: RegexFlags.Multiline | RegexFlags.Literal'                           group: 0)'                      new StandardTokenizerV2(SearchTestUtilities.GenerateName()' maxTokenLength: 100)'                      new UaxUrlEmailTokenizer(SearchTestUtilities.GenerateName()' maxTokenLength: 100)                  };                    index.TokenFilters = new TokenFilter[]                  {                      new CjkBigramTokenFilter(CustomTokenFilterName)'    // One custom token filter for CustomAnalyzer above.                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: new[] { CjkBigramTokenFilterScripts.Han }'                           outputUnigrams: true)'                      new CjkBigramTokenFilter(SearchTestUtilities.GenerateName())'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName()' preserveOriginal: true)'                      new AsciiFoldingTokenFilter(SearchTestUtilities.GenerateName())'                      new CommonGramTokenFilter(                          SearchTestUtilities.GenerateName()'                           commonWords: new[] { "hello"' "goodbye" }'                           ignoreCase: true'                           useQueryMode: true)'                      new CommonGramTokenFilter(SearchTestUtilities.GenerateName()' commonWords: new[] { "at" })'                      new DictionaryDecompounderTokenFilter(                          SearchTestUtilities.GenerateName()'                           wordList: new[] { "Schadenfreude" }'                          minWordSize: 10'                           minSubwordSize: 5'                           maxSubwordSize: 13'                           onlyLongestMatch: true)'                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 10' side: EdgeNGramTokenFilterSide.Back)'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName()' articles: new[] { "a" })'                      new ElisionTokenFilter(SearchTestUtilities.GenerateName())'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "aloha" }' lowerCaseKeepWords: true)'                      new KeepTokenFilter(SearchTestUtilities.GenerateName()' keepWords: new[] { "e"' "komo"' "mai" })'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "key"' "words" }' ignoreCase: true)'                      new KeywordMarkerTokenFilter(SearchTestUtilities.GenerateName()' keywords: new[] { "essential" })'                      new LengthTokenFilter(SearchTestUtilities.GenerateName()' min: 5' max: 10)'                      new LimitTokenFilter(SearchTestUtilities.GenerateName()' maxTokenCount: 10' consumeAllTokens: true)'                      new NGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 2' maxGram: 3)'                      new PatternCaptureTokenFilter(SearchTestUtilities.GenerateName()' patterns: new[] { ".*" }' preserveOriginal: false)'                      new PatternReplaceTokenFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")'                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: PhoneticEncoder.Soundex' replaceOriginalTokens: false)'                      new ShingleTokenFilter(                          SearchTestUtilities.GenerateName()'                           maxShingleSize: 10'                           minShingleSize: 5'                           outputUnigrams: false'                           outputUnigramsIfNoShingles: true'                           tokenSeparator: " "'                           filterToken: "|")'                      new SnowballTokenFilter(SearchTestUtilities.GenerateName()' SnowballTokenFilterLanguage.English)'                      new StemmerOverrideTokenFilter(SearchTestUtilities.GenerateName()' rules: new[] { "ran => run" })'                      new StemmerTokenFilter(SearchTestUtilities.GenerateName()' StemmerTokenFilterLanguage.French)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwords: new[] { "a"' "the" }'                           ignoreCase: true'                           removeTrailingStopWords: false)'                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                           stopwordsList: StopwordsList.Italian'                          ignoreCase: true'                           removeTrailingStopWords: false)'                      new SynonymTokenFilter(SearchTestUtilities.GenerateName()' synonyms: new[] { "great' good" }' ignoreCase: true' expand: false)'                      new TruncateTokenFilter(SearchTestUtilities.GenerateName()' length: 10)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName()' onlyOnSamePosition: true)'                      new UniqueTokenFilter(SearchTestUtilities.GenerateName())'                      new WordDelimiterTokenFilter(                          SearchTestUtilities.GenerateName()'                           generateWordParts: false'                           generateNumberParts: false'                           catenateWords: true'                           catenateNumbers: true'                           catenateAll: true'                           splitOnCaseChange: false'                           preserveOriginal: true'                           splitOnNumerics: false'                           stemEnglishPossessive: false'                           protectedWords: new[] { "protected" })                  };                    index.CharFilters = new CharFilter[]                  {                      new MappingCharFilter(CustomCharFilterName' mappings: new[] { "a => b" })'    // One custom char filter for CustomAnalyzer above.                      new MappingCharFilter(SearchTestUtilities.GenerateName()' mappings: new[] { "s => $"' "S => $" })'                      new PatternReplaceCharFilter(SearchTestUtilities.GenerateName()' pattern: "abc"' replacement: "123")                  };                    // We have to split up analysis components into two indexes' one where any components with optional properties have defaults that                  // are zero or null (default(T))' and another where we need to specify the default values we expect to get back from the REST API.                    string GenerateSimpleName(int n) => string.Format(CultureInfo.InvariantCulture' "a{0}"' n);                    int i = 0;                    Index indexWithSpecialDefaults = CreateTestIndex();                  indexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++))'                      new StandardAnalyzer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++))'                      new NGramTokenizer(GenerateSimpleName(i++))'                      new ClassicTokenizer(GenerateSimpleName(i++))'                      new KeywordTokenizerV2(GenerateSimpleName(i++))'                      new MicrosoftLanguageStemmingTokenizer(GenerateSimpleName(i++))'                      new MicrosoftLanguageTokenizer(GenerateSimpleName(i++))'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++))'                      new PatternTokenizer(GenerateSimpleName(i++))'                      new StandardTokenizerV2(GenerateSimpleName(i++))'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++))                  };                    indexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" })'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++))'                      new LengthTokenFilter(GenerateSimpleName(i++))'                      new LimitTokenFilter(GenerateSimpleName(i++))'                      new NGramTokenFilterV2(GenerateSimpleName(i++))'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" })'                      new PhoneticTokenFilter(GenerateSimpleName(i++))'                      new ShingleTokenFilter(GenerateSimpleName(i++))'                      new StopwordsTokenFilter(GenerateSimpleName(i++))'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" })'                      new TruncateTokenFilter(GenerateSimpleName(i++))'                      new WordDelimiterTokenFilter(GenerateSimpleName(i++))                  };                    i = 0;                    Index expectedIndexWithSpecialDefaults = CreateTestIndex();                  expectedIndexWithSpecialDefaults.Name = indexWithSpecialDefaults.Name;                  expectedIndexWithSpecialDefaults.Analyzers = new Analyzer[]                  {                      new PatternAnalyzer(GenerateSimpleName(i++)' lowerCaseTerms: true' pattern: @"\W+")'                      new StandardAnalyzer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.Tokenizers = new Tokenizer[]                  {                      new EdgeNGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new NGramTokenizer(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new ClassicTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new KeywordTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 256)'                      new MicrosoftLanguageStemmingTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                           isSearchTokenizer: false'                           language: MicrosoftStemmingTokenizerLanguage.English)'                      new MicrosoftLanguageTokenizer(                          GenerateSimpleName(i++)'                           maxTokenLength: 255'                          isSearchTokenizer: false'                          language: MicrosoftTokenizerLanguage.English)'                      new PathHierarchyTokenizerV2(GenerateSimpleName(i++)' delimiter: '/'' replacement: '/'' maxTokenLength: 300)'                      new PatternTokenizer(GenerateSimpleName(i++)' pattern: @"\W+"' group: -1)'                      new StandardTokenizerV2(GenerateSimpleName(i++)' maxTokenLength: 255)'                      new UaxUrlEmailTokenizer(GenerateSimpleName(i++)' maxTokenLength: 255)                  };                    expectedIndexWithSpecialDefaults.TokenFilters = new TokenFilter[]                  {                      new DictionaryDecompounderTokenFilter(                          GenerateSimpleName(i++)'                          wordList: new[] { "Bahnhof" }'                          minWordSize: 5'                          minSubwordSize: 2'                          maxSubwordSize: 15)'                      new EdgeNGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2' side: EdgeNGramTokenFilterSide.Front)'                      new LengthTokenFilter(GenerateSimpleName(i++)' max: 300)'                      new LimitTokenFilter(GenerateSimpleName(i++)' maxTokenCount: 1)'                      new NGramTokenFilterV2(GenerateSimpleName(i++)' minGram: 1' maxGram: 2)'                      new PatternCaptureTokenFilter(GenerateSimpleName(i++)' patterns: new[] { "[a-z]*" }' preserveOriginal: true)'                      new PhoneticTokenFilter(GenerateSimpleName(i++)' encoder: PhoneticEncoder.Metaphone' replaceOriginalTokens: true)'                      new ShingleTokenFilter(                          GenerateSimpleName(i++)'                           maxShingleSize: 2'                           minShingleSize: 2'                           outputUnigrams: true'                           tokenSeparator: " "'                           filterToken: "_")'                      new StopwordsTokenFilter(GenerateSimpleName(i++)' stopwordsList: StopwordsList.English' removeTrailingStopWords: true)'                      new SynonymTokenFilter(GenerateSimpleName(i++)' synonyms: new[] { "mutt' canine => dog" }' expand: true)'                      new TruncateTokenFilter(GenerateSimpleName(i++)' length: 300)'                      new WordDelimiterTokenFilter(                          GenerateSimpleName(i++)'                           generateWordParts: true'                           generateNumberParts: true'                           splitOnCaseChange: true'                           splitOnNumerics: true'                           stemEnglishPossessive: true)                  };                    // This is to make sure we didn't forget any components in this test.                  AssertIndexContainsAllAnalysisComponents(index' indexWithSpecialDefaults);                    TestAnalysisComponents(index);                  TestAnalysisComponents(indexWithSpecialDefaults' expectedIndexWithSpecialDefaults);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentOptions,The following statement contains a magic number: Run(() =>              {                  var tokenizerWithAllTokenCharacterKinds =                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 1'                           maxGram: 2'                           tokenChars: GetAllEnumValues<TokenCharacterKind>());                    Tokenizer CreateMicrosoftLanguageTokenizer(MicrosoftTokenizerLanguage mtl) =>                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                          maxTokenLength: 200'                          isSearchTokenizer: false'                          language: mtl);                    IEnumerable<Tokenizer> tokenizersWithAllMicrosoftLanguages =                       GetAllEnumValues<MicrosoftTokenizerLanguage>().Select(CreateMicrosoftLanguageTokenizer);                    Tokenizer CreateMicrosoftStemmingLanguageTokenizer(MicrosoftStemmingTokenizerLanguage mtl) =>                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                          maxTokenLength: 200'                          isSearchTokenizer: false'                          language: mtl);                    IEnumerable<Tokenizer> tokenizersWithAllMicrosoftStemmingLanguages =                      GetAllEnumValues<MicrosoftStemmingTokenizerLanguage>().Select(CreateMicrosoftStemmingLanguageTokenizer);                    var tokenFilterWithAllCjkScripts =                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: GetAllEnumValues<CjkBigramTokenFilterScripts>()'                           outputUnigrams: true);                    TokenFilter CreateEdgeNGramTokenFilter(EdgeNGramTokenFilterSide s) =>                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 1' maxGram: 2' side: s);                    IEnumerable<TokenFilter> tokenFiltersWithAllEdgeNGramSides =                      GetAllEnumValues<EdgeNGramTokenFilterSide>().Select(CreateEdgeNGramTokenFilter);                    TokenFilter CreatePhoneticTokenFilter(PhoneticEncoder pe) =>                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: pe' replaceOriginalTokens: false);                    IEnumerable<TokenFilter> tokenFiltersWithAllPhoneticEncoders =                      GetAllEnumValues<PhoneticEncoder>().Select(CreatePhoneticTokenFilter);                    IEnumerable<TokenFilter> tokenFiltersWithAllSnowballLanguages =                      GetAllEnumValues<SnowballTokenFilterLanguage>().Select(l => new SnowballTokenFilter(SearchTestUtilities.GenerateName()' l));                    IEnumerable<TokenFilter> tokenFiltersWithAllStemmerLanguages =                      GetAllEnumValues<StemmerTokenFilterLanguage>().Select(l => new StemmerTokenFilter(SearchTestUtilities.GenerateName()' l));                    TokenFilter CreateStopTokenFilter(StopwordsList l) =>                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                          stopwordsList: l'                          ignoreCase: false'                          removeTrailingStopWords: true);                    IEnumerable<TokenFilter> tokenFiltersWithAllStopwordLists = GetAllEnumValues<StopwordsList>().Select(CreateStopTokenFilter);                    // Split the tokenizers and token filters into different indexes to get around the 50-item limit.                  Index index = CreateTestIndex();                    index.Tokenizers =                      new[] { tokenizerWithAllTokenCharacterKinds }                      .Concat(tokenizersWithAllMicrosoftLanguages)                      .Concat(tokenizersWithAllMicrosoftStemmingLanguages).ToArray();                    index.TokenFilters =                      new[] { tokenFilterWithAllCjkScripts }                      .Concat(tokenFiltersWithAllEdgeNGramSides)                      .Concat(tokenFiltersWithAllPhoneticEncoders)                      .Concat(tokenFiltersWithAllSnowballLanguages)                      .Concat(tokenFiltersWithAllStemmerLanguages)                      .Concat(tokenFiltersWithAllStopwordLists).ToArray();                    TestAnalysisComponents(index);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentOptions,The following statement contains a magic number: Run(() =>              {                  var tokenizerWithAllTokenCharacterKinds =                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 1'                           maxGram: 2'                           tokenChars: GetAllEnumValues<TokenCharacterKind>());                    Tokenizer CreateMicrosoftLanguageTokenizer(MicrosoftTokenizerLanguage mtl) =>                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                          maxTokenLength: 200'                          isSearchTokenizer: false'                          language: mtl);                    IEnumerable<Tokenizer> tokenizersWithAllMicrosoftLanguages =                       GetAllEnumValues<MicrosoftTokenizerLanguage>().Select(CreateMicrosoftLanguageTokenizer);                    Tokenizer CreateMicrosoftStemmingLanguageTokenizer(MicrosoftStemmingTokenizerLanguage mtl) =>                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                          maxTokenLength: 200'                          isSearchTokenizer: false'                          language: mtl);                    IEnumerable<Tokenizer> tokenizersWithAllMicrosoftStemmingLanguages =                      GetAllEnumValues<MicrosoftStemmingTokenizerLanguage>().Select(CreateMicrosoftStemmingLanguageTokenizer);                    var tokenFilterWithAllCjkScripts =                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: GetAllEnumValues<CjkBigramTokenFilterScripts>()'                           outputUnigrams: true);                    TokenFilter CreateEdgeNGramTokenFilter(EdgeNGramTokenFilterSide s) =>                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 1' maxGram: 2' side: s);                    IEnumerable<TokenFilter> tokenFiltersWithAllEdgeNGramSides =                      GetAllEnumValues<EdgeNGramTokenFilterSide>().Select(CreateEdgeNGramTokenFilter);                    TokenFilter CreatePhoneticTokenFilter(PhoneticEncoder pe) =>                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: pe' replaceOriginalTokens: false);                    IEnumerable<TokenFilter> tokenFiltersWithAllPhoneticEncoders =                      GetAllEnumValues<PhoneticEncoder>().Select(CreatePhoneticTokenFilter);                    IEnumerable<TokenFilter> tokenFiltersWithAllSnowballLanguages =                      GetAllEnumValues<SnowballTokenFilterLanguage>().Select(l => new SnowballTokenFilter(SearchTestUtilities.GenerateName()' l));                    IEnumerable<TokenFilter> tokenFiltersWithAllStemmerLanguages =                      GetAllEnumValues<StemmerTokenFilterLanguage>().Select(l => new StemmerTokenFilter(SearchTestUtilities.GenerateName()' l));                    TokenFilter CreateStopTokenFilter(StopwordsList l) =>                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                          stopwordsList: l'                          ignoreCase: false'                          removeTrailingStopWords: true);                    IEnumerable<TokenFilter> tokenFiltersWithAllStopwordLists = GetAllEnumValues<StopwordsList>().Select(CreateStopTokenFilter);                    // Split the tokenizers and token filters into different indexes to get around the 50-item limit.                  Index index = CreateTestIndex();                    index.Tokenizers =                      new[] { tokenizerWithAllTokenCharacterKinds }                      .Concat(tokenizersWithAllMicrosoftLanguages)                      .Concat(tokenizersWithAllMicrosoftStemmingLanguages).ToArray();                    index.TokenFilters =                      new[] { tokenFilterWithAllCjkScripts }                      .Concat(tokenFiltersWithAllEdgeNGramSides)                      .Concat(tokenFiltersWithAllPhoneticEncoders)                      .Concat(tokenFiltersWithAllSnowballLanguages)                      .Concat(tokenFiltersWithAllStemmerLanguages)                      .Concat(tokenFiltersWithAllStopwordLists).ToArray();                    TestAnalysisComponents(index);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentOptions,The following statement contains a magic number: Run(() =>              {                  var tokenizerWithAllTokenCharacterKinds =                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 1'                           maxGram: 2'                           tokenChars: GetAllEnumValues<TokenCharacterKind>());                    Tokenizer CreateMicrosoftLanguageTokenizer(MicrosoftTokenizerLanguage mtl) =>                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                          maxTokenLength: 200'                          isSearchTokenizer: false'                          language: mtl);                    IEnumerable<Tokenizer> tokenizersWithAllMicrosoftLanguages =                       GetAllEnumValues<MicrosoftTokenizerLanguage>().Select(CreateMicrosoftLanguageTokenizer);                    Tokenizer CreateMicrosoftStemmingLanguageTokenizer(MicrosoftStemmingTokenizerLanguage mtl) =>                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                          maxTokenLength: 200'                          isSearchTokenizer: false'                          language: mtl);                    IEnumerable<Tokenizer> tokenizersWithAllMicrosoftStemmingLanguages =                      GetAllEnumValues<MicrosoftStemmingTokenizerLanguage>().Select(CreateMicrosoftStemmingLanguageTokenizer);                    var tokenFilterWithAllCjkScripts =                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: GetAllEnumValues<CjkBigramTokenFilterScripts>()'                           outputUnigrams: true);                    TokenFilter CreateEdgeNGramTokenFilter(EdgeNGramTokenFilterSide s) =>                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 1' maxGram: 2' side: s);                    IEnumerable<TokenFilter> tokenFiltersWithAllEdgeNGramSides =                      GetAllEnumValues<EdgeNGramTokenFilterSide>().Select(CreateEdgeNGramTokenFilter);                    TokenFilter CreatePhoneticTokenFilter(PhoneticEncoder pe) =>                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: pe' replaceOriginalTokens: false);                    IEnumerable<TokenFilter> tokenFiltersWithAllPhoneticEncoders =                      GetAllEnumValues<PhoneticEncoder>().Select(CreatePhoneticTokenFilter);                    IEnumerable<TokenFilter> tokenFiltersWithAllSnowballLanguages =                      GetAllEnumValues<SnowballTokenFilterLanguage>().Select(l => new SnowballTokenFilter(SearchTestUtilities.GenerateName()' l));                    IEnumerable<TokenFilter> tokenFiltersWithAllStemmerLanguages =                      GetAllEnumValues<StemmerTokenFilterLanguage>().Select(l => new StemmerTokenFilter(SearchTestUtilities.GenerateName()' l));                    TokenFilter CreateStopTokenFilter(StopwordsList l) =>                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                          stopwordsList: l'                          ignoreCase: false'                          removeTrailingStopWords: true);                    IEnumerable<TokenFilter> tokenFiltersWithAllStopwordLists = GetAllEnumValues<StopwordsList>().Select(CreateStopTokenFilter);                    // Split the tokenizers and token filters into different indexes to get around the 50-item limit.                  Index index = CreateTestIndex();                    index.Tokenizers =                      new[] { tokenizerWithAllTokenCharacterKinds }                      .Concat(tokenizersWithAllMicrosoftLanguages)                      .Concat(tokenizersWithAllMicrosoftStemmingLanguages).ToArray();                    index.TokenFilters =                      new[] { tokenFilterWithAllCjkScripts }                      .Concat(tokenFiltersWithAllEdgeNGramSides)                      .Concat(tokenFiltersWithAllPhoneticEncoders)                      .Concat(tokenFiltersWithAllSnowballLanguages)                      .Concat(tokenFiltersWithAllStemmerLanguages)                      .Concat(tokenFiltersWithAllStopwordLists).ToArray();                    TestAnalysisComponents(index);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,CanUseAllAnalysisComponentOptions,The following statement contains a magic number: Run(() =>              {                  var tokenizerWithAllTokenCharacterKinds =                      new EdgeNGramTokenizer(                          SearchTestUtilities.GenerateName()'                           minGram: 1'                           maxGram: 2'                           tokenChars: GetAllEnumValues<TokenCharacterKind>());                    Tokenizer CreateMicrosoftLanguageTokenizer(MicrosoftTokenizerLanguage mtl) =>                      new MicrosoftLanguageTokenizer(                          SearchTestUtilities.GenerateName()'                          maxTokenLength: 200'                          isSearchTokenizer: false'                          language: mtl);                    IEnumerable<Tokenizer> tokenizersWithAllMicrosoftLanguages =                       GetAllEnumValues<MicrosoftTokenizerLanguage>().Select(CreateMicrosoftLanguageTokenizer);                    Tokenizer CreateMicrosoftStemmingLanguageTokenizer(MicrosoftStemmingTokenizerLanguage mtl) =>                      new MicrosoftLanguageStemmingTokenizer(                          SearchTestUtilities.GenerateName()'                          maxTokenLength: 200'                          isSearchTokenizer: false'                          language: mtl);                    IEnumerable<Tokenizer> tokenizersWithAllMicrosoftStemmingLanguages =                      GetAllEnumValues<MicrosoftStemmingTokenizerLanguage>().Select(CreateMicrosoftStemmingLanguageTokenizer);                    var tokenFilterWithAllCjkScripts =                      new CjkBigramTokenFilter(                          SearchTestUtilities.GenerateName()'                           ignoreScripts: GetAllEnumValues<CjkBigramTokenFilterScripts>()'                           outputUnigrams: true);                    TokenFilter CreateEdgeNGramTokenFilter(EdgeNGramTokenFilterSide s) =>                      new EdgeNGramTokenFilterV2(SearchTestUtilities.GenerateName()' minGram: 1' maxGram: 2' side: s);                    IEnumerable<TokenFilter> tokenFiltersWithAllEdgeNGramSides =                      GetAllEnumValues<EdgeNGramTokenFilterSide>().Select(CreateEdgeNGramTokenFilter);                    TokenFilter CreatePhoneticTokenFilter(PhoneticEncoder pe) =>                      new PhoneticTokenFilter(SearchTestUtilities.GenerateName()' encoder: pe' replaceOriginalTokens: false);                    IEnumerable<TokenFilter> tokenFiltersWithAllPhoneticEncoders =                      GetAllEnumValues<PhoneticEncoder>().Select(CreatePhoneticTokenFilter);                    IEnumerable<TokenFilter> tokenFiltersWithAllSnowballLanguages =                      GetAllEnumValues<SnowballTokenFilterLanguage>().Select(l => new SnowballTokenFilter(SearchTestUtilities.GenerateName()' l));                    IEnumerable<TokenFilter> tokenFiltersWithAllStemmerLanguages =                      GetAllEnumValues<StemmerTokenFilterLanguage>().Select(l => new StemmerTokenFilter(SearchTestUtilities.GenerateName()' l));                    TokenFilter CreateStopTokenFilter(StopwordsList l) =>                      new StopwordsTokenFilter(                          SearchTestUtilities.GenerateName()'                          stopwordsList: l'                          ignoreCase: false'                          removeTrailingStopWords: true);                    IEnumerable<TokenFilter> tokenFiltersWithAllStopwordLists = GetAllEnumValues<StopwordsList>().Select(CreateStopTokenFilter);                    // Split the tokenizers and token filters into different indexes to get around the 50-item limit.                  Index index = CreateTestIndex();                    index.Tokenizers =                      new[] { tokenizerWithAllTokenCharacterKinds }                      .Concat(tokenizersWithAllMicrosoftLanguages)                      .Concat(tokenizersWithAllMicrosoftStemmingLanguages).ToArray();                    index.TokenFilters =                      new[] { tokenFilterWithAllCjkScripts }                      .Concat(tokenFiltersWithAllEdgeNGramSides)                      .Concat(tokenFiltersWithAllPhoneticEncoders)                      .Concat(tokenFiltersWithAllSnowballLanguages)                      .Concat(tokenFiltersWithAllStemmerLanguages)                      .Concat(tokenFiltersWithAllStopwordLists).ToArray();                    TestAnalysisComponents(index);              });
Magic Number,Microsoft.Azure.Search.Tests,CustomAnalyzerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\CustomAnalyzerTests.cs,SplitAnalysisComponents,The following statement contains a magic number: const int AnalysisComponentLimit = 50;
Magic Number,Microsoft.Azure.Search.Tests,DataSourceTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\DataSourceTests.cs,CanCreateAndListDataSources,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                    // Create a datasource of each supported type                  DataSource dataSource1 = CreateTestSqlDataSource();                  DataSource dataSource2 = CreateTestCosmosDbDataSource();                    searchClient.DataSources.Create(dataSource1);                  searchClient.DataSources.Create(dataSource2);                    DataSourceListResult listResponse = searchClient.DataSources.List();                  Assert.Equal(2' listResponse.DataSources.Count);                    IEnumerable<string> dataSourceNames = listResponse.DataSources.Select(i => i.Name);                  Assert.Contains(dataSource1.Name' dataSourceNames);                  Assert.Contains(dataSource2.Name' dataSourceNames);              });
Magic Number,Microsoft.Azure.Search.Tests,DeadlockTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\DeadlockTests.cs,ContinueSearchWillNotDeadlock,The following statement contains a magic number: Run(() =>              {                  void TestContinueSearch(bool useHttpGet)                  {                      SearchIndexClient client = Data.GetSearchIndexClient(useHttpGet: useHttpGet);                      Data.IndexDocuments(client' 2001);                        var searchParameters = new SearchParameters() { Top = 3000 };                      DocumentSearchResult<Document> response = client.Documents.Search("*"' searchParameters);                        SearchAssert.DoesNotUseSynchronizationContext(() => client.Documents.ContinueSearch(response.ContinuationToken));                  }                    TestContinueSearch(true);                  TestContinueSearch(false);              });
Magic Number,Microsoft.Azure.Search.Tests,DeadlockTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\DeadlockTests.cs,ContinueSearchWillNotDeadlock,The following statement contains a magic number: Run(() =>              {                  void TestContinueSearch(bool useHttpGet)                  {                      SearchIndexClient client = Data.GetSearchIndexClient(useHttpGet: useHttpGet);                      Data.IndexDocuments(client' 2001);                        var searchParameters = new SearchParameters() { Top = 3000 };                      DocumentSearchResult<Document> response = client.Documents.Search("*"' searchParameters);                        SearchAssert.DoesNotUseSynchronizationContext(() => client.Documents.ContinueSearch(response.ContinuationToken));                  }                    TestContinueSearch(true);                  TestContinueSearch(false);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldNotRetryBatchWithAllNonRetriableFailures,The following statement contains a magic number: _results.Results.Add(FailedResult("1"' 500));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldNotRetryBatchWithAllNonRetriableFailures,The following statement contains a magic number: _results.Results.Add(FailedResult("2"' 404));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldNotRetryBatchWithAllNonRetriableFailures,The following statement contains a magic number: _results.Results.Add(FailedResult("3"' 400));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldNotRetryBatchWithSuccessesAndNonRetriableFailures,The following statement contains a magic number: _results.Results.Add(FailedResult("2"' 500));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldNotRetryBatchWithSuccessesAndNonRetriableFailures,The following statement contains a magic number: _results.Results.Add(FailedResult("3"' 404));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldNotRetryBatchWithSuccessesAndNonRetriableFailures,The following statement contains a magic number: _results.Results.Add(FailedResult("5"' 400));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldRetryBatchWithAllRetriableFailures,The following statement contains a magic number: _results.Results.Add(FailedResult("1"' 422));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldRetryBatchWithAllRetriableFailures,The following statement contains a magic number: _results.Results.Add(FailedResult("2"' 409));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldRetryBatchWithAllRetriableFailures,The following statement contains a magic number: _results.Results.Add(FailedResult("3"' 503));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldRetryBatchWithSomeRetriableFailures,The following statement contains a magic number: _results.Results.Add(FailedResult("2"' 500));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldRetryBatchWithSomeRetriableFailures,The following statement contains a magic number: _results.Results.Add(FailedResult("3"' 422));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldRetryBatchWithSomeRetriableFailures,The following statement contains a magic number: _results.Results.Add(FailedResult("4"' 404));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldRetryBatchWithSomeRetriableFailures,The following statement contains a magic number: _results.Results.Add(FailedResult("5"' 409));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldRetryBatchWithSomeRetriableFailures,The following statement contains a magic number: _results.Results.Add(FailedResult("6"' 400));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldRetryBatchWithSomeRetriableFailures,The following statement contains a magic number: _results.Results.Add(FailedResult("8"' 503));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldNotRetryResultWithUnexpectedStatusCode,The following statement contains a magic number: _results.Results.Add(FailedResult("2"' 502));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,ClientShouldNotRetryResultWithUnexpectedStatusCode,The following statement contains a magic number: _results.Results.Add(FailedResult("3"' 503));
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,SucceededResult,The following statement contains a magic number: return new IndexingResult(key' errorMessage: null' succeeded: true' statusCode: 200);
Magic Number,Microsoft.Azure.Search.Tests,IndexBatchExceptionTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexBatchExceptionTests.cs,CreatedResult,The following statement contains a magic number: return new IndexingResult(key' errorMessage: null' succeeded: true' statusCode: 201);
Magic Number,Microsoft.Azure.Search.Tests,IndexerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexerTests.cs,CreateIndexerReturnsCorrectDefinition,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                  Indexer expectedIndexer = Data.CreateTestIndexer();                  expectedIndexer.IsDisabled = true;                  expectedIndexer.Parameters =                      new IndexingParameters()                      {                          BatchSize = 50'                          MaxFailedItems = 10'                          MaxFailedItemsPerBatch = 10                      };                    Indexer actualIndexer = searchClient.Indexers.Create(expectedIndexer);                    expectedIndexer.Parameters.Configuration = new Dictionary<string' object>();    // Get returns empty dictionary.                  ExpectSameStartTime(expectedIndexer' actualIndexer);                    AssertIndexersEqual(expectedIndexer' actualIndexer);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexerTests.cs,CreateIndexerReturnsCorrectDefinition,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                  Indexer expectedIndexer = Data.CreateTestIndexer();                  expectedIndexer.IsDisabled = true;                  expectedIndexer.Parameters =                      new IndexingParameters()                      {                          BatchSize = 50'                          MaxFailedItems = 10'                          MaxFailedItemsPerBatch = 10                      };                    Indexer actualIndexer = searchClient.Indexers.Create(expectedIndexer);                    expectedIndexer.Parameters.Configuration = new Dictionary<string' object>();    // Get returns empty dictionary.                  ExpectSameStartTime(expectedIndexer' actualIndexer);                    AssertIndexersEqual(expectedIndexer' actualIndexer);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexerTests.cs,CreateIndexerReturnsCorrectDefinition,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                  Indexer expectedIndexer = Data.CreateTestIndexer();                  expectedIndexer.IsDisabled = true;                  expectedIndexer.Parameters =                      new IndexingParameters()                      {                          BatchSize = 50'                          MaxFailedItems = 10'                          MaxFailedItemsPerBatch = 10                      };                    Indexer actualIndexer = searchClient.Indexers.Create(expectedIndexer);                    expectedIndexer.Parameters.Configuration = new Dictionary<string' object>();    // Get returns empty dictionary.                  ExpectSameStartTime(expectedIndexer' actualIndexer);                    AssertIndexersEqual(expectedIndexer' actualIndexer);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexerTests.cs,CanCreateAndListIndexers,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                    Indexer indexer1 = Data.CreateTestIndexer();                  Indexer indexer2 = Data.CreateTestIndexer();                    searchClient.Indexers.Create(indexer1);                  searchClient.Indexers.Create(indexer2);                    IndexerListResult listResponse = searchClient.Indexers.List();                  Assert.Equal(2' listResponse.Indexers.Count);                    IEnumerable<string> indexerNames = listResponse.Indexers.Select(i => i.Name);                  Assert.Contains(indexer1.Name' indexerNames);                  Assert.Contains(indexer2.Name' indexerNames);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexerTests.cs,CanRunIndexerAndGetIndexerStatus,The following statement contains a magic number: Run(() =>              {                  // Set handler that injects mock_status query string' which results in service                   // returning a well-known mock response                  SearchServiceClient searchClient = Data.GetSearchServiceClient(new MockStatusDelegatingHandler());                    Indexer indexer = Data.CreateTestIndexer();                    searchClient.Indexers.Create(indexer);                    IndexerExecutionInfo info = searchClient.Indexers.GetStatus(indexer.Name);                  Assert.Equal(IndexerStatus.Running' info.Status);                    AzureOperationResponse runResponse =                      searchClient.Indexers.RunWithHttpMessagesAsync(indexer.Name).Result;                  Assert.Equal(HttpStatusCode.Accepted' runResponse.Response.StatusCode);                    info = searchClient.Indexers.GetStatus(indexer.Name);                  Assert.Equal(IndexerStatus.Running' info.Status);                    Assert.Equal(IndexerExecutionStatus.InProgress' info.LastResult.Status);                  Assert.Equal(3' info.ExecutionHistory.Count);                    Assert.NotNull(info.Limits);                  Assert.Equal(100000' info.Limits.MaxDocumentContentCharactersToExtract);                  Assert.Equal(1000' info.Limits.MaxDocumentExtractionSize);                  Assert.Equal(TimeSpan.FromDays(1)' info.Limits.MaxRunTime);                    IndexerExecutionResult newestResult = info.ExecutionHistory[0];                  IndexerExecutionResult middleResult = info.ExecutionHistory[1];                  IndexerExecutionResult oldestResult = info.ExecutionHistory[2];                    Assert.Equal(IndexerExecutionStatus.TransientFailure' newestResult.Status);                  Assert.Equal("The indexer could not connect to the data source"' newestResult.ErrorMessage);                  AssertStartAndEndTimeValid(newestResult);                    Assert.Equal(IndexerExecutionStatus.Reset' middleResult.Status);                  AssertStartAndEndTimeValid(middleResult);                    Assert.Equal(IndexerExecutionStatus.Success' oldestResult.Status);                  Assert.Equal(124876' oldestResult.ItemCount);                  Assert.Equal(2' oldestResult.FailedItemCount);                  Assert.Equal("100"' oldestResult.InitialTrackingState);                  Assert.Equal("200"' oldestResult.FinalTrackingState);                  AssertStartAndEndTimeValid(oldestResult);                    Assert.Equal(2' oldestResult.Errors.Count);                    Assert.Equal("1"' oldestResult.Errors[0].Key);                  Assert.Equal("Key field contains unsafe characters"' oldestResult.Errors[0].ErrorMessage);                  Assert.Equal("DocumentExtraction.AzureBlob.MyDataSource"' oldestResult.Errors[0].Name);                  Assert.Equal("The file could not be parsed."' oldestResult.Errors[0].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2049388"' oldestResult.Errors[0].DocumentationLink);                    Assert.Equal("121713"' oldestResult.Errors[1].Key);                  Assert.Equal("Item is too large"' oldestResult.Errors[1].ErrorMessage);                  Assert.Equal("DocumentExtraction.AzureBlob.DataReader"' oldestResult.Errors[1].Name);                  Assert.Equal("Blob size cannot exceed 256 MB."' oldestResult.Errors[1].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2049388"' oldestResult.Errors[1].DocumentationLink);                    Assert.Equal(1' oldestResult.Warnings.Count);                  Assert.Equal("2"' oldestResult.Warnings[0].Key);                  Assert.Equal("Document was truncated to 50000 characters."' oldestResult.Warnings[0].Message);                  Assert.Equal("Enrichment.LanguageDetectionSkill.#4"' oldestResult.Warnings[0].Name);                  Assert.Equal("Try to split the input into smaller chunks using Split skill."' oldestResult.Warnings[0].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2099692"' oldestResult.Warnings[0].DocumentationLink);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexerTests.cs,CanRunIndexerAndGetIndexerStatus,The following statement contains a magic number: Run(() =>              {                  // Set handler that injects mock_status query string' which results in service                   // returning a well-known mock response                  SearchServiceClient searchClient = Data.GetSearchServiceClient(new MockStatusDelegatingHandler());                    Indexer indexer = Data.CreateTestIndexer();                    searchClient.Indexers.Create(indexer);                    IndexerExecutionInfo info = searchClient.Indexers.GetStatus(indexer.Name);                  Assert.Equal(IndexerStatus.Running' info.Status);                    AzureOperationResponse runResponse =                      searchClient.Indexers.RunWithHttpMessagesAsync(indexer.Name).Result;                  Assert.Equal(HttpStatusCode.Accepted' runResponse.Response.StatusCode);                    info = searchClient.Indexers.GetStatus(indexer.Name);                  Assert.Equal(IndexerStatus.Running' info.Status);                    Assert.Equal(IndexerExecutionStatus.InProgress' info.LastResult.Status);                  Assert.Equal(3' info.ExecutionHistory.Count);                    Assert.NotNull(info.Limits);                  Assert.Equal(100000' info.Limits.MaxDocumentContentCharactersToExtract);                  Assert.Equal(1000' info.Limits.MaxDocumentExtractionSize);                  Assert.Equal(TimeSpan.FromDays(1)' info.Limits.MaxRunTime);                    IndexerExecutionResult newestResult = info.ExecutionHistory[0];                  IndexerExecutionResult middleResult = info.ExecutionHistory[1];                  IndexerExecutionResult oldestResult = info.ExecutionHistory[2];                    Assert.Equal(IndexerExecutionStatus.TransientFailure' newestResult.Status);                  Assert.Equal("The indexer could not connect to the data source"' newestResult.ErrorMessage);                  AssertStartAndEndTimeValid(newestResult);                    Assert.Equal(IndexerExecutionStatus.Reset' middleResult.Status);                  AssertStartAndEndTimeValid(middleResult);                    Assert.Equal(IndexerExecutionStatus.Success' oldestResult.Status);                  Assert.Equal(124876' oldestResult.ItemCount);                  Assert.Equal(2' oldestResult.FailedItemCount);                  Assert.Equal("100"' oldestResult.InitialTrackingState);                  Assert.Equal("200"' oldestResult.FinalTrackingState);                  AssertStartAndEndTimeValid(oldestResult);                    Assert.Equal(2' oldestResult.Errors.Count);                    Assert.Equal("1"' oldestResult.Errors[0].Key);                  Assert.Equal("Key field contains unsafe characters"' oldestResult.Errors[0].ErrorMessage);                  Assert.Equal("DocumentExtraction.AzureBlob.MyDataSource"' oldestResult.Errors[0].Name);                  Assert.Equal("The file could not be parsed."' oldestResult.Errors[0].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2049388"' oldestResult.Errors[0].DocumentationLink);                    Assert.Equal("121713"' oldestResult.Errors[1].Key);                  Assert.Equal("Item is too large"' oldestResult.Errors[1].ErrorMessage);                  Assert.Equal("DocumentExtraction.AzureBlob.DataReader"' oldestResult.Errors[1].Name);                  Assert.Equal("Blob size cannot exceed 256 MB."' oldestResult.Errors[1].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2049388"' oldestResult.Errors[1].DocumentationLink);                    Assert.Equal(1' oldestResult.Warnings.Count);                  Assert.Equal("2"' oldestResult.Warnings[0].Key);                  Assert.Equal("Document was truncated to 50000 characters."' oldestResult.Warnings[0].Message);                  Assert.Equal("Enrichment.LanguageDetectionSkill.#4"' oldestResult.Warnings[0].Name);                  Assert.Equal("Try to split the input into smaller chunks using Split skill."' oldestResult.Warnings[0].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2099692"' oldestResult.Warnings[0].DocumentationLink);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexerTests.cs,CanRunIndexerAndGetIndexerStatus,The following statement contains a magic number: Run(() =>              {                  // Set handler that injects mock_status query string' which results in service                   // returning a well-known mock response                  SearchServiceClient searchClient = Data.GetSearchServiceClient(new MockStatusDelegatingHandler());                    Indexer indexer = Data.CreateTestIndexer();                    searchClient.Indexers.Create(indexer);                    IndexerExecutionInfo info = searchClient.Indexers.GetStatus(indexer.Name);                  Assert.Equal(IndexerStatus.Running' info.Status);                    AzureOperationResponse runResponse =                      searchClient.Indexers.RunWithHttpMessagesAsync(indexer.Name).Result;                  Assert.Equal(HttpStatusCode.Accepted' runResponse.Response.StatusCode);                    info = searchClient.Indexers.GetStatus(indexer.Name);                  Assert.Equal(IndexerStatus.Running' info.Status);                    Assert.Equal(IndexerExecutionStatus.InProgress' info.LastResult.Status);                  Assert.Equal(3' info.ExecutionHistory.Count);                    Assert.NotNull(info.Limits);                  Assert.Equal(100000' info.Limits.MaxDocumentContentCharactersToExtract);                  Assert.Equal(1000' info.Limits.MaxDocumentExtractionSize);                  Assert.Equal(TimeSpan.FromDays(1)' info.Limits.MaxRunTime);                    IndexerExecutionResult newestResult = info.ExecutionHistory[0];                  IndexerExecutionResult middleResult = info.ExecutionHistory[1];                  IndexerExecutionResult oldestResult = info.ExecutionHistory[2];                    Assert.Equal(IndexerExecutionStatus.TransientFailure' newestResult.Status);                  Assert.Equal("The indexer could not connect to the data source"' newestResult.ErrorMessage);                  AssertStartAndEndTimeValid(newestResult);                    Assert.Equal(IndexerExecutionStatus.Reset' middleResult.Status);                  AssertStartAndEndTimeValid(middleResult);                    Assert.Equal(IndexerExecutionStatus.Success' oldestResult.Status);                  Assert.Equal(124876' oldestResult.ItemCount);                  Assert.Equal(2' oldestResult.FailedItemCount);                  Assert.Equal("100"' oldestResult.InitialTrackingState);                  Assert.Equal("200"' oldestResult.FinalTrackingState);                  AssertStartAndEndTimeValid(oldestResult);                    Assert.Equal(2' oldestResult.Errors.Count);                    Assert.Equal("1"' oldestResult.Errors[0].Key);                  Assert.Equal("Key field contains unsafe characters"' oldestResult.Errors[0].ErrorMessage);                  Assert.Equal("DocumentExtraction.AzureBlob.MyDataSource"' oldestResult.Errors[0].Name);                  Assert.Equal("The file could not be parsed."' oldestResult.Errors[0].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2049388"' oldestResult.Errors[0].DocumentationLink);                    Assert.Equal("121713"' oldestResult.Errors[1].Key);                  Assert.Equal("Item is too large"' oldestResult.Errors[1].ErrorMessage);                  Assert.Equal("DocumentExtraction.AzureBlob.DataReader"' oldestResult.Errors[1].Name);                  Assert.Equal("Blob size cannot exceed 256 MB."' oldestResult.Errors[1].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2049388"' oldestResult.Errors[1].DocumentationLink);                    Assert.Equal(1' oldestResult.Warnings.Count);                  Assert.Equal("2"' oldestResult.Warnings[0].Key);                  Assert.Equal("Document was truncated to 50000 characters."' oldestResult.Warnings[0].Message);                  Assert.Equal("Enrichment.LanguageDetectionSkill.#4"' oldestResult.Warnings[0].Name);                  Assert.Equal("Try to split the input into smaller chunks using Split skill."' oldestResult.Warnings[0].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2099692"' oldestResult.Warnings[0].DocumentationLink);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexerTests.cs,CanRunIndexerAndGetIndexerStatus,The following statement contains a magic number: Run(() =>              {                  // Set handler that injects mock_status query string' which results in service                   // returning a well-known mock response                  SearchServiceClient searchClient = Data.GetSearchServiceClient(new MockStatusDelegatingHandler());                    Indexer indexer = Data.CreateTestIndexer();                    searchClient.Indexers.Create(indexer);                    IndexerExecutionInfo info = searchClient.Indexers.GetStatus(indexer.Name);                  Assert.Equal(IndexerStatus.Running' info.Status);                    AzureOperationResponse runResponse =                      searchClient.Indexers.RunWithHttpMessagesAsync(indexer.Name).Result;                  Assert.Equal(HttpStatusCode.Accepted' runResponse.Response.StatusCode);                    info = searchClient.Indexers.GetStatus(indexer.Name);                  Assert.Equal(IndexerStatus.Running' info.Status);                    Assert.Equal(IndexerExecutionStatus.InProgress' info.LastResult.Status);                  Assert.Equal(3' info.ExecutionHistory.Count);                    Assert.NotNull(info.Limits);                  Assert.Equal(100000' info.Limits.MaxDocumentContentCharactersToExtract);                  Assert.Equal(1000' info.Limits.MaxDocumentExtractionSize);                  Assert.Equal(TimeSpan.FromDays(1)' info.Limits.MaxRunTime);                    IndexerExecutionResult newestResult = info.ExecutionHistory[0];                  IndexerExecutionResult middleResult = info.ExecutionHistory[1];                  IndexerExecutionResult oldestResult = info.ExecutionHistory[2];                    Assert.Equal(IndexerExecutionStatus.TransientFailure' newestResult.Status);                  Assert.Equal("The indexer could not connect to the data source"' newestResult.ErrorMessage);                  AssertStartAndEndTimeValid(newestResult);                    Assert.Equal(IndexerExecutionStatus.Reset' middleResult.Status);                  AssertStartAndEndTimeValid(middleResult);                    Assert.Equal(IndexerExecutionStatus.Success' oldestResult.Status);                  Assert.Equal(124876' oldestResult.ItemCount);                  Assert.Equal(2' oldestResult.FailedItemCount);                  Assert.Equal("100"' oldestResult.InitialTrackingState);                  Assert.Equal("200"' oldestResult.FinalTrackingState);                  AssertStartAndEndTimeValid(oldestResult);                    Assert.Equal(2' oldestResult.Errors.Count);                    Assert.Equal("1"' oldestResult.Errors[0].Key);                  Assert.Equal("Key field contains unsafe characters"' oldestResult.Errors[0].ErrorMessage);                  Assert.Equal("DocumentExtraction.AzureBlob.MyDataSource"' oldestResult.Errors[0].Name);                  Assert.Equal("The file could not be parsed."' oldestResult.Errors[0].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2049388"' oldestResult.Errors[0].DocumentationLink);                    Assert.Equal("121713"' oldestResult.Errors[1].Key);                  Assert.Equal("Item is too large"' oldestResult.Errors[1].ErrorMessage);                  Assert.Equal("DocumentExtraction.AzureBlob.DataReader"' oldestResult.Errors[1].Name);                  Assert.Equal("Blob size cannot exceed 256 MB."' oldestResult.Errors[1].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2049388"' oldestResult.Errors[1].DocumentationLink);                    Assert.Equal(1' oldestResult.Warnings.Count);                  Assert.Equal("2"' oldestResult.Warnings[0].Key);                  Assert.Equal("Document was truncated to 50000 characters."' oldestResult.Warnings[0].Message);                  Assert.Equal("Enrichment.LanguageDetectionSkill.#4"' oldestResult.Warnings[0].Name);                  Assert.Equal("Try to split the input into smaller chunks using Split skill."' oldestResult.Warnings[0].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2099692"' oldestResult.Warnings[0].DocumentationLink);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexerTests.cs,CanRunIndexerAndGetIndexerStatus,The following statement contains a magic number: Run(() =>              {                  // Set handler that injects mock_status query string' which results in service                   // returning a well-known mock response                  SearchServiceClient searchClient = Data.GetSearchServiceClient(new MockStatusDelegatingHandler());                    Indexer indexer = Data.CreateTestIndexer();                    searchClient.Indexers.Create(indexer);                    IndexerExecutionInfo info = searchClient.Indexers.GetStatus(indexer.Name);                  Assert.Equal(IndexerStatus.Running' info.Status);                    AzureOperationResponse runResponse =                      searchClient.Indexers.RunWithHttpMessagesAsync(indexer.Name).Result;                  Assert.Equal(HttpStatusCode.Accepted' runResponse.Response.StatusCode);                    info = searchClient.Indexers.GetStatus(indexer.Name);                  Assert.Equal(IndexerStatus.Running' info.Status);                    Assert.Equal(IndexerExecutionStatus.InProgress' info.LastResult.Status);                  Assert.Equal(3' info.ExecutionHistory.Count);                    Assert.NotNull(info.Limits);                  Assert.Equal(100000' info.Limits.MaxDocumentContentCharactersToExtract);                  Assert.Equal(1000' info.Limits.MaxDocumentExtractionSize);                  Assert.Equal(TimeSpan.FromDays(1)' info.Limits.MaxRunTime);                    IndexerExecutionResult newestResult = info.ExecutionHistory[0];                  IndexerExecutionResult middleResult = info.ExecutionHistory[1];                  IndexerExecutionResult oldestResult = info.ExecutionHistory[2];                    Assert.Equal(IndexerExecutionStatus.TransientFailure' newestResult.Status);                  Assert.Equal("The indexer could not connect to the data source"' newestResult.ErrorMessage);                  AssertStartAndEndTimeValid(newestResult);                    Assert.Equal(IndexerExecutionStatus.Reset' middleResult.Status);                  AssertStartAndEndTimeValid(middleResult);                    Assert.Equal(IndexerExecutionStatus.Success' oldestResult.Status);                  Assert.Equal(124876' oldestResult.ItemCount);                  Assert.Equal(2' oldestResult.FailedItemCount);                  Assert.Equal("100"' oldestResult.InitialTrackingState);                  Assert.Equal("200"' oldestResult.FinalTrackingState);                  AssertStartAndEndTimeValid(oldestResult);                    Assert.Equal(2' oldestResult.Errors.Count);                    Assert.Equal("1"' oldestResult.Errors[0].Key);                  Assert.Equal("Key field contains unsafe characters"' oldestResult.Errors[0].ErrorMessage);                  Assert.Equal("DocumentExtraction.AzureBlob.MyDataSource"' oldestResult.Errors[0].Name);                  Assert.Equal("The file could not be parsed."' oldestResult.Errors[0].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2049388"' oldestResult.Errors[0].DocumentationLink);                    Assert.Equal("121713"' oldestResult.Errors[1].Key);                  Assert.Equal("Item is too large"' oldestResult.Errors[1].ErrorMessage);                  Assert.Equal("DocumentExtraction.AzureBlob.DataReader"' oldestResult.Errors[1].Name);                  Assert.Equal("Blob size cannot exceed 256 MB."' oldestResult.Errors[1].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2049388"' oldestResult.Errors[1].DocumentationLink);                    Assert.Equal(1' oldestResult.Warnings.Count);                  Assert.Equal("2"' oldestResult.Warnings[0].Key);                  Assert.Equal("Document was truncated to 50000 characters."' oldestResult.Warnings[0].Message);                  Assert.Equal("Enrichment.LanguageDetectionSkill.#4"' oldestResult.Warnings[0].Name);                  Assert.Equal("Try to split the input into smaller chunks using Split skill."' oldestResult.Warnings[0].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2099692"' oldestResult.Warnings[0].DocumentationLink);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexerTests.cs,CanRunIndexerAndGetIndexerStatus,The following statement contains a magic number: Run(() =>              {                  // Set handler that injects mock_status query string' which results in service                   // returning a well-known mock response                  SearchServiceClient searchClient = Data.GetSearchServiceClient(new MockStatusDelegatingHandler());                    Indexer indexer = Data.CreateTestIndexer();                    searchClient.Indexers.Create(indexer);                    IndexerExecutionInfo info = searchClient.Indexers.GetStatus(indexer.Name);                  Assert.Equal(IndexerStatus.Running' info.Status);                    AzureOperationResponse runResponse =                      searchClient.Indexers.RunWithHttpMessagesAsync(indexer.Name).Result;                  Assert.Equal(HttpStatusCode.Accepted' runResponse.Response.StatusCode);                    info = searchClient.Indexers.GetStatus(indexer.Name);                  Assert.Equal(IndexerStatus.Running' info.Status);                    Assert.Equal(IndexerExecutionStatus.InProgress' info.LastResult.Status);                  Assert.Equal(3' info.ExecutionHistory.Count);                    Assert.NotNull(info.Limits);                  Assert.Equal(100000' info.Limits.MaxDocumentContentCharactersToExtract);                  Assert.Equal(1000' info.Limits.MaxDocumentExtractionSize);                  Assert.Equal(TimeSpan.FromDays(1)' info.Limits.MaxRunTime);                    IndexerExecutionResult newestResult = info.ExecutionHistory[0];                  IndexerExecutionResult middleResult = info.ExecutionHistory[1];                  IndexerExecutionResult oldestResult = info.ExecutionHistory[2];                    Assert.Equal(IndexerExecutionStatus.TransientFailure' newestResult.Status);                  Assert.Equal("The indexer could not connect to the data source"' newestResult.ErrorMessage);                  AssertStartAndEndTimeValid(newestResult);                    Assert.Equal(IndexerExecutionStatus.Reset' middleResult.Status);                  AssertStartAndEndTimeValid(middleResult);                    Assert.Equal(IndexerExecutionStatus.Success' oldestResult.Status);                  Assert.Equal(124876' oldestResult.ItemCount);                  Assert.Equal(2' oldestResult.FailedItemCount);                  Assert.Equal("100"' oldestResult.InitialTrackingState);                  Assert.Equal("200"' oldestResult.FinalTrackingState);                  AssertStartAndEndTimeValid(oldestResult);                    Assert.Equal(2' oldestResult.Errors.Count);                    Assert.Equal("1"' oldestResult.Errors[0].Key);                  Assert.Equal("Key field contains unsafe characters"' oldestResult.Errors[0].ErrorMessage);                  Assert.Equal("DocumentExtraction.AzureBlob.MyDataSource"' oldestResult.Errors[0].Name);                  Assert.Equal("The file could not be parsed."' oldestResult.Errors[0].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2049388"' oldestResult.Errors[0].DocumentationLink);                    Assert.Equal("121713"' oldestResult.Errors[1].Key);                  Assert.Equal("Item is too large"' oldestResult.Errors[1].ErrorMessage);                  Assert.Equal("DocumentExtraction.AzureBlob.DataReader"' oldestResult.Errors[1].Name);                  Assert.Equal("Blob size cannot exceed 256 MB."' oldestResult.Errors[1].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2049388"' oldestResult.Errors[1].DocumentationLink);                    Assert.Equal(1' oldestResult.Warnings.Count);                  Assert.Equal("2"' oldestResult.Warnings[0].Key);                  Assert.Equal("Document was truncated to 50000 characters."' oldestResult.Warnings[0].Message);                  Assert.Equal("Enrichment.LanguageDetectionSkill.#4"' oldestResult.Warnings[0].Name);                  Assert.Equal("Try to split the input into smaller chunks using Split skill."' oldestResult.Warnings[0].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2099692"' oldestResult.Warnings[0].DocumentationLink);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexerTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexerTests.cs,CanRunIndexerAndGetIndexerStatus,The following statement contains a magic number: Run(() =>              {                  // Set handler that injects mock_status query string' which results in service                   // returning a well-known mock response                  SearchServiceClient searchClient = Data.GetSearchServiceClient(new MockStatusDelegatingHandler());                    Indexer indexer = Data.CreateTestIndexer();                    searchClient.Indexers.Create(indexer);                    IndexerExecutionInfo info = searchClient.Indexers.GetStatus(indexer.Name);                  Assert.Equal(IndexerStatus.Running' info.Status);                    AzureOperationResponse runResponse =                      searchClient.Indexers.RunWithHttpMessagesAsync(indexer.Name).Result;                  Assert.Equal(HttpStatusCode.Accepted' runResponse.Response.StatusCode);                    info = searchClient.Indexers.GetStatus(indexer.Name);                  Assert.Equal(IndexerStatus.Running' info.Status);                    Assert.Equal(IndexerExecutionStatus.InProgress' info.LastResult.Status);                  Assert.Equal(3' info.ExecutionHistory.Count);                    Assert.NotNull(info.Limits);                  Assert.Equal(100000' info.Limits.MaxDocumentContentCharactersToExtract);                  Assert.Equal(1000' info.Limits.MaxDocumentExtractionSize);                  Assert.Equal(TimeSpan.FromDays(1)' info.Limits.MaxRunTime);                    IndexerExecutionResult newestResult = info.ExecutionHistory[0];                  IndexerExecutionResult middleResult = info.ExecutionHistory[1];                  IndexerExecutionResult oldestResult = info.ExecutionHistory[2];                    Assert.Equal(IndexerExecutionStatus.TransientFailure' newestResult.Status);                  Assert.Equal("The indexer could not connect to the data source"' newestResult.ErrorMessage);                  AssertStartAndEndTimeValid(newestResult);                    Assert.Equal(IndexerExecutionStatus.Reset' middleResult.Status);                  AssertStartAndEndTimeValid(middleResult);                    Assert.Equal(IndexerExecutionStatus.Success' oldestResult.Status);                  Assert.Equal(124876' oldestResult.ItemCount);                  Assert.Equal(2' oldestResult.FailedItemCount);                  Assert.Equal("100"' oldestResult.InitialTrackingState);                  Assert.Equal("200"' oldestResult.FinalTrackingState);                  AssertStartAndEndTimeValid(oldestResult);                    Assert.Equal(2' oldestResult.Errors.Count);                    Assert.Equal("1"' oldestResult.Errors[0].Key);                  Assert.Equal("Key field contains unsafe characters"' oldestResult.Errors[0].ErrorMessage);                  Assert.Equal("DocumentExtraction.AzureBlob.MyDataSource"' oldestResult.Errors[0].Name);                  Assert.Equal("The file could not be parsed."' oldestResult.Errors[0].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2049388"' oldestResult.Errors[0].DocumentationLink);                    Assert.Equal("121713"' oldestResult.Errors[1].Key);                  Assert.Equal("Item is too large"' oldestResult.Errors[1].ErrorMessage);                  Assert.Equal("DocumentExtraction.AzureBlob.DataReader"' oldestResult.Errors[1].Name);                  Assert.Equal("Blob size cannot exceed 256 MB."' oldestResult.Errors[1].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2049388"' oldestResult.Errors[1].DocumentationLink);                    Assert.Equal(1' oldestResult.Warnings.Count);                  Assert.Equal("2"' oldestResult.Warnings[0].Key);                  Assert.Equal("Document was truncated to 50000 characters."' oldestResult.Warnings[0].Message);                  Assert.Equal("Enrichment.LanguageDetectionSkill.#4"' oldestResult.Warnings[0].Name);                  Assert.Equal("Try to split the input into smaller chunks using Split skill."' oldestResult.Warnings[0].Details);                  Assert.Equal("https://go.microsoft.com/fwlink/?linkid=2099692"' oldestResult.Warnings[0].DocumentationLink);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingParametersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingParametersTests.cs,ParseJsonArraysWithDocumentRootSetCorrectly,The following statement contains a magic number: const int ExpectedCount = 2;
Magic Number,Microsoft.Azure.Search.Tests,IndexingParametersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingParametersTests.cs,ParseDelimitedTextFilesWithInlineHeadersSetCorrectly,The following statement contains a magic number: const int ExpectedCount = 2;
Magic Number,Microsoft.Azure.Search.Tests,IndexingParametersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingParametersTests.cs,ParseDelimitedTextFilesWithGivenHeadersSetCorrectly,The following statement contains a magic number: const int ExpectedCount = 2;
Magic Number,Microsoft.Azure.Search.Tests,IndexingParametersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingParametersTests.cs,ParseTextSetCorrectly,The following statement contains a magic number: const int ExpectedCount = 2;
Magic Number,Microsoft.Azure.Search.Tests,IndexingParametersTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingParametersTests.cs,ParseTextWithEncodingSetCorrectly,The following statement contains a magic number: const int ExpectedCount = 2;
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "1"'                              ["hotelName"] = "Secret Point Motel"'                              ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              ["category"] = "Boutique"'                              ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              ["rating"] = 4'                              ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "677 5th Ave"'                                  ["city"] = "New York"'                                  ["stateProvince"] = "NY"'                                  ["country"] = "USA"'                                  ["postalCode"] = "10022"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 9.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                      ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 8.09'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Document()                          {                              ["hotelId"] = "2"'                              ["hotelName"] = "Countryside Hotel"'                              ["description"] = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              ["descriptionFr"] = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              ["category"] = "Budget"'                              ["tags"] = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ["parkingIncluded"] = false'                              ["smokingAllowed"] = true'                              ["lastRenovationDate"] = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              ["rating"] = 3'                              ["location"] = GeographyPoint.Create(35.904160' -78.940483)'                              ["address"] = new Document()                              {                                  ["streetAddress"] = "6910 Fayetteville Rd"'                                  ["city"] = "Durham"'                                  ["stateProvince"] = "NC"'                                  ["country"] = "USA"'                                  ["postalCode"] = "27713"                              }'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["description"] = "Suite' 1 King Bed (Amenities)"'                                      ["descriptionFr"] = "Suite' 1 très grand lit (Services)"'                                      ["type"] = "Suite"'                                      ["baseRate"] = 2.44'                                      ["bedOptions"] = "1 King Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = true'                                      ["tags"] = new[] { "coffee maker" }                                  }'                                  new Document()                                  {                                      ["description"] = "Budget Room' 1 Queen Bed (Amenities)"'                                      ["descriptionFr"] = "Chambre Économique' 1 grand lit (Services)"'                                      ["type"] = "Budget Room"'                                      ["baseRate"] = 7.69'                                      ["bedOptions"] = "1 Queen Bed"'                                      ["sleepsCount"] = 2'                                      ["smokingAllowed"] = false'                                      ["tags"] = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Document()                          {                              ["hotelId"] = "3"'                              ["description"] = "Surprisingly expensive"'                              ["lastRenovationDate"] = null                          })'                      IndexAction.Delete(keyName: "hotelId"' keyValue: "4")'                      IndexAction.MergeOrUpload(                          new Document()                          {                              ["hotelId"] = "5"'                              ["hotelName"] = null'                              ["address"] = new Document()'                              ["tags"] = new string[0]'                              ["rooms"] = new[]                              {                                  new Document()                                  {                                      ["baseRate"] = double.NaN'                                      ["tags"] = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3L' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new HotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new Hotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new HotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new HotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new Hotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new Hotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new Hotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new HotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new HotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexDocumentsMappedFromStructs,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.New(new[]                  {                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "1"'                              HotelName = "Secret Point Motel"'                              Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                              DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                              Category = "Boutique"'                              Tags = new[] { "pool"' "air conditioning"' "concierge" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                              Rating = 4'                              Location = GeographyPoint.Create(40.760586' -73.975403)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "677 5th Ave"'                                  City = "New York"'                                  StateProvince = "NY"'                                  Country = "USA"'                                  PostalCode = "10022"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Cityside)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                      Type = "Budget Room"'                                      BaseRate = 9.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 King Bed (Mountain View)"'                                      DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                      Type = "Budget Room"'                                      BaseRate = 8.09'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                                  }                              }                          })'                      IndexAction.Upload(                          new StructHotel()                          {                              HotelId = "2"'                              HotelName = "Countryside Hotel"'                              Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                              DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                              Category = "Budget"'                              Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                              ParkingIncluded = false'                              SmokingAllowed = true'                              LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                              Rating = 3'                              Location = GeographyPoint.Create(35.904160' -78.940483)'                              Address = new StructHotelAddress()                              {                                  StreetAddress = "6910 Fayetteville Rd"'                                  City = "Durham"'                                  StateProvince = "NC"'                                  Country = "USA"'                                  PostalCode = "27713"                              }'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      Description = "Suite' 1 King Bed (Amenities)"'                                      DescriptionFr = "Suite' 1 très grand lit (Services)"'                                      Type = "Suite"'                                      BaseRate = 2.44'                                      BedOptions = "1 King Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = true'                                      Tags = new[] { "coffee maker" }                                  }'                                  new StructHotelRoom()                                  {                                      Description = "Budget Room' 1 Queen Bed (Amenities)"'                                      DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                      Type = "Budget Room"'                                      BaseRate = 7.69'                                      BedOptions = "1 Queen Bed"'                                      SleepsCount = 2'                                      SmokingAllowed = false'                                      Tags = new [] { "coffee maker" }                                  }                              }                          })'                      IndexAction.Merge(                          new StructHotel()                          {                              HotelId = "3"'                              Description = "Surprisingly expensive"'                              LastRenovationDate = null                          })'                      IndexAction.Delete(new StructHotel() { HotelId = "4" })'                      IndexAction.MergeOrUpload(                          new StructHotel()                          {                              HotelId = "5"'                              HotelName = null'                              Address = new StructHotelAddress()'                              Tags = new string[0]'                              Rooms = new[]                              {                                  new StructHotelRoom()                                  {                                      BaseRate = double.NaN'                                      Tags = new string[0]                                  }                              }                          })                  });                    IndexBatchException e = Assert.Throws<IndexBatchException>(() => client.Documents.Index(batch));                  AssertIsPartialFailure(e' "3");                    Assert.Equal(5' e.IndexingResults.Count);                    AssertIndexActionSucceeded("1"' e.IndexingResults[0]' 201);                  AssertIndexActionSucceeded("2"' e.IndexingResults[1]' 201);                  AssertIndexActionFailed("3"' e.IndexingResults[2]' "Document not found."' 404);                  AssertIndexActionSucceeded("4"' e.IndexingResults[3]' 200);                  AssertIndexActionSucceeded("5"' e.IndexingResults[4]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(3' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,IndexDoesNotThrowWhenAllActionsSucceed,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var batch = IndexBatch.Upload(new[] { new Hotel() { HotelId = "1" } });                    DocumentIndexResult documentIndexResult = client.Documents.Index(batch);                    Assert.Equal(1' documentIndexResult.Results.Count);                  AssertIndexActionSucceeded("1"' documentIndexResult.Results[0]' 201);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,IndexDoesNotThrowWhenDeletingDocumentWithExtraFields,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var document = new Hotel() { HotelId = "1"' Category = "Luxury" };                  var batch = IndexBatch.Upload(new[] { document });                    client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    document.Category = "ignored";                  batch = IndexBatch.Delete(new[] { document });                    DocumentIndexResult documentIndexResult = client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' documentIndexResult.Results.Count);                  AssertIndexActionSucceeded("1"' documentIndexResult.Results[0]' 200);                    Assert.Equal(0' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,IndexDoesNotThrowWhenDeletingDynamicDocumentWithExtraFields,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var document = new Document() { ["hotelId"] = "1"' ["category"] = "Luxury" };                  var batch = IndexBatch.Upload(new[] { document });                    client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    document["category"] = "ignored";                  batch = IndexBatch.Delete(new[] { document });                    DocumentIndexResult documentIndexResult = client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' documentIndexResult.Results.Count);                  AssertIndexActionSucceeded("1"' documentIndexResult.Results[0]' 200);                    Assert.Equal(0' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanDeleteBatchByKeys,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var uploadBatch =                      IndexBatch.Upload(                          new[]                          {                              new Hotel() { HotelId = "1" }'                              new Hotel() { HotelId = "2" }                          });                    client.Documents.Index(uploadBatch);                  SearchTestUtilities.WaitForIndexing();                    Assert.Equal(2' client.Documents.Count());                    var deleteBatch = IndexBatch.Delete("hotelId"' new[] { "1"' "2" });                    DocumentIndexResult documentIndexResult = client.Documents.Index(deleteBatch);                  SearchTestUtilities.WaitForIndexing();                    Assert.Equal(2' documentIndexResult.Results.Count);                  AssertIndexActionSucceeded("1"' documentIndexResult.Results[0]' 200);                  AssertIndexActionSucceeded("2"' documentIndexResult.Results[1]' 200);                    Assert.Equal(0' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanDeleteBatchByKeys,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var uploadBatch =                      IndexBatch.Upload(                          new[]                          {                              new Hotel() { HotelId = "1" }'                              new Hotel() { HotelId = "2" }                          });                    client.Documents.Index(uploadBatch);                  SearchTestUtilities.WaitForIndexing();                    Assert.Equal(2' client.Documents.Count());                    var deleteBatch = IndexBatch.Delete("hotelId"' new[] { "1"' "2" });                    DocumentIndexResult documentIndexResult = client.Documents.Index(deleteBatch);                  SearchTestUtilities.WaitForIndexing();                    Assert.Equal(2' documentIndexResult.Results.Count);                  AssertIndexActionSucceeded("1"' documentIndexResult.Results[0]' 200);                  AssertIndexActionSucceeded("2"' documentIndexResult.Results[1]' 200);                    Assert.Equal(0' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanDeleteBatchByKeys,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var uploadBatch =                      IndexBatch.Upload(                          new[]                          {                              new Hotel() { HotelId = "1" }'                              new Hotel() { HotelId = "2" }                          });                    client.Documents.Index(uploadBatch);                  SearchTestUtilities.WaitForIndexing();                    Assert.Equal(2' client.Documents.Count());                    var deleteBatch = IndexBatch.Delete("hotelId"' new[] { "1"' "2" });                    DocumentIndexResult documentIndexResult = client.Documents.Index(deleteBatch);                  SearchTestUtilities.WaitForIndexing();                    Assert.Equal(2' documentIndexResult.Results.Count);                  AssertIndexActionSucceeded("1"' documentIndexResult.Results[0]' 200);                  AssertIndexActionSucceeded("2"' documentIndexResult.Results[1]' 200);                    Assert.Equal(0' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanDeleteBatchByKeys,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var uploadBatch =                      IndexBatch.Upload(                          new[]                          {                              new Hotel() { HotelId = "1" }'                              new Hotel() { HotelId = "2" }                          });                    client.Documents.Index(uploadBatch);                  SearchTestUtilities.WaitForIndexing();                    Assert.Equal(2' client.Documents.Count());                    var deleteBatch = IndexBatch.Delete("hotelId"' new[] { "1"' "2" });                    DocumentIndexResult documentIndexResult = client.Documents.Index(deleteBatch);                  SearchTestUtilities.WaitForIndexing();                    Assert.Equal(2' documentIndexResult.Results.Count);                  AssertIndexActionSucceeded("1"' documentIndexResult.Results[0]' 200);                  AssertIndexActionSucceeded("2"' documentIndexResult.Results[1]' 200);                    Assert.Equal(0' client.Documents.Count());              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexWithPascalCaseFields,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = Book.DefineIndex();                  serviceClient.Indexes.Create(index);                  SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var batch =                      IndexBatch.Upload(new[]                      {                          new Book()                          {                              ISBN = "123"'                              Title = "Lord of the Rings"'                              Author = new Author()                              {                                  FirstName = "J.R.R."'                                  LastName = "Tolkien"                              }                          }                      });                    DocumentIndexResult indexResponse = indexClient.Documents.Index(batch);                    Assert.Equal(1' indexResponse.Results.Count);                  AssertIndexActionSucceeded("123"' indexResponse.Results[0]' 201);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,StaticallyTypedDateTimesRoundTripAsUtc,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = Book.DefineIndex();                  serviceClient.Indexes.Create(index);                  SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    // Can't test local date time since we might be testing against a pre-recorded mock response.                  var utcDateTime = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc);                  var unspecifiedDateTime = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Unspecified);                    var batch =                      IndexBatch.Upload(                          new[]                          {                              new Book() { ISBN = "1"' PublishDate = utcDateTime }'                              new Book() { ISBN = "2"' PublishDate = unspecifiedDateTime }                          });                    indexClient.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Book book = indexClient.Documents.Get<Book>("1");                  Assert.Equal(utcDateTime' book.PublishDate);                    book = indexClient.Documents.Get<Book>("2");                  Assert.Equal(utcDateTime' book.PublishDate);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,StaticallyTypedDateTimesRoundTripAsUtc,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = Book.DefineIndex();                  serviceClient.Indexes.Create(index);                  SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    // Can't test local date time since we might be testing against a pre-recorded mock response.                  var utcDateTime = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc);                  var unspecifiedDateTime = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Unspecified);                    var batch =                      IndexBatch.Upload(                          new[]                          {                              new Book() { ISBN = "1"' PublishDate = utcDateTime }'                              new Book() { ISBN = "2"' PublishDate = unspecifiedDateTime }                          });                    indexClient.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Book book = indexClient.Documents.Get<Book>("1");                  Assert.Equal(utcDateTime' book.PublishDate);                    book = indexClient.Documents.Get<Book>("2");                  Assert.Equal(utcDateTime' book.PublishDate);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,DynamicDocumentDateTimesRoundTripAsUtc,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = Book.DefineIndex();                  serviceClient.Indexes.Create(index);                  SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    // Can't test local date time since we might be testing against a pre-recorded mock response.                  var utcDateTime = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc);                  var unspecifiedDateTime = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Unspecified);                    var batch =                      IndexBatch.Upload(                          new[]                          {                              new Document() { ["ISBN"] = "1"' ["PublishDate"] = utcDateTime }'                              new Document() { ["ISBN"] = "2"' ["PublishDate"] = unspecifiedDateTime }                          });                    indexClient.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document book = indexClient.Documents.Get("1");                  Assert.Equal(new DateTimeOffset(utcDateTime)' book["PublishDate"]);                    book = indexClient.Documents.Get("2");                  Assert.Equal(new DateTimeOffset(utcDateTime)' book["PublishDate"]);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,DynamicDocumentDateTimesRoundTripAsUtc,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = Book.DefineIndex();                  serviceClient.Indexes.Create(index);                  SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    // Can't test local date time since we might be testing against a pre-recorded mock response.                  var utcDateTime = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc);                  var unspecifiedDateTime = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Unspecified);                    var batch =                      IndexBatch.Upload(                          new[]                          {                              new Document() { ["ISBN"] = "1"' ["PublishDate"] = utcDateTime }'                              new Document() { ["ISBN"] = "2"' ["PublishDate"] = unspecifiedDateTime }                          });                    indexClient.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document book = indexClient.Documents.Get("1");                  Assert.Equal(new DateTimeOffset(utcDateTime)' book["PublishDate"]);                    book = indexClient.Documents.Get("2");                  Assert.Equal(new DateTimeOffset(utcDateTime)' book["PublishDate"]);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeDynamicDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["description"] = null'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = null'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Economy"'                          ["tags"] = new[] { "pool"' "air conditioning" }'                          ["parkingIncluded"] = true'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = null'                          ["rating"] = 3L'                          ["location"] = null'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new Document()                              {                                  ["description"] = null'                                  ["descriptionFr"] = null'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 10.5'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanMergeStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var originalDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var updatedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = null'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          LastRenovationDate = null'                          Rating = 3'                          Location = null'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Economy"'                          Tags = new[] { "pool"' "air conditioning" }'                          ParkingIncluded = true'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          Rating = 3'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              // This should look like the merged doc with unspecified fields as null because we don't support                              // partial updates for complex collections.                              new HotelRoom()                              {                                  Description = null'                                  DescriptionFr = null'                                  Type = "Budget Room"'                                  BaseRate = 10.5'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  Tags = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.MergeOrUpload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<Hotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanSetExplicitNullsInStaticallyTypedDocuments,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    // This is just so we can use the LoudHotel class instead of Hotel since it has per-property                  // NullValueHandling set.                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var originalDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    // Omitted properties don't have NullValueHandling.Include' so omitting them results in no change.                  var updatedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          DESCRIPTION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          CATEGORY = null'    // This property doesn't have NullValueHandling.Include' so this should have no effect.                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 3'                          LOCATION = null'    // This property has NullValueHandling.Include' so this will null out the field.                          ADDRESS = new LoudHotelAddress()'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    var expectedDoc =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = null'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning" }'                          PARKINGINCLUDED = true'                          SMOKINGALLOWED = false'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 5' 0' 0' TimeSpan.Zero)'                          RATING = 3'                          LOCATION = null'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              // Regardless of NullValueHandling' this should look like the merged doc with unspecified fields as null                              // because we don't support partial updates for complex collections.                              new LoudHotelRoom()                              {                                  DESCRIPTION = null'                                  DESCRIPTIONFRENCH = null'                                  TYPE = "Budget Room"'                                  BASERATE = 10.5'                                  BEDOPTIONS = null'                                  SLEEPSCOUNT = null'                                  SMOKINGALLOWED = false'                                  TAGS = new[] { "vcr/dvd"' "balcony" }                              }                          }                      };                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    client.Documents.Index(IndexBatch.Merge(new[] { updatedDoc }));                  SearchTestUtilities.WaitForIndexing();                    LoudHotel actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(expectedDoc' actualDoc);                    client.Documents.Index(IndexBatch.Upload(new[] { originalDoc }));                  SearchTestUtilities.WaitForIndexing();                    actualDoc = client.Documents.Get<LoudHotel>("1");                    Assert.Equal(originalDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveModelWithExtraProperties,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = Book.DefineIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient client = Data.GetSearchIndexClient(index.Name);                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    const string BookJson =  @"{      ""ISBN"": ""123""'      ""Title"": ""The Hobbit""'      ""Author"": {          ""FirstName"": ""J.R.R.""'          ""LastName"": ""Tolkien""      }'      ""Rating"": 5  }";                    // Real customers would just use JsonConvert' but that would break the test.                  var expectedBook = SafeJsonConvert.DeserializeObject<ReviewedBook>(BookJson);                    DocumentIndexResult result = client.Documents.Index(IndexBatch.Upload(new[] { expectedBook }));                    Assert.Equal(1' result.Results.Count);                  AssertIndexActionSucceeded("123"' result.Results[0]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    ReviewedBook actualBook = client.Documents.Get<ReviewedBook>(expectedBook.ISBN);                    Assert.Equal(0' actualBook.Rating);                  actualBook.Rating = 5;                  Assert.Equal(expectedBook' actualBook);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveModelWithExtraProperties,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = Book.DefineIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient client = Data.GetSearchIndexClient(index.Name);                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    const string BookJson =  @"{      ""ISBN"": ""123""'      ""Title"": ""The Hobbit""'      ""Author"": {          ""FirstName"": ""J.R.R.""'          ""LastName"": ""Tolkien""      }'      ""Rating"": 5  }";                    // Real customers would just use JsonConvert' but that would break the test.                  var expectedBook = SafeJsonConvert.DeserializeObject<ReviewedBook>(BookJson);                    DocumentIndexResult result = client.Documents.Index(IndexBatch.Upload(new[] { expectedBook }));                    Assert.Equal(1' result.Results.Count);                  AssertIndexActionSucceeded("123"' result.Results[0]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    ReviewedBook actualBook = client.Documents.Get<ReviewedBook>(expectedBook.ISBN);                    Assert.Equal(0' actualBook.Rating);                  actualBook.Rating = 5;                  Assert.Equal(expectedBook' actualBook);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveWithCustomContractResolver,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var expectedHotel =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    DocumentIndexResult result = client.Documents.Index(IndexBatch.Upload(new[] { expectedHotel }));                    Assert.Equal(1' result.Results.Count);                  AssertIndexActionSucceeded("1"' result.Results[0]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    LoudHotel actualHotel = client.Documents.Get<LoudHotel>(expectedHotel.HOTELID);                    Assert.Equal(expectedHotel' actualHotel);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveWithCustomContractResolver,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var expectedHotel =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    DocumentIndexResult result = client.Documents.Index(IndexBatch.Upload(new[] { expectedHotel }));                    Assert.Equal(1' result.Results.Count);                  AssertIndexActionSucceeded("1"' result.Results[0]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    LoudHotel actualHotel = client.Documents.Get<LoudHotel>(expectedHotel.HOTELID);                    Assert.Equal(expectedHotel' actualHotel);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveWithCustomContractResolver,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var expectedHotel =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    DocumentIndexResult result = client.Documents.Index(IndexBatch.Upload(new[] { expectedHotel }));                    Assert.Equal(1' result.Results.Count);                  AssertIndexActionSucceeded("1"' result.Results[0]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    LoudHotel actualHotel = client.Documents.Get<LoudHotel>(expectedHotel.HOTELID);                    Assert.Equal(expectedHotel' actualHotel);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveWithCustomContractResolver,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var expectedHotel =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    DocumentIndexResult result = client.Documents.Index(IndexBatch.Upload(new[] { expectedHotel }));                    Assert.Equal(1' result.Results.Count);                  AssertIndexActionSucceeded("1"' result.Results[0]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    LoudHotel actualHotel = client.Documents.Get<LoudHotel>(expectedHotel.HOTELID);                    Assert.Equal(expectedHotel' actualHotel);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveWithCustomContractResolver,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var expectedHotel =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    DocumentIndexResult result = client.Documents.Index(IndexBatch.Upload(new[] { expectedHotel }));                    Assert.Equal(1' result.Results.Count);                  AssertIndexActionSucceeded("1"' result.Results[0]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    LoudHotel actualHotel = client.Documents.Get<LoudHotel>(expectedHotel.HOTELID);                    Assert.Equal(expectedHotel' actualHotel);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveWithCustomContractResolver,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var expectedHotel =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    DocumentIndexResult result = client.Documents.Index(IndexBatch.Upload(new[] { expectedHotel }));                    Assert.Equal(1' result.Results.Count);                  AssertIndexActionSucceeded("1"' result.Results[0]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    LoudHotel actualHotel = client.Documents.Get<LoudHotel>(expectedHotel.HOTELID);                    Assert.Equal(expectedHotel' actualHotel);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveWithCustomContractResolver,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var expectedHotel =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    DocumentIndexResult result = client.Documents.Index(IndexBatch.Upload(new[] { expectedHotel }));                    Assert.Equal(1' result.Results.Count);                  AssertIndexActionSucceeded("1"' result.Results[0]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    LoudHotel actualHotel = client.Documents.Get<LoudHotel>(expectedHotel.HOTELID);                    Assert.Equal(expectedHotel' actualHotel);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveWithCustomContractResolver,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var expectedHotel =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    DocumentIndexResult result = client.Documents.Index(IndexBatch.Upload(new[] { expectedHotel }));                    Assert.Equal(1' result.Results.Count);                  AssertIndexActionSucceeded("1"' result.Results[0]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    LoudHotel actualHotel = client.Documents.Get<LoudHotel>(expectedHotel.HOTELID);                    Assert.Equal(expectedHotel' actualHotel);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveWithCustomContractResolver,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var expectedHotel =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    DocumentIndexResult result = client.Documents.Index(IndexBatch.Upload(new[] { expectedHotel }));                    Assert.Equal(1' result.Results.Count);                  AssertIndexActionSucceeded("1"' result.Results[0]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    LoudHotel actualHotel = client.Documents.Get<LoudHotel>(expectedHotel.HOTELID);                    Assert.Equal(expectedHotel' actualHotel);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveWithCustomContractResolver,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var expectedHotel =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    DocumentIndexResult result = client.Documents.Index(IndexBatch.Upload(new[] { expectedHotel }));                    Assert.Equal(1' result.Results.Count);                  AssertIndexActionSucceeded("1"' result.Results[0]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    LoudHotel actualHotel = client.Documents.Get<LoudHotel>(expectedHotel.HOTELID);                    Assert.Equal(expectedHotel' actualHotel);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveWithCustomContractResolver,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                  var resolver = new MyCustomContractResolver();                  client.SerializationSettings.ContractResolver = resolver;                  client.DeserializationSettings.ContractResolver = resolver;                    var expectedHotel =                      new LoudHotel()                      {                          HOTELID = "1"'                          HOTELNAME = "Secret Point Motel"'                          DESCRIPTION = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DESCRIPTIONFRENCH = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          CATEGORY = "Boutique"'                          TAGS = new[] { "pool"' "air conditioning"' "concierge" }'                          PARKINGINCLUDED = false'                          SMOKINGALLOWED = true'                          LASTRENOVATIONDATE = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          RATING = 4'                          LOCATION = GeographyPoint.Create(40.760586' -73.975403)'                          ADDRESS = new LoudHotelAddress()                          {                              STREETADDRESS = "677 5th Ave"'                              CITY = "New York"'                              STATEPROVINCE = "NY"'                              COUNTRY = "USA"'                              POSTALCODE = "10022"                          }'                          ROOMS = new[]                          {                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 Queen Bed (Cityside)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 grand lit (côté ville)"'                                  TYPE = "Budget Room"'                                  BASERATE = 9.69'                                  BEDOPTIONS = "1 Queen Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd" }                              }'                              new LoudHotelRoom()                              {                                  DESCRIPTION = "Budget Room' 1 King Bed (Mountain View)"'                                  DESCRIPTIONFRENCH = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  TYPE = "Budget Room"'                                  BASERATE = 8.09'                                  BEDOPTIONS = "1 King Bed"'                                  SLEEPSCOUNT = 2'                                  SMOKINGALLOWED = true'                                  TAGS = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    DocumentIndexResult result = client.Documents.Index(IndexBatch.Upload(new[] { expectedHotel }));                    Assert.Equal(1' result.Results.Count);                  AssertIndexActionSucceeded("1"' result.Results[0]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    LoudHotel actualHotel = client.Documents.Get<LoudHotel>(expectedHotel.HOTELID);                    Assert.Equal(expectedHotel' actualHotel);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanIndexAndRetrieveWithCamelCaseContractResolver,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = Book.DefineIndex(useCamelCase: true);                  serviceClient.Indexes.Create(index);                    SearchIndexClient client = Data.GetSearchIndexClient(index.Name);                  client.SerializationSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();                    var expectedBook =                      new Book()                      {                          ISBN = "123"'                          Title = "The Hobbit"'                          Author = new Author() { FirstName = "J.R.R."' LastName = "Tolkien" }                      };                    DocumentIndexResult result = client.Documents.Index(IndexBatch.Upload(new[] { expectedBook }));                    Assert.Equal(1' result.Results.Count);                  AssertIndexActionSucceeded("123"' result.Results[0]' 201);                    SearchTestUtilities.WaitForIndexing();                    Assert.Equal(1' client.Documents.Count());                    Book actualBook = client.Documents.Get<Book>(expectedBook.ISBN);                    Assert.Equal(expectedBook' actualBook);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanRoundtripBoundaryValues,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDocs = new[]                  {                      // Minimum values                      new Hotel()                      {                          HotelId = "1"'                          Category = string.Empty'                          LastRenovationDate = DateTimeOffset.MinValue'                          Location = GeographyPoint.Create(-90' -180)'   // South pole' date line from the west                          ParkingIncluded = false'                          Rating = int.MinValue'                          Tags = new string[0]'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.MinValue                              }                          }                      }'                      // Maximimum values                      new Hotel()                      {                          HotelId = "2"'                          Category = "test"'  // No meaningful string max since there is no length limit (other than payload size or term length).                          LastRenovationDate = DateTimeOffset.MaxValue'                          Location = GeographyPoint.Create(90' 180)'   // North pole' date line from the east                          ParkingIncluded = true'                          Rating = int.MaxValue'                          Tags = new string[] { "test" }'  // No meaningful string max; see above.                          Address = new HotelAddress()                          {                              City = "Maximum"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.MaxValue                              }                          }                      }'                      // Other boundary values #1                      new Hotel()                      {                          HotelId = "3"'                          Category = null'                          LastRenovationDate = null'                          Location = GeographyPoint.Create(0' 0)'   // Equator' meridian                          ParkingIncluded = null'                          Rating = null'                          Tags = new string[0]'                          Address = null'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.NegativeInfinity                              }                          }                      }'                      // Other boundary values #2                      new Hotel()                      {                          HotelId = "4"'                          Location = null'                          Tags = new string[0]'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.PositiveInfinity                              }                          }                      }'                      // Other boundary values #3                      new Hotel()                      {                          HotelId = "5"'                          Tags = new string[0]'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.NaN'                              }                          }                      }'                      // Other boundary values #4                      new Hotel()                      {                          HotelId = "6"'                          Rating = null'                          Tags = new string[0]'                          Rooms = new HotelRoom[0]                      }                  };                    var batch = IndexBatch.Upload(expectedDocs);                    client.Documents.Index(batch);                    SearchTestUtilities.WaitForIndexing();                    Hotel[] actualDocs = expectedDocs.Select(d => client.Documents.Get<Hotel>(d.HotelId)).ToArray();                  for (int i = 0; i < actualDocs.Length; i++)                  {                      Assert.Equal(expectedDocs[i]' actualDocs[i]);                  }              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanRoundtripBoundaryValues,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDocs = new[]                  {                      // Minimum values                      new Hotel()                      {                          HotelId = "1"'                          Category = string.Empty'                          LastRenovationDate = DateTimeOffset.MinValue'                          Location = GeographyPoint.Create(-90' -180)'   // South pole' date line from the west                          ParkingIncluded = false'                          Rating = int.MinValue'                          Tags = new string[0]'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.MinValue                              }                          }                      }'                      // Maximimum values                      new Hotel()                      {                          HotelId = "2"'                          Category = "test"'  // No meaningful string max since there is no length limit (other than payload size or term length).                          LastRenovationDate = DateTimeOffset.MaxValue'                          Location = GeographyPoint.Create(90' 180)'   // North pole' date line from the east                          ParkingIncluded = true'                          Rating = int.MaxValue'                          Tags = new string[] { "test" }'  // No meaningful string max; see above.                          Address = new HotelAddress()                          {                              City = "Maximum"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.MaxValue                              }                          }                      }'                      // Other boundary values #1                      new Hotel()                      {                          HotelId = "3"'                          Category = null'                          LastRenovationDate = null'                          Location = GeographyPoint.Create(0' 0)'   // Equator' meridian                          ParkingIncluded = null'                          Rating = null'                          Tags = new string[0]'                          Address = null'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.NegativeInfinity                              }                          }                      }'                      // Other boundary values #2                      new Hotel()                      {                          HotelId = "4"'                          Location = null'                          Tags = new string[0]'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.PositiveInfinity                              }                          }                      }'                      // Other boundary values #3                      new Hotel()                      {                          HotelId = "5"'                          Tags = new string[0]'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.NaN'                              }                          }                      }'                      // Other boundary values #4                      new Hotel()                      {                          HotelId = "6"'                          Rating = null'                          Tags = new string[0]'                          Rooms = new HotelRoom[0]                      }                  };                    var batch = IndexBatch.Upload(expectedDocs);                    client.Documents.Index(batch);                    SearchTestUtilities.WaitForIndexing();                    Hotel[] actualDocs = expectedDocs.Select(d => client.Documents.Get<Hotel>(d.HotelId)).ToArray();                  for (int i = 0; i < actualDocs.Length; i++)                  {                      Assert.Equal(expectedDocs[i]' actualDocs[i]);                  }              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanRoundtripBoundaryValues,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDocs = new[]                  {                      // Minimum values                      new Hotel()                      {                          HotelId = "1"'                          Category = string.Empty'                          LastRenovationDate = DateTimeOffset.MinValue'                          Location = GeographyPoint.Create(-90' -180)'   // South pole' date line from the west                          ParkingIncluded = false'                          Rating = int.MinValue'                          Tags = new string[0]'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.MinValue                              }                          }                      }'                      // Maximimum values                      new Hotel()                      {                          HotelId = "2"'                          Category = "test"'  // No meaningful string max since there is no length limit (other than payload size or term length).                          LastRenovationDate = DateTimeOffset.MaxValue'                          Location = GeographyPoint.Create(90' 180)'   // North pole' date line from the east                          ParkingIncluded = true'                          Rating = int.MaxValue'                          Tags = new string[] { "test" }'  // No meaningful string max; see above.                          Address = new HotelAddress()                          {                              City = "Maximum"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.MaxValue                              }                          }                      }'                      // Other boundary values #1                      new Hotel()                      {                          HotelId = "3"'                          Category = null'                          LastRenovationDate = null'                          Location = GeographyPoint.Create(0' 0)'   // Equator' meridian                          ParkingIncluded = null'                          Rating = null'                          Tags = new string[0]'                          Address = null'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.NegativeInfinity                              }                          }                      }'                      // Other boundary values #2                      new Hotel()                      {                          HotelId = "4"'                          Location = null'                          Tags = new string[0]'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.PositiveInfinity                              }                          }                      }'                      // Other boundary values #3                      new Hotel()                      {                          HotelId = "5"'                          Tags = new string[0]'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.NaN'                              }                          }                      }'                      // Other boundary values #4                      new Hotel()                      {                          HotelId = "6"'                          Rating = null'                          Tags = new string[0]'                          Rooms = new HotelRoom[0]                      }                  };                    var batch = IndexBatch.Upload(expectedDocs);                    client.Documents.Index(batch);                    SearchTestUtilities.WaitForIndexing();                    Hotel[] actualDocs = expectedDocs.Select(d => client.Documents.Get<Hotel>(d.HotelId)).ToArray();                  for (int i = 0; i < actualDocs.Length; i++)                  {                      Assert.Equal(expectedDocs[i]' actualDocs[i]);                  }              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,CanRoundtripBoundaryValues,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDocs = new[]                  {                      // Minimum values                      new Hotel()                      {                          HotelId = "1"'                          Category = string.Empty'                          LastRenovationDate = DateTimeOffset.MinValue'                          Location = GeographyPoint.Create(-90' -180)'   // South pole' date line from the west                          ParkingIncluded = false'                          Rating = int.MinValue'                          Tags = new string[0]'                          Address = new HotelAddress()'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.MinValue                              }                          }                      }'                      // Maximimum values                      new Hotel()                      {                          HotelId = "2"'                          Category = "test"'  // No meaningful string max since there is no length limit (other than payload size or term length).                          LastRenovationDate = DateTimeOffset.MaxValue'                          Location = GeographyPoint.Create(90' 180)'   // North pole' date line from the east                          ParkingIncluded = true'                          Rating = int.MaxValue'                          Tags = new string[] { "test" }'  // No meaningful string max; see above.                          Address = new HotelAddress()                          {                              City = "Maximum"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.MaxValue                              }                          }                      }'                      // Other boundary values #1                      new Hotel()                      {                          HotelId = "3"'                          Category = null'                          LastRenovationDate = null'                          Location = GeographyPoint.Create(0' 0)'   // Equator' meridian                          ParkingIncluded = null'                          Rating = null'                          Tags = new string[0]'                          Address = null'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.NegativeInfinity                              }                          }                      }'                      // Other boundary values #2                      new Hotel()                      {                          HotelId = "4"'                          Location = null'                          Tags = new string[0]'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.PositiveInfinity                              }                          }                      }'                      // Other boundary values #3                      new Hotel()                      {                          HotelId = "5"'                          Tags = new string[0]'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = double.NaN'                              }                          }                      }'                      // Other boundary values #4                      new Hotel()                      {                          HotelId = "6"'                          Rating = null'                          Tags = new string[0]'                          Rooms = new HotelRoom[0]                      }                  };                    var batch = IndexBatch.Upload(expectedDocs);                    client.Documents.Index(batch);                    SearchTestUtilities.WaitForIndexing();                    Hotel[] actualDocs = expectedDocs.Select(d => client.Documents.Get<Hotel>(d.HotelId)).ToArray();                  for (int i = 0; i < actualDocs.Length; i++)                  {                      Assert.Equal(expectedDocs[i]' actualDocs[i]);                  }              });
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,TestCanIndexAndRetrieveWithCustomConverter,The following statement contains a magic number: var firstBook = new Book()              {                  ISBN = "123"'                  Title = "The Hobbit"'                  Author = new Author() { FirstName = "J.R.R."' LastName = "Tolkeen" }' // Last name misspelled on purpose.                  PublishDate = new DateTime(1945' 09' 21)    // Incorrect date on purpose (should be 1937).              };
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,TestCanIndexAndRetrieveWithCustomConverter,The following statement contains a magic number: var firstBook = new Book()              {                  ISBN = "123"'                  Title = "The Hobbit"'                  Author = new Author() { FirstName = "J.R.R."' LastName = "Tolkeen" }' // Last name misspelled on purpose.                  PublishDate = new DateTime(1945' 09' 21)    // Incorrect date on purpose (should be 1937).              };
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,TestCanIndexAndRetrieveWithCustomConverter,The following statement contains a magic number: var firstBook = new Book()              {                  ISBN = "123"'                  Title = "The Hobbit"'                  Author = new Author() { FirstName = "J.R.R."' LastName = "Tolkeen" }' // Last name misspelled on purpose.                  PublishDate = new DateTime(1945' 09' 21)    // Incorrect date on purpose (should be 1937).              };
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,TestCanIndexAndRetrieveWithCustomConverter,The following statement contains a magic number: AssertIndexActionSucceeded("123"' result.Results[0]' 201);
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,TestCanIndexAndRetrieveWithCustomConverter,The following statement contains a magic number: var expectedBook = new TBook()              {                  InternationalStandardBookNumber = "123"'                  AuthorName = new TAuthor() { FullName = "J.R.R. Tolkien" }'                  PublishDateTime = new DateTime(1937' 09' 21)              };
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,TestCanIndexAndRetrieveWithCustomConverter,The following statement contains a magic number: var expectedBook = new TBook()              {                  InternationalStandardBookNumber = "123"'                  AuthorName = new TAuthor() { FullName = "J.R.R. Tolkien" }'                  PublishDateTime = new DateTime(1937' 09' 21)              };
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,TestCanIndexAndRetrieveWithCustomConverter,The following statement contains a magic number: var expectedBook = new TBook()              {                  InternationalStandardBookNumber = "123"'                  AuthorName = new TAuthor() { FullName = "J.R.R. Tolkien" }'                  PublishDateTime = new DateTime(1937' 09' 21)              };
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,TestCanIndexAndRetrieveWithCustomConverter,The following statement contains a magic number: AssertIndexActionSucceeded("123"' result.Results[0]' 200);
Magic Number,Microsoft.Azure.Search.Tests,IndexingTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexingTests.cs,AssertIsPartialFailure,The following statement contains a magic number: Assert.Equal((HttpStatusCode)207' e.Response.StatusCode);
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The following statement contains a magic number: var index = new Index()              {                  Name = indexName'                  Fields = new[]                  {                      Field.New("hotelId"' DataType.String' isKey: true' isSearchable: false' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("hotelName"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: false)'                      Field.NewSearchableString("description"' AnalyzerName.EnLucene' isKey: false' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.New("description_custom"' DataType.String' isSearchable: true' isFilterable: false' isSortable: false' isFacetable: false' searchAnalyzerName: AnalyzerName.Stop' indexAnalyzerName: AnalyzerName.Stop)'                      Field.New("category"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)'                      Field.New("parkingIncluded"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("lastRenovationDate"' DataType.DateTimeOffset' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("rating"' DataType.Int32' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.NewComplex("address"' isCollection: false' fields: new[]                      {                          Field.New("streetAddress"' DataType.String' isSearchable: true)'                          Field.New("city"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("stateProvince"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("country"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("postalCode"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)                      })'                      Field.New("location"' DataType.GeographyPoint' isFilterable: true' isSortable: true' isFacetable: false' isRetrievable: true)'                      Field.NewComplex("rooms"' isCollection: true' fields: new[]                      {                          Field.NewSearchableString("description"' AnalyzerName.EnLucene)'                          Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene)'                          Field.New("type"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("baseRate"' DataType.Double' isKey: false' isSearchable: false' isFilterable: true' isFacetable: true)'                          Field.New("bedOptions"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("sleepsCount"' DataType.Int32' isFilterable: true' isFacetable: true)'                          Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isFacetable: true)'                          Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)                      })'                      Field.New("totalGuests"' DataType.Int64' isFilterable: true' isSortable: true' isFacetable: true' isRetrievable: false)'                      Field.New("profitMargin"' DataType.Double)                  }'                  ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          FunctionAggregation = ScoringFunctionAggregation.Average'                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4'                                  shouldBoostBeyondRangeByConstant: true'                                  interpolation: ScoringFunctionInterpolation.Constant)'                              new DistanceScoringFunction(                                  "location"'                                  boost: 1.5'                                  referencePointParameter: "loc"'                                  boostingDistance: 5'                                  interpolation: ScoringFunctionInterpolation.Linear)'                              new FreshnessScoringFunction(                                  "lastRenovationDate"'                                  boost: 1.1'                                  boostingDuration: TimeSpan.FromDays(365)'   //aka.ms/sre-codescan/disable                                  interpolation: ScoringFunctionInterpolation.Logarithmic)                          }'                          TextWeights = new TextWeights()                          {                              Weights = new Dictionary<string' double>() { { "description"' 1.5 }' { "category"' 2.0 } }                          }                      }'                      new ScoringProfile("ProfileTwo")                      {                          FunctionAggregation = ScoringFunctionAggregation.Maximum'                          Functions = new[]                          {                              new TagScoringFunction(                                  "tags"'                                  boost: 1.5'                                  tagsParameter: "mytags"'                                  interpolation: ScoringFunctionInterpolation.Linear)                          }                      }'                      new ScoringProfile("ProfileThree")                      {                          FunctionAggregation = ScoringFunctionAggregation.Minimum'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.0' new MagnitudeScoringParameters(0' 10) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Quadratic                              }                          }                      }'                      new ScoringProfile("ProfileFour")                      {                          FunctionAggregation = ScoringFunctionAggregation.FirstMatching'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.14' new MagnitudeScoringParameters(1' 5) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Constant                              }                          }                      }                  }'                  DefaultScoringProfile = "MyProfile"'                  CorsOptions = new CorsOptions()                  {                      AllowedOrigins = new[] { "http://tempuri.org"' "http://localhost:80" }'                      MaxAgeInSeconds = 60                  }'                  Suggesters = new[]                  {                      new Suggester("FancySuggester"' "hotelName")                  }              };
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The following statement contains a magic number: var index = new Index()              {                  Name = indexName'                  Fields = new[]                  {                      Field.New("hotelId"' DataType.String' isKey: true' isSearchable: false' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("hotelName"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: false)'                      Field.NewSearchableString("description"' AnalyzerName.EnLucene' isKey: false' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.New("description_custom"' DataType.String' isSearchable: true' isFilterable: false' isSortable: false' isFacetable: false' searchAnalyzerName: AnalyzerName.Stop' indexAnalyzerName: AnalyzerName.Stop)'                      Field.New("category"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)'                      Field.New("parkingIncluded"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("lastRenovationDate"' DataType.DateTimeOffset' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("rating"' DataType.Int32' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.NewComplex("address"' isCollection: false' fields: new[]                      {                          Field.New("streetAddress"' DataType.String' isSearchable: true)'                          Field.New("city"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("stateProvince"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("country"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("postalCode"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)                      })'                      Field.New("location"' DataType.GeographyPoint' isFilterable: true' isSortable: true' isFacetable: false' isRetrievable: true)'                      Field.NewComplex("rooms"' isCollection: true' fields: new[]                      {                          Field.NewSearchableString("description"' AnalyzerName.EnLucene)'                          Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene)'                          Field.New("type"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("baseRate"' DataType.Double' isKey: false' isSearchable: false' isFilterable: true' isFacetable: true)'                          Field.New("bedOptions"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("sleepsCount"' DataType.Int32' isFilterable: true' isFacetable: true)'                          Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isFacetable: true)'                          Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)                      })'                      Field.New("totalGuests"' DataType.Int64' isFilterable: true' isSortable: true' isFacetable: true' isRetrievable: false)'                      Field.New("profitMargin"' DataType.Double)                  }'                  ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          FunctionAggregation = ScoringFunctionAggregation.Average'                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4'                                  shouldBoostBeyondRangeByConstant: true'                                  interpolation: ScoringFunctionInterpolation.Constant)'                              new DistanceScoringFunction(                                  "location"'                                  boost: 1.5'                                  referencePointParameter: "loc"'                                  boostingDistance: 5'                                  interpolation: ScoringFunctionInterpolation.Linear)'                              new FreshnessScoringFunction(                                  "lastRenovationDate"'                                  boost: 1.1'                                  boostingDuration: TimeSpan.FromDays(365)'   //aka.ms/sre-codescan/disable                                  interpolation: ScoringFunctionInterpolation.Logarithmic)                          }'                          TextWeights = new TextWeights()                          {                              Weights = new Dictionary<string' double>() { { "description"' 1.5 }' { "category"' 2.0 } }                          }                      }'                      new ScoringProfile("ProfileTwo")                      {                          FunctionAggregation = ScoringFunctionAggregation.Maximum'                          Functions = new[]                          {                              new TagScoringFunction(                                  "tags"'                                  boost: 1.5'                                  tagsParameter: "mytags"'                                  interpolation: ScoringFunctionInterpolation.Linear)                          }                      }'                      new ScoringProfile("ProfileThree")                      {                          FunctionAggregation = ScoringFunctionAggregation.Minimum'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.0' new MagnitudeScoringParameters(0' 10) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Quadratic                              }                          }                      }'                      new ScoringProfile("ProfileFour")                      {                          FunctionAggregation = ScoringFunctionAggregation.FirstMatching'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.14' new MagnitudeScoringParameters(1' 5) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Constant                              }                          }                      }                  }'                  DefaultScoringProfile = "MyProfile"'                  CorsOptions = new CorsOptions()                  {                      AllowedOrigins = new[] { "http://tempuri.org"' "http://localhost:80" }'                      MaxAgeInSeconds = 60                  }'                  Suggesters = new[]                  {                      new Suggester("FancySuggester"' "hotelName")                  }              };
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The following statement contains a magic number: var index = new Index()              {                  Name = indexName'                  Fields = new[]                  {                      Field.New("hotelId"' DataType.String' isKey: true' isSearchable: false' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("hotelName"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: false)'                      Field.NewSearchableString("description"' AnalyzerName.EnLucene' isKey: false' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.New("description_custom"' DataType.String' isSearchable: true' isFilterable: false' isSortable: false' isFacetable: false' searchAnalyzerName: AnalyzerName.Stop' indexAnalyzerName: AnalyzerName.Stop)'                      Field.New("category"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)'                      Field.New("parkingIncluded"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("lastRenovationDate"' DataType.DateTimeOffset' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("rating"' DataType.Int32' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.NewComplex("address"' isCollection: false' fields: new[]                      {                          Field.New("streetAddress"' DataType.String' isSearchable: true)'                          Field.New("city"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("stateProvince"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("country"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("postalCode"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)                      })'                      Field.New("location"' DataType.GeographyPoint' isFilterable: true' isSortable: true' isFacetable: false' isRetrievable: true)'                      Field.NewComplex("rooms"' isCollection: true' fields: new[]                      {                          Field.NewSearchableString("description"' AnalyzerName.EnLucene)'                          Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene)'                          Field.New("type"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("baseRate"' DataType.Double' isKey: false' isSearchable: false' isFilterable: true' isFacetable: true)'                          Field.New("bedOptions"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("sleepsCount"' DataType.Int32' isFilterable: true' isFacetable: true)'                          Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isFacetable: true)'                          Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)                      })'                      Field.New("totalGuests"' DataType.Int64' isFilterable: true' isSortable: true' isFacetable: true' isRetrievable: false)'                      Field.New("profitMargin"' DataType.Double)                  }'                  ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          FunctionAggregation = ScoringFunctionAggregation.Average'                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4'                                  shouldBoostBeyondRangeByConstant: true'                                  interpolation: ScoringFunctionInterpolation.Constant)'                              new DistanceScoringFunction(                                  "location"'                                  boost: 1.5'                                  referencePointParameter: "loc"'                                  boostingDistance: 5'                                  interpolation: ScoringFunctionInterpolation.Linear)'                              new FreshnessScoringFunction(                                  "lastRenovationDate"'                                  boost: 1.1'                                  boostingDuration: TimeSpan.FromDays(365)'   //aka.ms/sre-codescan/disable                                  interpolation: ScoringFunctionInterpolation.Logarithmic)                          }'                          TextWeights = new TextWeights()                          {                              Weights = new Dictionary<string' double>() { { "description"' 1.5 }' { "category"' 2.0 } }                          }                      }'                      new ScoringProfile("ProfileTwo")                      {                          FunctionAggregation = ScoringFunctionAggregation.Maximum'                          Functions = new[]                          {                              new TagScoringFunction(                                  "tags"'                                  boost: 1.5'                                  tagsParameter: "mytags"'                                  interpolation: ScoringFunctionInterpolation.Linear)                          }                      }'                      new ScoringProfile("ProfileThree")                      {                          FunctionAggregation = ScoringFunctionAggregation.Minimum'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.0' new MagnitudeScoringParameters(0' 10) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Quadratic                              }                          }                      }'                      new ScoringProfile("ProfileFour")                      {                          FunctionAggregation = ScoringFunctionAggregation.FirstMatching'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.14' new MagnitudeScoringParameters(1' 5) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Constant                              }                          }                      }                  }'                  DefaultScoringProfile = "MyProfile"'                  CorsOptions = new CorsOptions()                  {                      AllowedOrigins = new[] { "http://tempuri.org"' "http://localhost:80" }'                      MaxAgeInSeconds = 60                  }'                  Suggesters = new[]                  {                      new Suggester("FancySuggester"' "hotelName")                  }              };
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The following statement contains a magic number: var index = new Index()              {                  Name = indexName'                  Fields = new[]                  {                      Field.New("hotelId"' DataType.String' isKey: true' isSearchable: false' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("hotelName"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: false)'                      Field.NewSearchableString("description"' AnalyzerName.EnLucene' isKey: false' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.New("description_custom"' DataType.String' isSearchable: true' isFilterable: false' isSortable: false' isFacetable: false' searchAnalyzerName: AnalyzerName.Stop' indexAnalyzerName: AnalyzerName.Stop)'                      Field.New("category"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)'                      Field.New("parkingIncluded"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("lastRenovationDate"' DataType.DateTimeOffset' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("rating"' DataType.Int32' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.NewComplex("address"' isCollection: false' fields: new[]                      {                          Field.New("streetAddress"' DataType.String' isSearchable: true)'                          Field.New("city"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("stateProvince"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("country"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("postalCode"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)                      })'                      Field.New("location"' DataType.GeographyPoint' isFilterable: true' isSortable: true' isFacetable: false' isRetrievable: true)'                      Field.NewComplex("rooms"' isCollection: true' fields: new[]                      {                          Field.NewSearchableString("description"' AnalyzerName.EnLucene)'                          Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene)'                          Field.New("type"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("baseRate"' DataType.Double' isKey: false' isSearchable: false' isFilterable: true' isFacetable: true)'                          Field.New("bedOptions"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("sleepsCount"' DataType.Int32' isFilterable: true' isFacetable: true)'                          Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isFacetable: true)'                          Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)                      })'                      Field.New("totalGuests"' DataType.Int64' isFilterable: true' isSortable: true' isFacetable: true' isRetrievable: false)'                      Field.New("profitMargin"' DataType.Double)                  }'                  ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          FunctionAggregation = ScoringFunctionAggregation.Average'                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4'                                  shouldBoostBeyondRangeByConstant: true'                                  interpolation: ScoringFunctionInterpolation.Constant)'                              new DistanceScoringFunction(                                  "location"'                                  boost: 1.5'                                  referencePointParameter: "loc"'                                  boostingDistance: 5'                                  interpolation: ScoringFunctionInterpolation.Linear)'                              new FreshnessScoringFunction(                                  "lastRenovationDate"'                                  boost: 1.1'                                  boostingDuration: TimeSpan.FromDays(365)'   //aka.ms/sre-codescan/disable                                  interpolation: ScoringFunctionInterpolation.Logarithmic)                          }'                          TextWeights = new TextWeights()                          {                              Weights = new Dictionary<string' double>() { { "description"' 1.5 }' { "category"' 2.0 } }                          }                      }'                      new ScoringProfile("ProfileTwo")                      {                          FunctionAggregation = ScoringFunctionAggregation.Maximum'                          Functions = new[]                          {                              new TagScoringFunction(                                  "tags"'                                  boost: 1.5'                                  tagsParameter: "mytags"'                                  interpolation: ScoringFunctionInterpolation.Linear)                          }                      }'                      new ScoringProfile("ProfileThree")                      {                          FunctionAggregation = ScoringFunctionAggregation.Minimum'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.0' new MagnitudeScoringParameters(0' 10) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Quadratic                              }                          }                      }'                      new ScoringProfile("ProfileFour")                      {                          FunctionAggregation = ScoringFunctionAggregation.FirstMatching'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.14' new MagnitudeScoringParameters(1' 5) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Constant                              }                          }                      }                  }'                  DefaultScoringProfile = "MyProfile"'                  CorsOptions = new CorsOptions()                  {                      AllowedOrigins = new[] { "http://tempuri.org"' "http://localhost:80" }'                      MaxAgeInSeconds = 60                  }'                  Suggesters = new[]                  {                      new Suggester("FancySuggester"' "hotelName")                  }              };
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The following statement contains a magic number: var index = new Index()              {                  Name = indexName'                  Fields = new[]                  {                      Field.New("hotelId"' DataType.String' isKey: true' isSearchable: false' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("hotelName"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: false)'                      Field.NewSearchableString("description"' AnalyzerName.EnLucene' isKey: false' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.New("description_custom"' DataType.String' isSearchable: true' isFilterable: false' isSortable: false' isFacetable: false' searchAnalyzerName: AnalyzerName.Stop' indexAnalyzerName: AnalyzerName.Stop)'                      Field.New("category"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)'                      Field.New("parkingIncluded"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("lastRenovationDate"' DataType.DateTimeOffset' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("rating"' DataType.Int32' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.NewComplex("address"' isCollection: false' fields: new[]                      {                          Field.New("streetAddress"' DataType.String' isSearchable: true)'                          Field.New("city"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("stateProvince"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("country"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("postalCode"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)                      })'                      Field.New("location"' DataType.GeographyPoint' isFilterable: true' isSortable: true' isFacetable: false' isRetrievable: true)'                      Field.NewComplex("rooms"' isCollection: true' fields: new[]                      {                          Field.NewSearchableString("description"' AnalyzerName.EnLucene)'                          Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene)'                          Field.New("type"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("baseRate"' DataType.Double' isKey: false' isSearchable: false' isFilterable: true' isFacetable: true)'                          Field.New("bedOptions"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("sleepsCount"' DataType.Int32' isFilterable: true' isFacetable: true)'                          Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isFacetable: true)'                          Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)                      })'                      Field.New("totalGuests"' DataType.Int64' isFilterable: true' isSortable: true' isFacetable: true' isRetrievable: false)'                      Field.New("profitMargin"' DataType.Double)                  }'                  ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          FunctionAggregation = ScoringFunctionAggregation.Average'                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4'                                  shouldBoostBeyondRangeByConstant: true'                                  interpolation: ScoringFunctionInterpolation.Constant)'                              new DistanceScoringFunction(                                  "location"'                                  boost: 1.5'                                  referencePointParameter: "loc"'                                  boostingDistance: 5'                                  interpolation: ScoringFunctionInterpolation.Linear)'                              new FreshnessScoringFunction(                                  "lastRenovationDate"'                                  boost: 1.1'                                  boostingDuration: TimeSpan.FromDays(365)'   //aka.ms/sre-codescan/disable                                  interpolation: ScoringFunctionInterpolation.Logarithmic)                          }'                          TextWeights = new TextWeights()                          {                              Weights = new Dictionary<string' double>() { { "description"' 1.5 }' { "category"' 2.0 } }                          }                      }'                      new ScoringProfile("ProfileTwo")                      {                          FunctionAggregation = ScoringFunctionAggregation.Maximum'                          Functions = new[]                          {                              new TagScoringFunction(                                  "tags"'                                  boost: 1.5'                                  tagsParameter: "mytags"'                                  interpolation: ScoringFunctionInterpolation.Linear)                          }                      }'                      new ScoringProfile("ProfileThree")                      {                          FunctionAggregation = ScoringFunctionAggregation.Minimum'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.0' new MagnitudeScoringParameters(0' 10) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Quadratic                              }                          }                      }'                      new ScoringProfile("ProfileFour")                      {                          FunctionAggregation = ScoringFunctionAggregation.FirstMatching'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.14' new MagnitudeScoringParameters(1' 5) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Constant                              }                          }                      }                  }'                  DefaultScoringProfile = "MyProfile"'                  CorsOptions = new CorsOptions()                  {                      AllowedOrigins = new[] { "http://tempuri.org"' "http://localhost:80" }'                      MaxAgeInSeconds = 60                  }'                  Suggesters = new[]                  {                      new Suggester("FancySuggester"' "hotelName")                  }              };
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The following statement contains a magic number: var index = new Index()              {                  Name = indexName'                  Fields = new[]                  {                      Field.New("hotelId"' DataType.String' isKey: true' isSearchable: false' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("hotelName"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: false)'                      Field.NewSearchableString("description"' AnalyzerName.EnLucene' isKey: false' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.New("description_custom"' DataType.String' isSearchable: true' isFilterable: false' isSortable: false' isFacetable: false' searchAnalyzerName: AnalyzerName.Stop' indexAnalyzerName: AnalyzerName.Stop)'                      Field.New("category"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)'                      Field.New("parkingIncluded"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("lastRenovationDate"' DataType.DateTimeOffset' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("rating"' DataType.Int32' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.NewComplex("address"' isCollection: false' fields: new[]                      {                          Field.New("streetAddress"' DataType.String' isSearchable: true)'                          Field.New("city"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("stateProvince"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("country"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("postalCode"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)                      })'                      Field.New("location"' DataType.GeographyPoint' isFilterable: true' isSortable: true' isFacetable: false' isRetrievable: true)'                      Field.NewComplex("rooms"' isCollection: true' fields: new[]                      {                          Field.NewSearchableString("description"' AnalyzerName.EnLucene)'                          Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene)'                          Field.New("type"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("baseRate"' DataType.Double' isKey: false' isSearchable: false' isFilterable: true' isFacetable: true)'                          Field.New("bedOptions"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("sleepsCount"' DataType.Int32' isFilterable: true' isFacetable: true)'                          Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isFacetable: true)'                          Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)                      })'                      Field.New("totalGuests"' DataType.Int64' isFilterable: true' isSortable: true' isFacetable: true' isRetrievable: false)'                      Field.New("profitMargin"' DataType.Double)                  }'                  ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          FunctionAggregation = ScoringFunctionAggregation.Average'                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4'                                  shouldBoostBeyondRangeByConstant: true'                                  interpolation: ScoringFunctionInterpolation.Constant)'                              new DistanceScoringFunction(                                  "location"'                                  boost: 1.5'                                  referencePointParameter: "loc"'                                  boostingDistance: 5'                                  interpolation: ScoringFunctionInterpolation.Linear)'                              new FreshnessScoringFunction(                                  "lastRenovationDate"'                                  boost: 1.1'                                  boostingDuration: TimeSpan.FromDays(365)'   //aka.ms/sre-codescan/disable                                  interpolation: ScoringFunctionInterpolation.Logarithmic)                          }'                          TextWeights = new TextWeights()                          {                              Weights = new Dictionary<string' double>() { { "description"' 1.5 }' { "category"' 2.0 } }                          }                      }'                      new ScoringProfile("ProfileTwo")                      {                          FunctionAggregation = ScoringFunctionAggregation.Maximum'                          Functions = new[]                          {                              new TagScoringFunction(                                  "tags"'                                  boost: 1.5'                                  tagsParameter: "mytags"'                                  interpolation: ScoringFunctionInterpolation.Linear)                          }                      }'                      new ScoringProfile("ProfileThree")                      {                          FunctionAggregation = ScoringFunctionAggregation.Minimum'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.0' new MagnitudeScoringParameters(0' 10) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Quadratic                              }                          }                      }'                      new ScoringProfile("ProfileFour")                      {                          FunctionAggregation = ScoringFunctionAggregation.FirstMatching'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.14' new MagnitudeScoringParameters(1' 5) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Constant                              }                          }                      }                  }'                  DefaultScoringProfile = "MyProfile"'                  CorsOptions = new CorsOptions()                  {                      AllowedOrigins = new[] { "http://tempuri.org"' "http://localhost:80" }'                      MaxAgeInSeconds = 60                  }'                  Suggesters = new[]                  {                      new Suggester("FancySuggester"' "hotelName")                  }              };
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The following statement contains a magic number: var index = new Index()              {                  Name = indexName'                  Fields = new[]                  {                      Field.New("hotelId"' DataType.String' isKey: true' isSearchable: false' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("hotelName"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: false)'                      Field.NewSearchableString("description"' AnalyzerName.EnLucene' isKey: false' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.New("description_custom"' DataType.String' isSearchable: true' isFilterable: false' isSortable: false' isFacetable: false' searchAnalyzerName: AnalyzerName.Stop' indexAnalyzerName: AnalyzerName.Stop)'                      Field.New("category"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)'                      Field.New("parkingIncluded"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("lastRenovationDate"' DataType.DateTimeOffset' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("rating"' DataType.Int32' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.NewComplex("address"' isCollection: false' fields: new[]                      {                          Field.New("streetAddress"' DataType.String' isSearchable: true)'                          Field.New("city"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("stateProvince"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("country"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("postalCode"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)                      })'                      Field.New("location"' DataType.GeographyPoint' isFilterable: true' isSortable: true' isFacetable: false' isRetrievable: true)'                      Field.NewComplex("rooms"' isCollection: true' fields: new[]                      {                          Field.NewSearchableString("description"' AnalyzerName.EnLucene)'                          Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene)'                          Field.New("type"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("baseRate"' DataType.Double' isKey: false' isSearchable: false' isFilterable: true' isFacetable: true)'                          Field.New("bedOptions"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("sleepsCount"' DataType.Int32' isFilterable: true' isFacetable: true)'                          Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isFacetable: true)'                          Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)                      })'                      Field.New("totalGuests"' DataType.Int64' isFilterable: true' isSortable: true' isFacetable: true' isRetrievable: false)'                      Field.New("profitMargin"' DataType.Double)                  }'                  ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          FunctionAggregation = ScoringFunctionAggregation.Average'                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4'                                  shouldBoostBeyondRangeByConstant: true'                                  interpolation: ScoringFunctionInterpolation.Constant)'                              new DistanceScoringFunction(                                  "location"'                                  boost: 1.5'                                  referencePointParameter: "loc"'                                  boostingDistance: 5'                                  interpolation: ScoringFunctionInterpolation.Linear)'                              new FreshnessScoringFunction(                                  "lastRenovationDate"'                                  boost: 1.1'                                  boostingDuration: TimeSpan.FromDays(365)'   //aka.ms/sre-codescan/disable                                  interpolation: ScoringFunctionInterpolation.Logarithmic)                          }'                          TextWeights = new TextWeights()                          {                              Weights = new Dictionary<string' double>() { { "description"' 1.5 }' { "category"' 2.0 } }                          }                      }'                      new ScoringProfile("ProfileTwo")                      {                          FunctionAggregation = ScoringFunctionAggregation.Maximum'                          Functions = new[]                          {                              new TagScoringFunction(                                  "tags"'                                  boost: 1.5'                                  tagsParameter: "mytags"'                                  interpolation: ScoringFunctionInterpolation.Linear)                          }                      }'                      new ScoringProfile("ProfileThree")                      {                          FunctionAggregation = ScoringFunctionAggregation.Minimum'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.0' new MagnitudeScoringParameters(0' 10) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Quadratic                              }                          }                      }'                      new ScoringProfile("ProfileFour")                      {                          FunctionAggregation = ScoringFunctionAggregation.FirstMatching'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.14' new MagnitudeScoringParameters(1' 5) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Constant                              }                          }                      }                  }'                  DefaultScoringProfile = "MyProfile"'                  CorsOptions = new CorsOptions()                  {                      AllowedOrigins = new[] { "http://tempuri.org"' "http://localhost:80" }'                      MaxAgeInSeconds = 60                  }'                  Suggesters = new[]                  {                      new Suggester("FancySuggester"' "hotelName")                  }              };
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The following statement contains a magic number: var index = new Index()              {                  Name = indexName'                  Fields = new[]                  {                      Field.New("hotelId"' DataType.String' isKey: true' isSearchable: false' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("hotelName"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: false)'                      Field.NewSearchableString("description"' AnalyzerName.EnLucene' isKey: false' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.New("description_custom"' DataType.String' isSearchable: true' isFilterable: false' isSortable: false' isFacetable: false' searchAnalyzerName: AnalyzerName.Stop' indexAnalyzerName: AnalyzerName.Stop)'                      Field.New("category"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)'                      Field.New("parkingIncluded"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("lastRenovationDate"' DataType.DateTimeOffset' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("rating"' DataType.Int32' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.NewComplex("address"' isCollection: false' fields: new[]                      {                          Field.New("streetAddress"' DataType.String' isSearchable: true)'                          Field.New("city"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("stateProvince"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("country"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("postalCode"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)                      })'                      Field.New("location"' DataType.GeographyPoint' isFilterable: true' isSortable: true' isFacetable: false' isRetrievable: true)'                      Field.NewComplex("rooms"' isCollection: true' fields: new[]                      {                          Field.NewSearchableString("description"' AnalyzerName.EnLucene)'                          Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene)'                          Field.New("type"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("baseRate"' DataType.Double' isKey: false' isSearchable: false' isFilterable: true' isFacetable: true)'                          Field.New("bedOptions"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("sleepsCount"' DataType.Int32' isFilterable: true' isFacetable: true)'                          Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isFacetable: true)'                          Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)                      })'                      Field.New("totalGuests"' DataType.Int64' isFilterable: true' isSortable: true' isFacetable: true' isRetrievable: false)'                      Field.New("profitMargin"' DataType.Double)                  }'                  ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          FunctionAggregation = ScoringFunctionAggregation.Average'                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4'                                  shouldBoostBeyondRangeByConstant: true'                                  interpolation: ScoringFunctionInterpolation.Constant)'                              new DistanceScoringFunction(                                  "location"'                                  boost: 1.5'                                  referencePointParameter: "loc"'                                  boostingDistance: 5'                                  interpolation: ScoringFunctionInterpolation.Linear)'                              new FreshnessScoringFunction(                                  "lastRenovationDate"'                                  boost: 1.1'                                  boostingDuration: TimeSpan.FromDays(365)'   //aka.ms/sre-codescan/disable                                  interpolation: ScoringFunctionInterpolation.Logarithmic)                          }'                          TextWeights = new TextWeights()                          {                              Weights = new Dictionary<string' double>() { { "description"' 1.5 }' { "category"' 2.0 } }                          }                      }'                      new ScoringProfile("ProfileTwo")                      {                          FunctionAggregation = ScoringFunctionAggregation.Maximum'                          Functions = new[]                          {                              new TagScoringFunction(                                  "tags"'                                  boost: 1.5'                                  tagsParameter: "mytags"'                                  interpolation: ScoringFunctionInterpolation.Linear)                          }                      }'                      new ScoringProfile("ProfileThree")                      {                          FunctionAggregation = ScoringFunctionAggregation.Minimum'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.0' new MagnitudeScoringParameters(0' 10) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Quadratic                              }                          }                      }'                      new ScoringProfile("ProfileFour")                      {                          FunctionAggregation = ScoringFunctionAggregation.FirstMatching'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.14' new MagnitudeScoringParameters(1' 5) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Constant                              }                          }                      }                  }'                  DefaultScoringProfile = "MyProfile"'                  CorsOptions = new CorsOptions()                  {                      AllowedOrigins = new[] { "http://tempuri.org"' "http://localhost:80" }'                      MaxAgeInSeconds = 60                  }'                  Suggesters = new[]                  {                      new Suggester("FancySuggester"' "hotelName")                  }              };
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The following statement contains a magic number: var index = new Index()              {                  Name = indexName'                  Fields = new[]                  {                      Field.New("hotelId"' DataType.String' isKey: true' isSearchable: false' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("hotelName"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: false)'                      Field.NewSearchableString("description"' AnalyzerName.EnLucene' isKey: false' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.New("description_custom"' DataType.String' isSearchable: true' isFilterable: false' isSortable: false' isFacetable: false' searchAnalyzerName: AnalyzerName.Stop' indexAnalyzerName: AnalyzerName.Stop)'                      Field.New("category"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)'                      Field.New("parkingIncluded"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("lastRenovationDate"' DataType.DateTimeOffset' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("rating"' DataType.Int32' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.NewComplex("address"' isCollection: false' fields: new[]                      {                          Field.New("streetAddress"' DataType.String' isSearchable: true)'                          Field.New("city"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("stateProvince"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("country"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("postalCode"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)                      })'                      Field.New("location"' DataType.GeographyPoint' isFilterable: true' isSortable: true' isFacetable: false' isRetrievable: true)'                      Field.NewComplex("rooms"' isCollection: true' fields: new[]                      {                          Field.NewSearchableString("description"' AnalyzerName.EnLucene)'                          Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene)'                          Field.New("type"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("baseRate"' DataType.Double' isKey: false' isSearchable: false' isFilterable: true' isFacetable: true)'                          Field.New("bedOptions"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("sleepsCount"' DataType.Int32' isFilterable: true' isFacetable: true)'                          Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isFacetable: true)'                          Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)                      })'                      Field.New("totalGuests"' DataType.Int64' isFilterable: true' isSortable: true' isFacetable: true' isRetrievable: false)'                      Field.New("profitMargin"' DataType.Double)                  }'                  ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          FunctionAggregation = ScoringFunctionAggregation.Average'                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4'                                  shouldBoostBeyondRangeByConstant: true'                                  interpolation: ScoringFunctionInterpolation.Constant)'                              new DistanceScoringFunction(                                  "location"'                                  boost: 1.5'                                  referencePointParameter: "loc"'                                  boostingDistance: 5'                                  interpolation: ScoringFunctionInterpolation.Linear)'                              new FreshnessScoringFunction(                                  "lastRenovationDate"'                                  boost: 1.1'                                  boostingDuration: TimeSpan.FromDays(365)'   //aka.ms/sre-codescan/disable                                  interpolation: ScoringFunctionInterpolation.Logarithmic)                          }'                          TextWeights = new TextWeights()                          {                              Weights = new Dictionary<string' double>() { { "description"' 1.5 }' { "category"' 2.0 } }                          }                      }'                      new ScoringProfile("ProfileTwo")                      {                          FunctionAggregation = ScoringFunctionAggregation.Maximum'                          Functions = new[]                          {                              new TagScoringFunction(                                  "tags"'                                  boost: 1.5'                                  tagsParameter: "mytags"'                                  interpolation: ScoringFunctionInterpolation.Linear)                          }                      }'                      new ScoringProfile("ProfileThree")                      {                          FunctionAggregation = ScoringFunctionAggregation.Minimum'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.0' new MagnitudeScoringParameters(0' 10) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Quadratic                              }                          }                      }'                      new ScoringProfile("ProfileFour")                      {                          FunctionAggregation = ScoringFunctionAggregation.FirstMatching'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.14' new MagnitudeScoringParameters(1' 5) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Constant                              }                          }                      }                  }'                  DefaultScoringProfile = "MyProfile"'                  CorsOptions = new CorsOptions()                  {                      AllowedOrigins = new[] { "http://tempuri.org"' "http://localhost:80" }'                      MaxAgeInSeconds = 60                  }'                  Suggesters = new[]                  {                      new Suggester("FancySuggester"' "hotelName")                  }              };
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The following statement contains a magic number: var index = new Index()              {                  Name = indexName'                  Fields = new[]                  {                      Field.New("hotelId"' DataType.String' isKey: true' isSearchable: false' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("hotelName"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: false)'                      Field.NewSearchableString("description"' AnalyzerName.EnLucene' isKey: false' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.New("description_custom"' DataType.String' isSearchable: true' isFilterable: false' isSortable: false' isFacetable: false' searchAnalyzerName: AnalyzerName.Stop' indexAnalyzerName: AnalyzerName.Stop)'                      Field.New("category"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)'                      Field.New("parkingIncluded"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("lastRenovationDate"' DataType.DateTimeOffset' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("rating"' DataType.Int32' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.NewComplex("address"' isCollection: false' fields: new[]                      {                          Field.New("streetAddress"' DataType.String' isSearchable: true)'                          Field.New("city"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("stateProvince"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("country"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("postalCode"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)                      })'                      Field.New("location"' DataType.GeographyPoint' isFilterable: true' isSortable: true' isFacetable: false' isRetrievable: true)'                      Field.NewComplex("rooms"' isCollection: true' fields: new[]                      {                          Field.NewSearchableString("description"' AnalyzerName.EnLucene)'                          Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene)'                          Field.New("type"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("baseRate"' DataType.Double' isKey: false' isSearchable: false' isFilterable: true' isFacetable: true)'                          Field.New("bedOptions"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("sleepsCount"' DataType.Int32' isFilterable: true' isFacetable: true)'                          Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isFacetable: true)'                          Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)                      })'                      Field.New("totalGuests"' DataType.Int64' isFilterable: true' isSortable: true' isFacetable: true' isRetrievable: false)'                      Field.New("profitMargin"' DataType.Double)                  }'                  ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          FunctionAggregation = ScoringFunctionAggregation.Average'                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4'                                  shouldBoostBeyondRangeByConstant: true'                                  interpolation: ScoringFunctionInterpolation.Constant)'                              new DistanceScoringFunction(                                  "location"'                                  boost: 1.5'                                  referencePointParameter: "loc"'                                  boostingDistance: 5'                                  interpolation: ScoringFunctionInterpolation.Linear)'                              new FreshnessScoringFunction(                                  "lastRenovationDate"'                                  boost: 1.1'                                  boostingDuration: TimeSpan.FromDays(365)'   //aka.ms/sre-codescan/disable                                  interpolation: ScoringFunctionInterpolation.Logarithmic)                          }'                          TextWeights = new TextWeights()                          {                              Weights = new Dictionary<string' double>() { { "description"' 1.5 }' { "category"' 2.0 } }                          }                      }'                      new ScoringProfile("ProfileTwo")                      {                          FunctionAggregation = ScoringFunctionAggregation.Maximum'                          Functions = new[]                          {                              new TagScoringFunction(                                  "tags"'                                  boost: 1.5'                                  tagsParameter: "mytags"'                                  interpolation: ScoringFunctionInterpolation.Linear)                          }                      }'                      new ScoringProfile("ProfileThree")                      {                          FunctionAggregation = ScoringFunctionAggregation.Minimum'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.0' new MagnitudeScoringParameters(0' 10) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Quadratic                              }                          }                      }'                      new ScoringProfile("ProfileFour")                      {                          FunctionAggregation = ScoringFunctionAggregation.FirstMatching'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.14' new MagnitudeScoringParameters(1' 5) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Constant                              }                          }                      }                  }'                  DefaultScoringProfile = "MyProfile"'                  CorsOptions = new CorsOptions()                  {                      AllowedOrigins = new[] { "http://tempuri.org"' "http://localhost:80" }'                      MaxAgeInSeconds = 60                  }'                  Suggesters = new[]                  {                      new Suggester("FancySuggester"' "hotelName")                  }              };
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The following statement contains a magic number: var index = new Index()              {                  Name = indexName'                  Fields = new[]                  {                      Field.New("hotelId"' DataType.String' isKey: true' isSearchable: false' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("hotelName"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: false)'                      Field.NewSearchableString("description"' AnalyzerName.EnLucene' isKey: false' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.New("description_custom"' DataType.String' isSearchable: true' isFilterable: false' isSortable: false' isFacetable: false' searchAnalyzerName: AnalyzerName.Stop' indexAnalyzerName: AnalyzerName.Stop)'                      Field.New("category"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)'                      Field.New("parkingIncluded"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("lastRenovationDate"' DataType.DateTimeOffset' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("rating"' DataType.Int32' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.NewComplex("address"' isCollection: false' fields: new[]                      {                          Field.New("streetAddress"' DataType.String' isSearchable: true)'                          Field.New("city"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("stateProvince"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("country"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("postalCode"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)                      })'                      Field.New("location"' DataType.GeographyPoint' isFilterable: true' isSortable: true' isFacetable: false' isRetrievable: true)'                      Field.NewComplex("rooms"' isCollection: true' fields: new[]                      {                          Field.NewSearchableString("description"' AnalyzerName.EnLucene)'                          Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene)'                          Field.New("type"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("baseRate"' DataType.Double' isKey: false' isSearchable: false' isFilterable: true' isFacetable: true)'                          Field.New("bedOptions"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("sleepsCount"' DataType.Int32' isFilterable: true' isFacetable: true)'                          Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isFacetable: true)'                          Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)                      })'                      Field.New("totalGuests"' DataType.Int64' isFilterable: true' isSortable: true' isFacetable: true' isRetrievable: false)'                      Field.New("profitMargin"' DataType.Double)                  }'                  ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          FunctionAggregation = ScoringFunctionAggregation.Average'                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4'                                  shouldBoostBeyondRangeByConstant: true'                                  interpolation: ScoringFunctionInterpolation.Constant)'                              new DistanceScoringFunction(                                  "location"'                                  boost: 1.5'                                  referencePointParameter: "loc"'                                  boostingDistance: 5'                                  interpolation: ScoringFunctionInterpolation.Linear)'                              new FreshnessScoringFunction(                                  "lastRenovationDate"'                                  boost: 1.1'                                  boostingDuration: TimeSpan.FromDays(365)'   //aka.ms/sre-codescan/disable                                  interpolation: ScoringFunctionInterpolation.Logarithmic)                          }'                          TextWeights = new TextWeights()                          {                              Weights = new Dictionary<string' double>() { { "description"' 1.5 }' { "category"' 2.0 } }                          }                      }'                      new ScoringProfile("ProfileTwo")                      {                          FunctionAggregation = ScoringFunctionAggregation.Maximum'                          Functions = new[]                          {                              new TagScoringFunction(                                  "tags"'                                  boost: 1.5'                                  tagsParameter: "mytags"'                                  interpolation: ScoringFunctionInterpolation.Linear)                          }                      }'                      new ScoringProfile("ProfileThree")                      {                          FunctionAggregation = ScoringFunctionAggregation.Minimum'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.0' new MagnitudeScoringParameters(0' 10) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Quadratic                              }                          }                      }'                      new ScoringProfile("ProfileFour")                      {                          FunctionAggregation = ScoringFunctionAggregation.FirstMatching'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.14' new MagnitudeScoringParameters(1' 5) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Constant                              }                          }                      }                  }'                  DefaultScoringProfile = "MyProfile"'                  CorsOptions = new CorsOptions()                  {                      AllowedOrigins = new[] { "http://tempuri.org"' "http://localhost:80" }'                      MaxAgeInSeconds = 60                  }'                  Suggesters = new[]                  {                      new Suggester("FancySuggester"' "hotelName")                  }              };
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The following statement contains a magic number: var index = new Index()              {                  Name = indexName'                  Fields = new[]                  {                      Field.New("hotelId"' DataType.String' isKey: true' isSearchable: false' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("hotelName"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: false)'                      Field.NewSearchableString("description"' AnalyzerName.EnLucene' isKey: false' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.New("description_custom"' DataType.String' isSearchable: true' isFilterable: false' isSortable: false' isFacetable: false' searchAnalyzerName: AnalyzerName.Stop' indexAnalyzerName: AnalyzerName.Stop)'                      Field.New("category"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)'                      Field.New("parkingIncluded"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("lastRenovationDate"' DataType.DateTimeOffset' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("rating"' DataType.Int32' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.NewComplex("address"' isCollection: false' fields: new[]                      {                          Field.New("streetAddress"' DataType.String' isSearchable: true)'                          Field.New("city"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("stateProvince"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("country"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("postalCode"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)                      })'                      Field.New("location"' DataType.GeographyPoint' isFilterable: true' isSortable: true' isFacetable: false' isRetrievable: true)'                      Field.NewComplex("rooms"' isCollection: true' fields: new[]                      {                          Field.NewSearchableString("description"' AnalyzerName.EnLucene)'                          Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene)'                          Field.New("type"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("baseRate"' DataType.Double' isKey: false' isSearchable: false' isFilterable: true' isFacetable: true)'                          Field.New("bedOptions"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("sleepsCount"' DataType.Int32' isFilterable: true' isFacetable: true)'                          Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isFacetable: true)'                          Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)                      })'                      Field.New("totalGuests"' DataType.Int64' isFilterable: true' isSortable: true' isFacetable: true' isRetrievable: false)'                      Field.New("profitMargin"' DataType.Double)                  }'                  ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          FunctionAggregation = ScoringFunctionAggregation.Average'                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4'                                  shouldBoostBeyondRangeByConstant: true'                                  interpolation: ScoringFunctionInterpolation.Constant)'                              new DistanceScoringFunction(                                  "location"'                                  boost: 1.5'                                  referencePointParameter: "loc"'                                  boostingDistance: 5'                                  interpolation: ScoringFunctionInterpolation.Linear)'                              new FreshnessScoringFunction(                                  "lastRenovationDate"'                                  boost: 1.1'                                  boostingDuration: TimeSpan.FromDays(365)'   //aka.ms/sre-codescan/disable                                  interpolation: ScoringFunctionInterpolation.Logarithmic)                          }'                          TextWeights = new TextWeights()                          {                              Weights = new Dictionary<string' double>() { { "description"' 1.5 }' { "category"' 2.0 } }                          }                      }'                      new ScoringProfile("ProfileTwo")                      {                          FunctionAggregation = ScoringFunctionAggregation.Maximum'                          Functions = new[]                          {                              new TagScoringFunction(                                  "tags"'                                  boost: 1.5'                                  tagsParameter: "mytags"'                                  interpolation: ScoringFunctionInterpolation.Linear)                          }                      }'                      new ScoringProfile("ProfileThree")                      {                          FunctionAggregation = ScoringFunctionAggregation.Minimum'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.0' new MagnitudeScoringParameters(0' 10) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Quadratic                              }                          }                      }'                      new ScoringProfile("ProfileFour")                      {                          FunctionAggregation = ScoringFunctionAggregation.FirstMatching'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.14' new MagnitudeScoringParameters(1' 5) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Constant                              }                          }                      }                  }'                  DefaultScoringProfile = "MyProfile"'                  CorsOptions = new CorsOptions()                  {                      AllowedOrigins = new[] { "http://tempuri.org"' "http://localhost:80" }'                      MaxAgeInSeconds = 60                  }'                  Suggesters = new[]                  {                      new Suggester("FancySuggester"' "hotelName")                  }              };
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The following statement contains a magic number: var index = new Index()              {                  Name = indexName'                  Fields = new[]                  {                      Field.New("hotelId"' DataType.String' isKey: true' isSearchable: false' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("hotelName"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: false)'                      Field.NewSearchableString("description"' AnalyzerName.EnLucene' isKey: false' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.New("description_custom"' DataType.String' isSearchable: true' isFilterable: false' isSortable: false' isFacetable: false' searchAnalyzerName: AnalyzerName.Stop' indexAnalyzerName: AnalyzerName.Stop)'                      Field.New("category"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)'                      Field.New("parkingIncluded"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("lastRenovationDate"' DataType.DateTimeOffset' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("rating"' DataType.Int32' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.NewComplex("address"' isCollection: false' fields: new[]                      {                          Field.New("streetAddress"' DataType.String' isSearchable: true)'                          Field.New("city"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("stateProvince"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("country"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("postalCode"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)                      })'                      Field.New("location"' DataType.GeographyPoint' isFilterable: true' isSortable: true' isFacetable: false' isRetrievable: true)'                      Field.NewComplex("rooms"' isCollection: true' fields: new[]                      {                          Field.NewSearchableString("description"' AnalyzerName.EnLucene)'                          Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene)'                          Field.New("type"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("baseRate"' DataType.Double' isKey: false' isSearchable: false' isFilterable: true' isFacetable: true)'                          Field.New("bedOptions"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("sleepsCount"' DataType.Int32' isFilterable: true' isFacetable: true)'                          Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isFacetable: true)'                          Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)                      })'                      Field.New("totalGuests"' DataType.Int64' isFilterable: true' isSortable: true' isFacetable: true' isRetrievable: false)'                      Field.New("profitMargin"' DataType.Double)                  }'                  ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          FunctionAggregation = ScoringFunctionAggregation.Average'                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4'                                  shouldBoostBeyondRangeByConstant: true'                                  interpolation: ScoringFunctionInterpolation.Constant)'                              new DistanceScoringFunction(                                  "location"'                                  boost: 1.5'                                  referencePointParameter: "loc"'                                  boostingDistance: 5'                                  interpolation: ScoringFunctionInterpolation.Linear)'                              new FreshnessScoringFunction(                                  "lastRenovationDate"'                                  boost: 1.1'                                  boostingDuration: TimeSpan.FromDays(365)'   //aka.ms/sre-codescan/disable                                  interpolation: ScoringFunctionInterpolation.Logarithmic)                          }'                          TextWeights = new TextWeights()                          {                              Weights = new Dictionary<string' double>() { { "description"' 1.5 }' { "category"' 2.0 } }                          }                      }'                      new ScoringProfile("ProfileTwo")                      {                          FunctionAggregation = ScoringFunctionAggregation.Maximum'                          Functions = new[]                          {                              new TagScoringFunction(                                  "tags"'                                  boost: 1.5'                                  tagsParameter: "mytags"'                                  interpolation: ScoringFunctionInterpolation.Linear)                          }                      }'                      new ScoringProfile("ProfileThree")                      {                          FunctionAggregation = ScoringFunctionAggregation.Minimum'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.0' new MagnitudeScoringParameters(0' 10) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Quadratic                              }                          }                      }'                      new ScoringProfile("ProfileFour")                      {                          FunctionAggregation = ScoringFunctionAggregation.FirstMatching'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.14' new MagnitudeScoringParameters(1' 5) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Constant                              }                          }                      }                  }'                  DefaultScoringProfile = "MyProfile"'                  CorsOptions = new CorsOptions()                  {                      AllowedOrigins = new[] { "http://tempuri.org"' "http://localhost:80" }'                      MaxAgeInSeconds = 60                  }'                  Suggesters = new[]                  {                      new Suggester("FancySuggester"' "hotelName")                  }              };
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateTestIndex,The following statement contains a magic number: var index = new Index()              {                  Name = indexName'                  Fields = new[]                  {                      Field.New("hotelId"' DataType.String' isKey: true' isSearchable: false' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("hotelName"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: false)'                      Field.NewSearchableString("description"' AnalyzerName.EnLucene' isKey: false' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene' isFilterable: false' isSortable: false' isFacetable: false)'                      Field.New("description_custom"' DataType.String' isSearchable: true' isFilterable: false' isSortable: false' isFacetable: false' searchAnalyzerName: AnalyzerName.Stop' indexAnalyzerName: AnalyzerName.Stop)'                      Field.New("category"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)'                      Field.New("parkingIncluded"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("lastRenovationDate"' DataType.DateTimeOffset' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.New("rating"' DataType.Int32' isFilterable: true' isSortable: true' isFacetable: true)'                      Field.NewComplex("address"' isCollection: false' fields: new[]                      {                          Field.New("streetAddress"' DataType.String' isSearchable: true)'                          Field.New("city"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("stateProvince"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("country"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)'                          Field.New("postalCode"' DataType.String' isSearchable: true' isFilterable: true' isSortable: true' isFacetable: true)                      })'                      Field.New("location"' DataType.GeographyPoint' isFilterable: true' isSortable: true' isFacetable: false' isRetrievable: true)'                      Field.NewComplex("rooms"' isCollection: true' fields: new[]                      {                          Field.NewSearchableString("description"' AnalyzerName.EnLucene)'                          Field.NewSearchableString("descriptionFr"' AnalyzerName.FrLucene)'                          Field.New("type"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("baseRate"' DataType.Double' isKey: false' isSearchable: false' isFilterable: true' isFacetable: true)'                          Field.New("bedOptions"' DataType.String' isSearchable: true' isFilterable: true' isFacetable: true)'                          Field.New("sleepsCount"' DataType.Int32' isFilterable: true' isFacetable: true)'                          Field.New("smokingAllowed"' DataType.Boolean' isFilterable: true' isFacetable: true)'                          Field.New("tags"' DataType.Collection(DataType.String)' isSearchable: true' isFilterable: true' isSortable: false' isFacetable: true)                      })'                      Field.New("totalGuests"' DataType.Int64' isFilterable: true' isSortable: true' isFacetable: true' isRetrievable: false)'                      Field.New("profitMargin"' DataType.Double)                  }'                  ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          FunctionAggregation = ScoringFunctionAggregation.Average'                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4'                                  shouldBoostBeyondRangeByConstant: true'                                  interpolation: ScoringFunctionInterpolation.Constant)'                              new DistanceScoringFunction(                                  "location"'                                  boost: 1.5'                                  referencePointParameter: "loc"'                                  boostingDistance: 5'                                  interpolation: ScoringFunctionInterpolation.Linear)'                              new FreshnessScoringFunction(                                  "lastRenovationDate"'                                  boost: 1.1'                                  boostingDuration: TimeSpan.FromDays(365)'   //aka.ms/sre-codescan/disable                                  interpolation: ScoringFunctionInterpolation.Logarithmic)                          }'                          TextWeights = new TextWeights()                          {                              Weights = new Dictionary<string' double>() { { "description"' 1.5 }' { "category"' 2.0 } }                          }                      }'                      new ScoringProfile("ProfileTwo")                      {                          FunctionAggregation = ScoringFunctionAggregation.Maximum'                          Functions = new[]                          {                              new TagScoringFunction(                                  "tags"'                                  boost: 1.5'                                  tagsParameter: "mytags"'                                  interpolation: ScoringFunctionInterpolation.Linear)                          }                      }'                      new ScoringProfile("ProfileThree")                      {                          FunctionAggregation = ScoringFunctionAggregation.Minimum'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.0' new MagnitudeScoringParameters(0' 10) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Quadratic                              }                          }                      }'                      new ScoringProfile("ProfileFour")                      {                          FunctionAggregation = ScoringFunctionAggregation.FirstMatching'                          Functions = new[]                          {                              // Set ShouldBoostBeyondRangeByConstant explicitly to false. The API returns the default (false) if you pass in null' so we                              // need to do this to ensure that comparisons work after round trips.                              new MagnitudeScoringFunction("rating"' 3.14' new MagnitudeScoringParameters(1' 5) { ShouldBoostBeyondRangeByConstant = false })                              {                                  Interpolation = ScoringFunctionInterpolation.Constant                              }                          }                      }                  }'                  DefaultScoringProfile = "MyProfile"'                  CorsOptions = new CorsOptions()                  {                      AllowedOrigins = new[] { "http://tempuri.org"' "http://localhost:80" }'                      MaxAgeInSeconds = 60                  }'                  Suggesters = new[]                  {                      new Suggester("FancySuggester"' "hotelName")                  }              };
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateIndexReturnsCorrectDefaultValues,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                    Index inputIndex = CreateTestIndex();                    // Default values for field properties are tested elsewhere.                  inputIndex.CorsOptions = new CorsOptions() { AllowedOrigins = new[] { "*" } };                  inputIndex.ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4)                          }                      }                  };                    Index resultIndex = searchClient.Indexes.Create(inputIndex);                    Assert.False(resultIndex.CorsOptions.MaxAgeInSeconds.HasValue); // No value means use the default age.                  Assert.Equal(ScoringFunctionAggregation.Sum' resultIndex.ScoringProfiles[0].FunctionAggregation);                    var function = resultIndex.ScoringProfiles[0].Functions[0] as MagnitudeScoringFunction;                  Assert.NotNull(function);                  Assert.False(function.Parameters.ShouldBoostBeyondRangeByConstant);                  Assert.Equal(ScoringFunctionInterpolation.Linear' function.Interpolation);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CreateIndexReturnsCorrectDefaultValues,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                    Index inputIndex = CreateTestIndex();                    // Default values for field properties are tested elsewhere.                  inputIndex.CorsOptions = new CorsOptions() { AllowedOrigins = new[] { "*" } };                  inputIndex.ScoringProfiles = new[]                  {                      new ScoringProfile("MyProfile")                      {                          Functions = new ScoringFunction[]                          {                              new MagnitudeScoringFunction(                                  "rating"'                                  boost: 2.0'                                  boostingRangeStart: 1'                                  boostingRangeEnd: 4)                          }                      }                  };                    Index resultIndex = searchClient.Indexes.Create(inputIndex);                    Assert.False(resultIndex.CorsOptions.MaxAgeInSeconds.HasValue); // No value means use the default age.                  Assert.Equal(ScoringFunctionAggregation.Sum' resultIndex.ScoringProfiles[0].FunctionAggregation);                    var function = resultIndex.ScoringProfiles[0].Functions[0] as MagnitudeScoringFunction;                  Assert.NotNull(function);                  Assert.False(function.Parameters.ShouldBoostBeyondRangeByConstant);                  Assert.Equal(ScoringFunctionInterpolation.Linear' function.Interpolation);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CanUpdateIndexDefinition,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                    Index fullFeaturedIndex = CreateTestIndex();                  Index initialIndex = CreateTestIndex();                    // Start out with no scoring profiles and different CORS options.                  initialIndex.Name = fullFeaturedIndex.Name;                  initialIndex.ScoringProfiles = new ScoringProfile[0];                  initialIndex.DefaultScoringProfile = null;                  initialIndex.CorsOptions.AllowedOrigins = new[] { "*" };                    Index index = searchClient.Indexes.Create(initialIndex);                    // Give the index time to stabilize before continuing the test.                  // TODO: Remove this workaround once the retry hang bug is fixed.                  TestUtilities.Wait(TimeSpan.FromSeconds(20));                    // Now update the index.                  index.ScoringProfiles = fullFeaturedIndex.ScoringProfiles;                  index.DefaultScoringProfile = fullFeaturedIndex.DefaultScoringProfile;                  index.CorsOptions.AllowedOrigins = fullFeaturedIndex.CorsOptions.AllowedOrigins;                    Index updatedIndex = searchClient.Indexes.CreateOrUpdate(index);                    AssertIndexesEqual(fullFeaturedIndex' updatedIndex);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CanCreateAndListIndexes,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                    Index index1 = CreateTestIndex();                  Index index2 = CreateTestIndex();                    searchClient.Indexes.Create(index1);                  searchClient.Indexes.Create(index2);                    IndexListResult listResponse = searchClient.Indexes.List();                  Assert.Equal(2' listResponse.Indexes.Count);                    IList<string> indexNames = listResponse.Indexes.Select(i => i.Name).ToList();                  Assert.Contains(index1.Name' indexNames);                  Assert.Contains(index2.Name' indexNames);                    indexNames = searchClient.Indexes.ListNames();                  Assert.Equal(2' indexNames.Count);                  Assert.Contains(index1.Name' indexNames);                  Assert.Contains(index2.Name' indexNames);              });
Magic Number,Microsoft.Azure.Search.Tests,IndexManagementTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\IndexManagementTests.cs,CanCreateAndListIndexes,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                    Index index1 = CreateTestIndex();                  Index index2 = CreateTestIndex();                    searchClient.Indexes.Create(index1);                  searchClient.Indexes.Create(index2);                    IndexListResult listResponse = searchClient.Indexes.List();                  Assert.Equal(2' listResponse.Indexes.Count);                    IList<string> indexNames = listResponse.Indexes.Select(i => i.Name).ToList();                  Assert.Contains(index1.Name' indexNames);                  Assert.Contains(index2.Name' indexNames);                    indexNames = searchClient.Indexes.ListNames();                  Assert.Equal(2' indexNames.Count);                  Assert.Contains(index1.Name' indexNames);                  Assert.Contains(index2.Name' indexNames);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDynamicDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDynamicDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDynamicDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDynamicDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDynamicDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDynamicDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDynamicDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDynamicDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDynamicDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDynamicDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "Secret Point Motel"'                          ["description"] = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          ["descriptionFr"] = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          ["category"] = "Boutique"'                          ["tags"] = new[] { "pool"' "air conditioning"' "concierge" }'                          ["parkingIncluded"] = false'                          ["smokingAllowed"] = true'                          ["lastRenovationDate"] = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          ["rating"] = 4L'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["address"] = new Document()                          {                              ["streetAddress"] = "677 5th Ave"'                              ["city"] = "New York"'                              ["stateProvince"] = "NY"'                              ["country"] = "USA"'                              ["postalCode"] = "10022"                          }'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["description"] = "Budget Room' 1 Queen Bed (Cityside)"'                                  ["descriptionFr"] = "Chambre Économique' 1 grand lit (côté ville)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 9.69'                                  ["bedOptions"] = "1 Queen Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd" }                              }'                              new Document()                              {                                  ["description"] = "Budget Room' 1 King Bed (Mountain View)"'                                  ["descriptionFr"] = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  ["type"] = "Budget Room"'                                  ["baseRate"] = 8.09'                                  ["bedOptions"] = "1 King Bed"'                                  ["sleepsCount"] = 2L'                                  ["smokingAllowed"] = true'                                  ["tags"] = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetDynamicDocumentCannotAlwaysDetermineCorrectType,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "2015-02-11T12:58:00Z"'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)' // Test that we don't confuse Geo-JSON & complex types.                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = double.NaN                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = new DateTimeOffset(2015' 2' 11' 12' 58' 0' TimeSpan.Zero)'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = "NaN"                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    // Select only the fields set in the test case so we don't get superfluous data back.                  IEnumerable<string> selectedFields = SelectPopulatedFields(indexedDoc);                    Document actualDoc = client.Documents.Get("1"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetDynamicDocumentCannotAlwaysDetermineCorrectType,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "2015-02-11T12:58:00Z"'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)' // Test that we don't confuse Geo-JSON & complex types.                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = double.NaN                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = new DateTimeOffset(2015' 2' 11' 12' 58' 0' TimeSpan.Zero)'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = "NaN"                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    // Select only the fields set in the test case so we don't get superfluous data back.                  IEnumerable<string> selectedFields = SelectPopulatedFields(indexedDoc);                    Document actualDoc = client.Documents.Get("1"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetDynamicDocumentCannotAlwaysDetermineCorrectType,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "2015-02-11T12:58:00Z"'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)' // Test that we don't confuse Geo-JSON & complex types.                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = double.NaN                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = new DateTimeOffset(2015' 2' 11' 12' 58' 0' TimeSpan.Zero)'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = "NaN"                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    // Select only the fields set in the test case so we don't get superfluous data back.                  IEnumerable<string> selectedFields = SelectPopulatedFields(indexedDoc);                    Document actualDoc = client.Documents.Get("1"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetDynamicDocumentCannotAlwaysDetermineCorrectType,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "2015-02-11T12:58:00Z"'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)' // Test that we don't confuse Geo-JSON & complex types.                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = double.NaN                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = new DateTimeOffset(2015' 2' 11' 12' 58' 0' TimeSpan.Zero)'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = "NaN"                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    // Select only the fields set in the test case so we don't get superfluous data back.                  IEnumerable<string> selectedFields = SelectPopulatedFields(indexedDoc);                    Document actualDoc = client.Documents.Get("1"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetDynamicDocumentCannotAlwaysDetermineCorrectType,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "2015-02-11T12:58:00Z"'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)' // Test that we don't confuse Geo-JSON & complex types.                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = double.NaN                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = new DateTimeOffset(2015' 2' 11' 12' 58' 0' TimeSpan.Zero)'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = "NaN"                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    // Select only the fields set in the test case so we don't get superfluous data back.                  IEnumerable<string> selectedFields = SelectPopulatedFields(indexedDoc);                    Document actualDoc = client.Documents.Get("1"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetDynamicDocumentCannotAlwaysDetermineCorrectType,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "2015-02-11T12:58:00Z"'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)' // Test that we don't confuse Geo-JSON & complex types.                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = double.NaN                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = new DateTimeOffset(2015' 2' 11' 12' 58' 0' TimeSpan.Zero)'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = "NaN"                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    // Select only the fields set in the test case so we don't get superfluous data back.                  IEnumerable<string> selectedFields = SelectPopulatedFields(indexedDoc);                    Document actualDoc = client.Documents.Get("1"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetDynamicDocumentCannotAlwaysDetermineCorrectType,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "2015-02-11T12:58:00Z"'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)' // Test that we don't confuse Geo-JSON & complex types.                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = double.NaN                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = new DateTimeOffset(2015' 2' 11' 12' 58' 0' TimeSpan.Zero)'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = "NaN"                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    // Select only the fields set in the test case so we don't get superfluous data back.                  IEnumerable<string> selectedFields = SelectPopulatedFields(indexedDoc);                    Document actualDoc = client.Documents.Get("1"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetDynamicDocumentCannotAlwaysDetermineCorrectType,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "2015-02-11T12:58:00Z"'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)' // Test that we don't confuse Geo-JSON & complex types.                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = double.NaN                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = new DateTimeOffset(2015' 2' 11' 12' 58' 0' TimeSpan.Zero)'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = "NaN"                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    // Select only the fields set in the test case so we don't get superfluous data back.                  IEnumerable<string> selectedFields = SelectPopulatedFields(indexedDoc);                    Document actualDoc = client.Documents.Get("1"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetDynamicDocumentCannotAlwaysDetermineCorrectType,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = "2015-02-11T12:58:00Z"'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)' // Test that we don't confuse Geo-JSON & complex types.                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = double.NaN                              }                          }                      };                    var expectedDoc =                      new Document()                      {                          ["hotelId"] = "1"'                          ["hotelName"] = new DateTimeOffset(2015' 2' 11' 12' 58' 0' TimeSpan.Zero)'                          ["location"] = GeographyPoint.Create(40.760586' -73.975403)'                          ["rooms"] = new[]                          {                              new Document()                              {                                  ["baseRate"] = "NaN"                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    // Select only the fields set in the test case so we don't get superfluous data back.                  IEnumerable<string> selectedFields = SelectPopulatedFields(indexedDoc);                    Document actualDoc = client.Documents.Get("1"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetStaticallyTypedDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetStaticallyTypedDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetStaticallyTypedDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetStaticallyTypedDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetStaticallyTypedDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetStaticallyTypedDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetStaticallyTypedDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetStaticallyTypedDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetStaticallyTypedDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetStaticallyTypedDocument,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new HotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentMappedToStruct,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new StructHotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new StructHotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    StructHotel actualDoc = client.Documents.Get<StructHotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentMappedToStruct,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new StructHotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new StructHotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    StructHotel actualDoc = client.Documents.Get<StructHotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentMappedToStruct,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new StructHotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new StructHotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    StructHotel actualDoc = client.Documents.Get<StructHotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentMappedToStruct,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new StructHotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new StructHotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    StructHotel actualDoc = client.Documents.Get<StructHotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentMappedToStruct,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new StructHotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new StructHotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    StructHotel actualDoc = client.Documents.Get<StructHotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentMappedToStruct,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new StructHotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new StructHotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    StructHotel actualDoc = client.Documents.Get<StructHotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentMappedToStruct,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new StructHotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new StructHotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    StructHotel actualDoc = client.Documents.Get<StructHotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentMappedToStruct,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new StructHotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new StructHotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    StructHotel actualDoc = client.Documents.Get<StructHotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentMappedToStruct,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new StructHotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new StructHotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    StructHotel actualDoc = client.Documents.Get<StructHotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentMappedToStruct,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var expectedDoc =                      new StructHotel()                      {                          HotelId = "1"'                          HotelName = "Secret Point Motel"'                          Description = "The hotel is ideally located on the main commercial artery of the city in the heart of New York. A few minutes away is Time's Square and the historic centre of the city' as well as other places of interest that make New York one of America's most attractive and cosmopolitan cities."'                          DescriptionFr = "L'hôtel est idéalement situé sur la principale artère commerciale de la ville en plein cœur de New York. A quelques minutes se trouve la place du temps et le centre historique de la ville' ainsi que d'autres lieux d'intérêt qui font de New York l'une des villes les plus attractives et cosmopolites de l'Amérique."'                          Category = "Boutique"'                          Tags = new[] { "pool"' "air conditioning"' "concierge" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1970' 1' 18' 0' 0' 0' TimeSpan.FromHours(-5))'                          Rating = 4'                          Location = GeographyPoint.Create(40.760586' -73.975403)'                          Address = new StructHotelAddress()                          {                              StreetAddress = "677 5th Ave"'                              City = "New York"'                              StateProvince = "NY"'                              Country = "USA"'                              PostalCode = "10022"                          }'                          Rooms = new[]                          {                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Cityside)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (côté ville)"'                                  Type = "Budget Room"'                                  BaseRate = 9.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd" }                              }'                              new StructHotelRoom()                              {                                  Description = "Budget Room' 1 King Bed (Mountain View)"'                                  DescriptionFr = "Chambre Économique' 1 très grand lit (Mountain View)"'                                  Type = "Budget Room"'                                  BaseRate = 8.09'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "vcr/dvd"' "jacuzzi tub" }                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    StructHotel actualDoc = client.Documents.Get<StructHotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentWithBase64EncodedKey,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                  string complexKey = WebEncoders.Base64UrlEncode(new byte[] { 1' 2' 3' 4' 5 });                    var expectedDoc = new Document() { ["hotelId"] = complexKey };                  var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get(complexKey' expectedDoc.Keys);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentWithBase64EncodedKey,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                  string complexKey = WebEncoders.Base64UrlEncode(new byte[] { 1' 2' 3' 4' 5 });                    var expectedDoc = new Document() { ["hotelId"] = complexKey };                  var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get(complexKey' expectedDoc.Keys);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentWithBase64EncodedKey,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                  string complexKey = WebEncoders.Base64UrlEncode(new byte[] { 1' 2' 3' 4' 5 });                    var expectedDoc = new Document() { ["hotelId"] = complexKey };                  var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get(complexKey' expectedDoc.Keys);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanGetDocumentWithBase64EncodedKey,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                  string complexKey = WebEncoders.Base64UrlEncode(new byte[] { 1' 2' 3' 4' 5 });                    var expectedDoc = new Document() { ["hotelId"] = complexKey };                  var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                  SearchTestUtilities.WaitForIndexing();                    Document actualDoc = client.Documents.Get(complexKey' expectedDoc.Keys);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,RoundTrippingDateTimeOffsetNormalizesToUtc,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "1"'                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 0' 0' 0' TimeSpan.FromHours(-8))                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          Tags = new string[0]'   // null arrays become empty arrays during indexing.                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 8' 0' 0' TimeSpan.Zero)                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,RoundTrippingDateTimeOffsetNormalizesToUtc,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "1"'                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 0' 0' 0' TimeSpan.FromHours(-8))                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          Tags = new string[0]'   // null arrays become empty arrays during indexing.                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 8' 0' 0' TimeSpan.Zero)                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,RoundTrippingDateTimeOffsetNormalizesToUtc,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "1"'                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 0' 0' 0' TimeSpan.FromHours(-8))                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          Tags = new string[0]'   // null arrays become empty arrays during indexing.                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 8' 0' 0' TimeSpan.Zero)                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,RoundTrippingDateTimeOffsetNormalizesToUtc,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "1"'                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 0' 0' 0' TimeSpan.FromHours(-8))                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          Tags = new string[0]'   // null arrays become empty arrays during indexing.                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 8' 0' 0' TimeSpan.Zero)                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,RoundTrippingDateTimeOffsetNormalizesToUtc,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "1"'                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 0' 0' 0' TimeSpan.FromHours(-8))                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          Tags = new string[0]'   // null arrays become empty arrays during indexing.                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 8' 0' 0' TimeSpan.Zero)                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,RoundTrippingDateTimeOffsetNormalizesToUtc,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "1"'                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 0' 0' 0' TimeSpan.FromHours(-8))                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          Tags = new string[0]'   // null arrays become empty arrays during indexing.                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 8' 0' 0' TimeSpan.Zero)                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,RoundTrippingDateTimeOffsetNormalizesToUtc,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "1"'                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 0' 0' 0' TimeSpan.FromHours(-8))                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          Tags = new string[0]'   // null arrays become empty arrays during indexing.                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 8' 0' 0' TimeSpan.Zero)                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,RoundTrippingDateTimeOffsetNormalizesToUtc,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "1"'                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 0' 0' 0' TimeSpan.FromHours(-8))                      };                    var expectedDoc =                      new Hotel()                      {                          HotelId = "1"'                          Tags = new string[0]'   // null arrays become empty arrays during indexing.                          LastRenovationDate = new DateTimeOffset(2010' 6' 27' 8' 0' 0' TimeSpan.Zero)                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  client.Documents.Index(batch);                    Hotel actualDoc = client.Documents.Get<Hotel>("1");                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetStaticallyTypedDocumentSetsUnselectedFieldsToNull,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "2"'                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                          Category = "Budget"'                          Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                          Rating = 3'                          Location = GeographyPoint.Create(35.904160' -78.940483)'                          Address = new HotelAddress()                          {                              StreetAddress = "6910 Fayetteville Rd"'                              City = "Durham"'                              StateProvince = "NC"'                              Country = "USA"'                              PostalCode = "27713"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Suite' 1 King Bed (Amenities)"'                                  DescriptionFr = "Suite' 1 très grand lit (Services)"'                                  Type = "Suite"'                                  BaseRate = 2.44'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "coffee maker" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Amenities)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                  Type = "Budget Room"'                                  BaseRate = 7.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = false'                                  Tags = new [] { "coffee maker" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          Address = new HotelAddress()                          {                              City = "Durham"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = 2.44                              }'                              new HotelRoom()                              {                                  BaseRate = 7.69                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  client.Documents.Index(batch);                    var selectedFields = new[] { "description"' "hotelName"' "address/city"' "rooms/baseRate" };                  Hotel actualDoc = client.Documents.Get<Hotel>("2"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetStaticallyTypedDocumentSetsUnselectedFieldsToNull,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "2"'                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                          Category = "Budget"'                          Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                          Rating = 3'                          Location = GeographyPoint.Create(35.904160' -78.940483)'                          Address = new HotelAddress()                          {                              StreetAddress = "6910 Fayetteville Rd"'                              City = "Durham"'                              StateProvince = "NC"'                              Country = "USA"'                              PostalCode = "27713"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Suite' 1 King Bed (Amenities)"'                                  DescriptionFr = "Suite' 1 très grand lit (Services)"'                                  Type = "Suite"'                                  BaseRate = 2.44'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "coffee maker" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Amenities)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                  Type = "Budget Room"'                                  BaseRate = 7.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = false'                                  Tags = new [] { "coffee maker" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          Address = new HotelAddress()                          {                              City = "Durham"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = 2.44                              }'                              new HotelRoom()                              {                                  BaseRate = 7.69                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  client.Documents.Index(batch);                    var selectedFields = new[] { "description"' "hotelName"' "address/city"' "rooms/baseRate" };                  Hotel actualDoc = client.Documents.Get<Hotel>("2"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetStaticallyTypedDocumentSetsUnselectedFieldsToNull,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "2"'                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                          Category = "Budget"'                          Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                          Rating = 3'                          Location = GeographyPoint.Create(35.904160' -78.940483)'                          Address = new HotelAddress()                          {                              StreetAddress = "6910 Fayetteville Rd"'                              City = "Durham"'                              StateProvince = "NC"'                              Country = "USA"'                              PostalCode = "27713"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Suite' 1 King Bed (Amenities)"'                                  DescriptionFr = "Suite' 1 très grand lit (Services)"'                                  Type = "Suite"'                                  BaseRate = 2.44'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "coffee maker" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Amenities)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                  Type = "Budget Room"'                                  BaseRate = 7.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = false'                                  Tags = new [] { "coffee maker" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          Address = new HotelAddress()                          {                              City = "Durham"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = 2.44                              }'                              new HotelRoom()                              {                                  BaseRate = 7.69                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  client.Documents.Index(batch);                    var selectedFields = new[] { "description"' "hotelName"' "address/city"' "rooms/baseRate" };                  Hotel actualDoc = client.Documents.Get<Hotel>("2"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetStaticallyTypedDocumentSetsUnselectedFieldsToNull,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "2"'                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                          Category = "Budget"'                          Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                          Rating = 3'                          Location = GeographyPoint.Create(35.904160' -78.940483)'                          Address = new HotelAddress()                          {                              StreetAddress = "6910 Fayetteville Rd"'                              City = "Durham"'                              StateProvince = "NC"'                              Country = "USA"'                              PostalCode = "27713"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Suite' 1 King Bed (Amenities)"'                                  DescriptionFr = "Suite' 1 très grand lit (Services)"'                                  Type = "Suite"'                                  BaseRate = 2.44'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "coffee maker" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Amenities)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                  Type = "Budget Room"'                                  BaseRate = 7.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = false'                                  Tags = new [] { "coffee maker" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          Address = new HotelAddress()                          {                              City = "Durham"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = 2.44                              }'                              new HotelRoom()                              {                                  BaseRate = 7.69                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  client.Documents.Index(batch);                    var selectedFields = new[] { "description"' "hotelName"' "address/city"' "rooms/baseRate" };                  Hotel actualDoc = client.Documents.Get<Hotel>("2"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetStaticallyTypedDocumentSetsUnselectedFieldsToNull,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "2"'                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                          Category = "Budget"'                          Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                          Rating = 3'                          Location = GeographyPoint.Create(35.904160' -78.940483)'                          Address = new HotelAddress()                          {                              StreetAddress = "6910 Fayetteville Rd"'                              City = "Durham"'                              StateProvince = "NC"'                              Country = "USA"'                              PostalCode = "27713"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Suite' 1 King Bed (Amenities)"'                                  DescriptionFr = "Suite' 1 très grand lit (Services)"'                                  Type = "Suite"'                                  BaseRate = 2.44'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "coffee maker" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Amenities)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                  Type = "Budget Room"'                                  BaseRate = 7.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = false'                                  Tags = new [] { "coffee maker" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          Address = new HotelAddress()                          {                              City = "Durham"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = 2.44                              }'                              new HotelRoom()                              {                                  BaseRate = 7.69                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  client.Documents.Index(batch);                    var selectedFields = new[] { "description"' "hotelName"' "address/city"' "rooms/baseRate" };                  Hotel actualDoc = client.Documents.Get<Hotel>("2"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetStaticallyTypedDocumentSetsUnselectedFieldsToNull,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "2"'                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                          Category = "Budget"'                          Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                          Rating = 3'                          Location = GeographyPoint.Create(35.904160' -78.940483)'                          Address = new HotelAddress()                          {                              StreetAddress = "6910 Fayetteville Rd"'                              City = "Durham"'                              StateProvince = "NC"'                              Country = "USA"'                              PostalCode = "27713"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Suite' 1 King Bed (Amenities)"'                                  DescriptionFr = "Suite' 1 très grand lit (Services)"'                                  Type = "Suite"'                                  BaseRate = 2.44'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "coffee maker" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Amenities)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                  Type = "Budget Room"'                                  BaseRate = 7.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = false'                                  Tags = new [] { "coffee maker" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          Address = new HotelAddress()                          {                              City = "Durham"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = 2.44                              }'                              new HotelRoom()                              {                                  BaseRate = 7.69                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  client.Documents.Index(batch);                    var selectedFields = new[] { "description"' "hotelName"' "address/city"' "rooms/baseRate" };                  Hotel actualDoc = client.Documents.Get<Hotel>("2"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetStaticallyTypedDocumentSetsUnselectedFieldsToNull,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "2"'                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                          Category = "Budget"'                          Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                          Rating = 3'                          Location = GeographyPoint.Create(35.904160' -78.940483)'                          Address = new HotelAddress()                          {                              StreetAddress = "6910 Fayetteville Rd"'                              City = "Durham"'                              StateProvince = "NC"'                              Country = "USA"'                              PostalCode = "27713"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Suite' 1 King Bed (Amenities)"'                                  DescriptionFr = "Suite' 1 très grand lit (Services)"'                                  Type = "Suite"'                                  BaseRate = 2.44'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "coffee maker" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Amenities)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                  Type = "Budget Room"'                                  BaseRate = 7.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = false'                                  Tags = new [] { "coffee maker" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          Address = new HotelAddress()                          {                              City = "Durham"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = 2.44                              }'                              new HotelRoom()                              {                                  BaseRate = 7.69                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  client.Documents.Index(batch);                    var selectedFields = new[] { "description"' "hotelName"' "address/city"' "rooms/baseRate" };                  Hotel actualDoc = client.Documents.Get<Hotel>("2"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetStaticallyTypedDocumentSetsUnselectedFieldsToNull,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "2"'                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                          Category = "Budget"'                          Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                          Rating = 3'                          Location = GeographyPoint.Create(35.904160' -78.940483)'                          Address = new HotelAddress()                          {                              StreetAddress = "6910 Fayetteville Rd"'                              City = "Durham"'                              StateProvince = "NC"'                              Country = "USA"'                              PostalCode = "27713"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Suite' 1 King Bed (Amenities)"'                                  DescriptionFr = "Suite' 1 très grand lit (Services)"'                                  Type = "Suite"'                                  BaseRate = 2.44'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "coffee maker" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Amenities)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                  Type = "Budget Room"'                                  BaseRate = 7.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = false'                                  Tags = new [] { "coffee maker" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          Address = new HotelAddress()                          {                              City = "Durham"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = 2.44                              }'                              new HotelRoom()                              {                                  BaseRate = 7.69                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  client.Documents.Index(batch);                    var selectedFields = new[] { "description"' "hotelName"' "address/city"' "rooms/baseRate" };                  Hotel actualDoc = client.Documents.Get<Hotel>("2"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetStaticallyTypedDocumentSetsUnselectedFieldsToNull,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "2"'                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                          Category = "Budget"'                          Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                          Rating = 3'                          Location = GeographyPoint.Create(35.904160' -78.940483)'                          Address = new HotelAddress()                          {                              StreetAddress = "6910 Fayetteville Rd"'                              City = "Durham"'                              StateProvince = "NC"'                              Country = "USA"'                              PostalCode = "27713"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Suite' 1 King Bed (Amenities)"'                                  DescriptionFr = "Suite' 1 très grand lit (Services)"'                                  Type = "Suite"'                                  BaseRate = 2.44'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "coffee maker" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Amenities)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                  Type = "Budget Room"'                                  BaseRate = 7.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = false'                                  Tags = new [] { "coffee maker" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          Address = new HotelAddress()                          {                              City = "Durham"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = 2.44                              }'                              new HotelRoom()                              {                                  BaseRate = 7.69                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  client.Documents.Index(batch);                    var selectedFields = new[] { "description"' "hotelName"' "address/city"' "rooms/baseRate" };                  Hotel actualDoc = client.Documents.Get<Hotel>("2"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetStaticallyTypedDocumentSetsUnselectedFieldsToNull,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "2"'                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                          Category = "Budget"'                          Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                          Rating = 3'                          Location = GeographyPoint.Create(35.904160' -78.940483)'                          Address = new HotelAddress()                          {                              StreetAddress = "6910 Fayetteville Rd"'                              City = "Durham"'                              StateProvince = "NC"'                              Country = "USA"'                              PostalCode = "27713"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Suite' 1 King Bed (Amenities)"'                                  DescriptionFr = "Suite' 1 très grand lit (Services)"'                                  Type = "Suite"'                                  BaseRate = 2.44'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "coffee maker" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Amenities)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                  Type = "Budget Room"'                                  BaseRate = 7.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = false'                                  Tags = new [] { "coffee maker" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          Address = new HotelAddress()                          {                              City = "Durham"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = 2.44                              }'                              new HotelRoom()                              {                                  BaseRate = 7.69                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  client.Documents.Index(batch);                    var selectedFields = new[] { "description"' "hotelName"' "address/city"' "rooms/baseRate" };                  Hotel actualDoc = client.Documents.Get<Hotel>("2"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetStaticallyTypedDocumentSetsUnselectedFieldsToNull,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "2"'                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                          Category = "Budget"'                          Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                          Rating = 3'                          Location = GeographyPoint.Create(35.904160' -78.940483)'                          Address = new HotelAddress()                          {                              StreetAddress = "6910 Fayetteville Rd"'                              City = "Durham"'                              StateProvince = "NC"'                              Country = "USA"'                              PostalCode = "27713"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Suite' 1 King Bed (Amenities)"'                                  DescriptionFr = "Suite' 1 très grand lit (Services)"'                                  Type = "Suite"'                                  BaseRate = 2.44'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "coffee maker" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Amenities)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                  Type = "Budget Room"'                                  BaseRate = 7.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = false'                                  Tags = new [] { "coffee maker" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          Address = new HotelAddress()                          {                              City = "Durham"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = 2.44                              }'                              new HotelRoom()                              {                                  BaseRate = 7.69                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  client.Documents.Index(batch);                    var selectedFields = new[] { "description"' "hotelName"' "address/city"' "rooms/baseRate" };                  Hotel actualDoc = client.Documents.Get<Hotel>("2"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,GetStaticallyTypedDocumentSetsUnselectedFieldsToNull,The following statement contains a magic number: Run(() =>              {                  SearchIndexClient client = Data.GetSearchIndexClient();                    var indexedDoc =                      new Hotel()                      {                          HotelId = "2"'                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          DescriptionFr = "Économisez jusqu'à 50% sur les hôtels traditionnels.  WiFi gratuit' très bien situé près du centre-ville' cuisine complète' laveuse & sécheuse' support 24/7' bowling' centre de fitness et plus encore."'                          Category = "Budget"'                          Tags = new[] { "24-hour front desk service"' "coffee in lobby"' "restaurant" }'                          ParkingIncluded = false'                          SmokingAllowed = true'                          LastRenovationDate = new DateTimeOffset(1999' 9' 6' 0' 0' 0' TimeSpan.Zero)'   //aka.ms/sre-codescan/disable                          Rating = 3'                          Location = GeographyPoint.Create(35.904160' -78.940483)'                          Address = new HotelAddress()                          {                              StreetAddress = "6910 Fayetteville Rd"'                              City = "Durham"'                              StateProvince = "NC"'                              Country = "USA"'                              PostalCode = "27713"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  Description = "Suite' 1 King Bed (Amenities)"'                                  DescriptionFr = "Suite' 1 très grand lit (Services)"'                                  Type = "Suite"'                                  BaseRate = 2.44'                                  BedOptions = "1 King Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = true'                                  Tags = new[] { "coffee maker" }                              }'                              new HotelRoom()                              {                                  Description = "Budget Room' 1 Queen Bed (Amenities)"'                                  DescriptionFr = "Chambre Économique' 1 grand lit (Services)"'                                  Type = "Budget Room"'                                  BaseRate = 7.69'                                  BedOptions = "1 Queen Bed"'                                  SleepsCount = 2'                                  SmokingAllowed = false'                                  Tags = new [] { "coffee maker" }                              }                          }                      };                    var expectedDoc =                      new Hotel()                      {                          HotelName = "Countryside Hotel"'                          Description = "Save up to 50% off traditional hotels.  Free WiFi' great location near downtown' full kitchen' washer & dryer' 24/7 support' bowling alley' fitness center and more."'                          Address = new HotelAddress()                          {                              City = "Durham"                          }'                          Rooms = new[]                          {                              new HotelRoom()                              {                                  BaseRate = 2.44                              }'                              new HotelRoom()                              {                                  BaseRate = 7.69                              }                          }                      };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  client.Documents.Index(batch);                    var selectedFields = new[] { "description"' "hotelName"' "address/city"' "rooms/baseRate" };                  Hotel actualDoc = client.Documents.Get<Hotel>("2"' selectedFields);                  Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,CanRoundtripStaticallyTypedPrimitiveCollections,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var expectedDoc =                      new ModelWithPrimitiveCollections()                      {                          Key = "1"'                          Bools = new[] { true' false }'                          Dates = new[]                          {                              new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                              new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                          }'                          Doubles = new[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                          Ints = new[] { 1' 2' 3' 4' -13' 5' 0 }'                          Longs = new[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                          Points = new[]                          {                              GeographyPoint.Create(49' -123)'                              GeographyPoint.Create(47' -121)                          }'                          Strings = new[]                          {                              "hello"'                              "2019-04-14T14:56:00-07:00"                          }                      };                    var batch = IndexBatch.Upload(new[] { expectedDoc });                  indexClient.Documents.Index(batch);                    var actualDoc = indexClient.Documents.Get<ModelWithPrimitiveCollections>(expectedDoc.Key);                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,LookupTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\LookupTests.cs,DynamicallyTypedPrimitiveCollectionsDoNotAllRoundtripCorrectly,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                    Index index = ModelWithPrimitiveCollections.CreateIndex();                  serviceClient.Indexes.Create(index);                    SearchIndexClient indexClient = Data.GetSearchIndexClient(index.Name);                    var indexedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new double[] { double.NegativeInfinity' 0.0' 2.78' double.NaN' 3.14' double.PositiveInfinity }'                      ["Ints"] = new int[] { 1' 2' 3' 4' -13' 5' 0 }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new string[]                      {                          "hello"'                          "2019-04-14T14:56:00-07:00"                      }                  };                    var expectedDoc = new Document()                  {                      ["Key"] = "1"'                      ["Bools"] = new bool[] { true' false }'                      ["Dates"] = new DateTimeOffset[]                      {                          new DateTimeOffset(2019' 4' 14' 14' 24' 0' TimeSpan.FromHours(-7))'                          new DateTimeOffset(1999' 12' 31' 23' 59' 59' TimeSpan.Zero)                      }'                      ["Doubles"] = new object[] { "-INF"' 0.0' 2.78' "NaN"' 3.14' "INF" }'                      ["Ints"] = new long[] { 1L' 2L' 3L' 4L' -13L' 5L' 0L }'                      ["Longs"] = new long[] { -9_999_999_999_999_999L' 832_372_345_832_523L }'                      ["Points"] = new GeographyPoint[]                      {                          GeographyPoint.Create(49' -123)'                          GeographyPoint.Create(47' -121)                      }'                      ["Strings"] = new object[]                      {                          "hello"'                          new DateTimeOffset(2019' 4' 14' 14' 56' 0' TimeSpan.FromHours(-7))                      }                  };                    var batch = IndexBatch.Upload(new[] { indexedDoc });                  indexClient.Documents.Index(batch);                    Document actualDoc = indexClient.Documents.Get("1");                    Assert.Equal(expectedDoc' actualDoc);              });
Magic Number,Microsoft.Azure.Search.Tests,SearchServiceClientTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchServiceClientTests.cs,IndexClientHasSameTimeoutAsSearchClient,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient serviceClient = Data.GetSearchServiceClient();                  serviceClient.HttpClient.Timeout = TimeSpan.FromMinutes(30);                    SearchIndexClient indexClient = (SearchIndexClient)serviceClient.Indexes.GetClient("test");                    Assert.Equal(serviceClient.HttpClient.Timeout' indexClient.HttpClient.Timeout);              });
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanUseHitHighlighting,The following statement contains a magic number: Assert.Equal(2' highlights.Keys.Count);
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithSelectedFields,The following statement contains a magic number: var expectedDocs = new[]              {                  new Hotel() { HotelName = "Fancy Stay"' Rating = 5 }'                  new Hotel()                  {                      HotelName = "Secret Point Motel"'                      Rating = 4'                      Address = new HotelAddress() { City = "New York" }'                      Rooms = new[] { new HotelRoom() { Type = "Budget Room" }' new HotelRoom() { Type = "Budget Room" } }                  }              }.OrderBy(hotel => hotel.HotelName);
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithSelectedFields,The following statement contains a magic number: var expectedDocs = new[]              {                  new Hotel() { HotelName = "Fancy Stay"' Rating = 5 }'                  new Hotel()                  {                      HotelName = "Secret Point Motel"'                      Rating = 4'                      Address = new HotelAddress() { City = "New York" }'                      Rooms = new[] { new HotelRoom() { Type = "Budget Room" }' new HotelRoom() { Type = "Budget Room" } }                  }              }.OrderBy(hotel => hotel.HotelName);
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithSynonyms,The following statement contains a magic number: var expectedDoc = new Hotel() { HotelName = "Fancy Stay"' Rating = 5 };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanUseTopAndSkipForClientSidePaging,The following statement contains a magic number: var searchParameters = new SearchParameters() { Top = 3' Skip = 0' OrderBy = new[] { "hotelId" } };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanUseTopAndSkipForClientSidePaging,The following statement contains a magic number: searchParameters.Skip = 3;
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestSearchWithScoringProfileBoostsScore,The following statement contains a magic number: var searchParameters =                   new SearchParameters()                   {                       ScoringProfile = "nearest"'                       ScoringParameters = new[] { new ScoringParameter("myloc"' GeographyPoint.Create(49' -122)) }'                      Filter = "rating eq 5 or rating eq 1"                  };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestSearchWithScoringProfileBoostsScore,The following statement contains a magic number: var searchParameters =                   new SearchParameters()                   {                       ScoringProfile = "nearest"'                       ScoringParameters = new[] { new ScoringParameter("myloc"' GeographyPoint.Create(49' -122)) }'                      Filter = "rating eq 5 or rating eq 1"                  };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithRangeFacets,The following statement contains a magic number: AssertRangeFacetsEqual(                  GetRangeFacetsForField<double>(response.Facets' "rooms/baseRate"' 4)'                  new RangeFacetResult<double>(count: 1' from: null' to: 5.0)'                  new RangeFacetResult<double>(count: 1' from: 5.0' to: 8.0)'                  new RangeFacetResult<double>(count: 1' from: 8.0' to: 10.0)'                  new RangeFacetResult<double>(count: 0' from: 10.0' to: null));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithRangeFacets,The following statement contains a magic number: AssertRangeFacetsEqual(                  GetRangeFacetsForField<double>(response.Facets' "rooms/baseRate"' 4)'                  new RangeFacetResult<double>(count: 1' from: null' to: 5.0)'                  new RangeFacetResult<double>(count: 1' from: 5.0' to: 8.0)'                  new RangeFacetResult<double>(count: 1' from: 8.0' to: 10.0)'                  new RangeFacetResult<double>(count: 0' from: 10.0' to: null));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithRangeFacets,The following statement contains a magic number: AssertRangeFacetsEqual(                  GetRangeFacetsForField<double>(response.Facets' "rooms/baseRate"' 4)'                  new RangeFacetResult<double>(count: 1' from: null' to: 5.0)'                  new RangeFacetResult<double>(count: 1' from: 5.0' to: 8.0)'                  new RangeFacetResult<double>(count: 1' from: 8.0' to: 10.0)'                  new RangeFacetResult<double>(count: 0' from: 10.0' to: null));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithRangeFacets,The following statement contains a magic number: AssertRangeFacetsEqual(                  GetRangeFacetsForField<double>(response.Facets' "rooms/baseRate"' 4)'                  new RangeFacetResult<double>(count: 1' from: null' to: 5.0)'                  new RangeFacetResult<double>(count: 1' from: 5.0' to: 8.0)'                  new RangeFacetResult<double>(count: 1' from: 8.0' to: 10.0)'                  new RangeFacetResult<double>(count: 0' from: 10.0' to: null));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithRangeFacets,The following statement contains a magic number: AssertRangeFacetsEqual(                  GetRangeFacetsForField<double>(response.Facets' "rooms/baseRate"' 4)'                  new RangeFacetResult<double>(count: 1' from: null' to: 5.0)'                  new RangeFacetResult<double>(count: 1' from: 5.0' to: 8.0)'                  new RangeFacetResult<double>(count: 1' from: 8.0' to: 10.0)'                  new RangeFacetResult<double>(count: 0' from: 10.0' to: null));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithRangeFacets,The following statement contains a magic number: AssertRangeFacetsEqual(                  GetRangeFacetsForField<double>(response.Facets' "rooms/baseRate"' 4)'                  new RangeFacetResult<double>(count: 1' from: null' to: 5.0)'                  new RangeFacetResult<double>(count: 1' from: 5.0' to: 8.0)'                  new RangeFacetResult<double>(count: 1' from: 8.0' to: 10.0)'                  new RangeFacetResult<double>(count: 0' from: 10.0' to: null));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithRangeFacets,The following statement contains a magic number: AssertRangeFacetsEqual(                  GetRangeFacetsForField<double>(response.Facets' "rooms/baseRate"' 4)'                  new RangeFacetResult<double>(count: 1' from: null' to: 5.0)'                  new RangeFacetResult<double>(count: 1' from: 5.0' to: 8.0)'                  new RangeFacetResult<double>(count: 1' from: 8.0' to: 10.0)'                  new RangeFacetResult<double>(count: 0' from: 10.0' to: null));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithRangeFacets,The following statement contains a magic number: AssertRangeFacetsEqual(                  GetRangeFacetsForField<DateTimeOffset>(response.Facets' "lastRenovationDate"' 2)'                  new RangeFacetResult<DateTimeOffset>(count: 5' from: null' to: new DateTimeOffset(2000' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new RangeFacetResult<DateTimeOffset>(count: 2' from: new DateTimeOffset(2000' 1' 1' 0' 0' 0' TimeSpan.Zero)' to: null));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithRangeFacets,The following statement contains a magic number: AssertRangeFacetsEqual(                  GetRangeFacetsForField<DateTimeOffset>(response.Facets' "lastRenovationDate"' 2)'                  new RangeFacetResult<DateTimeOffset>(count: 5' from: null' to: new DateTimeOffset(2000' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new RangeFacetResult<DateTimeOffset>(count: 2' from: new DateTimeOffset(2000' 1' 1' 0' 0' 0' TimeSpan.Zero)' to: null));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithRangeFacets,The following statement contains a magic number: AssertRangeFacetsEqual(                  GetRangeFacetsForField<DateTimeOffset>(response.Facets' "lastRenovationDate"' 2)'                  new RangeFacetResult<DateTimeOffset>(count: 5' from: null' to: new DateTimeOffset(2000' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new RangeFacetResult<DateTimeOffset>(count: 2' from: new DateTimeOffset(2000' 1' 1' 0' 0' 0' TimeSpan.Zero)' to: null));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithRangeFacets,The following statement contains a magic number: AssertRangeFacetsEqual(                  GetRangeFacetsForField<DateTimeOffset>(response.Facets' "lastRenovationDate"' 2)'                  new RangeFacetResult<DateTimeOffset>(count: 5' from: null' to: new DateTimeOffset(2000' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new RangeFacetResult<DateTimeOffset>(count: 2' from: new DateTimeOffset(2000' 1' 1' 0' 0' 0' TimeSpan.Zero)' to: null));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithRangeFacets,The following statement contains a magic number: AssertRangeFacetsEqual(                  GetRangeFacetsForField<DateTimeOffset>(response.Facets' "lastRenovationDate"' 2)'                  new RangeFacetResult<DateTimeOffset>(count: 5' from: null' to: new DateTimeOffset(2000' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new RangeFacetResult<DateTimeOffset>(count: 2' from: new DateTimeOffset(2000' 1' 1' 0' 0' 0' TimeSpan.Zero)' to: null));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<long>(response.Facets' "rating"' 2)'                   new ValueFacetResult<long>(1' 5)'                   new ValueFacetResult<long>(4' 4));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<long>(response.Facets' "rating"' 2)'                   new ValueFacetResult<long>(1' 5)'                   new ValueFacetResult<long>(4' 4));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<long>(response.Facets' "rating"' 2)'                   new ValueFacetResult<long>(1' 5)'                   new ValueFacetResult<long>(4' 4));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<long>(response.Facets' "rating"' 2)'                   new ValueFacetResult<long>(1' 5)'                   new ValueFacetResult<long>(4' 4));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<bool>(response.Facets' "smokingAllowed"' 2)'                   new ValueFacetResult<bool>(4' false)'                   new ValueFacetResult<bool>(3' true));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<bool>(response.Facets' "smokingAllowed"' 2)'                   new ValueFacetResult<bool>(4' false)'                   new ValueFacetResult<bool>(3' true));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<bool>(response.Facets' "smokingAllowed"' 2)'                   new ValueFacetResult<bool>(4' false)'                   new ValueFacetResult<bool>(3' true));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<string>(response.Facets' "category"' 3)'                  new ValueFacetResult<string>(5' "Budget")'                  new ValueFacetResult<string>(1' "Boutique")'                  new ValueFacetResult<string>(1' "Luxury"));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<string>(response.Facets' "category"' 3)'                  new ValueFacetResult<string>(5' "Budget")'                  new ValueFacetResult<string>(1' "Boutique")'                  new ValueFacetResult<string>(1' "Luxury"));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<DateTimeOffset>(response.Facets' "lastRenovationDate"' 6)'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1970' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1982' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(2' new DateTimeOffset(1995' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1999' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2010' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2012' 1' 1' 0' 0' 0' TimeSpan.Zero)));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<DateTimeOffset>(response.Facets' "lastRenovationDate"' 6)'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1970' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1982' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(2' new DateTimeOffset(1995' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1999' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2010' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2012' 1' 1' 0' 0' 0' TimeSpan.Zero)));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<DateTimeOffset>(response.Facets' "lastRenovationDate"' 6)'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1970' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1982' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(2' new DateTimeOffset(1995' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1999' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2010' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2012' 1' 1' 0' 0' 0' TimeSpan.Zero)));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<DateTimeOffset>(response.Facets' "lastRenovationDate"' 6)'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1970' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1982' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(2' new DateTimeOffset(1995' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1999' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2010' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2012' 1' 1' 0' 0' 0' TimeSpan.Zero)));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<DateTimeOffset>(response.Facets' "lastRenovationDate"' 6)'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1970' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1982' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(2' new DateTimeOffset(1995' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1999' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2010' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2012' 1' 1' 0' 0' 0' TimeSpan.Zero)));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<DateTimeOffset>(response.Facets' "lastRenovationDate"' 6)'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1970' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1982' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(2' new DateTimeOffset(1995' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1999' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2010' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2012' 1' 1' 0' 0' 0' TimeSpan.Zero)));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<DateTimeOffset>(response.Facets' "lastRenovationDate"' 6)'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1970' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1982' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(2' new DateTimeOffset(1995' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1999' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2010' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2012' 1' 1' 0' 0' 0' TimeSpan.Zero)));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<DateTimeOffset>(response.Facets' "lastRenovationDate"' 6)'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1970' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1982' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(2' new DateTimeOffset(1995' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(1999' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2010' 1' 1' 0' 0' 0' TimeSpan.Zero))'                  new ValueFacetResult<DateTimeOffset>(1' new DateTimeOffset(2012' 1' 1' 0' 0' 0' TimeSpan.Zero)));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<double>(response.Facets' "rooms/baseRate"' 4)'                  new ValueFacetResult<double>(1' 2.44)'                  new ValueFacetResult<double>(1' 7.69)'                  new ValueFacetResult<double>(1' 8.09)'                  new ValueFacetResult<double>(1' 9.69));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<double>(response.Facets' "rooms/baseRate"' 4)'                  new ValueFacetResult<double>(1' 2.44)'                  new ValueFacetResult<double>(1' 7.69)'                  new ValueFacetResult<double>(1' 8.09)'                  new ValueFacetResult<double>(1' 9.69));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<double>(response.Facets' "rooms/baseRate"' 4)'                  new ValueFacetResult<double>(1' 2.44)'                  new ValueFacetResult<double>(1' 7.69)'                  new ValueFacetResult<double>(1' 8.09)'                  new ValueFacetResult<double>(1' 9.69));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<double>(response.Facets' "rooms/baseRate"' 4)'                  new ValueFacetResult<double>(1' 2.44)'                  new ValueFacetResult<double>(1' 7.69)'                  new ValueFacetResult<double>(1' 8.09)'                  new ValueFacetResult<double>(1' 9.69));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<double>(response.Facets' "rooms/baseRate"' 4)'                  new ValueFacetResult<double>(1' 2.44)'                  new ValueFacetResult<double>(1' 7.69)'                  new ValueFacetResult<double>(1' 8.09)'                  new ValueFacetResult<double>(1' 9.69));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<string>(response.Facets' "tags"' 10)'                  new ValueFacetResult<string>(1' "24-hour front desk service")'                  new ValueFacetResult<string>(1' "air conditioning")'                  new ValueFacetResult<string>(4' "budget")'                  new ValueFacetResult<string>(1' "coffee in lobby")'                  new ValueFacetResult<string>(2' "concierge")'                  new ValueFacetResult<string>(1' "motel")'                  new ValueFacetResult<string>(2' "pool")'                  new ValueFacetResult<string>(1' "restaurant")'                  new ValueFacetResult<string>(1' "view")'                  new ValueFacetResult<string>(4' "wifi"));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<string>(response.Facets' "tags"' 10)'                  new ValueFacetResult<string>(1' "24-hour front desk service")'                  new ValueFacetResult<string>(1' "air conditioning")'                  new ValueFacetResult<string>(4' "budget")'                  new ValueFacetResult<string>(1' "coffee in lobby")'                  new ValueFacetResult<string>(2' "concierge")'                  new ValueFacetResult<string>(1' "motel")'                  new ValueFacetResult<string>(2' "pool")'                  new ValueFacetResult<string>(1' "restaurant")'                  new ValueFacetResult<string>(1' "view")'                  new ValueFacetResult<string>(4' "wifi"));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<string>(response.Facets' "tags"' 10)'                  new ValueFacetResult<string>(1' "24-hour front desk service")'                  new ValueFacetResult<string>(1' "air conditioning")'                  new ValueFacetResult<string>(4' "budget")'                  new ValueFacetResult<string>(1' "coffee in lobby")'                  new ValueFacetResult<string>(2' "concierge")'                  new ValueFacetResult<string>(1' "motel")'                  new ValueFacetResult<string>(2' "pool")'                  new ValueFacetResult<string>(1' "restaurant")'                  new ValueFacetResult<string>(1' "view")'                  new ValueFacetResult<string>(4' "wifi"));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<string>(response.Facets' "tags"' 10)'                  new ValueFacetResult<string>(1' "24-hour front desk service")'                  new ValueFacetResult<string>(1' "air conditioning")'                  new ValueFacetResult<string>(4' "budget")'                  new ValueFacetResult<string>(1' "coffee in lobby")'                  new ValueFacetResult<string>(2' "concierge")'                  new ValueFacetResult<string>(1' "motel")'                  new ValueFacetResult<string>(2' "pool")'                  new ValueFacetResult<string>(1' "restaurant")'                  new ValueFacetResult<string>(1' "view")'                  new ValueFacetResult<string>(4' "wifi"));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithValueFacets,The following statement contains a magic number: AssertValueFacetsEqual(                  GetValueFacetsForField<string>(response.Facets' "tags"' 10)'                  new ValueFacetResult<string>(1' "24-hour front desk service")'                  new ValueFacetResult<string>(1' "air conditioning")'                  new ValueFacetResult<string>(4' "budget")'                  new ValueFacetResult<string>(1' "coffee in lobby")'                  new ValueFacetResult<string>(2' "concierge")'                  new ValueFacetResult<string>(1' "motel")'                  new ValueFacetResult<string>(2' "pool")'                  new ValueFacetResult<string>(1' "restaurant")'                  new ValueFacetResult<string>(1' "view")'                  new ValueFacetResult<string>(4' "wifi"));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchForStaticallyTypedDocuments,The following statement contains a magic number: IEnumerable<string> hotelIds = Data.IndexDocuments(client' 2001);
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchForStaticallyTypedDocuments,The following statement contains a magic number: var searchParameters =                  new SearchParameters()                  {                      Top = 3000'                      OrderBy = new[] { "hotelId asc" }'                      Select = new[] { "hotelId" }                  };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchForStaticallyTypedDocuments,The following statement contains a magic number: AssertKeySequenceEqual(response' expectedIds.Take(1000).ToArray());
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchForStaticallyTypedDocuments,The following statement contains a magic number: AssertKeySequenceEqual(response' expectedIds.Skip(1000).Take(1000).ToArray());
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchForStaticallyTypedDocuments,The following statement contains a magic number: AssertKeySequenceEqual(response' expectedIds.Skip(1000).Take(1000).ToArray());
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchForDynamicDocuments,The following statement contains a magic number: IEnumerable<string> hotelIds = Data.IndexDocuments(client' 2001);
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchForDynamicDocuments,The following statement contains a magic number: var searchParameters =                  new SearchParameters()                  {                      Top = 3000'                      OrderBy = new[] { "hotelId asc" }'                      Select = new[] { "hotelId" }                  };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchForDynamicDocuments,The following statement contains a magic number: AssertKeySequenceEqual(response' expectedIds.Take(1000).ToArray());
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchForDynamicDocuments,The following statement contains a magic number: AssertKeySequenceEqual(response' expectedIds.Skip(1000).Take(1000).ToArray());
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchForDynamicDocuments,The following statement contains a magic number: AssertKeySequenceEqual(response' expectedIds.Skip(1000).Take(1000).ToArray());
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchWithoutTop,The following statement contains a magic number: IEnumerable<string> hotelIds = Data.IndexDocuments(client' 167);
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchWithoutTop,The following statement contains a magic number: AssertKeySequenceEqual(response' expectedIds.Take(50).ToArray());
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchWithoutTop,The following statement contains a magic number: AssertKeySequenceEqual(response' expectedIds.Skip(50).Take(50).ToArray());
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchWithoutTop,The following statement contains a magic number: AssertKeySequenceEqual(response' expectedIds.Skip(50).Take(50).ToArray());
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchWithoutTop,The following statement contains a magic number: AssertKeySequenceEqual(response' expectedIds.Skip(100).Take(50).ToArray());
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchWithoutTop,The following statement contains a magic number: AssertKeySequenceEqual(response' expectedIds.Skip(100).Take(50).ToArray());
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanContinueSearchWithoutTop,The following statement contains a magic number: AssertKeySequenceEqual(response' expectedIds.Skip(150).ToArray());
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithMinimumCoverage,The following statement contains a magic number: var parameters = new SearchParameters() { MinimumCoverage = 50 };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithMinimumCoverage,The following statement contains a magic number: Assert.Equal(100' response.Coverage);
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithDateTimeInStaticModel,The following statement contains a magic number: var doc2 = new Book() { ISBN = "456"' Title = "War and Peace"' PublishDate = new DateTime(2015' 8' 18) };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithDateTimeInStaticModel,The following statement contains a magic number: var doc2 = new Book() { ISBN = "456"' Title = "War and Peace"' PublishDate = new DateTime(2015' 8' 18) };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithDateTimeInStaticModel,The following statement contains a magic number: var doc2 = new Book() { ISBN = "456"' Title = "War and Peace"' PublishDate = new DateTime(2015' 8' 18) };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanRoundTripNonNullableValueTypes,The following statement contains a magic number: var startDate = new DateTimeOffset(2015' 11' 24' 14' 01' 00' TimeSpan.FromHours(-8));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanRoundTripNonNullableValueTypes,The following statement contains a magic number: var startDate = new DateTimeOffset(2015' 11' 24' 14' 01' 00' TimeSpan.FromHours(-8));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanRoundTripNonNullableValueTypes,The following statement contains a magic number: var startDate = new DateTimeOffset(2015' 11' 24' 14' 01' 00' TimeSpan.FromHours(-8));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanRoundTripNonNullableValueTypes,The following statement contains a magic number: var startDate = new DateTimeOffset(2015' 11' 24' 14' 01' 00' TimeSpan.FromHours(-8));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanRoundTripNonNullableValueTypes,The following statement contains a magic number: var startDate = new DateTimeOffset(2015' 11' 24' 14' 01' 00' TimeSpan.FromHours(-8));
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanRoundTripNonNullableValueTypes,The following statement contains a magic number: DateTime endDate = startDate.UtcDateTime + TimeSpan.FromDays(15);
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanRoundTripNonNullableValueTypes,The following statement contains a magic number: var doc1 = new NonNullableModel()               {                   Key = "123"'                   Count = 3'                   EndDate = endDate'                   IsEnabled = true'                   Rating = 5'                   Ratio = 3.14'                   StartDate = startDate'                  TopLevelBucket = new Bucket() { BucketName =  "A"' Count = 12 }'                  Buckets = new[]                  {                      new Bucket() { BucketName = "B"' Count = 20 }'                      new Bucket() { BucketName = "C"' Count = 7 }                  }              };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanRoundTripNonNullableValueTypes,The following statement contains a magic number: var doc1 = new NonNullableModel()               {                   Key = "123"'                   Count = 3'                   EndDate = endDate'                   IsEnabled = true'                   Rating = 5'                   Ratio = 3.14'                   StartDate = startDate'                  TopLevelBucket = new Bucket() { BucketName =  "A"' Count = 12 }'                  Buckets = new[]                  {                      new Bucket() { BucketName = "B"' Count = 20 }'                      new Bucket() { BucketName = "C"' Count = 7 }                  }              };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanRoundTripNonNullableValueTypes,The following statement contains a magic number: var doc1 = new NonNullableModel()               {                   Key = "123"'                   Count = 3'                   EndDate = endDate'                   IsEnabled = true'                   Rating = 5'                   Ratio = 3.14'                   StartDate = startDate'                  TopLevelBucket = new Bucket() { BucketName =  "A"' Count = 12 }'                  Buckets = new[]                  {                      new Bucket() { BucketName = "B"' Count = 20 }'                      new Bucket() { BucketName = "C"' Count = 7 }                  }              };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanRoundTripNonNullableValueTypes,The following statement contains a magic number: var doc1 = new NonNullableModel()               {                   Key = "123"'                   Count = 3'                   EndDate = endDate'                   IsEnabled = true'                   Rating = 5'                   Ratio = 3.14'                   StartDate = startDate'                  TopLevelBucket = new Bucket() { BucketName =  "A"' Count = 12 }'                  Buckets = new[]                  {                      new Bucket() { BucketName = "B"' Count = 20 }'                      new Bucket() { BucketName = "C"' Count = 7 }                  }              };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanRoundTripNonNullableValueTypes,The following statement contains a magic number: var doc1 = new NonNullableModel()               {                   Key = "123"'                   Count = 3'                   EndDate = endDate'                   IsEnabled = true'                   Rating = 5'                   Ratio = 3.14'                   StartDate = startDate'                  TopLevelBucket = new Bucket() { BucketName =  "A"' Count = 12 }'                  Buckets = new[]                  {                      new Bucket() { BucketName = "B"' Count = 20 }'                      new Bucket() { BucketName = "C"' Count = 7 }                  }              };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanRoundTripNonNullableValueTypes,The following statement contains a magic number: var doc1 = new NonNullableModel()               {                   Key = "123"'                   Count = 3'                   EndDate = endDate'                   IsEnabled = true'                   Rating = 5'                   Ratio = 3.14'                   StartDate = startDate'                  TopLevelBucket = new Bucket() { BucketName =  "A"' Count = 12 }'                  Buckets = new[]                  {                      new Bucket() { BucketName = "B"' Count = 20 }'                      new Bucket() { BucketName = "C"' Count = 7 }                  }              };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanRoundTripNonNullableValueTypes,The following statement contains a magic number: Assert.Equal(2' response.Results.Count);
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestNullCannotBeConvertedToValueType,The following statement contains a magic number: var batch =                  IndexBatch.Upload(new[]                  {                      new ModelWithNullableValueTypes()                      {                          Key = "123"'                          IntValue = null'                          Bucket = new Bucket() { BucketName = "Z"' Count = 1 }                      }'                      new ModelWithNullableValueTypes()                      {                          Key = "456"'                          IntValue = 5'                          Bucket = null                      }                  });
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanFilterNonNullableType,The following statement contains a magic number: var docs = new[]              {                  new ModelWithValueTypes() { Key = "123"' IntValue = 0' Bucket = new Bucket() { BucketName = "A"' Count = 3 } }'                  new ModelWithValueTypes() { Key = "456"' IntValue = 7' Bucket = new Bucket() { BucketName = "B"' Count = 5 } }'                  new ModelWithValueTypes() { Key = "789"' IntValue = 1' Bucket = new Bucket() { BucketName = "B"' Count = 99 } }              };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanFilterNonNullableType,The following statement contains a magic number: var docs = new[]              {                  new ModelWithValueTypes() { Key = "123"' IntValue = 0' Bucket = new Bucket() { BucketName = "A"' Count = 3 } }'                  new ModelWithValueTypes() { Key = "456"' IntValue = 7' Bucket = new Bucket() { BucketName = "B"' Count = 5 } }'                  new ModelWithValueTypes() { Key = "789"' IntValue = 1' Bucket = new Bucket() { BucketName = "B"' Count = 99 } }              };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanFilterNonNullableType,The following statement contains a magic number: var docs = new[]              {                  new ModelWithValueTypes() { Key = "123"' IntValue = 0' Bucket = new Bucket() { BucketName = "A"' Count = 3 } }'                  new ModelWithValueTypes() { Key = "456"' IntValue = 7' Bucket = new Bucket() { BucketName = "B"' Count = 5 } }'                  new ModelWithValueTypes() { Key = "789"' IntValue = 1' Bucket = new Bucket() { BucketName = "B"' Count = 99 } }              };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanFilterNonNullableType,The following statement contains a magic number: var docs = new[]              {                  new ModelWithValueTypes() { Key = "123"' IntValue = 0' Bucket = new Bucket() { BucketName = "A"' Count = 3 } }'                  new ModelWithValueTypes() { Key = "456"' IntValue = 7' Bucket = new Bucket() { BucketName = "B"' Count = 5 } }'                  new ModelWithValueTypes() { Key = "789"' IntValue = 1' Bucket = new Bucket() { BucketName = "B"' Count = 99 } }              };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithCustomConverter,The following statement contains a magic number: var doc = new TBook()              {                  InternationalStandardBookNumber = "123"'                  Name = "Lord of the Rings"'                  AuthorName = new TAuthor() { FullName = "J.R.R. Tolkien" }'                  PublishDateTime = new DateTime(1954' 7' 29)              };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithCustomConverter,The following statement contains a magic number: var doc = new TBook()              {                  InternationalStandardBookNumber = "123"'                  Name = "Lord of the Rings"'                  AuthorName = new TAuthor() { FullName = "J.R.R. Tolkien" }'                  PublishDateTime = new DateTime(1954' 7' 29)              };
Magic Number,Microsoft.Azure.Search.Tests,SearchTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SearchTests.cs,TestCanSearchWithCustomConverter,The following statement contains a magic number: var doc = new TBook()              {                  InternationalStandardBookNumber = "123"'                  Name = "Lord of the Rings"'                  AuthorName = new TAuthor() { FullName = "J.R.R. Tolkien" }'                  PublishDateTime = new DateTime(1954' 7' 29)              };
Magic Number,Microsoft.Azure.Search.Tests,Functional,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,AnnotationsAreExcludedFromDocument,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["field1"] = "value1"'                          ["field2"] = 123L'                          ["field3"] = 2.78                      };
Magic Number,Microsoft.Azure.Search.Tests,Functional,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,AnnotationsAreExcludedFromDocument,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["field1"] = "value1"'                          ["field2"] = 123L'                          ["field3"] = 2.78                      };
Magic Number,Microsoft.Azure.Search.Tests,Functional,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadNullValues,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["field1"] = null'                          ["field2"] = new string[] { "hello"' null }'                          ["field3"] = new object[] { null' 123L' null }'                          ["field4"] = new object[] { null' new Document() { ["name"] = "Bob" } }                      };
Magic Number,Microsoft.Azure.Search.Tests,Functional,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadGeoPoint,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["field"] = GeographyPoint.Create(latitude: 47.678581' longitude: -122.131577)                      };
Magic Number,Microsoft.Azure.Search.Tests,Functional,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadGeoPoint,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["field"] = GeographyPoint.Create(latitude: 47.678581' longitude: -122.131577)                      };
Magic Number,Microsoft.Azure.Search.Tests,Functional,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadGeoPointCollection,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["field"] = new[]                          {                              GeographyPoint.Create(latitude: 47.678581' longitude: -122.131577)'                              GeographyPoint.Create(latitude: 49' longitude: -121)                          }                      };
Magic Number,Microsoft.Azure.Search.Tests,Functional,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadGeoPointCollection,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["field"] = new[]                          {                              GeographyPoint.Create(latitude: 47.678581' longitude: -122.131577)'                              GeographyPoint.Create(latitude: 49' longitude: -121)                          }                      };
Magic Number,Microsoft.Azure.Search.Tests,Functional,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadGeoPointCollection,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["field"] = new[]                          {                              GeographyPoint.Create(latitude: 47.678581' longitude: -122.131577)'                              GeographyPoint.Create(latitude: 49' longitude: -121)                          }                      };
Magic Number,Microsoft.Azure.Search.Tests,Functional,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadGeoPointCollection,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["field"] = new[]                          {                              GeographyPoint.Create(latitude: 47.678581' longitude: -122.131577)'                              GeographyPoint.Create(latitude: 49' longitude: -121)                          }                      };
Magic Number,Microsoft.Azure.Search.Tests,Functional,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadComplexObject,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["name"] = "Boots"'                          ["details"] = new Document()                          {                              ["sku"] = 123L'                              ["seasons"] = new string[] { "fall"' "winter" }                          }                      };
Magic Number,Microsoft.Azure.Search.Tests,Functional,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadComplexCollection,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["stores"] = new[]                          {                              new Document()                              {                                  ["name"] = "North"'                                  ["address"] = new Document()                                  {                                      ["city"] = "Vancouver"'                                      ["country"] = "Canada"                                  }'                                  ["location"] = GeographyPoint.Create(latitude: 49' longitude: -121)                              }'                              new Document()                              {                                  ["name"] = "South"'                                  ["address"] = new Document()                                  {                                      ["city"] = "Seattle"'                                      ["country"] = "USA"                                  }'                                  ["location"] = GeographyPoint.Create(latitude: 47.6' longitude: -122.5)                              }                          }                      };
Magic Number,Microsoft.Azure.Search.Tests,Functional,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadComplexCollection,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["stores"] = new[]                          {                              new Document()                              {                                  ["name"] = "North"'                                  ["address"] = new Document()                                  {                                      ["city"] = "Vancouver"'                                      ["country"] = "Canada"                                  }'                                  ["location"] = GeographyPoint.Create(latitude: 49' longitude: -121)                              }'                              new Document()                              {                                  ["name"] = "South"'                                  ["address"] = new Document()                                  {                                      ["city"] = "Seattle"'                                      ["country"] = "USA"                                  }'                                  ["location"] = GeographyPoint.Create(latitude: 47.6' longitude: -122.5)                              }                          }                      };
Magic Number,Microsoft.Azure.Search.Tests,Functional,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadComplexCollection,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["stores"] = new[]                          {                              new Document()                              {                                  ["name"] = "North"'                                  ["address"] = new Document()                                  {                                      ["city"] = "Vancouver"'                                      ["country"] = "Canada"                                  }'                                  ["location"] = GeographyPoint.Create(latitude: 49' longitude: -121)                              }'                              new Document()                              {                                  ["name"] = "South"'                                  ["address"] = new Document()                                  {                                      ["city"] = "Seattle"'                                      ["country"] = "USA"                                  }'                                  ["location"] = GeographyPoint.Create(latitude: 47.6' longitude: -122.5)                              }                          }                      };
Magic Number,Microsoft.Azure.Search.Tests,Functional,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadComplexCollection,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["stores"] = new[]                          {                              new Document()                              {                                  ["name"] = "North"'                                  ["address"] = new Document()                                  {                                      ["city"] = "Vancouver"'                                      ["country"] = "Canada"                                  }'                                  ["location"] = GeographyPoint.Create(latitude: 49' longitude: -121)                              }'                              new Document()                              {                                  ["name"] = "South"'                                  ["address"] = new Document()                                  {                                      ["city"] = "Seattle"'                                      ["country"] = "USA"                                  }'                                  ["location"] = GeographyPoint.Create(latitude: 47.6' longitude: -122.5)                              }                          }                      };
Magic Number,Microsoft.Azure.Search.Tests,Pinning,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadArraysOfMixedTypes,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["field"] = new object[]                          {                              "hello"'                              123L'                              3.14'                              GeographyPoint.Create(47.678581' -122.131577)'                              new Document()                              {                                  ["name"] = "Arthur"'                                  ["quest"] = null                              }                          }                      };
Magic Number,Microsoft.Azure.Search.Tests,Pinning,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadArraysOfMixedTypes,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["field"] = new object[]                          {                              "hello"'                              123L'                              3.14'                              GeographyPoint.Create(47.678581' -122.131577)'                              new Document()                              {                                  ["name"] = "Arthur"'                                  ["quest"] = null                              }                          }                      };
Magic Number,Microsoft.Azure.Search.Tests,Pinning,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadArraysOfMixedTypes,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["field"] = new object[]                          {                              "hello"'                              123L'                              3.14'                              GeographyPoint.Create(47.678581' -122.131577)'                              new Document()                              {                                  ["name"] = "Arthur"'                                  ["quest"] = null                              }                          }                      };
Magic Number,Microsoft.Azure.Search.Tests,Pinning,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\DocumentConverterTests.cs,CanReadArraysOfMixedTypes,The following statement contains a magic number: var expectedDoc =                      new Document()                      {                          ["field"] = new object[]                          {                              "hello"'                              123L'                              3.14'                              GeographyPoint.Create(47.678581' -122.131577)'                              new Document()                              {                                  ["name"] = "Arthur"'                                  ["quest"] = null                              }                          }                      };
Magic Number,Microsoft.Azure.Search.Tests,EdmDoubleConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\EdmDoubleConverterTests.cs,CanWriteNullableDouble,The following statement contains a magic number: double? nullableDouble = 3.14159;
Magic Number,Microsoft.Azure.Search.Tests,EdmDoubleConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\EdmDoubleConverterTests.cs,CanReadNullableDouble,The following statement contains a magic number: double? expectedDouble = 3.14159;
Magic Number,Microsoft.Azure.Search.Tests,EdmDoubleConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\EdmDoubleConverterTests.cs,CanReadPreParsedDouble,The following statement contains a magic number: Assert.Equal(3.5' model.Price);
Magic Number,Microsoft.Azure.Search.Tests,ExtensibleEnumConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\ExtensibleEnumConverterTests.cs,CanDeserializeKnownValue,The following statement contains a magic number: var expectedModel = new Model() { ID = 2' Test = TestEnum.Two };
Magic Number,Microsoft.Azure.Search.Tests,GeoJsonPointConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\GeoJsonPointConverterTests.cs,CanWriteGeoPoint,The following statement contains a magic number: var point = GeographyPoint.Create(47.1' 121.9);
Magic Number,Microsoft.Azure.Search.Tests,GeoJsonPointConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\GeoJsonPointConverterTests.cs,CanWriteGeoPoint,The following statement contains a magic number: var point = GeographyPoint.Create(47.1' 121.9);
Magic Number,Microsoft.Azure.Search.Tests,GeoJsonPointConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\GeoJsonPointConverterTests.cs,CanReadWellFormedGeoPoint,The following statement contains a magic number: var expectedPoint = GeographyPoint.Create(47.1' 121.9);
Magic Number,Microsoft.Azure.Search.Tests,GeoJsonPointConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\GeoJsonPointConverterTests.cs,CanReadWellFormedGeoPoint,The following statement contains a magic number: var expectedPoint = GeographyPoint.Create(47.1' 121.9);
Magic Number,Microsoft.Azure.Search.Tests,GeoJsonPointConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\GeoJsonPointConverterTests.cs,CanReadWellFormedGeoPointWithIntegerCoordinates,The following statement contains a magic number: var expectedPoint = GeographyPoint.Create(47' 121);
Magic Number,Microsoft.Azure.Search.Tests,GeoJsonPointConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\GeoJsonPointConverterTests.cs,CanReadWellFormedGeoPointWithIntegerCoordinates,The following statement contains a magic number: var expectedPoint = GeographyPoint.Create(47' 121);
Magic Number,Microsoft.Azure.Search.Tests,GeoJsonPointConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\GeoJsonPointConverterTests.cs,CanReadWellFormedGeoPointWithCRS,The following statement contains a magic number: var expectedPoint = GeographyPoint.Create(47.1' 121.9);
Magic Number,Microsoft.Azure.Search.Tests,GeoJsonPointConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\GeoJsonPointConverterTests.cs,CanReadWellFormedGeoPointWithCRS,The following statement contains a magic number: var expectedPoint = GeographyPoint.Create(47.1' 121.9);
Magic Number,Microsoft.Azure.Search.Tests,GeoJsonPointConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\GeoJsonPointConverterTests.cs,CanReadWellFormedGeoPointWithPropertiesOutOfOrder,The following statement contains a magic number: var expectedPoint = GeographyPoint.Create(47.1' 121.9);
Magic Number,Microsoft.Azure.Search.Tests,GeoJsonPointConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\GeoJsonPointConverterTests.cs,CanReadWellFormedGeoPointWithPropertiesOutOfOrder,The following statement contains a magic number: var expectedPoint = GeographyPoint.Create(47.1' 121.9);
Magic Number,Microsoft.Azure.Search.Tests,GeoJsonPointConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\GeoJsonPointConverterTests.cs,WhenPropertiesAreDuplicatedTheLastInstanceIsUsed,The following statement contains a magic number: var expectedPoint = GeographyPoint.Create(49.1' 122.1);
Magic Number,Microsoft.Azure.Search.Tests,GeoJsonPointConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\GeoJsonPointConverterTests.cs,WhenPropertiesAreDuplicatedTheLastInstanceIsUsed,The following statement contains a magic number: var expectedPoint = GeographyPoint.Create(49.1' 122.1);
Magic Number,Microsoft.Azure.Search.Tests,Iso8601DateTimeConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\Iso8601DateTimeConverterTests.cs,CanWriteLocalDateTime,The following statement contains a magic number: var localDateTime = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Local);
Magic Number,Microsoft.Azure.Search.Tests,Iso8601DateTimeConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\Iso8601DateTimeConverterTests.cs,CanWriteUtcDateTime,The following statement contains a magic number: var utcDateTime = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Microsoft.Azure.Search.Tests,Iso8601DateTimeConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\Iso8601DateTimeConverterTests.cs,CanWriteUnspecifiedDateTime,The following statement contains a magic number: var utcDateTime = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Unspecified);
Magic Number,Microsoft.Azure.Search.Tests,Iso8601DateTimeConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\Iso8601DateTimeConverterTests.cs,CanWriteNullableDateTime,The following statement contains a magic number: DateTime? utcDateTime = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Microsoft.Azure.Search.Tests,Iso8601DateTimeConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\Iso8601DateTimeConverterTests.cs,CanReadUtcDateTime,The following statement contains a magic number: var expectedUtcDateTime = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Microsoft.Azure.Search.Tests,Iso8601DateTimeConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\Iso8601DateTimeConverterTests.cs,CanReadUtcDateTimeOffset,The following statement contains a magic number: var expectedUtcDateTimeOffset = new DateTimeOffset(new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc));
Magic Number,Microsoft.Azure.Search.Tests,Iso8601DateTimeConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\Iso8601DateTimeConverterTests.cs,ReadingDateTimeWithOffsetConvertsToUtc,The following statement contains a magic number: DateTime expectedUtcTime = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Microsoft.Azure.Search.Tests,Iso8601DateTimeConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\Iso8601DateTimeConverterTests.cs,CanReadDateTimeWithOffsetToDateTimeOffset,The following statement contains a magic number: var expectedUtcDateTimeOffset =                   new DateTimeOffset(new DateTime(1999' 12' 31' 16' 0' 0)' TimeSpan.FromHours(-8));
Magic Number,Microsoft.Azure.Search.Tests,Iso8601DateTimeConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\Iso8601DateTimeConverterTests.cs,CanReadDateTimeWithOffsetToDateTimeOffset,The following statement contains a magic number: var expectedUtcDateTimeOffset =                   new DateTimeOffset(new DateTime(1999' 12' 31' 16' 0' 0)' TimeSpan.FromHours(-8));
Magic Number,Microsoft.Azure.Search.Tests,Iso8601DateTimeConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\Iso8601DateTimeConverterTests.cs,CanReadDateTimeWithOffsetToDateTimeOffset,The following statement contains a magic number: var expectedUtcDateTimeOffset =                   new DateTimeOffset(new DateTime(1999' 12' 31' 16' 0' 0)' TimeSpan.FromHours(-8));
Magic Number,Microsoft.Azure.Search.Tests,Iso8601DateTimeConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\Iso8601DateTimeConverterTests.cs,CanReadDateTimeWithOffsetToDateTimeOffset,The following statement contains a magic number: var expectedUtcDateTimeOffset =                   new DateTimeOffset(new DateTime(1999' 12' 31' 16' 0' 0)' TimeSpan.FromHours(-8));
Magic Number,Microsoft.Azure.Search.Tests,Iso8601DateTimeConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\Iso8601DateTimeConverterTests.cs,CanReadDateTimeWithOffsetToDateTimeOffset,The following statement contains a magic number: var expectedUtcDateTimeOffset =                   new DateTimeOffset(new DateTime(1999' 12' 31' 16' 0' 0)' TimeSpan.FromHours(-8));
Magic Number,Microsoft.Azure.Search.Tests,Iso8601DateTimeConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\Iso8601DateTimeConverterTests.cs,CanReadNullableDateTime,The following statement contains a magic number: DateTime? expectedUtcDateTime = new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Microsoft.Azure.Search.Tests,Iso8601DateTimeConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\Iso8601DateTimeConverterTests.cs,CanReadNullableDateTimeOffset,The following statement contains a magic number: DateTimeOffset? expectedUtcDateTimeOffset =                   new DateTimeOffset(new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc));
Magic Number,Microsoft.Azure.Search.Tests,Iso8601DateTimeConverterTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\Serialization\Iso8601DateTimeConverterTests.cs,CanReadPreParsedDateTime,The following statement contains a magic number: Assert.Equal(new DateTime(2000' 1' 1' 0' 0' 0' DateTimeKind.Utc)' model.CreatedAt);
Magic Number,Microsoft.Azure.Search.Tests,ServiceStatsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\ServiceStatsTests.cs,GetServiceStatsReturnsCorrectDefinition,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                  var expectedStats = new ServiceStatistics                  {                      Counters = new ServiceCounters                      {                          DocumentCounter = new ResourceCounter(0' null)'                          IndexCounter = new ResourceCounter(0' 3)'                          IndexerCounter = new ResourceCounter(0' 3)'                          DataSourceCounter = new ResourceCounter(0' 3)'                          StorageSizeCounter = new ResourceCounter(0' 52428800)'                          SynonymMapCounter = new ResourceCounter(0' 3)                      }'                      Limits = new ServiceLimits                      {                          MaxFieldsPerIndex = 1000'                          MaxFieldNestingDepthPerIndex = 10'                          MaxComplexCollectionFieldsPerIndex = 40'                          MaxComplexObjectsInCollectionsPerDocument = 3000                      }                  };                    ServiceStatistics stats = searchClient.GetServiceStatistics();                  Assert.Equal(expectedStats' stats' new DataPlaneModelComparer<ServiceStatistics>());              });
Magic Number,Microsoft.Azure.Search.Tests,ServiceStatsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\ServiceStatsTests.cs,GetServiceStatsReturnsCorrectDefinition,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                  var expectedStats = new ServiceStatistics                  {                      Counters = new ServiceCounters                      {                          DocumentCounter = new ResourceCounter(0' null)'                          IndexCounter = new ResourceCounter(0' 3)'                          IndexerCounter = new ResourceCounter(0' 3)'                          DataSourceCounter = new ResourceCounter(0' 3)'                          StorageSizeCounter = new ResourceCounter(0' 52428800)'                          SynonymMapCounter = new ResourceCounter(0' 3)                      }'                      Limits = new ServiceLimits                      {                          MaxFieldsPerIndex = 1000'                          MaxFieldNestingDepthPerIndex = 10'                          MaxComplexCollectionFieldsPerIndex = 40'                          MaxComplexObjectsInCollectionsPerDocument = 3000                      }                  };                    ServiceStatistics stats = searchClient.GetServiceStatistics();                  Assert.Equal(expectedStats' stats' new DataPlaneModelComparer<ServiceStatistics>());              });
Magic Number,Microsoft.Azure.Search.Tests,ServiceStatsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\ServiceStatsTests.cs,GetServiceStatsReturnsCorrectDefinition,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                  var expectedStats = new ServiceStatistics                  {                      Counters = new ServiceCounters                      {                          DocumentCounter = new ResourceCounter(0' null)'                          IndexCounter = new ResourceCounter(0' 3)'                          IndexerCounter = new ResourceCounter(0' 3)'                          DataSourceCounter = new ResourceCounter(0' 3)'                          StorageSizeCounter = new ResourceCounter(0' 52428800)'                          SynonymMapCounter = new ResourceCounter(0' 3)                      }'                      Limits = new ServiceLimits                      {                          MaxFieldsPerIndex = 1000'                          MaxFieldNestingDepthPerIndex = 10'                          MaxComplexCollectionFieldsPerIndex = 40'                          MaxComplexObjectsInCollectionsPerDocument = 3000                      }                  };                    ServiceStatistics stats = searchClient.GetServiceStatistics();                  Assert.Equal(expectedStats' stats' new DataPlaneModelComparer<ServiceStatistics>());              });
Magic Number,Microsoft.Azure.Search.Tests,ServiceStatsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\ServiceStatsTests.cs,GetServiceStatsReturnsCorrectDefinition,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                  var expectedStats = new ServiceStatistics                  {                      Counters = new ServiceCounters                      {                          DocumentCounter = new ResourceCounter(0' null)'                          IndexCounter = new ResourceCounter(0' 3)'                          IndexerCounter = new ResourceCounter(0' 3)'                          DataSourceCounter = new ResourceCounter(0' 3)'                          StorageSizeCounter = new ResourceCounter(0' 52428800)'                          SynonymMapCounter = new ResourceCounter(0' 3)                      }'                      Limits = new ServiceLimits                      {                          MaxFieldsPerIndex = 1000'                          MaxFieldNestingDepthPerIndex = 10'                          MaxComplexCollectionFieldsPerIndex = 40'                          MaxComplexObjectsInCollectionsPerDocument = 3000                      }                  };                    ServiceStatistics stats = searchClient.GetServiceStatistics();                  Assert.Equal(expectedStats' stats' new DataPlaneModelComparer<ServiceStatistics>());              });
Magic Number,Microsoft.Azure.Search.Tests,ServiceStatsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\ServiceStatsTests.cs,GetServiceStatsReturnsCorrectDefinition,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                  var expectedStats = new ServiceStatistics                  {                      Counters = new ServiceCounters                      {                          DocumentCounter = new ResourceCounter(0' null)'                          IndexCounter = new ResourceCounter(0' 3)'                          IndexerCounter = new ResourceCounter(0' 3)'                          DataSourceCounter = new ResourceCounter(0' 3)'                          StorageSizeCounter = new ResourceCounter(0' 52428800)'                          SynonymMapCounter = new ResourceCounter(0' 3)                      }'                      Limits = new ServiceLimits                      {                          MaxFieldsPerIndex = 1000'                          MaxFieldNestingDepthPerIndex = 10'                          MaxComplexCollectionFieldsPerIndex = 40'                          MaxComplexObjectsInCollectionsPerDocument = 3000                      }                  };                    ServiceStatistics stats = searchClient.GetServiceStatistics();                  Assert.Equal(expectedStats' stats' new DataPlaneModelComparer<ServiceStatistics>());              });
Magic Number,Microsoft.Azure.Search.Tests,ServiceStatsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\ServiceStatsTests.cs,GetServiceStatsReturnsCorrectDefinition,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                  var expectedStats = new ServiceStatistics                  {                      Counters = new ServiceCounters                      {                          DocumentCounter = new ResourceCounter(0' null)'                          IndexCounter = new ResourceCounter(0' 3)'                          IndexerCounter = new ResourceCounter(0' 3)'                          DataSourceCounter = new ResourceCounter(0' 3)'                          StorageSizeCounter = new ResourceCounter(0' 52428800)'                          SynonymMapCounter = new ResourceCounter(0' 3)                      }'                      Limits = new ServiceLimits                      {                          MaxFieldsPerIndex = 1000'                          MaxFieldNestingDepthPerIndex = 10'                          MaxComplexCollectionFieldsPerIndex = 40'                          MaxComplexObjectsInCollectionsPerDocument = 3000                      }                  };                    ServiceStatistics stats = searchClient.GetServiceStatistics();                  Assert.Equal(expectedStats' stats' new DataPlaneModelComparer<ServiceStatistics>());              });
Magic Number,Microsoft.Azure.Search.Tests,ServiceStatsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\ServiceStatsTests.cs,GetServiceStatsReturnsCorrectDefinition,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                  var expectedStats = new ServiceStatistics                  {                      Counters = new ServiceCounters                      {                          DocumentCounter = new ResourceCounter(0' null)'                          IndexCounter = new ResourceCounter(0' 3)'                          IndexerCounter = new ResourceCounter(0' 3)'                          DataSourceCounter = new ResourceCounter(0' 3)'                          StorageSizeCounter = new ResourceCounter(0' 52428800)'                          SynonymMapCounter = new ResourceCounter(0' 3)                      }'                      Limits = new ServiceLimits                      {                          MaxFieldsPerIndex = 1000'                          MaxFieldNestingDepthPerIndex = 10'                          MaxComplexCollectionFieldsPerIndex = 40'                          MaxComplexObjectsInCollectionsPerDocument = 3000                      }                  };                    ServiceStatistics stats = searchClient.GetServiceStatistics();                  Assert.Equal(expectedStats' stats' new DataPlaneModelComparer<ServiceStatistics>());              });
Magic Number,Microsoft.Azure.Search.Tests,ServiceStatsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\ServiceStatsTests.cs,GetServiceStatsReturnsCorrectDefinition,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                  var expectedStats = new ServiceStatistics                  {                      Counters = new ServiceCounters                      {                          DocumentCounter = new ResourceCounter(0' null)'                          IndexCounter = new ResourceCounter(0' 3)'                          IndexerCounter = new ResourceCounter(0' 3)'                          DataSourceCounter = new ResourceCounter(0' 3)'                          StorageSizeCounter = new ResourceCounter(0' 52428800)'                          SynonymMapCounter = new ResourceCounter(0' 3)                      }'                      Limits = new ServiceLimits                      {                          MaxFieldsPerIndex = 1000'                          MaxFieldNestingDepthPerIndex = 10'                          MaxComplexCollectionFieldsPerIndex = 40'                          MaxComplexObjectsInCollectionsPerDocument = 3000                      }                  };                    ServiceStatistics stats = searchClient.GetServiceStatistics();                  Assert.Equal(expectedStats' stats' new DataPlaneModelComparer<ServiceStatistics>());              });
Magic Number,Microsoft.Azure.Search.Tests,ServiceStatsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\ServiceStatsTests.cs,GetServiceStatsReturnsCorrectDefinition,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                  var expectedStats = new ServiceStatistics                  {                      Counters = new ServiceCounters                      {                          DocumentCounter = new ResourceCounter(0' null)'                          IndexCounter = new ResourceCounter(0' 3)'                          IndexerCounter = new ResourceCounter(0' 3)'                          DataSourceCounter = new ResourceCounter(0' 3)'                          StorageSizeCounter = new ResourceCounter(0' 52428800)'                          SynonymMapCounter = new ResourceCounter(0' 3)                      }'                      Limits = new ServiceLimits                      {                          MaxFieldsPerIndex = 1000'                          MaxFieldNestingDepthPerIndex = 10'                          MaxComplexCollectionFieldsPerIndex = 40'                          MaxComplexObjectsInCollectionsPerDocument = 3000                      }                  };                    ServiceStatistics stats = searchClient.GetServiceStatistics();                  Assert.Equal(expectedStats' stats' new DataPlaneModelComparer<ServiceStatistics>());              });
Magic Number,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateOrUpdateUpdatesWhenSkillsetExists,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                    Skillset skillset = CreateTestOcrSkillset(1' TextExtractionAlgorithm.Handwritten);                    AzureOperationResponse<Skillset> response =                      searchClient.Skillsets.CreateOrUpdateWithHttpMessagesAsync(skillset.Name' skillset).Result;                  Assert.Equal(HttpStatusCode.Created' response.Response.StatusCode);                    skillset = CreateTestOcrSkillset(2' TextExtractionAlgorithm.Printed' skillset.Name);                  response =                      searchClient.Skillsets.CreateOrUpdateWithHttpMessagesAsync(skillset.Name' skillset).Result;                  Assert.Equal(HttpStatusCode.OK' response.Response.StatusCode);              });
Magic Number,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateTestSkillsetOcrEntity,The following statement contains a magic number: skills.Add(new EntityRecognitionSkill(                  inputs1'                   outputs1'                   name: "myentity"'                   description: "Tested Entity Recognition skill"'                   context: RootPathString)              {                  Categories = categories'                  DefaultLanguageCode = EntityRecognitionSkillLanguage.En'                  MinimumPrecision = 0.5              });
Magic Number,Microsoft.Azure.Search.Tests,SkillsetsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SkillsetsTests.cs,CreateTestSkillsetWebApiSkill,The following statement contains a magic number: var skill = new WebApiSkill(                      inputs'                      outputs'                      uri: "https://contoso.example.org"'                      name: "mywebapi"'                      description: "A simple web api skill"'                      context: RootPathString)              {                  HttpMethod = "POST"'                  DegreeOfParallelism = 7              };
Magic Number,Microsoft.Azure.Search.Tests,SuggestTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SuggestTests.cs,TestCanGetFuzzySuggestions,The following statement contains a magic number: Assert.Equal(5' response.Results.Count);
Magic Number,Microsoft.Azure.Search.Tests,SuggestTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SuggestTests.cs,TestTopTrimsResults,The following statement contains a magic number: var suggestParameters =                  new SuggestParameters()                  {                      OrderBy = new string[] { "hotelId" }'                      Top = 3                  };
Magic Number,Microsoft.Azure.Search.Tests,SuggestTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SuggestTests.cs,TestCanSuggestWithSelectedFields,The following statement contains a magic number: var expectedDoc = new Hotel()              {                  HotelName = "Secret Point Motel"'                  Rating = 4'                  Address = new HotelAddress() { City = "New York" }'                  Rooms = new[] { new HotelRoom() { Type = "Budget Room" }' new HotelRoom() { Type = "Budget Room" } }              };
Magic Number,Microsoft.Azure.Search.Tests,SuggestTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SuggestTests.cs,TestCanSuggestWithMinimumCoverage,The following statement contains a magic number: var parameters = new SuggestParameters() { MinimumCoverage = 50 };
Magic Number,Microsoft.Azure.Search.Tests,SuggestTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SuggestTests.cs,TestCanSuggestWithMinimumCoverage,The following statement contains a magic number: Assert.Equal(100' response.Coverage);
Magic Number,Microsoft.Azure.Search.Tests,SuggestTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SuggestTests.cs,TestCanSuggestWithDateTimeInStaticModel,The following statement contains a magic number: var doc2 = new Book() { ISBN = "456"' Title = "War and Peace"' PublishDate = new DateTime(2015' 8' 18) };
Magic Number,Microsoft.Azure.Search.Tests,SuggestTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SuggestTests.cs,TestCanSuggestWithDateTimeInStaticModel,The following statement contains a magic number: var doc2 = new Book() { ISBN = "456"' Title = "War and Peace"' PublishDate = new DateTime(2015' 8' 18) };
Magic Number,Microsoft.Azure.Search.Tests,SuggestTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SuggestTests.cs,TestCanSuggestWithDateTimeInStaticModel,The following statement contains a magic number: var doc2 = new Book() { ISBN = "456"' Title = "War and Peace"' PublishDate = new DateTime(2015' 8' 18) };
Magic Number,Microsoft.Azure.Search.Tests,SuggestTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SuggestTests.cs,TestCanSuggestWithCustomConverter,The following statement contains a magic number: var doc = new TBook()              {                  InternationalStandardBookNumber = "123"'                  Name = "Lord of the Rings"'                  AuthorName = new TAuthor() { FullName = "J.R.R. Tolkien" }'                  PublishDateTime = new DateTime(1954' 7' 29)              };
Magic Number,Microsoft.Azure.Search.Tests,SuggestTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SuggestTests.cs,TestCanSuggestWithCustomConverter,The following statement contains a magic number: var doc = new TBook()              {                  InternationalStandardBookNumber = "123"'                  Name = "Lord of the Rings"'                  AuthorName = new TAuthor() { FullName = "J.R.R. Tolkien" }'                  PublishDateTime = new DateTime(1954' 7' 29)              };
Magic Number,Microsoft.Azure.Search.Tests,SuggestTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SuggestTests.cs,TestCanSuggestWithCustomConverter,The following statement contains a magic number: var doc = new TBook()              {                  InternationalStandardBookNumber = "123"'                  Name = "Lord of the Rings"'                  AuthorName = new TAuthor() { FullName = "J.R.R. Tolkien" }'                  PublishDateTime = new DateTime(1954' 7' 29)              };
Magic Number,Microsoft.Azure.Search.Tests,SynonymMapTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Tests\SynonymMapTests.cs,CanCreateAndListSynonymMaps,The following statement contains a magic number: Run(() =>              {                  SearchServiceClient searchClient = Data.GetSearchServiceClient();                    // Create a SynonymMap of each supported type                  SynonymMap synonymMap1 = CreateTestSynonymMap();                  SynonymMap synonymMap2 = CreateTestSynonymMap();                    searchClient.SynonymMaps.Create(synonymMap1);                  searchClient.SynonymMaps.Create(synonymMap2);                    SynonymMapListResult listResponse = searchClient.SynonymMaps.List();                  Assert.Equal(2' listResponse.SynonymMaps.Count);                    IEnumerable<string> synonymMapNames = listResponse.SynonymMaps.Select(i => i.Name);                  Assert.Contains(synonymMap1.Name' synonymMapNames);                  Assert.Contains(synonymMap2.Name' synonymMapNames);              });
Magic Number,System,EqualsExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Utilities\EqualsExtensions.cs,EqualsDateTimeOffset,The following statement contains a magic number: return (aTicks / 10000) == (bTicks / 10000);
Magic Number,System,EqualsExtensions,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\search\Microsoft.Azure.Search\tests\Utilities\EqualsExtensions.cs,EqualsDateTimeOffset,The following statement contains a magic number: return (aTicks / 10000) == (bTicks / 10000);
