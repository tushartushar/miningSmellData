Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,LUIS.Authoring.Tests.Luis,ModelPrebuiltsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelprebuiltsTests.cs,DeletePrebuilt,The length of the parameter prebuiltEntitiesWithoutDeleted is 30.
Long Statement,LUIS.Authoring.Tests.Luis,EntityRolesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\EntityRolesTests.cs,AddClosedListEntityRole,The length of the statement  "                var roleId = await client.Model.CreateClosedListEntityRoleAsync(GlobalAppId' "0.1"' entityId' new EntityRoleCreateObject " is 120.
Long Statement,LUIS.Authoring.Tests.Luis,EntityRolesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\EntityRolesTests.cs,AddPatternAnyEntityRole,The length of the statement  "                var roleId = await client.Model.CreatePatternAnyEntityRoleAsync(GlobalAppId' "0.1"' entityId' new EntityRoleCreateObject " is 120.
Long Statement,LUIS.Authoring.Tests.Luis,EntityRolesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\EntityRolesTests.cs,AddCustomPrebuiltDomainEntityRole,The length of the statement  "                var roleId = await client.Model.CreateCustomPrebuiltEntityRoleAsync(GlobalAppId' "0.1"' entityId' new EntityRoleCreateObject " is 124.
Long Statement,LUIS.Authoring.Tests.Luis,EntityRolesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\EntityRolesTests.cs,GetClosedListEntityRole,The length of the statement  "                var roleId = await client.Model.CreateClosedListEntityRoleAsync(GlobalAppId' "0.1"' entityId' new EntityRoleCreateObject " is 120.
Long Statement,LUIS.Authoring.Tests.Luis,EntityRolesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\EntityRolesTests.cs,GetPatternAnyEntityRole,The length of the statement  "                var roleId = await client.Model.CreatePatternAnyEntityRoleAsync(GlobalAppId' "0.1"' entityId' new EntityRoleCreateObject " is 120.
Long Statement,LUIS.Authoring.Tests.Luis,EntityRolesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\EntityRolesTests.cs,GetCustomPrebuiltDomainEntityRole,The length of the statement  "                var roleId = await client.Model.CreateCustomPrebuiltEntityRoleAsync(GlobalAppId' "0.1"' entityId' new EntityRoleCreateObject " is 124.
Long Statement,LUIS.Authoring.Tests.Luis,EntityRolesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\EntityRolesTests.cs,GetClosedListEntityRoles,The length of the statement  "                var roleId = await client.Model.CreateClosedListEntityRoleAsync(GlobalAppId' "0.1"' entityId' new EntityRoleCreateObject " is 120.
Long Statement,LUIS.Authoring.Tests.Luis,EntityRolesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\EntityRolesTests.cs,GetPatternAnyEntityRoles,The length of the statement  "                var roleId = await client.Model.CreatePatternAnyEntityRoleAsync(GlobalAppId' "0.1"' entityId' new EntityRoleCreateObject " is 120.
Long Statement,LUIS.Authoring.Tests.Luis,EntityRolesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\EntityRolesTests.cs,GetCustomPrebuiltDomainEntityRoles,The length of the statement  "                var roleId = await client.Model.CreateCustomPrebuiltEntityRoleAsync(GlobalAppId' "0.1"' entityId' new EntityRoleCreateObject " is 124.
Long Statement,LUIS.Authoring.Tests.Luis,EntityRolesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\EntityRolesTests.cs,UpdateClosedListEntityRole,The length of the statement  "                var roleId = await client.Model.CreateClosedListEntityRoleAsync(GlobalAppId' "0.1"' entityId' new EntityRoleCreateObject " is 120.
Long Statement,LUIS.Authoring.Tests.Luis,EntityRolesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\EntityRolesTests.cs,UpdatePatternAnyEntityRole,The length of the statement  "                var roleId = await client.Model.CreatePatternAnyEntityRoleAsync(GlobalAppId' "0.1"' entityId' new EntityRoleCreateObject " is 120.
Long Statement,LUIS.Authoring.Tests.Luis,EntityRolesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\EntityRolesTests.cs,UpdateCustomPrebuiltDomainEntityRole,The length of the statement  "                var roleId = await client.Model.CreateCustomPrebuiltEntityRoleAsync(GlobalAppId' "0.1"' entityId' new EntityRoleCreateObject " is 124.
Long Statement,LUIS.Authoring.Tests.Luis,EntityRolesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\EntityRolesTests.cs,DeleteClosedListEntityRole,The length of the statement  "                var roleId = await client.Model.CreateClosedListEntityRoleAsync(GlobalAppId' "0.1"' entityId' new EntityRoleCreateObject " is 120.
Long Statement,LUIS.Authoring.Tests.Luis,EntityRolesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\EntityRolesTests.cs,DeletePatternAnyEntityRole,The length of the statement  "                var roleId = await client.Model.CreatePatternAnyEntityRoleAsync(GlobalAppId' "0.1"' entityId' new EntityRoleCreateObject " is 120.
Long Statement,LUIS.Authoring.Tests.Luis,EntityRolesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\EntityRolesTests.cs,DeleteCustomPrebuiltDomainEntityRole,The length of the statement  "                var roleId = await client.Model.CreateCustomPrebuiltEntityRoleAsync(GlobalAppId' "0.1"' entityId' new EntityRoleCreateObject " is 124.
Long Statement,LUIS.Authoring.Tests.Luis,ExamplesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ExamplesTests.cs,AddExamplesInBatch,The length of the statement  "                Assert.Contains(result' o => examples.Any(e => e.Text.Equals(o.Value.UtteranceText' StringComparison.OrdinalIgnoreCase))); " is 122.
Long Statement,LUIS.Authoring.Tests.Luis,ExamplesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ExamplesTests.cs,AddExamplesInBatch_SomeInvalidExamples_ReturnsSomeErrors,The length of the statement  "                Assert.Contains(result' o => o.HasError.GetValueOrDefault() && o.Error != null && o.Error.Code == "FAILED" && o.Error.Message.Contains("The intent classifier IntentDoesNotExist")); " is 180.
Long Statement,LUIS.Authoring.Tests.Luis,FeaturesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\FeaturesTests.cs,AddEntityFeature,The length of the statement  "                var featureToAdd = await client.Features.AddEntityFeatureAsync(GlobalAppId' versionId' entityId' new ModelFeatureInformation " is 124.
Long Statement,LUIS.Authoring.Tests.Luis,FeaturesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\FeaturesTests.cs,AddModelAsFeatureForEntity,The length of the statement  "                var featureToAdd = await client.Features.AddEntityFeatureAsync(GlobalAppId' versionId' entityId' new ModelFeatureInformation " is 124.
Long Statement,LUIS.Authoring.Tests.Luis,FeaturesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\FeaturesTests.cs,AddModelAsFeatureForIntent,The length of the statement  "                var featureToAdd = await client.Features.AddIntentFeatureAsync(GlobalAppId' versionId' intentId' new ModelFeatureInformation " is 124.
Long Statement,LUIS.Authoring.Tests.Luis,FeaturesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\FeaturesTests.cs,DeleteEntityFeature,The length of the statement  "                var featureToAdd = await client.Features.AddEntityFeatureAsync(GlobalAppId' versionId' entityId' new ModelFeatureInformation " is 124.
Long Statement,LUIS.Authoring.Tests.Luis,FeaturesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\FeaturesTests.cs,GetEntityFeatures,The length of the statement  "                var featureToAdd = await client.Features.AddEntityFeatureAsync(GlobalAppId' versionId' entityId' new ModelFeatureInformation " is 124.
Long Statement,LUIS.Authoring.Tests.Luis,FeaturesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\FeaturesTests.cs,AddIntentFeature,The length of the statement  "                var featureToAdd = await client.Features.AddIntentFeatureAsync(GlobalAppId' versionId' intentId' new ModelFeatureInformation " is 124.
Long Statement,LUIS.Authoring.Tests.Luis,FeaturesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\FeaturesTests.cs,DeleteIntentFeature,The length of the statement  "                var featureToAdd = await client.Features.AddIntentFeatureAsync(GlobalAppId' versionId' intentId' new ModelFeatureInformation " is 124.
Long Statement,LUIS.Authoring.Tests.Luis,FeaturesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\FeaturesTests.cs,GetIntentFeatures,The length of the statement  "                var featureToAdd = await client.Features.AddIntentFeatureAsync(GlobalAppId' versionId' intentId' new ModelFeatureInformation " is 124.
Long Statement,LUIS.Authoring.Tests.Luis,ImportExportTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ImportExportTests.cs,ImportAppWithEnabledForAllModels,The length of the statement  "            var appJson = File.ReadAllText(Path.Combine(Directory.GetCurrentDirectory()' "SessionRecords/ImportAppWithEnabledForAllModels.json")); " is 134.
Long Statement,LUIS.Authoring.Tests.Luis,ModelClosedListsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelClosedListsTests.cs,PatchClosedList,The length of the statement  "                Assert.Contains(list.SubLists' o => o.CanonicalForm == "Florida" && o.List.Contains("fl") && o.List.Contains("florida")); " is 121.
Long Statement,LUIS.Authoring.Tests.Luis,ModelClosedListsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelClosedListsTests.cs,DeleteSubList,The length of the statement  "                var sublistId = (await client.Model.GetClosedListAsync(GlobalAppId' versionId' listId)).SubLists.Single(o => o.CanonicalForm == "New York").Id; " is 143.
Long Statement,LUIS.Authoring.Tests.Luis,ModelClosedListsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelClosedListsTests.cs,UpdateSubList,The length of the statement  "                var sublistId = (await client.Model.GetClosedListAsync(GlobalAppId' versionId' listId)).SubLists.Single(o => o.CanonicalForm == "New York").Id; " is 143.
Long Statement,LUIS.Authoring.Tests.Luis,ModelClosedListsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelClosedListsTests.cs,UpdateSubList,The length of the statement  "                Assert.Contains(list.SubLists' o => o.CanonicalForm == "New Yorkers" && o.List.Contains("NYC") && o.List.Contains("NY") && o.List.Contains("New York")); " is 152.
Long Statement,LUIS.Authoring.Tests.Luis,ModelPatternAnyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelPatternAnyTests.cs,ListEntities,The length of the statement  "                var entityId = await client.Model.CreatePatternAnyEntityModelAsync(GlobalAppId' versionId' new PatternAnyModelCreateObject " is 122.
Long Statement,LUIS.Authoring.Tests.Luis,ModelPatternAnyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelPatternAnyTests.cs,GetEntity,The length of the statement  "                var entityId = await client.Model.CreatePatternAnyEntityModelAsync(GlobalAppId' versionId' new PatternAnyModelCreateObject " is 122.
Long Statement,LUIS.Authoring.Tests.Luis,ModelPatternAnyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelPatternAnyTests.cs,AddEntity,The length of the statement  "                var entityId = await client.Model.CreatePatternAnyEntityModelAsync(GlobalAppId' versionId' new PatternAnyModelCreateObject " is 122.
Long Statement,LUIS.Authoring.Tests.Luis,ModelPatternAnyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelPatternAnyTests.cs,UpdateEntity,The length of the statement  "                var entityId = await client.Model.CreatePatternAnyEntityModelAsync(GlobalAppId' versionId' new PatternAnyModelCreateObject " is 122.
Long Statement,LUIS.Authoring.Tests.Luis,ModelPatternAnyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelPatternAnyTests.cs,DeleteEntity,The length of the statement  "                var entityId = await client.Model.CreatePatternAnyEntityModelAsync(GlobalAppId' versionId' new PatternAnyModelCreateObject " is 122.
Long Statement,LUIS.Authoring.Tests.Luis,ModelPatternAnyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelPatternAnyTests.cs,GetExplicitList,The length of the statement  "                var entityId = await client.Model.CreatePatternAnyEntityModelAsync(GlobalAppId' versionId' new PatternAnyModelCreateObject " is 122.
Long Statement,LUIS.Authoring.Tests.Luis,ModelPatternAnyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelPatternAnyTests.cs,AddExplicitListItem,The length of the statement  "                var entityId = await client.Model.CreatePatternAnyEntityModelAsync(GlobalAppId' versionId' new PatternAnyModelCreateObject " is 122.
Long Statement,LUIS.Authoring.Tests.Luis,ModelPatternAnyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelPatternAnyTests.cs,AddExplicitListItem,The length of the statement  "                var result = await client.Model.AddExplicitListItemAsync(GlobalAppId' versionId' entityId' new ExplicitListItemCreateObject " is 123.
Long Statement,LUIS.Authoring.Tests.Luis,ModelPatternAnyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelPatternAnyTests.cs,GetExplicitListItem,The length of the statement  "                var entityId = await client.Model.CreatePatternAnyEntityModelAsync(GlobalAppId' versionId' new PatternAnyModelCreateObject " is 122.
Long Statement,LUIS.Authoring.Tests.Luis,ModelPatternAnyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelPatternAnyTests.cs,GetExplicitListItem,The length of the statement  "                var result = await client.Model.AddExplicitListItemAsync(GlobalAppId' versionId' entityId' new ExplicitListItemCreateObject " is 123.
Long Statement,LUIS.Authoring.Tests.Luis,ModelPatternAnyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelPatternAnyTests.cs,UpdateExplicitListItem,The length of the statement  "                var entityId = await client.Model.CreatePatternAnyEntityModelAsync(GlobalAppId' versionId' new PatternAnyModelCreateObject " is 122.
Long Statement,LUIS.Authoring.Tests.Luis,ModelPatternAnyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelPatternAnyTests.cs,UpdateExplicitListItem,The length of the statement  "                var result = await client.Model.AddExplicitListItemAsync(GlobalAppId' versionId' entityId' new ExplicitListItemCreateObject " is 123.
Long Statement,LUIS.Authoring.Tests.Luis,ModelPatternAnyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelPatternAnyTests.cs,UpdateExplicitListItem,The length of the statement  "                await client.Model.UpdateExplicitListItemAsync(GlobalAppId' versionId' entityId' result.Value' new ExplicitListItemUpdateObject " is 127.
Long Statement,LUIS.Authoring.Tests.Luis,ModelPatternAnyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelPatternAnyTests.cs,DeleteExplicitListItem,The length of the statement  "                var entityId = await client.Model.CreatePatternAnyEntityModelAsync(GlobalAppId' versionId' new PatternAnyModelCreateObject " is 122.
Long Statement,LUIS.Authoring.Tests.Luis,ModelPatternAnyTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelPatternAnyTests.cs,DeleteExplicitListItem,The length of the statement  "                var result = await client.Model.AddExplicitListItemAsync(GlobalAppId' versionId' entityId' new ExplicitListItemCreateObject " is 123.
Long Statement,LUIS.Authoring.Tests.Luis,ModelTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelTests.cs,GetModelChild,The length of the statement  "                var childId  = await client.Model.AddEntityChildAsync(GlobalAppId' versionId' entityId' new ChildEntityModelCreateObject " is 120.
Long Statement,LUIS.Authoring.Tests.Luis,PatternsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\PatternsTests.cs,UpdatePatterns,The length of the statement  "                var updatedPatterns = new[] { new PatternRuleUpdateObject { Intent = "None"' Pattern = "This [is] a {geographyV2}"' Id = addResult.First().Id } }; " is 146.
Long Statement,LUIS.Authoring.Tests.Luis,VersionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\VersionsTests.cs,ListVersions_ErrorSubscriptionKey,The length of the statement  "                var exception = await Assert.ThrowsAsync<ErrorResponseException>(async () => await client.Versions.ListWithHttpMessagesAsync(GlobalAppId' customHeaders: headers)); " is 163.
Long Statement,LUIS.Authoring.Tests.Luis,VersionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\VersionsTests.cs,ListVersions_ErrorAppId,The length of the statement  "                var exception = await Assert.ThrowsAsync<ErrorResponseException>(async () => await client.Versions.ListAsync(GlobalAppIdError)); " is 128.
Long Statement,LUIS.Authoring.Tests.Luis,VersionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\VersionsTests.cs,GetVersion_ErrorVersion,The length of the statement  "                var exeption = await Assert.ThrowsAsync<ErrorResponseException>(async () => await client.Versions.GetAsync(GlobalAppId' errorVersion)); " is 135.
Long Statement,LUIS.Authoring.Tests.Luis,VersionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\VersionsTests.cs,UpdateVersion_ErrorModel,The length of the statement  "                var exeption = await Assert.ThrowsAsync<ErrorResponseException>(async () => await client.Versions.UpdateAsync(GlobalAppId' first.Version' versionToUpdate)); " is 156.
Long Statement,LUIS.Authoring.Tests.Luis,VersionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\VersionsTests.cs,DeleteVersion_ErrorModel,The length of the statement  "                var exeption = await Assert.ThrowsAsync<ErrorResponseException>(async () => await client.Versions.DeleteAsync(GlobalAppId' first.Version + "0")); " is 145.
Long Statement,LUIS.Authoring.Tests.Luis,VersionsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\VersionsTests.cs,CloneVersion_ErrorModel,The length of the statement  "                var exeption = await Assert.ThrowsAsync<ErrorResponseException>(async () => await client.Versions.CloneAsync(GlobalAppId' first.Version' testVersion)); " is 151.
Magic Number,LUIS.Authoring.Tests.Luis,ExamplesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ExamplesTests.cs,AddExample,The following statement contains a magic number: UseClientFor(async client =>              {                  var appId = await client.Apps.AddAsync(new ApplicationCreateObject                  {                      Name = "Examples Test App"'                      Description = "New LUIS App"'                      Culture = "en-us"'                      Domain = "Comics"'                      UsageScenario = "IoT"                  });                    await client.Model.AddIntentAsync(appId' "0.1"' new ModelCreateObject                  {                      Name = "WeatherInPlace"                  });                    await client.Model.AddEntityAsync(appId' "0.1"' new EntityModelCreateObject                  {                      Name = "Place"                  });                    var example = new ExampleLabelObject                  {                      Text = "whats the weather in buenos aires?"'                      IntentName = "WeatherInPlace"'                      EntityLabels = new List<EntityLabelObject>()                      {                          new EntityLabelObject()                          {                              EntityName = "Place"'                              StartCharIndex = 21'                              EndCharIndex = 34                          }                      }                  };                    var result = await client.Examples.AddAsync(appId' versionId' example);                    await client.Apps.DeleteAsync(appId);                    Assert.Equal(example.Text' result.UtteranceText);              });
Magic Number,LUIS.Authoring.Tests.Luis,ExamplesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ExamplesTests.cs,AddExample,The following statement contains a magic number: UseClientFor(async client =>              {                  var appId = await client.Apps.AddAsync(new ApplicationCreateObject                  {                      Name = "Examples Test App"'                      Description = "New LUIS App"'                      Culture = "en-us"'                      Domain = "Comics"'                      UsageScenario = "IoT"                  });                    await client.Model.AddIntentAsync(appId' "0.1"' new ModelCreateObject                  {                      Name = "WeatherInPlace"                  });                    await client.Model.AddEntityAsync(appId' "0.1"' new EntityModelCreateObject                  {                      Name = "Place"                  });                    var example = new ExampleLabelObject                  {                      Text = "whats the weather in buenos aires?"'                      IntentName = "WeatherInPlace"'                      EntityLabels = new List<EntityLabelObject>()                      {                          new EntityLabelObject()                          {                              EntityName = "Place"'                              StartCharIndex = 21'                              EndCharIndex = 34                          }                      }                  };                    var result = await client.Examples.AddAsync(appId' versionId' example);                    await client.Apps.DeleteAsync(appId);                    Assert.Equal(example.Text' result.UtteranceText);              });
Magic Number,LUIS.Authoring.Tests.Luis,ExamplesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ExamplesTests.cs,AddExamplesInBatch,The following statement contains a magic number: UseClientFor(async client =>              {                  var appId = await client.Apps.AddAsync(new ApplicationCreateObject                  {                      Name = "Examples Test App"'                      Description = "New LUIS App"'                      Culture = "en-us"'                      Domain = "Comics"'                      UsageScenario = "IoT"                  });                    await client.Model.AddIntentAsync(appId' "0.1"' new ModelCreateObject                  {                      Name = "WeatherInPlace"                  });                    await client.Model.AddEntityAsync(appId' "0.1"' new EntityModelCreateObject                  {                      Name = "Place"                  });                    var examples = new List<ExampleLabelObject>() {                      new ExampleLabelObject                      {                          Text = "whats the weather in seattle?"'                          IntentName = "WeatherInPlace"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 29                              }                          }                      }'                      new ExampleLabelObject                      {                          Text = "whats the weather in buenos aires?"'                          IntentName = "WeatherInPlace"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 34                              }                          }                      }'                  };                    var result = await client.Examples.BatchAsync(appId' versionId' examples);                    await client.Apps.DeleteAsync(appId);                    Assert.Equal(examples.Count' result.Count);                  Assert.DoesNotContain(result' o => o.HasError.GetValueOrDefault());                  Assert.Contains(result' o => examples.Any(e => e.Text.Equals(o.Value.UtteranceText' StringComparison.OrdinalIgnoreCase)));              });
Magic Number,LUIS.Authoring.Tests.Luis,ExamplesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ExamplesTests.cs,AddExamplesInBatch,The following statement contains a magic number: UseClientFor(async client =>              {                  var appId = await client.Apps.AddAsync(new ApplicationCreateObject                  {                      Name = "Examples Test App"'                      Description = "New LUIS App"'                      Culture = "en-us"'                      Domain = "Comics"'                      UsageScenario = "IoT"                  });                    await client.Model.AddIntentAsync(appId' "0.1"' new ModelCreateObject                  {                      Name = "WeatherInPlace"                  });                    await client.Model.AddEntityAsync(appId' "0.1"' new EntityModelCreateObject                  {                      Name = "Place"                  });                    var examples = new List<ExampleLabelObject>() {                      new ExampleLabelObject                      {                          Text = "whats the weather in seattle?"'                          IntentName = "WeatherInPlace"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 29                              }                          }                      }'                      new ExampleLabelObject                      {                          Text = "whats the weather in buenos aires?"'                          IntentName = "WeatherInPlace"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 34                              }                          }                      }'                  };                    var result = await client.Examples.BatchAsync(appId' versionId' examples);                    await client.Apps.DeleteAsync(appId);                    Assert.Equal(examples.Count' result.Count);                  Assert.DoesNotContain(result' o => o.HasError.GetValueOrDefault());                  Assert.Contains(result' o => examples.Any(e => e.Text.Equals(o.Value.UtteranceText' StringComparison.OrdinalIgnoreCase)));              });
Magic Number,LUIS.Authoring.Tests.Luis,ExamplesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ExamplesTests.cs,AddExamplesInBatch,The following statement contains a magic number: UseClientFor(async client =>              {                  var appId = await client.Apps.AddAsync(new ApplicationCreateObject                  {                      Name = "Examples Test App"'                      Description = "New LUIS App"'                      Culture = "en-us"'                      Domain = "Comics"'                      UsageScenario = "IoT"                  });                    await client.Model.AddIntentAsync(appId' "0.1"' new ModelCreateObject                  {                      Name = "WeatherInPlace"                  });                    await client.Model.AddEntityAsync(appId' "0.1"' new EntityModelCreateObject                  {                      Name = "Place"                  });                    var examples = new List<ExampleLabelObject>() {                      new ExampleLabelObject                      {                          Text = "whats the weather in seattle?"'                          IntentName = "WeatherInPlace"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 29                              }                          }                      }'                      new ExampleLabelObject                      {                          Text = "whats the weather in buenos aires?"'                          IntentName = "WeatherInPlace"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 34                              }                          }                      }'                  };                    var result = await client.Examples.BatchAsync(appId' versionId' examples);                    await client.Apps.DeleteAsync(appId);                    Assert.Equal(examples.Count' result.Count);                  Assert.DoesNotContain(result' o => o.HasError.GetValueOrDefault());                  Assert.Contains(result' o => examples.Any(e => e.Text.Equals(o.Value.UtteranceText' StringComparison.OrdinalIgnoreCase)));              });
Magic Number,LUIS.Authoring.Tests.Luis,ExamplesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ExamplesTests.cs,AddExamplesInBatch,The following statement contains a magic number: UseClientFor(async client =>              {                  var appId = await client.Apps.AddAsync(new ApplicationCreateObject                  {                      Name = "Examples Test App"'                      Description = "New LUIS App"'                      Culture = "en-us"'                      Domain = "Comics"'                      UsageScenario = "IoT"                  });                    await client.Model.AddIntentAsync(appId' "0.1"' new ModelCreateObject                  {                      Name = "WeatherInPlace"                  });                    await client.Model.AddEntityAsync(appId' "0.1"' new EntityModelCreateObject                  {                      Name = "Place"                  });                    var examples = new List<ExampleLabelObject>() {                      new ExampleLabelObject                      {                          Text = "whats the weather in seattle?"'                          IntentName = "WeatherInPlace"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 29                              }                          }                      }'                      new ExampleLabelObject                      {                          Text = "whats the weather in buenos aires?"'                          IntentName = "WeatherInPlace"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 34                              }                          }                      }'                  };                    var result = await client.Examples.BatchAsync(appId' versionId' examples);                    await client.Apps.DeleteAsync(appId);                    Assert.Equal(examples.Count' result.Count);                  Assert.DoesNotContain(result' o => o.HasError.GetValueOrDefault());                  Assert.Contains(result' o => examples.Any(e => e.Text.Equals(o.Value.UtteranceText' StringComparison.OrdinalIgnoreCase)));              });
Magic Number,LUIS.Authoring.Tests.Luis,ExamplesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ExamplesTests.cs,AddExamplesInBatch_SomeInvalidExamples_ReturnsSomeErrors,The following statement contains a magic number: UseClientFor(async client =>              {                  var appId = await client.Apps.AddAsync(new ApplicationCreateObject                  {                      Name = "Examples Test App"'                      Description = "New LUIS App"'                      Culture = "en-us"'                      Domain = "Comics"'                      UsageScenario = "IoT"                  });                    await client.Model.AddIntentAsync(appId' "0.1"' new ModelCreateObject                  {                      Name = "WeatherInPlace"                  });                    await client.Model.AddEntityAsync(appId' "0.1"' new EntityModelCreateObject                  {                      Name = "Place"                  });                    var examples = new List<ExampleLabelObject>() {                      new ExampleLabelObject                      {                          Text = "whats the weather in seattle?"'                          IntentName = "InvalidIntent"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 29                              }                          }                      }'                      new ExampleLabelObject                      {                          Text = "whats the weather in buenos aires?"'                          IntentName = "IntentDoesNotExist"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 34                              }                          }                      }'                  };                    var result = await client.Examples.BatchAsync(appId' versionId' examples);                    await client.Apps.DeleteAsync(appId);                    Assert.Equal(examples.Count' result.Count);                  Assert.Contains(result' o => o.HasError.GetValueOrDefault());                  Assert.Contains(result' o => o.HasError.GetValueOrDefault() && o.Error != null && o.Error.Code == "FAILED" && o.Error.Message.Contains("The intent classifier IntentDoesNotExist"));              });
Magic Number,LUIS.Authoring.Tests.Luis,ExamplesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ExamplesTests.cs,AddExamplesInBatch_SomeInvalidExamples_ReturnsSomeErrors,The following statement contains a magic number: UseClientFor(async client =>              {                  var appId = await client.Apps.AddAsync(new ApplicationCreateObject                  {                      Name = "Examples Test App"'                      Description = "New LUIS App"'                      Culture = "en-us"'                      Domain = "Comics"'                      UsageScenario = "IoT"                  });                    await client.Model.AddIntentAsync(appId' "0.1"' new ModelCreateObject                  {                      Name = "WeatherInPlace"                  });                    await client.Model.AddEntityAsync(appId' "0.1"' new EntityModelCreateObject                  {                      Name = "Place"                  });                    var examples = new List<ExampleLabelObject>() {                      new ExampleLabelObject                      {                          Text = "whats the weather in seattle?"'                          IntentName = "InvalidIntent"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 29                              }                          }                      }'                      new ExampleLabelObject                      {                          Text = "whats the weather in buenos aires?"'                          IntentName = "IntentDoesNotExist"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 34                              }                          }                      }'                  };                    var result = await client.Examples.BatchAsync(appId' versionId' examples);                    await client.Apps.DeleteAsync(appId);                    Assert.Equal(examples.Count' result.Count);                  Assert.Contains(result' o => o.HasError.GetValueOrDefault());                  Assert.Contains(result' o => o.HasError.GetValueOrDefault() && o.Error != null && o.Error.Code == "FAILED" && o.Error.Message.Contains("The intent classifier IntentDoesNotExist"));              });
Magic Number,LUIS.Authoring.Tests.Luis,ExamplesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ExamplesTests.cs,AddExamplesInBatch_SomeInvalidExamples_ReturnsSomeErrors,The following statement contains a magic number: UseClientFor(async client =>              {                  var appId = await client.Apps.AddAsync(new ApplicationCreateObject                  {                      Name = "Examples Test App"'                      Description = "New LUIS App"'                      Culture = "en-us"'                      Domain = "Comics"'                      UsageScenario = "IoT"                  });                    await client.Model.AddIntentAsync(appId' "0.1"' new ModelCreateObject                  {                      Name = "WeatherInPlace"                  });                    await client.Model.AddEntityAsync(appId' "0.1"' new EntityModelCreateObject                  {                      Name = "Place"                  });                    var examples = new List<ExampleLabelObject>() {                      new ExampleLabelObject                      {                          Text = "whats the weather in seattle?"'                          IntentName = "InvalidIntent"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 29                              }                          }                      }'                      new ExampleLabelObject                      {                          Text = "whats the weather in buenos aires?"'                          IntentName = "IntentDoesNotExist"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 34                              }                          }                      }'                  };                    var result = await client.Examples.BatchAsync(appId' versionId' examples);                    await client.Apps.DeleteAsync(appId);                    Assert.Equal(examples.Count' result.Count);                  Assert.Contains(result' o => o.HasError.GetValueOrDefault());                  Assert.Contains(result' o => o.HasError.GetValueOrDefault() && o.Error != null && o.Error.Code == "FAILED" && o.Error.Message.Contains("The intent classifier IntentDoesNotExist"));              });
Magic Number,LUIS.Authoring.Tests.Luis,ExamplesTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ExamplesTests.cs,AddExamplesInBatch_SomeInvalidExamples_ReturnsSomeErrors,The following statement contains a magic number: UseClientFor(async client =>              {                  var appId = await client.Apps.AddAsync(new ApplicationCreateObject                  {                      Name = "Examples Test App"'                      Description = "New LUIS App"'                      Culture = "en-us"'                      Domain = "Comics"'                      UsageScenario = "IoT"                  });                    await client.Model.AddIntentAsync(appId' "0.1"' new ModelCreateObject                  {                      Name = "WeatherInPlace"                  });                    await client.Model.AddEntityAsync(appId' "0.1"' new EntityModelCreateObject                  {                      Name = "Place"                  });                    var examples = new List<ExampleLabelObject>() {                      new ExampleLabelObject                      {                          Text = "whats the weather in seattle?"'                          IntentName = "InvalidIntent"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 29                              }                          }                      }'                      new ExampleLabelObject                      {                          Text = "whats the weather in buenos aires?"'                          IntentName = "IntentDoesNotExist"'                          EntityLabels = new List<EntityLabelObject>()                          {                              new EntityLabelObject()                              {                                  EntityName = "Place"'                                  StartCharIndex = 21'                                  EndCharIndex = 34                              }                          }                      }'                  };                    var result = await client.Examples.BatchAsync(appId' versionId' examples);                    await client.Apps.DeleteAsync(appId);                    Assert.Equal(examples.Count' result.Count);                  Assert.Contains(result' o => o.HasError.GetValueOrDefault());                  Assert.Contains(result' o => o.HasError.GetValueOrDefault() && o.Error != null && o.Error.Code == "FAILED" && o.Error.Message.Contains("The intent classifier IntentDoesNotExist"));              });
Magic Number,LUIS.Authoring.Tests.Luis,ModelClosedListsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelClosedListsTests.cs,GetClosedList,The following statement contains a magic number: UseClientFor(async client =>              {                  var listId = await client.Model.AddClosedListAsync(GlobalAppId' versionId' GetClosedListSample());                  var list = await client.Model.GetClosedListAsync(GlobalAppId' versionId' listId);                  await client.Model.DeleteClosedListAsync(GlobalAppId' versionId' listId);                    // Assert                  Assert.Equal("States"' list.Name);                  Assert.Equal(3' list.SubLists.Count);              });
Magic Number,LUIS.Authoring.Tests.Luis,ModelClosedListsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelClosedListsTests.cs,PatchClosedList,The following statement contains a magic number: UseClientFor(async client =>              {                  var listId = await client.Model.AddClosedListAsync(GlobalAppId' versionId' GetClosedListSample());                    await client.Model.PatchClosedListAsync(GlobalAppId' versionId' listId' new ClosedListModelPatchObject                  {                      SubLists = new List<WordListObject>()                      {                          new WordListObject()                          {                              CanonicalForm = "Texas"'                              List = new List<string>() { "tx"' "texas" }                          }'                          new WordListObject()                          {                              CanonicalForm = "Florida"'                              List = new List<string>() { "fl"' "florida" }                          }                      }                  });                    var list = await client.Model.GetClosedListAsync(GlobalAppId' versionId' listId);                  await client.Model.DeleteClosedListAsync(GlobalAppId' versionId' listId);                    Assert.Equal(5' list.SubLists.Count);                  Assert.Contains(list.SubLists' o => o.CanonicalForm == "Texas" && o.List.Contains("tx") && o.List.Contains("texas"));                  Assert.Contains(list.SubLists' o => o.CanonicalForm == "Florida" && o.List.Contains("fl") && o.List.Contains("florida"));              });
Magic Number,LUIS.Authoring.Tests.Luis,ModelClosedListsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelClosedListsTests.cs,AddSubList,The following statement contains a magic number: UseClientFor(async client =>              {                  var listId = await client.Model.AddClosedListAsync(GlobalAppId' versionId' GetClosedListSample());                    var sublistId = await client.Model.AddSubListAsync(GlobalAppId' versionId' listId' new WordListObject()                  {                      CanonicalForm = "Texas"'                      List = new List<string>() { "tx"' "texas" }                  });                    var list = await client.Model.GetClosedListAsync(GlobalAppId' versionId' listId);                  await client.Model.DeleteClosedListAsync(GlobalAppId' versionId' listId);                    Assert.Equal(4' list.SubLists.Count);                  Assert.Contains(list.SubLists' o => o.CanonicalForm == "Texas" && o.List.Contains("tx") && o.List.Contains("texas"));              });
Magic Number,LUIS.Authoring.Tests.Luis,ModelClosedListsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelClosedListsTests.cs,DeleteSubList,The following statement contains a magic number: UseClientFor(async client =>              {                  var listId = await client.Model.AddClosedListAsync(GlobalAppId' versionId' GetClosedListSample());                  var sublistId = (await client.Model.GetClosedListAsync(GlobalAppId' versionId' listId)).SubLists.Single(o => o.CanonicalForm == "New York").Id;                    await client.Model.DeleteSubListAsync(GlobalAppId' versionId' listId' sublistId);                    var list = await client.Model.GetClosedListAsync(GlobalAppId' versionId' listId);                  await client.Model.DeleteClosedListAsync(GlobalAppId' versionId' listId);                    Assert.Equal(2' list.SubLists.Count);                  Assert.DoesNotContain(list.SubLists' o => o.CanonicalForm == "New York");              });
Magic Number,LUIS.Authoring.Tests.Luis,ModelClosedListsTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\ModelClosedListsTests.cs,UpdateSubList,The following statement contains a magic number: UseClientFor(async client =>              {                  var listId = await client.Model.AddClosedListAsync(GlobalAppId' versionId' GetClosedListSample());                  var sublistId = (await client.Model.GetClosedListAsync(GlobalAppId' versionId' listId)).SubLists.Single(o => o.CanonicalForm == "New York").Id;                    await client.Model.UpdateSubListAsync(GlobalAppId' versionId' listId' sublistId' new WordListBaseUpdateObject()                  {                      CanonicalForm = "New Yorkers"'                      List = new List<string>() { "NYC"' "NY"' "New York" }'                  });                    var list = await client.Model.GetClosedListAsync(GlobalAppId' versionId' listId);                  await client.Model.DeleteClosedListAsync(GlobalAppId' versionId' listId);                    Assert.Equal(3' list.SubLists.Count);                  Assert.DoesNotContain(list.SubLists' o => o.CanonicalForm == "New York");                  Assert.Contains(list.SubLists' o => o.CanonicalForm == "New Yorkers" && o.List.Contains("NYC") && o.List.Contains("NY") && o.List.Contains("New York"));              });
Magic Number,LUIS.Authoring.Tests.Luis,TrainTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\TrainTests.cs,GetStatus,The following statement contains a magic number: UseClientFor(async client =>              {                  var versionId = "0.1";                  await client.Train.TrainVersionAsync(GlobalAppId' versionId);                  var result = await client.Train.GetStatusAsync(GlobalAppId' versionId);                  var finishStates = new string[] { "Success"' "UpToDate" };                    while (!result.All(r => finishStates.Contains(r.Details.Status)))                  {                      await Task.Delay(1000);                      result = await client.Train.GetStatusAsync(GlobalAppId' versionId);                  }                    foreach (var trainResult in result)                  {                      switch (trainResult.Details.Status)                      {                          case "Success":                          case "UpToDate":                              Assert.Null(trainResult.Details.FailureReason);                              break;                          case "Fail":                          case "InProgress":                          default:                              Assert.False(true);                              break;                      }                  }                });
Magic Number,LUIS.Authoring.Tests.Luis,TrainTests,D:\research\architectureSmells\repos\Azure_azure-sdk-for-net\sdk\cognitiveservices\Language.LUIS.Authoring\tests\Luis\TrainTests.cs,TrainVersion,The following statement contains a magic number: UseClientFor(async client =>              {                  var versionId = "0.1";                    await client.Train.TrainVersionAsync(GlobalAppId' versionId);                  var result = await client.Train.GetStatusAsync(GlobalAppId' versionId);                  var finishStates = new string[] { "Success"' "UpToDate" };                    while (!result.All(r => finishStates.Contains(r.Details.Status)))                  {                      await Task.Delay(1000);                      result = await client.Train.GetStatusAsync(GlobalAppId' versionId);                  }                    var secondTrainResult = await client.Train.TrainVersionAsync(GlobalAppId' versionId);                    Assert.Equal("UpToDate"' secondTrainResult.Status);              });
