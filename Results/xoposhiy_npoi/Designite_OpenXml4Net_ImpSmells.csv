Implementation smell,Namespace,Class,File,Method,Description
Long Method,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,RelativizeUri,The method has 106 lines of code.
Complex Method,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,GetParts,Cyclomatic complexity of the method is 13
Complex Method,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,CreatePart,Cyclomatic complexity of the method is 9
Complex Method,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,RemovePart,Cyclomatic complexity of the method is 8
Complex Method,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,CheckPCharCompliance,Cyclomatic complexity of the method is 17
Complex Method,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,RelativizeUri,Cyclomatic complexity of the method is 21
Complex Method,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,ResolvePartUri,Cyclomatic complexity of the method is 8
Complex Method,NPOI.OpenXml4Net.OPC,ZipPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\ZipPackage.cs,GetPartsImpl,Cyclomatic complexity of the method is 16
Complex Method,NPOI.OpenXml4Net.OPC,ZipPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\ZipPackage.cs,SaveImpl,Cyclomatic complexity of the method is 9
Complex Method,NPOI.OpenXml4Net.OPC.Internal,ContentTypeManager,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentTypeManager.cs,RemoveContentType,Cyclomatic complexity of the method is 12
Complex Method,NPOI.OpenXml4Net.OPC.Internal.Unmarshallers,PackagePropertiesUnmarshaller,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\Unmarshallers\PackagePropertiesUnmarshaller.cs,CheckElementForOPCCompliance,Cyclomatic complexity of the method is 12
Long Parameter List,NPOI.OpenXml4Net.OPC,PackageRelationship,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackageRelationship.cs,PackageRelationship,The method has 6 parameters.
Long Identifier,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,PackagingUriHelper,The length of the parameter uriPACKAGE_RELATIONSHIPS_ROOT_URI is 33.
Long Identifier,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,PackagingUriHelper,The length of the parameter tmpPACKAGE_RELATIONSHIPS_ROOT_PART_NAME is 39.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,Init,The length of the statement  "		throw new OpenXml4NetException ("Package.init() : this exception should never happen' if you read this message please send a mail to the developers team."); " is 156.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,Create,The length of the statement  "		throw new InvalidOperationException ("This package (or file) already exists : use the open() method or delete the file."); " is 122.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,ConfigurePackage,The length of the statement  "		pkg.contentTypeManager.AddContentType (PackagingUriHelper.CreatePartName (PackagingUriHelper.PACKAGE_RELATIONSHIPS_ROOT_URI)' ContentTypes.RELATIONSHIPS_PART); " is 159.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,Close,The length of the statement  "		logger.Log (POILogger.WARN' "The close() method is intended to SAVE a package. This package is open in READ ONLY mode' use the revert() method instead !"); " is 155.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,AddThumbnail,The length of the statement  "			thumbnailPartName = PackagingUriHelper.CreatePartName ("/docProps/thumbnail" + path.Substring (path.LastIndexOf (".") + 1)); " is 124.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,GetParts,The length of the statement  "				throw new InvalidFormatException ("A part with the name '" + part.PartName + "' already exist : Packages shall not contain equivalent part names and package implementers shall neither Create nor recognize packages with equivalent part names. [M1.12]"); " is 252.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,GetParts,The length of the statement  "					throw new InvalidFormatException ("OPC Compliance error [M4.1]: there is more than one core properties relationship in the package !"); " is 135.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,CreatePart,The length of the statement  "		throw new InvalidOperationException ("A part with the name '" + partName.Name + "' already exists : Packages shall not contain equivalent part names and package implementers shall neither create nor recognize packages with equivalent part names. [M1.12]"); " is 256.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,CreatePart,The length of the statement  "			throw new InvalidOperationException ("OPC Compliance error [M4.1]: you try to add more than one core properties relationship in the package !"); " is 144.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,AddPackagePart,The length of the statement  "			throw new InvalidOperationException ("A part with the name '" + part.PartName.Name + "' already exists : Packages shall not contain equivalent part names and package implementers shall neither Create nor recognize packages with equivalent part names. [M1.12]"); " is 261.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,RemovePart,The length of the statement  "			logger.Log (POILogger.ERROR' "Part name URI '" + sourceURI + "' is not valid ! This message is not intended to be displayed !"); " is 128.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,RemovePartRecursive,The length of the statement  "			PackagePartName PartNameToRemove = PackagingUriHelper.CreatePartName (PackagingUriHelper.ResolvePartUri (rel.SourceUri' rel.TargetUri)); " is 136.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,DeletePartRecursive,The length of the statement  "			PackagePartName targetPartName = PackagingUriHelper.CreatePartName (PackagingUriHelper.ResolvePartUri (partName.URI' relationship.TargetUri)); " is 142.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,DeletePartRecursive,The length of the statement  "		logger.Log (POILogger.WARN' "An exception occurs while deleting part '" + partName.Name + "'. Some parts may remain in the package. - " + e.Message); " is 149.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,AddRelationship,The length of the statement  "		throw new InvalidOperationException ("OPC Compliance error [M4.1]: can't add another core properties part ! Use the built-in package method instead."); " is 151.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,AddRelationship,The length of the statement  "		throw new InvalidOperationException ("Rule M1.25: The Relationships part shall not have relationships to any other part."); " is 123.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,AddMarshaller,The length of the statement  "		logger.Log (POILogger.WARN' "The specified content type is not valid: '" + e.Message + "'. The marshaller will not be Added !"); " is 128.
Long Statement,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,AddUnmarshaller,The length of the statement  "		logger.Log (POILogger.WARN' "The specified content type is not valid: '" + e.Message + "'. The unmarshaller will not be Added !"); " is 130.
Long Statement,NPOI.OpenXml4Net.OPC,PackagePart,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePart.cs,AddRelationship,The length of the statement  "		throw new InvalidOperationException ("Rule M1.25: The Relationships part shall not have relationships to any other part."); " is 123.
Long Statement,NPOI.OpenXml4Net.OPC,PackagePart,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePart.cs,AddRelationship,The length of the statement  "		throw new InvalidOperationException ("Rule M1.25: The Relationships part shall not have relationships to any other part."); " is 123.
Long Statement,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,IsRelationshipPartURI,The length of the statement  "	return Regex.IsMatch (partUri.OriginalString' "^.*/" + PackagingUriHelper.RELATIONSHIP_PART_SEGMENT_NAME + "/.*\\" + PackagingUriHelper.RELATIONSHIP_PART_EXTENSION_NAME + "$"); " is 176.
Long Statement,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,ThrowExceptionIfPartNameHaveInvalidSegments,The length of the statement  "			throw new InvalidFormatException ("A segment shall not end with a dot ('.') character [M1.9]: " + partUri.OriginalString); " is 122.
Long Statement,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,ThrowExceptionIfPartNameHaveInvalidSegments,The length of the statement  "			throw new InvalidFormatException ("A segment shall include at least one non-dot character. [M1.10]: " + partUri.OriginalString); " is 128.
Long Statement,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,CheckPCharCompliance,The length of the statement  "				throw new InvalidFormatException ("A segment shall not contain percent-encoded forward slash ('/')' or backward slash ('\') characters. [M1.7]"); " is 145.
Long Statement,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,CheckPCharCompliance,The length of the statement  "			if ((decodedChar >= 'A' && decodedChar <= 'Z') || (decodedChar >= 'a' && decodedChar <= 'z') || (decodedChar >= '0' && decodedChar <= '9')) " is 139.
Long Statement,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,ThrowExceptionIfPartNameNotStartsWithForwardSlashChar,The length of the statement  "		throw new InvalidFormatException ("A part name shall start with a forward slash ('/') character [M1.4]: " + partUri.OriginalString); " is 132.
Long Statement,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,ThrowExceptionIfPartNameEndsWithForwardSlashChar,The length of the statement  "		throw new InvalidFormatException ("A part name shall not have a forward slash as the last character [M1.5]: " + partUri.OriginalString); " is 136.
Long Statement,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,Compare,The length of the statement  "	return thisPartName.partNameURI.OriginalString.ToLower ().CompareTo (otherPartName.partNameURI.OriginalString.ToLower ()); " is 122.
Long Statement,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,Equals,The length of the statement  "	return this.partNameURI.OriginalString.ToLower ().Equals (((PackagePartName)otherPartName).partNameURI.OriginalString.ToLower ()); " is 130.
Long Statement,NPOI.OpenXml4Net.OPC,PackageRelationship,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackageRelationship.cs,Equals,The length of the statement  "	return (this.id == rel.id && this.relationshipType == rel.relationshipType && (rel.source != null ? rel.source.Equals (this.source) : true) && this.targetMode == rel.targetMode && this.targetUri.Equals (rel.targetUri)); " is 219.
Long Statement,NPOI.OpenXml4Net.OPC,PackageRelationship,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackageRelationship.cs,GetHashCode,The length of the statement  "	return this.id.GetHashCode () + this.relationshipType.GetHashCode () + this.source.GetHashCode () + this.targetMode.GetHashCode () + this.targetUri.GetHashCode (); " is 163.
Long Statement,NPOI.OpenXml4Net.OPC,PackageRelationship,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackageRelationship.cs,ToString,The length of the statement  "	sb.Append (relationshipType == null ? " - relationshipType=null" : " - relationshipType=" + relationshipType.ToString ()); " is 122.
Long Statement,NPOI.OpenXml4Net.OPC,PackageRelationshipCollection,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackageRelationshipCollection.cs,ParseRelationshipsPart,The length of the statement  "					throw new InvalidFormatException ("OPC Compliance error [M4.1]: there is more than one core properties relationship in the package !"); " is 135.
Long Statement,NPOI.OpenXml4Net.OPC,PackageRelationshipCollection,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackageRelationshipCollection.cs,ParseRelationshipsPart,The length of the statement  "			string targetModeAttr = iterator.Current.GetAttribute (PackageRelationship.TARGET_MODE_ATTRIBUTE_NAME' xpathnav.NamespaceURI); " is 126.
Long Statement,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,IsRelationshipPartURI,The length of the statement  "	return Regex.IsMatch (partUri.OriginalString' ".*" + RELATIONSHIP_PART_SEGMENT_NAME + ".*" + RELATIONSHIP_PART_EXTENSION_NAME + "$"); " is 133.
Long Statement,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,Combine,The length of the statement  "	else if ((!prefix.EndsWith ("" + FORWARD_SLASH_CHAR) && suffix.StartsWith ("" + FORWARD_SLASH_CHAR) || (prefix.EndsWith ("" + FORWARD_SLASH_CHAR) && !suffix.StartsWith ("" + FORWARD_SLASH_CHAR)))) " is 196.
Long Statement,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,RelativizeUri,The length of the statement  "	if ((segmentsTheSame == 0 || segmentsTheSame == 1) && segmentsSource [0].Equals ("") && segmentsTarget [0].Equals ("")) { " is 121.
Long Statement,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,GetSourcePartUriFromRelationshipPartUri,The length of the statement  "	if (Uri.Compare (relationshipPartUri' PACKAGE_RELATIONSHIPS_ROOT_URI' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.InvariantCultureIgnoreCase) == 0) " is 172.
Long Statement,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,GetSourcePartUriFromRelationshipPartUri,The length of the statement  "	filename = filename.Substring (0' ((filename.Length - filenameWithoutExtension.Length) - RELATIONSHIP_PART_EXTENSION_NAME.Length)); " is 131.
Long Statement,NPOI.OpenXml4Net.OPC,ZipPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\ZipPackage.cs,GetPartsImpl,The length of the statement  "			throw new InvalidFormatException ("The part " + partName.URI.OriginalString + " does not have any content type ! Rule: Package require content types when retrieving a part from a package. [M.1.14]"); " is 199.
Long Statement,NPOI.OpenXml4Net.OPC,ZipPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\ZipPackage.cs,CloseImpl,The length of the statement  "				logger.Log (POILogger.WARN' "The temporary file: '" + tempfilePath + "' cannot be deleted ! Make sure that no other application use it."); " is 138.
Long Statement,NPOI.OpenXml4Net.OPC,ZipPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\ZipPackage.cs,SaveImpl,The length of the statement  "		this.relationships.AddRelationship (this.packageProperties.PartName.URI' TargetMode.Internal' PackageRelationshipTypes.CORE_PROPERTIES' null); " is 142.
Long Statement,NPOI.OpenXml4Net.OPC,ZipPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\ZipPackage.cs,SaveImpl,The length of the statement  "	ZipPartMarshaller.MarshallRelationshipPart (this.Relationships' PackagingUriHelper.PACKAGE_RELATIONSHIPS_ROOT_PART_NAME' zos); " is 126.
Long Statement,NPOI.OpenXml4Net.OPC,ZipPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\ZipPackage.cs,SaveImpl,The length of the statement  "				throw new OpenXml4NetException ("The part " + part.PartName.URI + " fail to be saved in the stream with marshaller " + marshaller); " is 131.
Long Statement,NPOI.OpenXml4Net.OPC,ZipPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\ZipPackage.cs,SaveImpl,The length of the statement  "				throw new OpenXml4NetException ("The part " + part.PartName.URI + " fail to be saved in the stream with marshaller " + defaultPartMarshaller); " is 142.
Long Statement,NPOI.OpenXml4Net.OPC.Internal,ContentType,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentType.cs,Equals,The length of the statement  "	return (!(obj is ContentType)) || (this.ToString ().Equals (obj.ToString ()' StringComparison.InvariantCultureIgnoreCase)); " is 123.
Long Statement,NPOI.OpenXml4Net.OPC.Internal,ContentTypeManager,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentTypeManager.cs,AddContentType,The length of the statement  "	if ((extension.Length == 0) || (this.defaultContentType.ContainsKey (extension) && !(defaultCTExists = this.defaultContentType.ContainsValue (contentType)))) " is 157.
Long Statement,NPOI.OpenXml4Net.OPC.Internal,ContentTypeManager,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentTypeManager.cs,RemoveContentType,The length of the statement  "				if (!part.PartName.Equals (partName) && part.PartName.Extension.Equals (extensionToDelete' StringComparison.InvariantCultureIgnoreCase)) { " is 138.
Long Statement,NPOI.OpenXml4Net.OPC.Internal,ContentTypeManager,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentTypeManager.cs,RemoveContentType,The length of the statement  "					throw new InvalidOperationException ("Rule M2.4 is not respected: Nor a default element or override element is associated with the part: " + part.PartName.Name); " is 161.
Long Statement,NPOI.OpenXml4Net.OPC.Internal,ContentTypeManager,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentTypeManager.cs,IsContentTypeRegister,The length of the statement  "	return (this.defaultContentType.Values.Contains (contentType) || (this.overrideContentType != null && this.overrideContentType.Values.Contains (contentType))); " is 159.
Long Statement,NPOI.OpenXml4Net.OPC.Internal,ContentTypeManager,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentTypeManager.cs,GetContentType,The length of the statement  "		throw new OpenXml4NetException ("Rule M2.4 exception : this error should NEVER happen' if so please send a mail to the developers team' thanks !"); " is 147.
Long Statement,NPOI.OpenXml4Net.OPC.Internal,ContentTypeManager,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentTypeManager.cs,ParseContentTypesFile,The length of the statement  "			Uri uri = new Uri (iterator.Current.GetAttribute (PART_NAME_ATTRIBUTE_NAME' xpathnav.NamespaceURI)' UriKind.RelativeOrAbsolute); " is 128.
Long Statement,NPOI.OpenXml4Net.OPC.Internal,ZipHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ZipHelper.cs,GetCorePropertiesZipEntry,The length of the statement  "	PackageRelationship corePropsRel = pkg.GetRelationshipsByType (PackageRelationshipTypes.CORE_PROPERTIES).GetRelationship (0); " is 125.
Long Statement,NPOI.OpenXml4Net.OPC.Internal.Marshallers,ZipPartMarshaller,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\Marshallers\ZipPartMarshaller.cs,MarshallRelationshipPart,The length of the statement  "	XmlNode root = xmlOutDoc.AppendChild (xmlOutDoc.CreateElement (PackageRelationship.RELATIONSHIPS_TAG_NAME' PackageNamespaces.RELATIONSHIPS)); " is 141.
Long Statement,NPOI.OpenXml4Net.OPC.Internal.Marshallers,ZipPartMarshaller,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\Marshallers\ZipPartMarshaller.cs,MarshallRelationshipPart,The length of the statement  "		XmlElement relElem = xmlOutDoc.CreateElement (PackageRelationship.RELATIONSHIP_TAG_NAME' PackageNamespaces.RELATIONSHIPS); " is 122.
Long Statement,NPOI.OpenXml4Net.OPC.Internal.Unmarshallers,PackagePropertiesUnmarshaller,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\Unmarshallers\PackagePropertiesUnmarshaller.cs,CheckElementForOPCCompliance,The length of the statement  "				throw new InvalidFormatException ("OPC Compliance error [M4.2]: A format consumer shall consider the use of the Markup Compatibility namespace to be an error."); " is 161.
Long Statement,NPOI.OpenXml4Net.OPC.Internal.Unmarshallers,PackagePropertiesUnmarshaller,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\Unmarshallers\PackagePropertiesUnmarshaller.cs,CheckElementForOPCCompliance,The length of the statement  "	if (el.NamespaceURI.Equals (namespaceDcTerms) && !(el.LocalName.Equals (KEYWORD_CREATED) || el.LocalName.Equals (KEYWORD_MODIFIED))) " is 132.
Long Statement,NPOI.OpenXml4Net.OPC.Internal.Unmarshallers,PackagePropertiesUnmarshaller,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\Unmarshallers\PackagePropertiesUnmarshaller.cs,CheckElementForOPCCompliance,The length of the statement  "		throw new InvalidFormatException ("OPC Compliance error [M4.3]: Producers shall not create a document element that contains refinements to the Dublin Core elements' except for the two specified in the schema: <dcterms:created> and <dcterms:modified> Consumers shall consider a document element that violates this constraint to be an error."); " is 342.
Long Statement,NPOI.OpenXml4Net.OPC.Internal.Unmarshallers,PackagePropertiesUnmarshaller,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\Unmarshallers\PackagePropertiesUnmarshaller.cs,CheckElementForOPCCompliance,The length of the statement  "		throw new InvalidFormatException ("OPC Compliance error [M4.4]: Producers shall not create a document element that contains the xml:lang attribute. Consumers shall consider a document element that violates this constraint to be an error."); " is 240.
Long Statement,NPOI.OpenXml4Net.OPC.Internal.Unmarshallers,PackagePropertiesUnmarshaller,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\Unmarshallers\PackagePropertiesUnmarshaller.cs,CheckElementForOPCCompliance,The length of the statement  "			throw new InvalidFormatException ("Namespace error : " + elName + " shouldn't have the following naemspace -> " + namespaceDcTerms); " is 132.
Long Statement,NPOI.OpenXml4Net.OPC.Internal.Unmarshallers,PackagePropertiesUnmarshaller,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\Unmarshallers\PackagePropertiesUnmarshaller.cs,CheckElementForOPCCompliance,The length of the statement  "			throw new InvalidFormatException ("The element '" + elName + "' must have the '" + nsmgr.LookupPrefix (namespaceXSI) + ":type' attribute present !"); " is 149.
Long Statement,NPOI.OpenXml4Net.OPC.Internal.Unmarshallers,PackagePropertiesUnmarshaller,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\Unmarshallers\PackagePropertiesUnmarshaller.cs,CheckElementForOPCCompliance,The length of the statement  "			throw new InvalidFormatException ("The element '" + elName + "' must have the '" + nsmgr.LookupPrefix (namespaceXSI) + ":type' attribute with the value 'dcterms:W3CDTF' !"); " is 173.
Complex Conditional,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,CheckPCharCompliance,The conditional expression  "(c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')"  is complex.
Complex Conditional,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,CheckPCharCompliance,The conditional expression  "(decodedChar >= 'A' && decodedChar <= 'Z') || (decodedChar >= 'a' && decodedChar <= 'z') || (decodedChar >= '0' && decodedChar <= '9')"  is complex.
Complex Conditional,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,Combine,The conditional expression  "(!prefix.EndsWith ("" + FORWARD_SLASH_CHAR) && suffix.StartsWith ("" + FORWARD_SLASH_CHAR) || (prefix.EndsWith ("" + FORWARD_SLASH_CHAR) && !suffix.StartsWith ("" + FORWARD_SLASH_CHAR)))"  is complex.
Complex Conditional,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,RelativizeUri,The conditional expression  "(segmentsTheSame == 0 || segmentsTheSame == 1) && segmentsSource [0].Equals ("") && segmentsTarget [0].Equals ("")"  is complex.
Empty Catch Block,NPOI.OpenXml4Net.OPC,PackagePart,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePart.cs,IsRelationshipExists,The method has an empty catch block.
Empty Catch Block,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,PackagingUriHelper,The method has an empty catch block.
Empty Catch Block,NPOI.OpenXml4Net.OPC,ZipPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\ZipPackage.cs,RevertImpl,The method has an empty catch block.
Magic Number,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,Init,The following statement contains a magic number: this.partMarshallers = new SortedList<ContentType' PartMarshaller> (5);  
Magic Number,NPOI.OpenXml4Net.OPC,OPCPackage,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\OPCPackage.cs,Init,The following statement contains a magic number: this.partUnmarshallers = new SortedList<ContentType' PartUnmarshaller> (2);  
Magic Number,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,CheckPCharCompliance,The following statement contains a magic number: for (int i = 0; i < segment.Length; ++i) {  	char c = segment [i];  	errorFlag = true;  	/* Check rule M1.6 */// Check for digit or letter  	if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) {  		errorFlag = false;  	}  	else {  		// Check "-"' "."' "_"' "~"  		for (int j = 0; j < RFC3986_PCHAR_UNRESERVED_SUP.Length; ++j) {  			if (c == RFC3986_PCHAR_UNRESERVED_SUP [j] [0]) {  				errorFlag = false;  				break;  			}  		}  		// Check ":"' "@"  		for (int j = 0; errorFlag && j < RFC3986_PCHAR_AUTHORIZED_SUP.Length; ++j) {  			if (c == RFC3986_PCHAR_AUTHORIZED_SUP [j] [0]) {  				errorFlag = false;  			}  		}  		// Check "!"' "$"' "&"' "'"' "("' ")"' "*"' "+"' "'"' ";"' "="  		for (int j = 0; errorFlag && j < RFC3986_PCHAR_SUB_DELIMS.Length; ++j) {  			if (c == RFC3986_PCHAR_SUB_DELIMS [j] [0]) {  				errorFlag = false;  			}  		}  	}  	if (errorFlag && c == '%') {  		// We certainly found an encoded character' check for length  		// now ( '%' HEXDIGIT HEXDIGIT)  		if (((segment.Length - i) < 2)) {  			throw new InvalidFormatException ("The segment " + segment + " contain invalid encoded character !");  		}  		// If not percent encoded character error occur then reset the  		// flag -> the character is valid  		errorFlag = false;  		// Decode the encoded character  		char decodedChar = (char)Convert.ToInt32 (segment.Substring (i + 1' 2)' 16);  		i += 2;  		/* Check rule M1.7 */if (decodedChar == '/' || decodedChar == '\\')  			throw new InvalidFormatException ("A segment shall not contain percent-encoded forward slash ('/')' or backward slash ('\') characters. [M1.7]");  		/* Check rule M1.8 */// Check for unreserved character like define in RFC3986  		if ((decodedChar >= 'A' && decodedChar <= 'Z') || (decodedChar >= 'a' && decodedChar <= 'z') || (decodedChar >= '0' && decodedChar <= '9'))  			errorFlag = true;  		// Check for unreserved character "-"' "."' "_"' "~"  		for (int j = 0; !errorFlag && j < RFC3986_PCHAR_UNRESERVED_SUP.Length; ++j) {  			if (c == RFC3986_PCHAR_UNRESERVED_SUP [j] [0]) {  				errorFlag = true;  				break;  			}  		}  		if (errorFlag)  			throw new InvalidFormatException ("A segment shall not contain percent-encoded unreserved characters. [M1.8]");  	}  	if (errorFlag)  		throw new InvalidFormatException ("A segment shall not hold any characters other than pchar characters. [M1.6]");  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,CheckPCharCompliance,The following statement contains a magic number: for (int i = 0; i < segment.Length; ++i) {  	char c = segment [i];  	errorFlag = true;  	/* Check rule M1.6 */// Check for digit or letter  	if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) {  		errorFlag = false;  	}  	else {  		// Check "-"' "."' "_"' "~"  		for (int j = 0; j < RFC3986_PCHAR_UNRESERVED_SUP.Length; ++j) {  			if (c == RFC3986_PCHAR_UNRESERVED_SUP [j] [0]) {  				errorFlag = false;  				break;  			}  		}  		// Check ":"' "@"  		for (int j = 0; errorFlag && j < RFC3986_PCHAR_AUTHORIZED_SUP.Length; ++j) {  			if (c == RFC3986_PCHAR_AUTHORIZED_SUP [j] [0]) {  				errorFlag = false;  			}  		}  		// Check "!"' "$"' "&"' "'"' "("' ")"' "*"' "+"' "'"' ";"' "="  		for (int j = 0; errorFlag && j < RFC3986_PCHAR_SUB_DELIMS.Length; ++j) {  			if (c == RFC3986_PCHAR_SUB_DELIMS [j] [0]) {  				errorFlag = false;  			}  		}  	}  	if (errorFlag && c == '%') {  		// We certainly found an encoded character' check for length  		// now ( '%' HEXDIGIT HEXDIGIT)  		if (((segment.Length - i) < 2)) {  			throw new InvalidFormatException ("The segment " + segment + " contain invalid encoded character !");  		}  		// If not percent encoded character error occur then reset the  		// flag -> the character is valid  		errorFlag = false;  		// Decode the encoded character  		char decodedChar = (char)Convert.ToInt32 (segment.Substring (i + 1' 2)' 16);  		i += 2;  		/* Check rule M1.7 */if (decodedChar == '/' || decodedChar == '\\')  			throw new InvalidFormatException ("A segment shall not contain percent-encoded forward slash ('/')' or backward slash ('\') characters. [M1.7]");  		/* Check rule M1.8 */// Check for unreserved character like define in RFC3986  		if ((decodedChar >= 'A' && decodedChar <= 'Z') || (decodedChar >= 'a' && decodedChar <= 'z') || (decodedChar >= '0' && decodedChar <= '9'))  			errorFlag = true;  		// Check for unreserved character "-"' "."' "_"' "~"  		for (int j = 0; !errorFlag && j < RFC3986_PCHAR_UNRESERVED_SUP.Length; ++j) {  			if (c == RFC3986_PCHAR_UNRESERVED_SUP [j] [0]) {  				errorFlag = true;  				break;  			}  		}  		if (errorFlag)  			throw new InvalidFormatException ("A segment shall not contain percent-encoded unreserved characters. [M1.8]");  	}  	if (errorFlag)  		throw new InvalidFormatException ("A segment shall not hold any characters other than pchar characters. [M1.6]");  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,CheckPCharCompliance,The following statement contains a magic number: for (int i = 0; i < segment.Length; ++i) {  	char c = segment [i];  	errorFlag = true;  	/* Check rule M1.6 */// Check for digit or letter  	if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) {  		errorFlag = false;  	}  	else {  		// Check "-"' "."' "_"' "~"  		for (int j = 0; j < RFC3986_PCHAR_UNRESERVED_SUP.Length; ++j) {  			if (c == RFC3986_PCHAR_UNRESERVED_SUP [j] [0]) {  				errorFlag = false;  				break;  			}  		}  		// Check ":"' "@"  		for (int j = 0; errorFlag && j < RFC3986_PCHAR_AUTHORIZED_SUP.Length; ++j) {  			if (c == RFC3986_PCHAR_AUTHORIZED_SUP [j] [0]) {  				errorFlag = false;  			}  		}  		// Check "!"' "$"' "&"' "'"' "("' ")"' "*"' "+"' "'"' ";"' "="  		for (int j = 0; errorFlag && j < RFC3986_PCHAR_SUB_DELIMS.Length; ++j) {  			if (c == RFC3986_PCHAR_SUB_DELIMS [j] [0]) {  				errorFlag = false;  			}  		}  	}  	if (errorFlag && c == '%') {  		// We certainly found an encoded character' check for length  		// now ( '%' HEXDIGIT HEXDIGIT)  		if (((segment.Length - i) < 2)) {  			throw new InvalidFormatException ("The segment " + segment + " contain invalid encoded character !");  		}  		// If not percent encoded character error occur then reset the  		// flag -> the character is valid  		errorFlag = false;  		// Decode the encoded character  		char decodedChar = (char)Convert.ToInt32 (segment.Substring (i + 1' 2)' 16);  		i += 2;  		/* Check rule M1.7 */if (decodedChar == '/' || decodedChar == '\\')  			throw new InvalidFormatException ("A segment shall not contain percent-encoded forward slash ('/')' or backward slash ('\') characters. [M1.7]");  		/* Check rule M1.8 */// Check for unreserved character like define in RFC3986  		if ((decodedChar >= 'A' && decodedChar <= 'Z') || (decodedChar >= 'a' && decodedChar <= 'z') || (decodedChar >= '0' && decodedChar <= '9'))  			errorFlag = true;  		// Check for unreserved character "-"' "."' "_"' "~"  		for (int j = 0; !errorFlag && j < RFC3986_PCHAR_UNRESERVED_SUP.Length; ++j) {  			if (c == RFC3986_PCHAR_UNRESERVED_SUP [j] [0]) {  				errorFlag = true;  				break;  			}  		}  		if (errorFlag)  			throw new InvalidFormatException ("A segment shall not contain percent-encoded unreserved characters. [M1.8]");  	}  	if (errorFlag)  		throw new InvalidFormatException ("A segment shall not hold any characters other than pchar characters. [M1.6]");  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,CheckPCharCompliance,The following statement contains a magic number: for (int i = 0; i < segment.Length; ++i) {  	char c = segment [i];  	errorFlag = true;  	/* Check rule M1.6 */// Check for digit or letter  	if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) {  		errorFlag = false;  	}  	else {  		// Check "-"' "."' "_"' "~"  		for (int j = 0; j < RFC3986_PCHAR_UNRESERVED_SUP.Length; ++j) {  			if (c == RFC3986_PCHAR_UNRESERVED_SUP [j] [0]) {  				errorFlag = false;  				break;  			}  		}  		// Check ":"' "@"  		for (int j = 0; errorFlag && j < RFC3986_PCHAR_AUTHORIZED_SUP.Length; ++j) {  			if (c == RFC3986_PCHAR_AUTHORIZED_SUP [j] [0]) {  				errorFlag = false;  			}  		}  		// Check "!"' "$"' "&"' "'"' "("' ")"' "*"' "+"' "'"' ";"' "="  		for (int j = 0; errorFlag && j < RFC3986_PCHAR_SUB_DELIMS.Length; ++j) {  			if (c == RFC3986_PCHAR_SUB_DELIMS [j] [0]) {  				errorFlag = false;  			}  		}  	}  	if (errorFlag && c == '%') {  		// We certainly found an encoded character' check for length  		// now ( '%' HEXDIGIT HEXDIGIT)  		if (((segment.Length - i) < 2)) {  			throw new InvalidFormatException ("The segment " + segment + " contain invalid encoded character !");  		}  		// If not percent encoded character error occur then reset the  		// flag -> the character is valid  		errorFlag = false;  		// Decode the encoded character  		char decodedChar = (char)Convert.ToInt32 (segment.Substring (i + 1' 2)' 16);  		i += 2;  		/* Check rule M1.7 */if (decodedChar == '/' || decodedChar == '\\')  			throw new InvalidFormatException ("A segment shall not contain percent-encoded forward slash ('/')' or backward slash ('\') characters. [M1.7]");  		/* Check rule M1.8 */// Check for unreserved character like define in RFC3986  		if ((decodedChar >= 'A' && decodedChar <= 'Z') || (decodedChar >= 'a' && decodedChar <= 'z') || (decodedChar >= '0' && decodedChar <= '9'))  			errorFlag = true;  		// Check for unreserved character "-"' "."' "_"' "~"  		for (int j = 0; !errorFlag && j < RFC3986_PCHAR_UNRESERVED_SUP.Length; ++j) {  			if (c == RFC3986_PCHAR_UNRESERVED_SUP [j] [0]) {  				errorFlag = true;  				break;  			}  		}  		if (errorFlag)  			throw new InvalidFormatException ("A segment shall not contain percent-encoded unreserved characters. [M1.8]");  	}  	if (errorFlag)  		throw new InvalidFormatException ("A segment shall not hold any characters other than pchar characters. [M1.6]");  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,CheckPCharCompliance,The following statement contains a magic number: if (errorFlag && c == '%') {  	// We certainly found an encoded character' check for length  	// now ( '%' HEXDIGIT HEXDIGIT)  	if (((segment.Length - i) < 2)) {  		throw new InvalidFormatException ("The segment " + segment + " contain invalid encoded character !");  	}  	// If not percent encoded character error occur then reset the  	// flag -> the character is valid  	errorFlag = false;  	// Decode the encoded character  	char decodedChar = (char)Convert.ToInt32 (segment.Substring (i + 1' 2)' 16);  	i += 2;  	/* Check rule M1.7 */if (decodedChar == '/' || decodedChar == '\\')  		throw new InvalidFormatException ("A segment shall not contain percent-encoded forward slash ('/')' or backward slash ('\') characters. [M1.7]");  	/* Check rule M1.8 */// Check for unreserved character like define in RFC3986  	if ((decodedChar >= 'A' && decodedChar <= 'Z') || (decodedChar >= 'a' && decodedChar <= 'z') || (decodedChar >= '0' && decodedChar <= '9'))  		errorFlag = true;  	// Check for unreserved character "-"' "."' "_"' "~"  	for (int j = 0; !errorFlag && j < RFC3986_PCHAR_UNRESERVED_SUP.Length; ++j) {  		if (c == RFC3986_PCHAR_UNRESERVED_SUP [j] [0]) {  			errorFlag = true;  			break;  		}  	}  	if (errorFlag)  		throw new InvalidFormatException ("A segment shall not contain percent-encoded unreserved characters. [M1.8]");  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,CheckPCharCompliance,The following statement contains a magic number: if (errorFlag && c == '%') {  	// We certainly found an encoded character' check for length  	// now ( '%' HEXDIGIT HEXDIGIT)  	if (((segment.Length - i) < 2)) {  		throw new InvalidFormatException ("The segment " + segment + " contain invalid encoded character !");  	}  	// If not percent encoded character error occur then reset the  	// flag -> the character is valid  	errorFlag = false;  	// Decode the encoded character  	char decodedChar = (char)Convert.ToInt32 (segment.Substring (i + 1' 2)' 16);  	i += 2;  	/* Check rule M1.7 */if (decodedChar == '/' || decodedChar == '\\')  		throw new InvalidFormatException ("A segment shall not contain percent-encoded forward slash ('/')' or backward slash ('\') characters. [M1.7]");  	/* Check rule M1.8 */// Check for unreserved character like define in RFC3986  	if ((decodedChar >= 'A' && decodedChar <= 'Z') || (decodedChar >= 'a' && decodedChar <= 'z') || (decodedChar >= '0' && decodedChar <= '9'))  		errorFlag = true;  	// Check for unreserved character "-"' "."' "_"' "~"  	for (int j = 0; !errorFlag && j < RFC3986_PCHAR_UNRESERVED_SUP.Length; ++j) {  		if (c == RFC3986_PCHAR_UNRESERVED_SUP [j] [0]) {  			errorFlag = true;  			break;  		}  	}  	if (errorFlag)  		throw new InvalidFormatException ("A segment shall not contain percent-encoded unreserved characters. [M1.8]");  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,CheckPCharCompliance,The following statement contains a magic number: if (errorFlag && c == '%') {  	// We certainly found an encoded character' check for length  	// now ( '%' HEXDIGIT HEXDIGIT)  	if (((segment.Length - i) < 2)) {  		throw new InvalidFormatException ("The segment " + segment + " contain invalid encoded character !");  	}  	// If not percent encoded character error occur then reset the  	// flag -> the character is valid  	errorFlag = false;  	// Decode the encoded character  	char decodedChar = (char)Convert.ToInt32 (segment.Substring (i + 1' 2)' 16);  	i += 2;  	/* Check rule M1.7 */if (decodedChar == '/' || decodedChar == '\\')  		throw new InvalidFormatException ("A segment shall not contain percent-encoded forward slash ('/')' or backward slash ('\') characters. [M1.7]");  	/* Check rule M1.8 */// Check for unreserved character like define in RFC3986  	if ((decodedChar >= 'A' && decodedChar <= 'Z') || (decodedChar >= 'a' && decodedChar <= 'z') || (decodedChar >= '0' && decodedChar <= '9'))  		errorFlag = true;  	// Check for unreserved character "-"' "."' "_"' "~"  	for (int j = 0; !errorFlag && j < RFC3986_PCHAR_UNRESERVED_SUP.Length; ++j) {  		if (c == RFC3986_PCHAR_UNRESERVED_SUP [j] [0]) {  			errorFlag = true;  			break;  		}  	}  	if (errorFlag)  		throw new InvalidFormatException ("A segment shall not contain percent-encoded unreserved characters. [M1.8]");  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,CheckPCharCompliance,The following statement contains a magic number: if (errorFlag && c == '%') {  	// We certainly found an encoded character' check for length  	// now ( '%' HEXDIGIT HEXDIGIT)  	if (((segment.Length - i) < 2)) {  		throw new InvalidFormatException ("The segment " + segment + " contain invalid encoded character !");  	}  	// If not percent encoded character error occur then reset the  	// flag -> the character is valid  	errorFlag = false;  	// Decode the encoded character  	char decodedChar = (char)Convert.ToInt32 (segment.Substring (i + 1' 2)' 16);  	i += 2;  	/* Check rule M1.7 */if (decodedChar == '/' || decodedChar == '\\')  		throw new InvalidFormatException ("A segment shall not contain percent-encoded forward slash ('/')' or backward slash ('\') characters. [M1.7]");  	/* Check rule M1.8 */// Check for unreserved character like define in RFC3986  	if ((decodedChar >= 'A' && decodedChar <= 'Z') || (decodedChar >= 'a' && decodedChar <= 'z') || (decodedChar >= '0' && decodedChar <= '9'))  		errorFlag = true;  	// Check for unreserved character "-"' "."' "_"' "~"  	for (int j = 0; !errorFlag && j < RFC3986_PCHAR_UNRESERVED_SUP.Length; ++j) {  		if (c == RFC3986_PCHAR_UNRESERVED_SUP [j] [0]) {  			errorFlag = true;  			break;  		}  	}  	if (errorFlag)  		throw new InvalidFormatException ("A segment shall not contain percent-encoded unreserved characters. [M1.8]");  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,CheckPCharCompliance,The following statement contains a magic number: if (((segment.Length - i) < 2)) {  	throw new InvalidFormatException ("The segment " + segment + " contain invalid encoded character !");  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagePartName,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagePartName.cs,CheckPCharCompliance,The following statement contains a magic number: i += 2;  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,RelativizeUri,The following statement contains a magic number: if ((segmentsTheSame == 0 || segmentsTheSame == 1) && segmentsSource [0].Equals ("") && segmentsTarget [0].Equals ("")) {  	for (int i = 0; i < segmentsSource.Length - 2; i++) {  		retVal.Append ("../");  	}  	for (int i = 0; i < segmentsTarget.Length; i++) {  		if (segmentsTarget [i].Equals (""))  			continue;  		retVal.Append (segmentsTarget [i]);  		if (i != segmentsTarget.Length - 1)  			retVal.Append ("/");  	}  	try {  		return new Uri (retVal.ToString ()' UriKind.RelativeOrAbsolute);  	}  	catch (Exception) {  		//System.err.println(e);  		return null;  	}  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,RelativizeUri,The following statement contains a magic number: for (int i = 0; i < segmentsSource.Length - 2; i++) {  	retVal.Append ("../");  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,ResolvePartUri,The following statement contains a magic number: if (targetPath.StartsWith ("../")) {  	string[] segments = path.Split (new char[] {  		'/'  	});  	int segmentEnd = segments.Length - 1;  	while (targetPath.StartsWith ("../")) {  		targetPath = targetPath.Substring (3);  		segmentEnd -= 1;  	}  	path = "/";  	for (int i = 0; i <= segmentEnd; i++) {  		if (segments [i] != string.Empty)  			path += segments [i] + "/";  	}  	path += targetPath;  }  else {  	path = Path.Combine (path' targetUri.OriginalString).Replace ("\\"' "/");  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,ResolvePartUri,The following statement contains a magic number: while (targetPath.StartsWith ("../")) {  	targetPath = targetPath.Substring (3);  	segmentEnd -= 1;  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,ResolvePartUri,The following statement contains a magic number: targetPath = targetPath.Substring (3);  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,DecodeURI,The following statement contains a magic number: for (int i = 0; i < uriStr.Length; ++i) {  	c = uriStr [i];  	if (c == '%') {  		// We certainly found an encoded character' check for length  		// now ( '%' HEXDIGIT HEXDIGIT)  		if (((uriStr.Length - i) < 2)) {  			throw new ArgumentException ("The uri " + uriStr + " contain invalid encoded character !");  		}  		// Decode the encoded character  		char decodedChar = (char)Convert.ToInt32 (uriStr.Substring (i + 1' i + 3)' 16);  		retVal.Append (decodedChar);  		i += 2;  		continue;  	}  	retVal.Append (c);  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,DecodeURI,The following statement contains a magic number: for (int i = 0; i < uriStr.Length; ++i) {  	c = uriStr [i];  	if (c == '%') {  		// We certainly found an encoded character' check for length  		// now ( '%' HEXDIGIT HEXDIGIT)  		if (((uriStr.Length - i) < 2)) {  			throw new ArgumentException ("The uri " + uriStr + " contain invalid encoded character !");  		}  		// Decode the encoded character  		char decodedChar = (char)Convert.ToInt32 (uriStr.Substring (i + 1' i + 3)' 16);  		retVal.Append (decodedChar);  		i += 2;  		continue;  	}  	retVal.Append (c);  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,DecodeURI,The following statement contains a magic number: for (int i = 0; i < uriStr.Length; ++i) {  	c = uriStr [i];  	if (c == '%') {  		// We certainly found an encoded character' check for length  		// now ( '%' HEXDIGIT HEXDIGIT)  		if (((uriStr.Length - i) < 2)) {  			throw new ArgumentException ("The uri " + uriStr + " contain invalid encoded character !");  		}  		// Decode the encoded character  		char decodedChar = (char)Convert.ToInt32 (uriStr.Substring (i + 1' i + 3)' 16);  		retVal.Append (decodedChar);  		i += 2;  		continue;  	}  	retVal.Append (c);  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,DecodeURI,The following statement contains a magic number: for (int i = 0; i < uriStr.Length; ++i) {  	c = uriStr [i];  	if (c == '%') {  		// We certainly found an encoded character' check for length  		// now ( '%' HEXDIGIT HEXDIGIT)  		if (((uriStr.Length - i) < 2)) {  			throw new ArgumentException ("The uri " + uriStr + " contain invalid encoded character !");  		}  		// Decode the encoded character  		char decodedChar = (char)Convert.ToInt32 (uriStr.Substring (i + 1' i + 3)' 16);  		retVal.Append (decodedChar);  		i += 2;  		continue;  	}  	retVal.Append (c);  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,DecodeURI,The following statement contains a magic number: if (c == '%') {  	// We certainly found an encoded character' check for length  	// now ( '%' HEXDIGIT HEXDIGIT)  	if (((uriStr.Length - i) < 2)) {  		throw new ArgumentException ("The uri " + uriStr + " contain invalid encoded character !");  	}  	// Decode the encoded character  	char decodedChar = (char)Convert.ToInt32 (uriStr.Substring (i + 1' i + 3)' 16);  	retVal.Append (decodedChar);  	i += 2;  	continue;  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,DecodeURI,The following statement contains a magic number: if (c == '%') {  	// We certainly found an encoded character' check for length  	// now ( '%' HEXDIGIT HEXDIGIT)  	if (((uriStr.Length - i) < 2)) {  		throw new ArgumentException ("The uri " + uriStr + " contain invalid encoded character !");  	}  	// Decode the encoded character  	char decodedChar = (char)Convert.ToInt32 (uriStr.Substring (i + 1' i + 3)' 16);  	retVal.Append (decodedChar);  	i += 2;  	continue;  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,DecodeURI,The following statement contains a magic number: if (c == '%') {  	// We certainly found an encoded character' check for length  	// now ( '%' HEXDIGIT HEXDIGIT)  	if (((uriStr.Length - i) < 2)) {  		throw new ArgumentException ("The uri " + uriStr + " contain invalid encoded character !");  	}  	// Decode the encoded character  	char decodedChar = (char)Convert.ToInt32 (uriStr.Substring (i + 1' i + 3)' 16);  	retVal.Append (decodedChar);  	i += 2;  	continue;  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,DecodeURI,The following statement contains a magic number: if (c == '%') {  	// We certainly found an encoded character' check for length  	// now ( '%' HEXDIGIT HEXDIGIT)  	if (((uriStr.Length - i) < 2)) {  		throw new ArgumentException ("The uri " + uriStr + " contain invalid encoded character !");  	}  	// Decode the encoded character  	char decodedChar = (char)Convert.ToInt32 (uriStr.Substring (i + 1' i + 3)' 16);  	retVal.Append (decodedChar);  	i += 2;  	continue;  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,DecodeURI,The following statement contains a magic number: if (((uriStr.Length - i) < 2)) {  	throw new ArgumentException ("The uri " + uriStr + " contain invalid encoded character !");  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,DecodeURI,The following statement contains a magic number: i += 2;  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,Encode,The following statement contains a magic number: foreach (byte b in bb) {  	int b1 = (int)b & 0xff;  	if (IsUnsafe (b1)) {  		sb.Append ('%');  		sb.Append (hexDigits [(b1 >> 4) & 0x0F]);  		sb.Append (hexDigits [(b1 >> 0) & 0x0F]);  	}  	else {  		sb.Append ((char)b1);  	}  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,Encode,The following statement contains a magic number: if (IsUnsafe (b1)) {  	sb.Append ('%');  	sb.Append (hexDigits [(b1 >> 4) & 0x0F]);  	sb.Append (hexDigits [(b1 >> 0) & 0x0F]);  }  else {  	sb.Append ((char)b1);  }  
Magic Number,NPOI.OpenXml4Net.OPC,PackagingUriHelper,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\PackagingUriHelper.cs,Encode,The following statement contains a magic number: sb.Append (hexDigits [(b1 >> 4) & 0x0F]);  
Magic Number,NPOI.OpenXml4Net.OPC.Internal,ContentType,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentType.cs,ContentType,The following statement contains a magic number: if (mMediaType.Groups.Count >= 2) {  	this.type = mMediaType.Groups [1].Value;  	this.subType = mMediaType.Groups [2].Value;  	// Parameters  	this.parameters = new SortedList<String' String> ();  	for (int i = 4; i <= mMediaType.Groups.Count && (mMediaType.Groups [i] != null); i += 2) {  		this.parameters [mMediaType.Groups [i].Value] = mMediaType.Groups [i + 1].Value;  	}  }  
Magic Number,NPOI.OpenXml4Net.OPC.Internal,ContentType,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentType.cs,ContentType,The following statement contains a magic number: if (mMediaType.Groups.Count >= 2) {  	this.type = mMediaType.Groups [1].Value;  	this.subType = mMediaType.Groups [2].Value;  	// Parameters  	this.parameters = new SortedList<String' String> ();  	for (int i = 4; i <= mMediaType.Groups.Count && (mMediaType.Groups [i] != null); i += 2) {  		this.parameters [mMediaType.Groups [i].Value] = mMediaType.Groups [i + 1].Value;  	}  }  
Magic Number,NPOI.OpenXml4Net.OPC.Internal,ContentType,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentType.cs,ContentType,The following statement contains a magic number: if (mMediaType.Groups.Count >= 2) {  	this.type = mMediaType.Groups [1].Value;  	this.subType = mMediaType.Groups [2].Value;  	// Parameters  	this.parameters = new SortedList<String' String> ();  	for (int i = 4; i <= mMediaType.Groups.Count && (mMediaType.Groups [i] != null); i += 2) {  		this.parameters [mMediaType.Groups [i].Value] = mMediaType.Groups [i + 1].Value;  	}  }  
Magic Number,NPOI.OpenXml4Net.OPC.Internal,ContentType,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentType.cs,ContentType,The following statement contains a magic number: if (mMediaType.Groups.Count >= 2) {  	this.type = mMediaType.Groups [1].Value;  	this.subType = mMediaType.Groups [2].Value;  	// Parameters  	this.parameters = new SortedList<String' String> ();  	for (int i = 4; i <= mMediaType.Groups.Count && (mMediaType.Groups [i] != null); i += 2) {  		this.parameters [mMediaType.Groups [i].Value] = mMediaType.Groups [i + 1].Value;  	}  }  
Magic Number,NPOI.OpenXml4Net.OPC.Internal,ContentType,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentType.cs,ContentType,The following statement contains a magic number: this.subType = mMediaType.Groups [2].Value;  
Magic Number,NPOI.OpenXml4Net.OPC.Internal,ContentType,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentType.cs,ContentType,The following statement contains a magic number: for (int i = 4; i <= mMediaType.Groups.Count && (mMediaType.Groups [i] != null); i += 2) {  	this.parameters [mMediaType.Groups [i].Value] = mMediaType.Groups [i + 1].Value;  }  
Magic Number,NPOI.OpenXml4Net.OPC.Internal,ContentType,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentType.cs,ContentType,The following statement contains a magic number: for (int i = 4; i <= mMediaType.Groups.Count && (mMediaType.Groups [i] != null); i += 2) {  	this.parameters [mMediaType.Groups [i].Value] = mMediaType.Groups [i + 1].Value;  }  
Magic Number,NPOI.OpenXml4Net.OPC.Internal,ContentType,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\ContentType.cs,ContentType,The following statement contains a magic number: i += 2
Magic Number,NPOI.OpenXml4Net.OPC.Internal.Unmarshallers,PackagePropertiesUnmarshaller,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\Unmarshallers\PackagePropertiesUnmarshaller.cs,CheckElementForOPCCompliance,The following statement contains a magic number: foreach (XmlAttribute attr in el.Attributes) {  	if (attr.Name.StartsWith ("xmlns:")) {  		string namespacePrefix = attr.Name.Substring (6);  		if (nsmgr.LookupNamespace (namespacePrefix).Equals (PackageNamespaces.MARKUP_COMPATIBILITY)) {  			// Rule M4.2  			throw new InvalidFormatException ("OPC Compliance error [M4.2]: A format consumer shall consider the use of the Markup Compatibility namespace to be an error.");  		}  	}  }  
Magic Number,NPOI.OpenXml4Net.OPC.Internal.Unmarshallers,PackagePropertiesUnmarshaller,C:\repos\xoposhiy_npoi\trunk\ooxml\openxml4Net\OPC\Internal\Unmarshallers\PackagePropertiesUnmarshaller.cs,CheckElementForOPCCompliance,The following statement contains a magic number: if (attr.Name.StartsWith ("xmlns:")) {  	string namespacePrefix = attr.Name.Substring (6);  	if (nsmgr.LookupNamespace (namespacePrefix).Equals (PackageNamespaces.MARKUP_COMPATIBILITY)) {  		// Rule M4.2  		throw new InvalidFormatException ("OPC Compliance error [M4.2]: A format consumer shall consider the use of the Markup Compatibility namespace to be an error.");  	}  }  
