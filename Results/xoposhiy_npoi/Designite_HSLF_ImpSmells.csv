Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NPOI.HSLF.Model.TextProperties,TextPropCollection,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Model\TextProperties\TextPropCollection.cs,AddWithName,Cyclomatic complexity of the method is 8
Complex Method,NPOI.HSLF.Model.TextProperties,TextPropCollection,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Model\TextProperties\TextPropCollection.cs,WriteOut,Cyclomatic complexity of the method is 8
Complex Method,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,FindInterestingChildren,Cyclomatic complexity of the method is 12
Complex Method,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,SetParentTextSize,Cyclomatic complexity of the method is 8
Complex Method,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,Cyclomatic complexity of the method is 35
Complex Method,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,Cyclomatic complexity of the method is 15
Long Parameter List,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The method has 5 parameters.
Long Statement,NPOI.HSLF.Record,Record,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Record.cs,CreateRecordForType,The length of the statement  "		Console.Error.WriteLine ("Warning: Skipping record of type " + type + " at position " + start + " which claims to be longer than the file! (" + len + " vs " + (b.Length - start) + ")"); " is 185.
Long Statement,NPOI.HSLF.Record,Record,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Record.cs,CreateRecordForType,The length of the statement  "		throw new Exception ("Couldn't instantiate the class for type with id " + type + " on class " + c + " : " + ite + "\nCause was : " + ite.Message' ite); " is 151.
Long Statement,NPOI.HSLF.Record,Record,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Record.cs,CreateRecordForType,The length of the statement  "		throw new Exception ("Couldn't access the constructor for type with id " + type + " on class " + c + " : " + nsme' nsme); " is 121.
Long Statement,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,AddChildAfter,The length of the statement  "			throw new ArgumentException ("Asked to add a new child after another record' but that record wasn't one of our children!"); " is 123.
Long Statement,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,AddChildBefore,The length of the statement  "			throw new ArgumentException ("Asked to add a new child before another record' but that record wasn't one of our children!"); " is 124.
Long Statement,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,MoveChildrenBefore,The length of the statement  "			throw new ArgumentException ("Asked to move children before another record' but that record wasn't one of our children!"); " is 122.
Long Statement,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,MoveChildrenAfter,The length of the statement  "			throw new ArgumentException ("Asked to move children before another record' but that record wasn't one of our children!"); " is 122.
Long Statement,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,SetParentTextSize,The length of the statement  "		logger.Log (POILogger.WARN' "Problem Reading paragraph style Runs: textHandled = " + textHandled + "' text.size+1 = " + (size + 1)); " is 132.
Long Statement,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,SetParentTextSize,The length of the statement  "		logger.Log (POILogger.WARN' "Problem Reading character style Runs: textHandled = " + textHandled + "' text.size+1 = " + (size + 1)); " is 132.
Magic Number,NPOI.HSLF.Model.TextProperties,TextPropCollection,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Model\TextProperties\TextPropCollection.cs,BuildTextPropList,The following statement contains a magic number: for (int i = 0; i < potentialProperties.Length; i++) {  	// Check there's still data left to read  	// Check if this property is found in the mask  	if ((ContainsField & potentialProperties [i].GetMask ()) != 0) {  		if (dataOffset + bytesPassed >= data.Length) {  			// Out of data' can't be any more properties to go  			// remember the mask and return  			maskSpecial |= potentialProperties [i].GetMask ();  			return bytesPassed;  		}  		// Bingo' data Contains this property  		TextProp prop = (TextProp)potentialProperties [i].Clone ();  		int val = 0;  		if (prop.GetSize () == 2) {  			val = LittleEndian.GetShort (data' dataOffset + bytesPassed);  		}  		else if (prop.GetSize () == 4) {  			val = LittleEndian.GetInt (data' dataOffset + bytesPassed);  		}  		else if (prop.GetSize () == 0) {  			//remember "special" bits.  			maskSpecial |= potentialProperties [i].GetMask ();  			continue;  		}  		prop.SetValue (val);  		bytesPassed += prop.GetSize ();  		textPropList.Add (prop);  	}  }  
Magic Number,NPOI.HSLF.Model.TextProperties,TextPropCollection,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Model\TextProperties\TextPropCollection.cs,BuildTextPropList,The following statement contains a magic number: for (int i = 0; i < potentialProperties.Length; i++) {  	// Check there's still data left to read  	// Check if this property is found in the mask  	if ((ContainsField & potentialProperties [i].GetMask ()) != 0) {  		if (dataOffset + bytesPassed >= data.Length) {  			// Out of data' can't be any more properties to go  			// remember the mask and return  			maskSpecial |= potentialProperties [i].GetMask ();  			return bytesPassed;  		}  		// Bingo' data Contains this property  		TextProp prop = (TextProp)potentialProperties [i].Clone ();  		int val = 0;  		if (prop.GetSize () == 2) {  			val = LittleEndian.GetShort (data' dataOffset + bytesPassed);  		}  		else if (prop.GetSize () == 4) {  			val = LittleEndian.GetInt (data' dataOffset + bytesPassed);  		}  		else if (prop.GetSize () == 0) {  			//remember "special" bits.  			maskSpecial |= potentialProperties [i].GetMask ();  			continue;  		}  		prop.SetValue (val);  		bytesPassed += prop.GetSize ();  		textPropList.Add (prop);  	}  }  
Magic Number,NPOI.HSLF.Model.TextProperties,TextPropCollection,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Model\TextProperties\TextPropCollection.cs,BuildTextPropList,The following statement contains a magic number: if ((ContainsField & potentialProperties [i].GetMask ()) != 0) {  	if (dataOffset + bytesPassed >= data.Length) {  		// Out of data' can't be any more properties to go  		// remember the mask and return  		maskSpecial |= potentialProperties [i].GetMask ();  		return bytesPassed;  	}  	// Bingo' data Contains this property  	TextProp prop = (TextProp)potentialProperties [i].Clone ();  	int val = 0;  	if (prop.GetSize () == 2) {  		val = LittleEndian.GetShort (data' dataOffset + bytesPassed);  	}  	else if (prop.GetSize () == 4) {  		val = LittleEndian.GetInt (data' dataOffset + bytesPassed);  	}  	else if (prop.GetSize () == 0) {  		//remember "special" bits.  		maskSpecial |= potentialProperties [i].GetMask ();  		continue;  	}  	prop.SetValue (val);  	bytesPassed += prop.GetSize ();  	textPropList.Add (prop);  }  
Magic Number,NPOI.HSLF.Model.TextProperties,TextPropCollection,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Model\TextProperties\TextPropCollection.cs,BuildTextPropList,The following statement contains a magic number: if ((ContainsField & potentialProperties [i].GetMask ()) != 0) {  	if (dataOffset + bytesPassed >= data.Length) {  		// Out of data' can't be any more properties to go  		// remember the mask and return  		maskSpecial |= potentialProperties [i].GetMask ();  		return bytesPassed;  	}  	// Bingo' data Contains this property  	TextProp prop = (TextProp)potentialProperties [i].Clone ();  	int val = 0;  	if (prop.GetSize () == 2) {  		val = LittleEndian.GetShort (data' dataOffset + bytesPassed);  	}  	else if (prop.GetSize () == 4) {  		val = LittleEndian.GetInt (data' dataOffset + bytesPassed);  	}  	else if (prop.GetSize () == 0) {  		//remember "special" bits.  		maskSpecial |= potentialProperties [i].GetMask ();  		continue;  	}  	prop.SetValue (val);  	bytesPassed += prop.GetSize ();  	textPropList.Add (prop);  }  
Magic Number,NPOI.HSLF.Model.TextProperties,TextPropCollection,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Model\TextProperties\TextPropCollection.cs,BuildTextPropList,The following statement contains a magic number: if (prop.GetSize () == 2) {  	val = LittleEndian.GetShort (data' dataOffset + bytesPassed);  }  else if (prop.GetSize () == 4) {  	val = LittleEndian.GetInt (data' dataOffset + bytesPassed);  }  else if (prop.GetSize () == 0) {  	//remember "special" bits.  	maskSpecial |= potentialProperties [i].GetMask ();  	continue;  }  
Magic Number,NPOI.HSLF.Model.TextProperties,TextPropCollection,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Model\TextProperties\TextPropCollection.cs,BuildTextPropList,The following statement contains a magic number: if (prop.GetSize () == 2) {  	val = LittleEndian.GetShort (data' dataOffset + bytesPassed);  }  else if (prop.GetSize () == 4) {  	val = LittleEndian.GetInt (data' dataOffset + bytesPassed);  }  else if (prop.GetSize () == 0) {  	//remember "special" bits.  	maskSpecial |= potentialProperties [i].GetMask ();  	continue;  }  
Magic Number,NPOI.HSLF.Model.TextProperties,TextPropCollection,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Model\TextProperties\TextPropCollection.cs,BuildTextPropList,The following statement contains a magic number: if (prop.GetSize () == 4) {  	val = LittleEndian.GetInt (data' dataOffset + bytesPassed);  }  else if (prop.GetSize () == 0) {  	//remember "special" bits.  	maskSpecial |= potentialProperties [i].GetMask ();  	continue;  }  
Magic Number,NPOI.HSLF.Model.TextProperties,TextPropCollection,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Model\TextProperties\TextPropCollection.cs,WriteOut,The following statement contains a magic number: for (int i = 0; i < textPropList.Count; i++) {  	TextProp textProp = textPropList [i];  	int val = textProp.GetValue ();  	if (textProp.GetSize () == 2) {  		StyleTextPropAtom.WriteLittleEndian ((short)val' o);  	}  	else if (textProp.GetSize () == 4) {  		StyleTextPropAtom.WriteLittleEndian (val' o);  	}  }  
Magic Number,NPOI.HSLF.Model.TextProperties,TextPropCollection,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Model\TextProperties\TextPropCollection.cs,WriteOut,The following statement contains a magic number: for (int i = 0; i < textPropList.Count; i++) {  	TextProp textProp = textPropList [i];  	int val = textProp.GetValue ();  	if (textProp.GetSize () == 2) {  		StyleTextPropAtom.WriteLittleEndian ((short)val' o);  	}  	else if (textProp.GetSize () == 4) {  		StyleTextPropAtom.WriteLittleEndian (val' o);  	}  }  
Magic Number,NPOI.HSLF.Model.TextProperties,TextPropCollection,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Model\TextProperties\TextPropCollection.cs,WriteOut,The following statement contains a magic number: if (textProp.GetSize () == 2) {  	StyleTextPropAtom.WriteLittleEndian ((short)val' o);  }  else if (textProp.GetSize () == 4) {  	StyleTextPropAtom.WriteLittleEndian (val' o);  }  
Magic Number,NPOI.HSLF.Model.TextProperties,TextPropCollection,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Model\TextProperties\TextPropCollection.cs,WriteOut,The following statement contains a magic number: if (textProp.GetSize () == 2) {  	StyleTextPropAtom.WriteLittleEndian ((short)val' o);  }  else if (textProp.GetSize () == 4) {  	StyleTextPropAtom.WriteLittleEndian (val' o);  }  
Magic Number,NPOI.HSLF.Model.TextProperties,TextPropCollection,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Model\TextProperties\TextPropCollection.cs,WriteOut,The following statement contains a magic number: if (textProp.GetSize () == 4) {  	StyleTextPropAtom.WriteLittleEndian (val' o);  }  
Magic Number,NPOI.HSLF.Record,AnimationInfo,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\AnimationInfo.cs,AnimationInfo,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,AnimationInfo,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\AnimationInfo.cs,AnimationInfo,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,AnimationInfo,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\AnimationInfo.cs,AnimationInfo,The following statement contains a magic number: _children = Record.FindChildRecords (source' start + 8' len - 8);  
Magic Number,NPOI.HSLF.Record,AnimationInfo,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\AnimationInfo.cs,AnimationInfo,The following statement contains a magic number: _children = Record.FindChildRecords (source' start + 8' len - 8);  
Magic Number,NPOI.HSLF.Record,AnimationInfo,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\AnimationInfo.cs,AnimationInfo,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,AnimationInfo,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\AnimationInfo.cs,AnimationInfo,The following statement contains a magic number: LittleEndian.PutShort (_header' 2' (short)RecordType);  
Magic Number,NPOI.HSLF.Record,AnimationInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\AnimationInfoAtom.cs,AnimationInfoAtom,The following statement contains a magic number: _recdata = new byte[28];  
Magic Number,NPOI.HSLF.Record,AnimationInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\AnimationInfoAtom.cs,AnimationInfoAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,AnimationInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\AnimationInfoAtom.cs,AnimationInfoAtom,The following statement contains a magic number: LittleEndian.PutShort (_header' 2' (short)RecordType);  
Magic Number,NPOI.HSLF.Record,AnimationInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\AnimationInfoAtom.cs,AnimationInfoAtom,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' _recdata.Length);  
Magic Number,NPOI.HSLF.Record,AnimationInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\AnimationInfoAtom.cs,AnimationInfoAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,AnimationInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\AnimationInfoAtom.cs,AnimationInfoAtom,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,AnimationInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\AnimationInfoAtom.cs,AnimationInfoAtom,The following statement contains a magic number: _recdata = new byte[len - 8];  
Magic Number,NPOI.HSLF.Record,AnimationInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\AnimationInfoAtom.cs,AnimationInfoAtom,The following statement contains a magic number: Array.Copy (source' start + 8' _recdata' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,AnimationInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\AnimationInfoAtom.cs,AnimationInfoAtom,The following statement contains a magic number: Array.Copy (source' start + 8' _recdata' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: if (len < 40) {  	len = 40;  	if (source.Length - start < 40) {  		throw new Exception ("Not enough data to form a ColorSchemeAtom (always 40 bytes long) - found " + (source.Length - start));  	}  }  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: if (len < 40) {  	len = 40;  	if (source.Length - start < 40) {  		throw new Exception ("Not enough data to form a ColorSchemeAtom (always 40 bytes long) - found " + (source.Length - start));  	}  }  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: if (len < 40) {  	len = 40;  	if (source.Length - start < 40) {  		throw new Exception ("Not enough data to form a ColorSchemeAtom (always 40 bytes long) - found " + (source.Length - start));  	}  }  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: len = 40;  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: if (source.Length - start < 40) {  	throw new Exception ("Not enough data to form a ColorSchemeAtom (always 40 bytes long) - found " + (source.Length - start));  }  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: backgroundColourRGB = LittleEndian.GetInt (source' start + 8 + 0);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: textAndLinesColourRGB = LittleEndian.GetInt (source' start + 8 + 4);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: textAndLinesColourRGB = LittleEndian.GetInt (source' start + 8 + 4);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: shadowsColourRGB = LittleEndian.GetInt (source' start + 8 + 8);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: shadowsColourRGB = LittleEndian.GetInt (source' start + 8 + 8);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: titleTextColourRGB = LittleEndian.GetInt (source' start + 8 + 12);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: titleTextColourRGB = LittleEndian.GetInt (source' start + 8 + 12);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: FillsColourRGB = LittleEndian.GetInt (source' start + 8 + 16);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: FillsColourRGB = LittleEndian.GetInt (source' start + 8 + 16);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: accentColourRGB = LittleEndian.GetInt (source' start + 8 + 20);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: accentColourRGB = LittleEndian.GetInt (source' start + 8 + 20);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: accentAndHyperlinkColourRGB = LittleEndian.GetInt (source' start + 8 + 24);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: accentAndHyperlinkColourRGB = LittleEndian.GetInt (source' start + 8 + 24);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: accentAndFollowingHyperlinkColourRGB = LittleEndian.GetInt (source' start + 8 + 28);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: accentAndFollowingHyperlinkColourRGB = LittleEndian.GetInt (source' start + 8 + 28);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: LittleEndian.PutUShort (_header' 0' 16);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: LittleEndian.PutUShort (_header' 2' (int)_type);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' 32);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' 32);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: backgroundColourRGB = 16777215;  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: shadowsColourRGB = 8421504;  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: FillsColourRGB = 10079232;  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: accentColourRGB = 13382451;  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: accentAndHyperlinkColourRGB = 16764108;  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,ColorSchemeAtom,The following statement contains a magic number: accentAndFollowingHyperlinkColourRGB = 11711154;  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,SplitRGB,The following statement contains a magic number: Array.Copy (b' 0' ret' 0' 3);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,JoinRGB,The following statement contains a magic number: if (rgb.Length != 3) {  	throw new Exception ("joinRGB accepts a byte array of 3 values' but got one of " + rgb.Length + " values!");  }  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,JoinRGB,The following statement contains a magic number: System.Array.Copy (rgb' 0' with_zero' 0' 3);  
Magic Number,NPOI.HSLF.Record,ColorSchemeAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\ColorSchemeAtom.cs,JoinRGB,The following statement contains a magic number: with_zero [3] = 0;  
Magic Number,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,Comment2000,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,Comment2000,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,Comment2000,The following statement contains a magic number: _children = Record.FindChildRecords (source' start + 8' len - 8);  
Magic Number,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,Comment2000,The following statement contains a magic number: _children = Record.FindChildRecords (source' start + 8' len - 8);  
Magic Number,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,FindInterestingChildren,The following statement contains a magic number: foreach (Record r in _children) {  	if (r is CString) {  		CString cs = (CString)r;  		int recInstance = cs.Options >> 4;  		switch (recInstance) {  		case 0:  			authorRecord = cs;  			break;  		case 1:  			commentRecord = cs;  			break;  		case 2:  			authorInitialsRecord = cs;  			break;  		}  	}  	else if (r is Comment2000Atom) {  		commentAtom = (Comment2000Atom)r;  	}  }  
Magic Number,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,FindInterestingChildren,The following statement contains a magic number: foreach (Record r in _children) {  	if (r is CString) {  		CString cs = (CString)r;  		int recInstance = cs.Options >> 4;  		switch (recInstance) {  		case 0:  			authorRecord = cs;  			break;  		case 1:  			commentRecord = cs;  			break;  		case 2:  			authorInitialsRecord = cs;  			break;  		}  	}  	else if (r is Comment2000Atom) {  		commentAtom = (Comment2000Atom)r;  	}  }  
Magic Number,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,FindInterestingChildren,The following statement contains a magic number: if (r is CString) {  	CString cs = (CString)r;  	int recInstance = cs.Options >> 4;  	switch (recInstance) {  	case 0:  		authorRecord = cs;  		break;  	case 1:  		commentRecord = cs;  		break;  	case 2:  		authorInitialsRecord = cs;  		break;  	}  }  else if (r is Comment2000Atom) {  	commentAtom = (Comment2000Atom)r;  }  
Magic Number,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,FindInterestingChildren,The following statement contains a magic number: if (r is CString) {  	CString cs = (CString)r;  	int recInstance = cs.Options >> 4;  	switch (recInstance) {  	case 0:  		authorRecord = cs;  		break;  	case 1:  		commentRecord = cs;  		break;  	case 2:  		authorInitialsRecord = cs;  		break;  	}  }  else if (r is Comment2000Atom) {  	commentAtom = (Comment2000Atom)r;  }  
Magic Number,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,FindInterestingChildren,The following statement contains a magic number: switch (recInstance) {  case 0:  	authorRecord = cs;  	break;  case 1:  	commentRecord = cs;  	break;  case 2:  	authorInitialsRecord = cs;  	break;  }  
Magic Number,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,Comment2000,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,Comment2000,The following statement contains a magic number: _children = new Record[4];  
Magic Number,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,Comment2000,The following statement contains a magic number: LittleEndian.PutShort (_header' 2' (short)_type);  
Magic Number,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,Comment2000,The following statement contains a magic number: _children [2] = csc;  
Magic Number,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,Comment2000,The following statement contains a magic number: _children [3] = new Comment2000Atom ();  
Magic Number,NPOI.HSLF.Record,Comment2000Atom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000Atom.cs,Comment2000Atom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,Comment2000Atom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000Atom.cs,Comment2000Atom,The following statement contains a magic number: _data = new byte[28];  
Magic Number,NPOI.HSLF.Record,Comment2000Atom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000Atom.cs,Comment2000Atom,The following statement contains a magic number: LittleEndian.PutShort (_header' 2' (short)RecordType);  
Magic Number,NPOI.HSLF.Record,Comment2000Atom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000Atom.cs,Comment2000Atom,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' _data.Length);  
Magic Number,NPOI.HSLF.Record,Comment2000Atom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000Atom.cs,Comment2000Atom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,Comment2000Atom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000Atom.cs,Comment2000Atom,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,Comment2000Atom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000Atom.cs,Comment2000Atom,The following statement contains a magic number: _data = new byte[len - 8];  
Magic Number,NPOI.HSLF.Record,Comment2000Atom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000Atom.cs,Comment2000Atom,The following statement contains a magic number: Array.Copy (source' start + 8' _data' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,Comment2000Atom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000Atom.cs,Comment2000Atom,The following statement contains a magic number: Array.Copy (source' start + 8' _data' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,CString,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\CString.cs,CString,The following statement contains a magic number: if (len < 8) {  	len = 8;  }  
Magic Number,NPOI.HSLF.Record,CString,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\CString.cs,CString,The following statement contains a magic number: if (len < 8) {  	len = 8;  }  
Magic Number,NPOI.HSLF.Record,CString,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\CString.cs,CString,The following statement contains a magic number: len = 8;  
Magic Number,NPOI.HSLF.Record,CString,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\CString.cs,CString,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,CString,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\CString.cs,CString,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,CString,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\CString.cs,CString,The following statement contains a magic number: _text = new byte[len - 8];  
Magic Number,NPOI.HSLF.Record,CString,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\CString.cs,CString,The following statement contains a magic number: Array.Copy (source' start + 8' _text' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,CString,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\CString.cs,CString,The following statement contains a magic number: Array.Copy (source' start + 8' _text' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,CString,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\CString.cs,CString,The following statement contains a magic number: _header = new byte[] {  	0'  	0'  	unchecked((byte)(0xBA - 256))'  	0x0f'  	0'  	0'  	0'  	0  };  
Magic Number,NPOI.HSLF.Record,DummyPositionSensitiveRecordWithChildren,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\DummyPositionSensitiveRecordWithChildren.cs,DummyPositionSensitiveRecordWithChildren,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,DummyPositionSensitiveRecordWithChildren,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\DummyPositionSensitiveRecordWithChildren.cs,DummyPositionSensitiveRecordWithChildren,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,DummyPositionSensitiveRecordWithChildren,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\DummyPositionSensitiveRecordWithChildren.cs,DummyPositionSensitiveRecordWithChildren,The following statement contains a magic number: _type = LittleEndian.GetUShort (_header' 2);  
Magic Number,NPOI.HSLF.Record,DummyPositionSensitiveRecordWithChildren,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\DummyPositionSensitiveRecordWithChildren.cs,DummyPositionSensitiveRecordWithChildren,The following statement contains a magic number: _children = Record.FindChildRecords (source' start + 8' len - 8);  
Magic Number,NPOI.HSLF.Record,DummyPositionSensitiveRecordWithChildren,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\DummyPositionSensitiveRecordWithChildren.cs,DummyPositionSensitiveRecordWithChildren,The following statement contains a magic number: _children = Record.FindChildRecords (source' start + 8' len - 8);  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,AddSlideLookup,The following statement contains a magic number: _slideoffsetDataLocation [slideID] = _ptrData.Length + 4;  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,AddSlideLookup,The following statement contains a magic number: infoBlock += (1 << 20);  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,AddSlideLookup,The following statement contains a magic number: LittleEndian.PutInt (newPtrData' newPtrData.Length - 8' infoBlock);  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,AddSlideLookup,The following statement contains a magic number: LittleEndian.PutInt (newPtrData' newPtrData.Length - 4' posOnDisk);  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,AddSlideLookup,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' newPtrData.Length);  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,PersistPtrHolder,The following statement contains a magic number: if (len < 8) {  	len = 8;  }  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,PersistPtrHolder,The following statement contains a magic number: if (len < 8) {  	len = 8;  }  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,PersistPtrHolder,The following statement contains a magic number: len = 8;  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,PersistPtrHolder,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,PersistPtrHolder,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,PersistPtrHolder,The following statement contains a magic number: _type = LittleEndian.GetUShort (_header' 2);  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,PersistPtrHolder,The following statement contains a magic number: _ptrData = new byte[len - 8];  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,PersistPtrHolder,The following statement contains a magic number: Array.Copy (source' start + 8' _ptrData' 0' _ptrData.Length);  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,PersistPtrHolder,The following statement contains a magic number: while (pos < _ptrData.Length) {  	// Grab the info field  	long info = LittleEndian.GetUInt (_ptrData' pos);  	// First 20 bits = offset number  	// Remaining 12 bits = offset count  	int offset_count = (int)(info >> 20);  	int offset_no = (int)(info - (offset_count << 20));  	//Console.WriteLine("Info is " + info + "' count is " + offset_count + "' number is " + offset_no);  	// Wind on by the 4 byte info header  	pos += 4;  	// Grab the offsets for each of the sheets  	for (int i = 0; i < offset_count; i++) {  		int sheet_no = offset_no + i;  		long sheet_offset = LittleEndian.GetUInt (_ptrData' pos);  		_slideLocations [sheet_no] = (int)sheet_offset;  		_slideoffsetDataLocation [sheet_no] = pos;  		// Wind on by 4 bytes per sheet found  		pos += 4;  	}  }  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,PersistPtrHolder,The following statement contains a magic number: while (pos < _ptrData.Length) {  	// Grab the info field  	long info = LittleEndian.GetUInt (_ptrData' pos);  	// First 20 bits = offset number  	// Remaining 12 bits = offset count  	int offset_count = (int)(info >> 20);  	int offset_no = (int)(info - (offset_count << 20));  	//Console.WriteLine("Info is " + info + "' count is " + offset_count + "' number is " + offset_no);  	// Wind on by the 4 byte info header  	pos += 4;  	// Grab the offsets for each of the sheets  	for (int i = 0; i < offset_count; i++) {  		int sheet_no = offset_no + i;  		long sheet_offset = LittleEndian.GetUInt (_ptrData' pos);  		_slideLocations [sheet_no] = (int)sheet_offset;  		_slideoffsetDataLocation [sheet_no] = pos;  		// Wind on by 4 bytes per sheet found  		pos += 4;  	}  }  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,PersistPtrHolder,The following statement contains a magic number: while (pos < _ptrData.Length) {  	// Grab the info field  	long info = LittleEndian.GetUInt (_ptrData' pos);  	// First 20 bits = offset number  	// Remaining 12 bits = offset count  	int offset_count = (int)(info >> 20);  	int offset_no = (int)(info - (offset_count << 20));  	//Console.WriteLine("Info is " + info + "' count is " + offset_count + "' number is " + offset_no);  	// Wind on by the 4 byte info header  	pos += 4;  	// Grab the offsets for each of the sheets  	for (int i = 0; i < offset_count; i++) {  		int sheet_no = offset_no + i;  		long sheet_offset = LittleEndian.GetUInt (_ptrData' pos);  		_slideLocations [sheet_no] = (int)sheet_offset;  		_slideoffsetDataLocation [sheet_no] = pos;  		// Wind on by 4 bytes per sheet found  		pos += 4;  	}  }  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,PersistPtrHolder,The following statement contains a magic number: while (pos < _ptrData.Length) {  	// Grab the info field  	long info = LittleEndian.GetUInt (_ptrData' pos);  	// First 20 bits = offset number  	// Remaining 12 bits = offset count  	int offset_count = (int)(info >> 20);  	int offset_no = (int)(info - (offset_count << 20));  	//Console.WriteLine("Info is " + info + "' count is " + offset_count + "' number is " + offset_no);  	// Wind on by the 4 byte info header  	pos += 4;  	// Grab the offsets for each of the sheets  	for (int i = 0; i < offset_count; i++) {  		int sheet_no = offset_no + i;  		long sheet_offset = LittleEndian.GetUInt (_ptrData' pos);  		_slideLocations [sheet_no] = (int)sheet_offset;  		_slideoffsetDataLocation [sheet_no] = pos;  		// Wind on by 4 bytes per sheet found  		pos += 4;  	}  }  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,PersistPtrHolder,The following statement contains a magic number: pos += 4;  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,PersistPtrHolder,The following statement contains a magic number: for (int i = 0; i < offset_count; i++) {  	int sheet_no = offset_no + i;  	long sheet_offset = LittleEndian.GetUInt (_ptrData' pos);  	_slideLocations [sheet_no] = (int)sheet_offset;  	_slideoffsetDataLocation [sheet_no] = pos;  	// Wind on by 4 bytes per sheet found  	pos += 4;  }  
Magic Number,NPOI.HSLF.Record,PersistPtrHolder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\PersistPtrHolder.cs,PersistPtrHolder,The following statement contains a magic number: pos += 4;  
Magic Number,NPOI.HSLF.Record,Record,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Record.cs,BuildRecordAtOffset,The following statement contains a magic number: return CreateRecordForType (type' b' offset' 8 + rleni);  
Magic Number,NPOI.HSLF.Record,Record,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Record.cs,FindChildRecords,The following statement contains a magic number: while (pos <= (start + len - 8)) {  	long type = LittleEndian.GetUShort (b' pos + 2);  	long rlen = LittleEndian.GetUInt (b' pos + 4);  	// Sanity check the length  	int rleni = (int)rlen;  	if (rleni < 0) {  		rleni = 0;  	}  	// Abort if first record is of type 0000 and length FFFF'  	//  as that's a sign of a screwed up record  	if (pos == 0 && type == 0L && rleni == 0xffff) {  		throw new CorruptPowerPointFileException ("Corrupt document - starts with record of type 0000 and length 0xFFFF");  	}  	Record r = CreateRecordForType (type' b' pos' 8 + rleni);  	if (r != null) {  		children.Add (r);  	}  	else {  		// Record was horribly corrupt  	}  	pos += 8;  	pos += rleni;  }  
Magic Number,NPOI.HSLF.Record,Record,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Record.cs,FindChildRecords,The following statement contains a magic number: while (pos <= (start + len - 8)) {  	long type = LittleEndian.GetUShort (b' pos + 2);  	long rlen = LittleEndian.GetUInt (b' pos + 4);  	// Sanity check the length  	int rleni = (int)rlen;  	if (rleni < 0) {  		rleni = 0;  	}  	// Abort if first record is of type 0000 and length FFFF'  	//  as that's a sign of a screwed up record  	if (pos == 0 && type == 0L && rleni == 0xffff) {  		throw new CorruptPowerPointFileException ("Corrupt document - starts with record of type 0000 and length 0xFFFF");  	}  	Record r = CreateRecordForType (type' b' pos' 8 + rleni);  	if (r != null) {  		children.Add (r);  	}  	else {  		// Record was horribly corrupt  	}  	pos += 8;  	pos += rleni;  }  
Magic Number,NPOI.HSLF.Record,Record,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Record.cs,FindChildRecords,The following statement contains a magic number: while (pos <= (start + len - 8)) {  	long type = LittleEndian.GetUShort (b' pos + 2);  	long rlen = LittleEndian.GetUInt (b' pos + 4);  	// Sanity check the length  	int rleni = (int)rlen;  	if (rleni < 0) {  		rleni = 0;  	}  	// Abort if first record is of type 0000 and length FFFF'  	//  as that's a sign of a screwed up record  	if (pos == 0 && type == 0L && rleni == 0xffff) {  		throw new CorruptPowerPointFileException ("Corrupt document - starts with record of type 0000 and length 0xFFFF");  	}  	Record r = CreateRecordForType (type' b' pos' 8 + rleni);  	if (r != null) {  		children.Add (r);  	}  	else {  		// Record was horribly corrupt  	}  	pos += 8;  	pos += rleni;  }  
Magic Number,NPOI.HSLF.Record,Record,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Record.cs,FindChildRecords,The following statement contains a magic number: while (pos <= (start + len - 8)) {  	long type = LittleEndian.GetUShort (b' pos + 2);  	long rlen = LittleEndian.GetUInt (b' pos + 4);  	// Sanity check the length  	int rleni = (int)rlen;  	if (rleni < 0) {  		rleni = 0;  	}  	// Abort if first record is of type 0000 and length FFFF'  	//  as that's a sign of a screwed up record  	if (pos == 0 && type == 0L && rleni == 0xffff) {  		throw new CorruptPowerPointFileException ("Corrupt document - starts with record of type 0000 and length 0xFFFF");  	}  	Record r = CreateRecordForType (type' b' pos' 8 + rleni);  	if (r != null) {  		children.Add (r);  	}  	else {  		// Record was horribly corrupt  	}  	pos += 8;  	pos += rleni;  }  
Magic Number,NPOI.HSLF.Record,Record,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Record.cs,FindChildRecords,The following statement contains a magic number: while (pos <= (start + len - 8)) {  	long type = LittleEndian.GetUShort (b' pos + 2);  	long rlen = LittleEndian.GetUInt (b' pos + 4);  	// Sanity check the length  	int rleni = (int)rlen;  	if (rleni < 0) {  		rleni = 0;  	}  	// Abort if first record is of type 0000 and length FFFF'  	//  as that's a sign of a screwed up record  	if (pos == 0 && type == 0L && rleni == 0xffff) {  		throw new CorruptPowerPointFileException ("Corrupt document - starts with record of type 0000 and length 0xFFFF");  	}  	Record r = CreateRecordForType (type' b' pos' 8 + rleni);  	if (r != null) {  		children.Add (r);  	}  	else {  		// Record was horribly corrupt  	}  	pos += 8;  	pos += rleni;  }  
Magic Number,NPOI.HSLF.Record,Record,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Record.cs,FindChildRecords,The following statement contains a magic number: pos += 8;  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: if (out1 is MutableMemoryStream) {  	MutableMemoryStream mout = (MutableMemoryStream)out1;  	// Grab current size  	int oldSize = mout.GetBytesWritten ();  	// Write out our header' less the size  	mout.Write (new byte[] {  		headerA'  		headerB  	});  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	mout.Write (typeB);  	mout.Write (new byte[4]);  	// Write out the children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (mout);  	}  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	int length = mout.GetBytesWritten () - oldSize - 8;  	byte[] size = new byte[4];  	LittleEndian.PutInt (size' 0' length);  	mout.OverWrite (size' oldSize + 4);  }  else {  	// Going to have to do it a slower way' because we have  	// to update the length come the end  	// Create a MemoryStream to hold everything in  	MemoryStream baos = new MemoryStream ();  	// Write out our header' less the size  	baos.Write (new byte[] {  		headerA'  		headerB  	}' 0' 2);  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	baos.Write (typeB' 2' 2);  	baos.Write (new byte[] {  		0'  		0'  		0'  		0  	}' 4' 4);  	// Write out our children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (baos);  	}  	// Grab the bytes back  	byte[] toWrite = baos.ToArray ();  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	LittleEndian.PutInt (toWrite' 4' (toWrite.Length - 8));  	// Write out the bytes  	out1.Write (toWrite' (int)out1.Position' toWrite.Length);  }  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: if (out1 is MutableMemoryStream) {  	MutableMemoryStream mout = (MutableMemoryStream)out1;  	// Grab current size  	int oldSize = mout.GetBytesWritten ();  	// Write out our header' less the size  	mout.Write (new byte[] {  		headerA'  		headerB  	});  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	mout.Write (typeB);  	mout.Write (new byte[4]);  	// Write out the children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (mout);  	}  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	int length = mout.GetBytesWritten () - oldSize - 8;  	byte[] size = new byte[4];  	LittleEndian.PutInt (size' 0' length);  	mout.OverWrite (size' oldSize + 4);  }  else {  	// Going to have to do it a slower way' because we have  	// to update the length come the end  	// Create a MemoryStream to hold everything in  	MemoryStream baos = new MemoryStream ();  	// Write out our header' less the size  	baos.Write (new byte[] {  		headerA'  		headerB  	}' 0' 2);  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	baos.Write (typeB' 2' 2);  	baos.Write (new byte[] {  		0'  		0'  		0'  		0  	}' 4' 4);  	// Write out our children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (baos);  	}  	// Grab the bytes back  	byte[] toWrite = baos.ToArray ();  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	LittleEndian.PutInt (toWrite' 4' (toWrite.Length - 8));  	// Write out the bytes  	out1.Write (toWrite' (int)out1.Position' toWrite.Length);  }  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: if (out1 is MutableMemoryStream) {  	MutableMemoryStream mout = (MutableMemoryStream)out1;  	// Grab current size  	int oldSize = mout.GetBytesWritten ();  	// Write out our header' less the size  	mout.Write (new byte[] {  		headerA'  		headerB  	});  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	mout.Write (typeB);  	mout.Write (new byte[4]);  	// Write out the children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (mout);  	}  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	int length = mout.GetBytesWritten () - oldSize - 8;  	byte[] size = new byte[4];  	LittleEndian.PutInt (size' 0' length);  	mout.OverWrite (size' oldSize + 4);  }  else {  	// Going to have to do it a slower way' because we have  	// to update the length come the end  	// Create a MemoryStream to hold everything in  	MemoryStream baos = new MemoryStream ();  	// Write out our header' less the size  	baos.Write (new byte[] {  		headerA'  		headerB  	}' 0' 2);  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	baos.Write (typeB' 2' 2);  	baos.Write (new byte[] {  		0'  		0'  		0'  		0  	}' 4' 4);  	// Write out our children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (baos);  	}  	// Grab the bytes back  	byte[] toWrite = baos.ToArray ();  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	LittleEndian.PutInt (toWrite' 4' (toWrite.Length - 8));  	// Write out the bytes  	out1.Write (toWrite' (int)out1.Position' toWrite.Length);  }  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: if (out1 is MutableMemoryStream) {  	MutableMemoryStream mout = (MutableMemoryStream)out1;  	// Grab current size  	int oldSize = mout.GetBytesWritten ();  	// Write out our header' less the size  	mout.Write (new byte[] {  		headerA'  		headerB  	});  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	mout.Write (typeB);  	mout.Write (new byte[4]);  	// Write out the children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (mout);  	}  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	int length = mout.GetBytesWritten () - oldSize - 8;  	byte[] size = new byte[4];  	LittleEndian.PutInt (size' 0' length);  	mout.OverWrite (size' oldSize + 4);  }  else {  	// Going to have to do it a slower way' because we have  	// to update the length come the end  	// Create a MemoryStream to hold everything in  	MemoryStream baos = new MemoryStream ();  	// Write out our header' less the size  	baos.Write (new byte[] {  		headerA'  		headerB  	}' 0' 2);  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	baos.Write (typeB' 2' 2);  	baos.Write (new byte[] {  		0'  		0'  		0'  		0  	}' 4' 4);  	// Write out our children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (baos);  	}  	// Grab the bytes back  	byte[] toWrite = baos.ToArray ();  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	LittleEndian.PutInt (toWrite' 4' (toWrite.Length - 8));  	// Write out the bytes  	out1.Write (toWrite' (int)out1.Position' toWrite.Length);  }  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: if (out1 is MutableMemoryStream) {  	MutableMemoryStream mout = (MutableMemoryStream)out1;  	// Grab current size  	int oldSize = mout.GetBytesWritten ();  	// Write out our header' less the size  	mout.Write (new byte[] {  		headerA'  		headerB  	});  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	mout.Write (typeB);  	mout.Write (new byte[4]);  	// Write out the children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (mout);  	}  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	int length = mout.GetBytesWritten () - oldSize - 8;  	byte[] size = new byte[4];  	LittleEndian.PutInt (size' 0' length);  	mout.OverWrite (size' oldSize + 4);  }  else {  	// Going to have to do it a slower way' because we have  	// to update the length come the end  	// Create a MemoryStream to hold everything in  	MemoryStream baos = new MemoryStream ();  	// Write out our header' less the size  	baos.Write (new byte[] {  		headerA'  		headerB  	}' 0' 2);  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	baos.Write (typeB' 2' 2);  	baos.Write (new byte[] {  		0'  		0'  		0'  		0  	}' 4' 4);  	// Write out our children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (baos);  	}  	// Grab the bytes back  	byte[] toWrite = baos.ToArray ();  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	LittleEndian.PutInt (toWrite' 4' (toWrite.Length - 8));  	// Write out the bytes  	out1.Write (toWrite' (int)out1.Position' toWrite.Length);  }  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: if (out1 is MutableMemoryStream) {  	MutableMemoryStream mout = (MutableMemoryStream)out1;  	// Grab current size  	int oldSize = mout.GetBytesWritten ();  	// Write out our header' less the size  	mout.Write (new byte[] {  		headerA'  		headerB  	});  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	mout.Write (typeB);  	mout.Write (new byte[4]);  	// Write out the children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (mout);  	}  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	int length = mout.GetBytesWritten () - oldSize - 8;  	byte[] size = new byte[4];  	LittleEndian.PutInt (size' 0' length);  	mout.OverWrite (size' oldSize + 4);  }  else {  	// Going to have to do it a slower way' because we have  	// to update the length come the end  	// Create a MemoryStream to hold everything in  	MemoryStream baos = new MemoryStream ();  	// Write out our header' less the size  	baos.Write (new byte[] {  		headerA'  		headerB  	}' 0' 2);  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	baos.Write (typeB' 2' 2);  	baos.Write (new byte[] {  		0'  		0'  		0'  		0  	}' 4' 4);  	// Write out our children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (baos);  	}  	// Grab the bytes back  	byte[] toWrite = baos.ToArray ();  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	LittleEndian.PutInt (toWrite' 4' (toWrite.Length - 8));  	// Write out the bytes  	out1.Write (toWrite' (int)out1.Position' toWrite.Length);  }  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: if (out1 is MutableMemoryStream) {  	MutableMemoryStream mout = (MutableMemoryStream)out1;  	// Grab current size  	int oldSize = mout.GetBytesWritten ();  	// Write out our header' less the size  	mout.Write (new byte[] {  		headerA'  		headerB  	});  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	mout.Write (typeB);  	mout.Write (new byte[4]);  	// Write out the children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (mout);  	}  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	int length = mout.GetBytesWritten () - oldSize - 8;  	byte[] size = new byte[4];  	LittleEndian.PutInt (size' 0' length);  	mout.OverWrite (size' oldSize + 4);  }  else {  	// Going to have to do it a slower way' because we have  	// to update the length come the end  	// Create a MemoryStream to hold everything in  	MemoryStream baos = new MemoryStream ();  	// Write out our header' less the size  	baos.Write (new byte[] {  		headerA'  		headerB  	}' 0' 2);  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	baos.Write (typeB' 2' 2);  	baos.Write (new byte[] {  		0'  		0'  		0'  		0  	}' 4' 4);  	// Write out our children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (baos);  	}  	// Grab the bytes back  	byte[] toWrite = baos.ToArray ();  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	LittleEndian.PutInt (toWrite' 4' (toWrite.Length - 8));  	// Write out the bytes  	out1.Write (toWrite' (int)out1.Position' toWrite.Length);  }  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: if (out1 is MutableMemoryStream) {  	MutableMemoryStream mout = (MutableMemoryStream)out1;  	// Grab current size  	int oldSize = mout.GetBytesWritten ();  	// Write out our header' less the size  	mout.Write (new byte[] {  		headerA'  		headerB  	});  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	mout.Write (typeB);  	mout.Write (new byte[4]);  	// Write out the children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (mout);  	}  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	int length = mout.GetBytesWritten () - oldSize - 8;  	byte[] size = new byte[4];  	LittleEndian.PutInt (size' 0' length);  	mout.OverWrite (size' oldSize + 4);  }  else {  	// Going to have to do it a slower way' because we have  	// to update the length come the end  	// Create a MemoryStream to hold everything in  	MemoryStream baos = new MemoryStream ();  	// Write out our header' less the size  	baos.Write (new byte[] {  		headerA'  		headerB  	}' 0' 2);  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	baos.Write (typeB' 2' 2);  	baos.Write (new byte[] {  		0'  		0'  		0'  		0  	}' 4' 4);  	// Write out our children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (baos);  	}  	// Grab the bytes back  	byte[] toWrite = baos.ToArray ();  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	LittleEndian.PutInt (toWrite' 4' (toWrite.Length - 8));  	// Write out the bytes  	out1.Write (toWrite' (int)out1.Position' toWrite.Length);  }  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: if (out1 is MutableMemoryStream) {  	MutableMemoryStream mout = (MutableMemoryStream)out1;  	// Grab current size  	int oldSize = mout.GetBytesWritten ();  	// Write out our header' less the size  	mout.Write (new byte[] {  		headerA'  		headerB  	});  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	mout.Write (typeB);  	mout.Write (new byte[4]);  	// Write out the children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (mout);  	}  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	int length = mout.GetBytesWritten () - oldSize - 8;  	byte[] size = new byte[4];  	LittleEndian.PutInt (size' 0' length);  	mout.OverWrite (size' oldSize + 4);  }  else {  	// Going to have to do it a slower way' because we have  	// to update the length come the end  	// Create a MemoryStream to hold everything in  	MemoryStream baos = new MemoryStream ();  	// Write out our header' less the size  	baos.Write (new byte[] {  		headerA'  		headerB  	}' 0' 2);  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	baos.Write (typeB' 2' 2);  	baos.Write (new byte[] {  		0'  		0'  		0'  		0  	}' 4' 4);  	// Write out our children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (baos);  	}  	// Grab the bytes back  	byte[] toWrite = baos.ToArray ();  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	LittleEndian.PutInt (toWrite' 4' (toWrite.Length - 8));  	// Write out the bytes  	out1.Write (toWrite' (int)out1.Position' toWrite.Length);  }  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: if (out1 is MutableMemoryStream) {  	MutableMemoryStream mout = (MutableMemoryStream)out1;  	// Grab current size  	int oldSize = mout.GetBytesWritten ();  	// Write out our header' less the size  	mout.Write (new byte[] {  		headerA'  		headerB  	});  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	mout.Write (typeB);  	mout.Write (new byte[4]);  	// Write out the children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (mout);  	}  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	int length = mout.GetBytesWritten () - oldSize - 8;  	byte[] size = new byte[4];  	LittleEndian.PutInt (size' 0' length);  	mout.OverWrite (size' oldSize + 4);  }  else {  	// Going to have to do it a slower way' because we have  	// to update the length come the end  	// Create a MemoryStream to hold everything in  	MemoryStream baos = new MemoryStream ();  	// Write out our header' less the size  	baos.Write (new byte[] {  		headerA'  		headerB  	}' 0' 2);  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	baos.Write (typeB' 2' 2);  	baos.Write (new byte[] {  		0'  		0'  		0'  		0  	}' 4' 4);  	// Write out our children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (baos);  	}  	// Grab the bytes back  	byte[] toWrite = baos.ToArray ();  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	LittleEndian.PutInt (toWrite' 4' (toWrite.Length - 8));  	// Write out the bytes  	out1.Write (toWrite' (int)out1.Position' toWrite.Length);  }  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: if (out1 is MutableMemoryStream) {  	MutableMemoryStream mout = (MutableMemoryStream)out1;  	// Grab current size  	int oldSize = mout.GetBytesWritten ();  	// Write out our header' less the size  	mout.Write (new byte[] {  		headerA'  		headerB  	});  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	mout.Write (typeB);  	mout.Write (new byte[4]);  	// Write out the children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (mout);  	}  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	int length = mout.GetBytesWritten () - oldSize - 8;  	byte[] size = new byte[4];  	LittleEndian.PutInt (size' 0' length);  	mout.OverWrite (size' oldSize + 4);  }  else {  	// Going to have to do it a slower way' because we have  	// to update the length come the end  	// Create a MemoryStream to hold everything in  	MemoryStream baos = new MemoryStream ();  	// Write out our header' less the size  	baos.Write (new byte[] {  		headerA'  		headerB  	}' 0' 2);  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	baos.Write (typeB' 2' 2);  	baos.Write (new byte[] {  		0'  		0'  		0'  		0  	}' 4' 4);  	// Write out our children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (baos);  	}  	// Grab the bytes back  	byte[] toWrite = baos.ToArray ();  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	LittleEndian.PutInt (toWrite' 4' (toWrite.Length - 8));  	// Write out the bytes  	out1.Write (toWrite' (int)out1.Position' toWrite.Length);  }  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: if (out1 is MutableMemoryStream) {  	MutableMemoryStream mout = (MutableMemoryStream)out1;  	// Grab current size  	int oldSize = mout.GetBytesWritten ();  	// Write out our header' less the size  	mout.Write (new byte[] {  		headerA'  		headerB  	});  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	mout.Write (typeB);  	mout.Write (new byte[4]);  	// Write out the children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (mout);  	}  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	int length = mout.GetBytesWritten () - oldSize - 8;  	byte[] size = new byte[4];  	LittleEndian.PutInt (size' 0' length);  	mout.OverWrite (size' oldSize + 4);  }  else {  	// Going to have to do it a slower way' because we have  	// to update the length come the end  	// Create a MemoryStream to hold everything in  	MemoryStream baos = new MemoryStream ();  	// Write out our header' less the size  	baos.Write (new byte[] {  		headerA'  		headerB  	}' 0' 2);  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	baos.Write (typeB' 2' 2);  	baos.Write (new byte[] {  		0'  		0'  		0'  		0  	}' 4' 4);  	// Write out our children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (baos);  	}  	// Grab the bytes back  	byte[] toWrite = baos.ToArray ();  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	LittleEndian.PutInt (toWrite' 4' (toWrite.Length - 8));  	// Write out the bytes  	out1.Write (toWrite' (int)out1.Position' toWrite.Length);  }  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: if (out1 is MutableMemoryStream) {  	MutableMemoryStream mout = (MutableMemoryStream)out1;  	// Grab current size  	int oldSize = mout.GetBytesWritten ();  	// Write out our header' less the size  	mout.Write (new byte[] {  		headerA'  		headerB  	});  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	mout.Write (typeB);  	mout.Write (new byte[4]);  	// Write out the children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (mout);  	}  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	int length = mout.GetBytesWritten () - oldSize - 8;  	byte[] size = new byte[4];  	LittleEndian.PutInt (size' 0' length);  	mout.OverWrite (size' oldSize + 4);  }  else {  	// Going to have to do it a slower way' because we have  	// to update the length come the end  	// Create a MemoryStream to hold everything in  	MemoryStream baos = new MemoryStream ();  	// Write out our header' less the size  	baos.Write (new byte[] {  		headerA'  		headerB  	}' 0' 2);  	byte[] typeB = new byte[2];  	LittleEndian.PutShort (typeB' (short)type);  	baos.Write (typeB' 2' 2);  	baos.Write (new byte[] {  		0'  		0'  		0'  		0  	}' 4' 4);  	// Write out our children  	for (int i = 0; i < children.Length; i++) {  		children [i].WriteOut (baos);  	}  	// Grab the bytes back  	byte[] toWrite = baos.ToArray ();  	// Update our header with the size  	// Don't forget to knock 8 more off' since we don't include the  	//  header in the size  	LittleEndian.PutInt (toWrite' 4' (toWrite.Length - 8));  	// Write out the bytes  	out1.Write (toWrite' (int)out1.Position' toWrite.Length);  }  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: mout.Write (new byte[4]);  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: mout.OverWrite (size' oldSize + 4);  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: baos.Write (new byte[] {  	headerA'  	headerB  }' 0' 2);  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: baos.Write (typeB' 2' 2);  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: baos.Write (typeB' 2' 2);  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: baos.Write (new byte[] {  	0'  	0'  	0'  	0  }' 4' 4);  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: baos.Write (new byte[] {  	0'  	0'  	0'  	0  }' 4' 4);  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: LittleEndian.PutInt (toWrite' 4' (toWrite.Length - 8));  
Magic Number,NPOI.HSLF.Record,RecordContainer,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RecordContainer.cs,WriteOut,The following statement contains a magic number: LittleEndian.PutInt (toWrite' 4' (toWrite.Length - 8));  
Magic Number,NPOI.HSLF.Record,RoundTripHFPlaceholder12,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RoundTripHFPlaceholder12.cs,RoundTripHFPlaceholder12,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,RoundTripHFPlaceholder12,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RoundTripHFPlaceholder12.cs,RoundTripHFPlaceholder12,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,RoundTripHFPlaceholder12,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\RoundTripHFPlaceholder12.cs,RoundTripHFPlaceholder12,The following statement contains a magic number: _placeholderId = source [start + 8];  
Magic Number,NPOI.HSLF.Record,SoundData,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\SoundData.cs,SoundData,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,SoundData,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\SoundData.cs,SoundData,The following statement contains a magic number: LittleEndian.PutShort (_header' 2' (short)RecordType);  
Magic Number,NPOI.HSLF.Record,SoundData,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\SoundData.cs,SoundData,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' _data.Length);  
Magic Number,NPOI.HSLF.Record,SoundData,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\SoundData.cs,SoundData,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,SoundData,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\SoundData.cs,SoundData,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,SoundData,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\SoundData.cs,SoundData,The following statement contains a magic number: _data = new byte[len - 8];  
Magic Number,NPOI.HSLF.Record,SoundData,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\SoundData.cs,SoundData,The following statement contains a magic number: Array.Copy (source' start + 8' _data' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,SoundData,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\SoundData.cs,SoundData,The following statement contains a magic number: Array.Copy (source' start + 8' _data' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,StyleTextPropAtom,The following statement contains a magic number: if (len < 18) {  	len = 18;  	if (source.Length - start < 18) {  		throw new Exception ("Not enough data to form a StyleTextPropAtom (min size 18 bytes long) - found " + (source.Length - start));  	}  }  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,StyleTextPropAtom,The following statement contains a magic number: if (len < 18) {  	len = 18;  	if (source.Length - start < 18) {  		throw new Exception ("Not enough data to form a StyleTextPropAtom (min size 18 bytes long) - found " + (source.Length - start));  	}  }  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,StyleTextPropAtom,The following statement contains a magic number: if (len < 18) {  	len = 18;  	if (source.Length - start < 18) {  		throw new Exception ("Not enough data to form a StyleTextPropAtom (min size 18 bytes long) - found " + (source.Length - start));  	}  }  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,StyleTextPropAtom,The following statement contains a magic number: len = 18;  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,StyleTextPropAtom,The following statement contains a magic number: if (source.Length - start < 18) {  	throw new Exception ("Not enough data to form a StyleTextPropAtom (min size 18 bytes long) - found " + (source.Length - start));  }  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,StyleTextPropAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,StyleTextPropAtom,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,StyleTextPropAtom,The following statement contains a magic number: rawContents = new byte[len - 8];  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,StyleTextPropAtom,The following statement contains a magic number: Array.Copy (source' start + 8' rawContents' 0' rawContents.Length);  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,StyleTextPropAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,StyleTextPropAtom,The following statement contains a magic number: LittleEndian.PutInt (_header' 2' (short)_type);  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,StyleTextPropAtom,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' 10);  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,StyleTextPropAtom,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' 10);  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,WriteOut,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' newSize);  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,SetParentTextSize,The following statement contains a magic number: while (pos < rawContents.Length && textHandled < prsize) {  	// First up' fetch the number of characters this applies to  	int textLen = LittleEndian.GetInt (rawContents' pos);  	textHandled += textLen;  	pos += 4;  	short indent = LittleEndian.GetShort (rawContents' pos);  	pos += 2;  	// Grab the 4 byte value that tells us what properties follow  	int paraFlags = LittleEndian.GetInt (rawContents' pos);  	pos += 4;  	// Now make sense of those properties  	TextPropCollection thisCollection = new TextPropCollection (textLen' indent);  	int plSize = thisCollection.BuildTextPropList (paraFlags' paragraphTextPropTypes' rawContents' pos);  	pos += plSize;  	// Save this properties Set  	paragraphStyles.Add (thisCollection);  	// Handle extra 1 paragraph styles at the end  	if (pos < rawContents.Length && textHandled == size) {  		prsize++;  	}  }  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,SetParentTextSize,The following statement contains a magic number: while (pos < rawContents.Length && textHandled < prsize) {  	// First up' fetch the number of characters this applies to  	int textLen = LittleEndian.GetInt (rawContents' pos);  	textHandled += textLen;  	pos += 4;  	short indent = LittleEndian.GetShort (rawContents' pos);  	pos += 2;  	// Grab the 4 byte value that tells us what properties follow  	int paraFlags = LittleEndian.GetInt (rawContents' pos);  	pos += 4;  	// Now make sense of those properties  	TextPropCollection thisCollection = new TextPropCollection (textLen' indent);  	int plSize = thisCollection.BuildTextPropList (paraFlags' paragraphTextPropTypes' rawContents' pos);  	pos += plSize;  	// Save this properties Set  	paragraphStyles.Add (thisCollection);  	// Handle extra 1 paragraph styles at the end  	if (pos < rawContents.Length && textHandled == size) {  		prsize++;  	}  }  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,SetParentTextSize,The following statement contains a magic number: while (pos < rawContents.Length && textHandled < prsize) {  	// First up' fetch the number of characters this applies to  	int textLen = LittleEndian.GetInt (rawContents' pos);  	textHandled += textLen;  	pos += 4;  	short indent = LittleEndian.GetShort (rawContents' pos);  	pos += 2;  	// Grab the 4 byte value that tells us what properties follow  	int paraFlags = LittleEndian.GetInt (rawContents' pos);  	pos += 4;  	// Now make sense of those properties  	TextPropCollection thisCollection = new TextPropCollection (textLen' indent);  	int plSize = thisCollection.BuildTextPropList (paraFlags' paragraphTextPropTypes' rawContents' pos);  	pos += plSize;  	// Save this properties Set  	paragraphStyles.Add (thisCollection);  	// Handle extra 1 paragraph styles at the end  	if (pos < rawContents.Length && textHandled == size) {  		prsize++;  	}  }  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,SetParentTextSize,The following statement contains a magic number: pos += 4;  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,SetParentTextSize,The following statement contains a magic number: pos += 2;  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,SetParentTextSize,The following statement contains a magic number: pos += 4;  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,SetParentTextSize,The following statement contains a magic number: while (pos < rawContents.Length && textHandled < chsize) {  	// First up' fetch the number of characters this applies to  	int textLen = LittleEndian.GetInt (rawContents' pos);  	textHandled += textLen;  	pos += 4;  	// There is no 2 byte value  	short no_val = -1;  	// Grab the 4 byte value that tells us what properties follow  	int charFlags = LittleEndian.GetInt (rawContents' pos);  	pos += 4;  	// Now make sense of those properties  	// (Assuming we actually have some)  	TextPropCollection thisCollection = new TextPropCollection (textLen' no_val);  	int chSize = thisCollection.BuildTextPropList (charFlags' characterTextPropTypes' rawContents' pos);  	pos += chSize;  	// Save this properties Set  	charStyles.Add (thisCollection);  	// Handle extra 1 char styles at the end  	if (pos < rawContents.Length && textHandled == size) {  		chsize++;  	}  }  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,SetParentTextSize,The following statement contains a magic number: while (pos < rawContents.Length && textHandled < chsize) {  	// First up' fetch the number of characters this applies to  	int textLen = LittleEndian.GetInt (rawContents' pos);  	textHandled += textLen;  	pos += 4;  	// There is no 2 byte value  	short no_val = -1;  	// Grab the 4 byte value that tells us what properties follow  	int charFlags = LittleEndian.GetInt (rawContents' pos);  	pos += 4;  	// Now make sense of those properties  	// (Assuming we actually have some)  	TextPropCollection thisCollection = new TextPropCollection (textLen' no_val);  	int chSize = thisCollection.BuildTextPropList (charFlags' characterTextPropTypes' rawContents' pos);  	pos += chSize;  	// Save this properties Set  	charStyles.Add (thisCollection);  	// Handle extra 1 char styles at the end  	if (pos < rawContents.Length && textHandled == size) {  		chsize++;  	}  }  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,SetParentTextSize,The following statement contains a magic number: pos += 4;  
Magic Number,NPOI.HSLF.Record,StyleTextPropAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\StyleTextPropAtom.cs,SetParentTextSize,The following statement contains a magic number: pos += 4;  
Magic Number,NPOI.HSLF.Record,TextBytesAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextBytesAtom.cs,SetText,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' _text.Length);  
Magic Number,NPOI.HSLF.Record,TextBytesAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextBytesAtom.cs,TextBytesAtom,The following statement contains a magic number: if (len < 8) {  	len = 8;  }  
Magic Number,NPOI.HSLF.Record,TextBytesAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextBytesAtom.cs,TextBytesAtom,The following statement contains a magic number: if (len < 8) {  	len = 8;  }  
Magic Number,NPOI.HSLF.Record,TextBytesAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextBytesAtom.cs,TextBytesAtom,The following statement contains a magic number: len = 8;  
Magic Number,NPOI.HSLF.Record,TextBytesAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextBytesAtom.cs,TextBytesAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,TextBytesAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextBytesAtom.cs,TextBytesAtom,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,TextBytesAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextBytesAtom.cs,TextBytesAtom,The following statement contains a magic number: _text = new byte[len - 8];  
Magic Number,NPOI.HSLF.Record,TextBytesAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextBytesAtom.cs,TextBytesAtom,The following statement contains a magic number: Array.Copy (source' start + 8' _text' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,TextBytesAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextBytesAtom.cs,TextBytesAtom,The following statement contains a magic number: Array.Copy (source' start + 8' _text' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,TextBytesAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextBytesAtom.cs,TextBytesAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,TextBytesAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextBytesAtom.cs,TextBytesAtom,The following statement contains a magic number: LittleEndian.PutUShort (_header' 2' (int)_type);  
Magic Number,NPOI.HSLF.Record,TextBytesAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextBytesAtom.cs,TextBytesAtom,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' 0);  
Magic Number,NPOI.HSLF.Record,TextCharsAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextCharsAtom.cs,SetText,The following statement contains a magic number: _text = new byte[text.Length * 2];  
Magic Number,NPOI.HSLF.Record,TextCharsAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextCharsAtom.cs,SetText,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' _text.Length);  
Magic Number,NPOI.HSLF.Record,TextCharsAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextCharsAtom.cs,TextCharsAtom,The following statement contains a magic number: if (len < 8) {  	len = 8;  }  
Magic Number,NPOI.HSLF.Record,TextCharsAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextCharsAtom.cs,TextCharsAtom,The following statement contains a magic number: if (len < 8) {  	len = 8;  }  
Magic Number,NPOI.HSLF.Record,TextCharsAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextCharsAtom.cs,TextCharsAtom,The following statement contains a magic number: len = 8;  
Magic Number,NPOI.HSLF.Record,TextCharsAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextCharsAtom.cs,TextCharsAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,TextCharsAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextCharsAtom.cs,TextCharsAtom,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,TextCharsAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextCharsAtom.cs,TextCharsAtom,The following statement contains a magic number: _text = new byte[len - 8];  
Magic Number,NPOI.HSLF.Record,TextCharsAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextCharsAtom.cs,TextCharsAtom,The following statement contains a magic number: Array.Copy (source' start + 8' _text' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,TextCharsAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextCharsAtom.cs,TextCharsAtom,The following statement contains a magic number: Array.Copy (source' start + 8' _text' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,TextCharsAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextCharsAtom.cs,TextCharsAtom,The following statement contains a magic number: _header = new byte[] {  	0'  	0'  	unchecked((byte)(0xA0 - 256))'  	0x0f'  	0'  	0'  	0'  	0  };  
Magic Number,NPOI.HSLF.Record,TextHeaderAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextHeaderAtom.cs,TextHeaderAtom,The following statement contains a magic number: if (len < 12) {  	len = 12;  	if (source.Length - start < 12) {  		throw new Exception ("Not enough data to form a TextHeaderAtom (always 12 bytes long) - found " + (source.Length - start));  	}  }  
Magic Number,NPOI.HSLF.Record,TextHeaderAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextHeaderAtom.cs,TextHeaderAtom,The following statement contains a magic number: if (len < 12) {  	len = 12;  	if (source.Length - start < 12) {  		throw new Exception ("Not enough data to form a TextHeaderAtom (always 12 bytes long) - found " + (source.Length - start));  	}  }  
Magic Number,NPOI.HSLF.Record,TextHeaderAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextHeaderAtom.cs,TextHeaderAtom,The following statement contains a magic number: if (len < 12) {  	len = 12;  	if (source.Length - start < 12) {  		throw new Exception ("Not enough data to form a TextHeaderAtom (always 12 bytes long) - found " + (source.Length - start));  	}  }  
Magic Number,NPOI.HSLF.Record,TextHeaderAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextHeaderAtom.cs,TextHeaderAtom,The following statement contains a magic number: len = 12;  
Magic Number,NPOI.HSLF.Record,TextHeaderAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextHeaderAtom.cs,TextHeaderAtom,The following statement contains a magic number: if (source.Length - start < 12) {  	throw new Exception ("Not enough data to form a TextHeaderAtom (always 12 bytes long) - found " + (source.Length - start));  }  
Magic Number,NPOI.HSLF.Record,TextHeaderAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextHeaderAtom.cs,TextHeaderAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,TextHeaderAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextHeaderAtom.cs,TextHeaderAtom,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,TextHeaderAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextHeaderAtom.cs,TextHeaderAtom,The following statement contains a magic number: textType = LittleEndian.GetInt (source' start + 8);  
Magic Number,NPOI.HSLF.Record,TextHeaderAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextHeaderAtom.cs,TextHeaderAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,TextHeaderAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextHeaderAtom.cs,TextHeaderAtom,The following statement contains a magic number: LittleEndian.PutUShort (_header' 2' (int)_type);  
Magic Number,NPOI.HSLF.Record,TextHeaderAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextHeaderAtom.cs,TextHeaderAtom,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' 4);  
Magic Number,NPOI.HSLF.Record,TextHeaderAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextHeaderAtom.cs,TextHeaderAtom,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' 4);  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,TextRulerAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,TextRulerAtom,The following statement contains a magic number: LittleEndian.PutShort (_header' 2' (short)RecordType);  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,TextRulerAtom,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' _data.Length);  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,TextRulerAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,TextRulerAtom,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,TextRulerAtom,The following statement contains a magic number: _data = new byte[len - 8];  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,TextRulerAtom,The following statement contains a magic number: Array.Copy (source' start + 8' _data' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,TextRulerAtom,The following statement contains a magic number: Array.Copy (source' start + 8' _data' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: pos += 4;  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			//defaultTabSize  			defaultTabSize = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			//numLevels  			numLevels = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			//tabStops  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			tabStops = new int[val * 2];  			for (int j = 0; j < tabStops.Length; j++) {  				tabStops [j] = LittleEndian.GetUShort (_data' pos);  				pos += 2;  			}  			break;  		case 3:  		case 4:  		case 5:  		case 6:  		case 7:  			//bullet.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			bulletOffSets [bits [i] - 3] = val;  			break;  		case 8:  		case 9:  		case 10:  		case 11:  		case 12:  			//text.offset  			val = LittleEndian.GetShort (_data' pos);  			pos += 2;  			textOffSets [bits [i] - 8] = val;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: if ((mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		//defaultTabSize  		defaultTabSize = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		//numLevels  		numLevels = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		//tabStops  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		tabStops = new int[val * 2];  		for (int j = 0; j < tabStops.Length; j++) {  			tabStops [j] = LittleEndian.GetUShort (_data' pos);  			pos += 2;  		}  		break;  	case 3:  	case 4:  	case 5:  	case 6:  	case 7:  		//bullet.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		bulletOffSets [bits [i] - 3] = val;  		break;  	case 8:  	case 9:  	case 10:  	case 11:  	case 12:  		//text.offset  		val = LittleEndian.GetShort (_data' pos);  		pos += 2;  		textOffSets [bits [i] - 8] = val;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: pos += 2;  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: pos += 2;  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: pos += 2;  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: tabStops = new int[val * 2];  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: for (int j = 0; j < tabStops.Length; j++) {  	tabStops [j] = LittleEndian.GetUShort (_data' pos);  	pos += 2;  }  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: pos += 2;  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: pos += 2;  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: bulletOffSets [bits [i] - 3] = val;  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: pos += 2;  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following statement contains a magic number: textOffSets [bits [i] - 8] = val;  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,SetParagraphIndent,The following statement contains a magic number: LittleEndian.PutShort (_data' 4' tetxOffSet);  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,SetParagraphIndent,The following statement contains a magic number: LittleEndian.PutShort (_data' 6' bulletOffSet);  
Magic Number,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,SetParagraphIndent,The following statement contains a magic number: LittleEndian.PutShort (_data' 8' bulletOffSet);  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,TextSpecInfoAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,TextSpecInfoAtom,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,TextSpecInfoAtom,The following statement contains a magic number: _data = new byte[len - 8];  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,TextSpecInfoAtom,The following statement contains a magic number: Array.Copy (source' start + 8' _data' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,TextSpecInfoAtom,The following statement contains a magic number: Array.Copy (source' start + 8' _data' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,Reset,The following statement contains a magic number: _data = new byte[10];  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,Reset,The following statement contains a magic number: LittleEndian.PutInt (_data' 4' 1);  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,Reset,The following statement contains a magic number: LittleEndian.PutShort (_data' 8' (short)0);  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,Reset,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' _data.Length);  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: while (pos < _data.Length) {  	TextSpecInfoRun run = new TextSpecInfoRun ();  	run.len = LittleEndian.GetInt (_data' pos);  	pos += 4;  	run.mask = LittleEndian.GetInt (_data' pos);  	pos += 4;  	for (int i = 0; i < bits.Length; i++) {  		if ((run.mask & 1 << bits [i]) != 0) {  			switch (bits [i]) {  			case 0:  				run.spellInfo = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			case 1:  				run.langId = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			case 2:  				run.altLangId = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			}  		}  	}  	lst.Add (run);  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: while (pos < _data.Length) {  	TextSpecInfoRun run = new TextSpecInfoRun ();  	run.len = LittleEndian.GetInt (_data' pos);  	pos += 4;  	run.mask = LittleEndian.GetInt (_data' pos);  	pos += 4;  	for (int i = 0; i < bits.Length; i++) {  		if ((run.mask & 1 << bits [i]) != 0) {  			switch (bits [i]) {  			case 0:  				run.spellInfo = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			case 1:  				run.langId = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			case 2:  				run.altLangId = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			}  		}  	}  	lst.Add (run);  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: while (pos < _data.Length) {  	TextSpecInfoRun run = new TextSpecInfoRun ();  	run.len = LittleEndian.GetInt (_data' pos);  	pos += 4;  	run.mask = LittleEndian.GetInt (_data' pos);  	pos += 4;  	for (int i = 0; i < bits.Length; i++) {  		if ((run.mask & 1 << bits [i]) != 0) {  			switch (bits [i]) {  			case 0:  				run.spellInfo = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			case 1:  				run.langId = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			case 2:  				run.altLangId = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			}  		}  	}  	lst.Add (run);  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: while (pos < _data.Length) {  	TextSpecInfoRun run = new TextSpecInfoRun ();  	run.len = LittleEndian.GetInt (_data' pos);  	pos += 4;  	run.mask = LittleEndian.GetInt (_data' pos);  	pos += 4;  	for (int i = 0; i < bits.Length; i++) {  		if ((run.mask & 1 << bits [i]) != 0) {  			switch (bits [i]) {  			case 0:  				run.spellInfo = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			case 1:  				run.langId = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			case 2:  				run.altLangId = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			}  		}  	}  	lst.Add (run);  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: while (pos < _data.Length) {  	TextSpecInfoRun run = new TextSpecInfoRun ();  	run.len = LittleEndian.GetInt (_data' pos);  	pos += 4;  	run.mask = LittleEndian.GetInt (_data' pos);  	pos += 4;  	for (int i = 0; i < bits.Length; i++) {  		if ((run.mask & 1 << bits [i]) != 0) {  			switch (bits [i]) {  			case 0:  				run.spellInfo = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			case 1:  				run.langId = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			case 2:  				run.altLangId = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			}  		}  	}  	lst.Add (run);  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: while (pos < _data.Length) {  	TextSpecInfoRun run = new TextSpecInfoRun ();  	run.len = LittleEndian.GetInt (_data' pos);  	pos += 4;  	run.mask = LittleEndian.GetInt (_data' pos);  	pos += 4;  	for (int i = 0; i < bits.Length; i++) {  		if ((run.mask & 1 << bits [i]) != 0) {  			switch (bits [i]) {  			case 0:  				run.spellInfo = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			case 1:  				run.langId = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			case 2:  				run.altLangId = LittleEndian.GetShort (_data' pos);  				pos += 2;  				break;  			}  		}  	}  	lst.Add (run);  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: pos += 4;  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: pos += 4;  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((run.mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			run.spellInfo = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			run.langId = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			run.altLangId = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((run.mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			run.spellInfo = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			run.langId = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			run.altLangId = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((run.mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			run.spellInfo = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			run.langId = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			run.altLangId = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: for (int i = 0; i < bits.Length; i++) {  	if ((run.mask & 1 << bits [i]) != 0) {  		switch (bits [i]) {  		case 0:  			run.spellInfo = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 1:  			run.langId = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		case 2:  			run.altLangId = LittleEndian.GetShort (_data' pos);  			pos += 2;  			break;  		}  	}  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: if ((run.mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		run.spellInfo = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		run.langId = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		run.altLangId = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: if ((run.mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		run.spellInfo = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		run.langId = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		run.altLangId = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: if ((run.mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		run.spellInfo = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		run.langId = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		run.altLangId = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: if ((run.mask & 1 << bits [i]) != 0) {  	switch (bits [i]) {  	case 0:  		run.spellInfo = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 1:  		run.langId = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	case 2:  		run.altLangId = LittleEndian.GetShort (_data' pos);  		pos += 2;  		break;  	}  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: switch (bits [i]) {  case 0:  	run.spellInfo = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	run.langId = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	run.altLangId = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: switch (bits [i]) {  case 0:  	run.spellInfo = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	run.langId = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	run.altLangId = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: switch (bits [i]) {  case 0:  	run.spellInfo = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	run.langId = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	run.altLangId = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: switch (bits [i]) {  case 0:  	run.spellInfo = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	run.langId = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	run.altLangId = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  }  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: pos += 2;  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: pos += 2;  
Magic Number,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following statement contains a magic number: pos += 2;  
Magic Number,NPOI.HSLF.Record,TxInteractiveInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TxInteractiveInfoAtom.cs,TxInteractiveInfoAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,TxInteractiveInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TxInteractiveInfoAtom.cs,TxInteractiveInfoAtom,The following statement contains a magic number: _data = new byte[8];  
Magic Number,NPOI.HSLF.Record,TxInteractiveInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TxInteractiveInfoAtom.cs,TxInteractiveInfoAtom,The following statement contains a magic number: LittleEndian.PutShort (_header' 2' (short)RecordType);  
Magic Number,NPOI.HSLF.Record,TxInteractiveInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TxInteractiveInfoAtom.cs,TxInteractiveInfoAtom,The following statement contains a magic number: LittleEndian.PutInt (_header' 4' _data.Length);  
Magic Number,NPOI.HSLF.Record,TxInteractiveInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TxInteractiveInfoAtom.cs,TxInteractiveInfoAtom,The following statement contains a magic number: _header = new byte[8];  
Magic Number,NPOI.HSLF.Record,TxInteractiveInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TxInteractiveInfoAtom.cs,TxInteractiveInfoAtom,The following statement contains a magic number: Array.Copy (source' start' _header' 0' 8);  
Magic Number,NPOI.HSLF.Record,TxInteractiveInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TxInteractiveInfoAtom.cs,TxInteractiveInfoAtom,The following statement contains a magic number: _data = new byte[len - 8];  
Magic Number,NPOI.HSLF.Record,TxInteractiveInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TxInteractiveInfoAtom.cs,TxInteractiveInfoAtom,The following statement contains a magic number: Array.Copy (source' start + 8' _data' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,TxInteractiveInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TxInteractiveInfoAtom.cs,TxInteractiveInfoAtom,The following statement contains a magic number: Array.Copy (source' start + 8' _data' 0' len - 8);  
Magic Number,NPOI.HSLF.Record,TxInteractiveInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TxInteractiveInfoAtom.cs,GetEndIndex,The following statement contains a magic number: return LittleEndian.GetInt (_data' 4);  
Magic Number,NPOI.HSLF.Record,TxInteractiveInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TxInteractiveInfoAtom.cs,SetEndIndex,The following statement contains a magic number: LittleEndian.PutInt (_data' 4' idx);  
Magic Number,NPOI.HSLF.Record,UnknownRecordPlaceholder,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\UnknownRecordPlaceholder.cs,UnknownRecordPlaceholder,The following statement contains a magic number: _type = LittleEndian.GetUShort (_contents' 2);  
Magic Number,NPOI.HSLF.Util,SystemTimeUtils,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Util\SystemTimeUtils.cs,StoreDate,The following statement contains a magic number: LittleEndian.PutShort (dest' offset + 2' (short)date.Month);  
Magic Number,NPOI.HSLF.Util,SystemTimeUtils,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Util\SystemTimeUtils.cs,StoreDate,The following statement contains a magic number: LittleEndian.PutShort (dest' offset + 4' (short)date.DayOfWeek);  
Magic Number,NPOI.HSLF.Util,SystemTimeUtils,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Util\SystemTimeUtils.cs,StoreDate,The following statement contains a magic number: LittleEndian.PutShort (dest' offset + 6' (short)date.Day);  
Magic Number,NPOI.HSLF.Util,SystemTimeUtils,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Util\SystemTimeUtils.cs,StoreDate,The following statement contains a magic number: LittleEndian.PutShort (dest' offset + 8' (short)date.Hour);  
Magic Number,NPOI.HSLF.Util,SystemTimeUtils,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Util\SystemTimeUtils.cs,StoreDate,The following statement contains a magic number: LittleEndian.PutShort (dest' offset + 10' (short)date.Minute);  
Magic Number,NPOI.HSLF.Util,SystemTimeUtils,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Util\SystemTimeUtils.cs,StoreDate,The following statement contains a magic number: LittleEndian.PutShort (dest' offset + 12' (short)date.Second);  
Magic Number,NPOI.HSLF.Util,SystemTimeUtils,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Util\SystemTimeUtils.cs,StoreDate,The following statement contains a magic number: LittleEndian.PutShort (dest' offset + 14' (short)date.Millisecond);  
Missing Default,NPOI.HSLF.Record,Comment2000,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\Comment2000.cs,FindInterestingChildren,The following switch statement is missing a default case: switch (recInstance) {  case 0:  	authorRecord = cs;  	break;  case 1:  	commentRecord = cs;  	break;  case 2:  	authorInitialsRecord = cs;  	break;  }  
Missing Default,NPOI.HSLF.Record,TextRulerAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextRulerAtom.cs,Read,The following switch statement is missing a default case: switch (bits [i]) {  case 0:  	//defaultTabSize  	defaultTabSize = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	//numLevels  	numLevels = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	//tabStops  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	tabStops = new int[val * 2];  	for (int j = 0; j < tabStops.Length; j++) {  		tabStops [j] = LittleEndian.GetUShort (_data' pos);  		pos += 2;  	}  	break;  case 3:  case 4:  case 5:  case 6:  case 7:  	//bullet.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	bulletOffSets [bits [i] - 3] = val;  	break;  case 8:  case 9:  case 10:  case 11:  case 12:  	//text.offset  	val = LittleEndian.GetShort (_data' pos);  	pos += 2;  	textOffSets [bits [i] - 8] = val;  	break;  }  
Missing Default,NPOI.HSLF.Record,TextSpecInfoAtom,C:\repos\xoposhiy_npoi\trunk\scratchpad\HSLF\Record\TextSpecInfoAtom.cs,GetTextSpecInfoRuns,The following switch statement is missing a default case: switch (bits [i]) {  case 0:  	run.spellInfo = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 1:  	run.langId = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  case 2:  	run.altLangId = LittleEndian.GetShort (_data' pos);  	pos += 2;  	break;  }  
