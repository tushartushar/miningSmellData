Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DeNSo,LogWriter,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\LogWriter.cs,LogMessage,Cyclomatic complexity of the method is 10
Long Parameter List,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,BloomFilter,The method has 5 parameters. Parameters: capacity' errorRate' hashFunction' m' k
Long Statement,DeNSo,EventHandlerManager,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\EventHandler.cs,AnalyzeCommandHandlers,The length of the statement  "        LogWriter.LogInformation(string.Format("Registering command handler {0}"' hand.GetType().Name)' LogEntryType.Information); " is 122.
Long Statement,DeNSo,ObjectStore,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\ObjectStore.cs,IncoerenceIndexRatio,The length of the statement  "      return (((float)Math.Max(this.Count() - _bloomfilter.Size' 0) + (float)_indexpossibleincoerences) / (float)this.Count()) * 100; " is 127.
Long Statement,DeNSo,StoreManager,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\StoreManager.cs,OpenDataBase,The length of the statement  "          using (var fs = iss.OpenFile(Path.Combine(Path.Combine(Configuration.BasePath' databasename)' "denso.trn")' FileMode.Open' FileAccess.Read)) " is 140.
Long Statement,DeNSo,StoreManager,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\StoreManager.cs,OpenDataBase,The length of the statement  "            using (var fs = File.Open(Path.Combine(Path.Combine(Configuration.BasePath' databasename)' "denso.trn")' FileMode.Open' FileAccess.Read' FileShare.Read)) " is 153.
Long Statement,DeNSo,StoreManager,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\StoreManager.cs,CheckBloomIndexes,The length of the statement  "              LogWriter.LogInformation(string.Format("Reindexing {0} - {1} - IndexRatio: {2}"' d' c' errorratio)' LogEntryType.Warning); " is 122.
Long Statement,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,bestErrorRate,The length of the statement  "        return (float)Math.Pow(0.6185' int.MaxValue / capacity); // http://www.cs.princeton.edu/courses/archive/spring02/cs493/lec7.pdf " is 127.
Empty Catch Block,DeNSo,Configuration,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Configuration.cs,Configuration,The method has an empty catch block.
Magic Number,DeNSo,Configuration,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Configuration.cs,Configuration,The following statement contains a magic number: SaveInterval = new TimeSpan(0' 5' 0);
Magic Number,DeNSo,Configuration,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Configuration.cs,Configuration,The following statement contains a magic number: ReindexCheck = new TimeSpan(0' 0' 10);
Magic Number,DeNSo,Configuration,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Configuration.cs,Configuration,The following statement contains a magic number: DBCheckTimeSpan = new TimeSpan(0' 0' 10);
Magic Number,DeNSo,Configuration,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Configuration.cs,Configuration,The following statement contains a magic number: DictionarySplitSize = 20000;
Magic Number,DeNSo,JournalReader,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\DiskIO\JournalReader.cs,OpenLogFile,The following statement contains a magic number: try        {    #if WINDOWS_PHONE            _logfile = iss.OpenFile(FileName' FileMode.Append' FileAccess.Write' FileShare.Read);  #else          _logfile = new FileStream(FileName'                                    FileMode.OpenOrCreate'                                    System.Security.AccessControl.FileSystemRights.Read'                                    FileShare.ReadWrite' 4096'                                    FileOptions.None);  #endif          _reader = new BinaryReader(_logfile);            if (_logfile != null)            LogWriter.LogMessage(string.Format("Log File ready: {0}"' FileName)' LogEntryType.Information);          else          {            LogWriter.LogMessage(string.Format("Unable to open logfile: {0}"' FileName)' LogEntryType.Error);          }            JournalWriter.Closing += (s' e) => CloseFile();        }        catch (Exception ex)        {          LogWriter.LogException(ex);          return false;        }
Magic Number,DeNSo,EventStore,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\EventStore.cs,ExecuteEventCommands,The following statement contains a magic number: while (!StoreManager.ShuttingDown)        {          //Debug.Write(string.Format("step1 : {0}"' DateTime.Now.ToString("ss:ffff")));          CommandsReady.WaitOne(5000);          //Debug.Write(string.Format("step2 : {0}"' DateTime.Now.ToString("ss:ffff")));          if (_waitingevents.Count == 0)          {            CommandsReady.Reset();            continue;          }            EventCommand we;          lock (_waitingevents)            we = _waitingevents.Dequeue();            EventHandlerManager.ExecuteCommandEvent(DatabaseName' we);            LastExecutedCommandSN = we.CommandSN;            if (Debugger.IsAttached)            if (LastExecutedCommandSN % 1000 == 0)              Console.Write(string.Format("LEC: {0} - "' LastExecutedCommandSN));            if (Configuration.EnableOperationsLog)            _operationsLog.LogCommand(we);            //if (_waitingevents.Count == 0)          //  Session.RaiseStoreUpdated(LastExecutedCommandSN);          }
Magic Number,DeNSo,EventStore,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\EventStore.cs,ExecuteEventCommands,The following statement contains a magic number: while (!StoreManager.ShuttingDown)        {          //Debug.Write(string.Format("step1 : {0}"' DateTime.Now.ToString("ss:ffff")));          CommandsReady.WaitOne(5000);          //Debug.Write(string.Format("step2 : {0}"' DateTime.Now.ToString("ss:ffff")));          if (_waitingevents.Count == 0)          {            CommandsReady.Reset();            continue;          }            EventCommand we;          lock (_waitingevents)            we = _waitingevents.Dequeue();            EventHandlerManager.ExecuteCommandEvent(DatabaseName' we);            LastExecutedCommandSN = we.CommandSN;            if (Debugger.IsAttached)            if (LastExecutedCommandSN % 1000 == 0)              Console.Write(string.Format("LEC: {0} - "' LastExecutedCommandSN));            if (Configuration.EnableOperationsLog)            _operationsLog.LogCommand(we);            //if (_waitingevents.Count == 0)          //  Session.RaiseStoreUpdated(LastExecutedCommandSN);          }
Magic Number,DeNSo,JournalWriter,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\DiskIO\JournalWriter.cs,OpenLogFile,The following statement contains a magic number: try        {          if (_logfile == null)          {  #if WINDOWS_PHONE            _logfile = iss.OpenFile(FileName' FileMode.Append' FileAccess.Write' FileShare.Read);  #else            _logfile = new FileStream(FileName'                                      FileMode.Append'                                      System.Security.AccessControl.FileSystemRights.AppendData'                                      FileShare.ReadWrite' 4096'                                      FileOptions.None);            //_logfile = File.Open(FileName' FileMode.Append' FileAccess.Write' FileShare.Read);  #endif            //IncreaseFileSize();            _logbuffer = new MemoryStream();            _writer = new BinaryWriter(_logbuffer);              if (_logfile != null)              LogWriter.LogMessage(string.Format("Log File ready: {0}"' FileName)' LogEntryType.Information);            else            {              LogWriter.LogMessage(string.Format("Unable to open logfile: {0}"' FileName)' LogEntryType.Error);              //Server.EmergencyShutdown();            }              JournalWriter.Closing += (s' e) => CloseFile();          }        }        catch (Exception ex)        {          LogWriter.LogException(ex);          //Server.EmergencyShutdown();          return false;        }
Magic Number,DeNSo,ObjectStore,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\ObjectStore.cs,IncoerenceIndexRatio,The following statement contains a magic number: return (((float)Math.Max(this.Count() - _bloomfilter.Size' 0) + (float)_indexpossibleincoerences) / (float)this.Count()) * 100;
Magic Number,DeNSo,ObjectStore,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\ObjectStore.cs,Reindex,The following statement contains a magic number: lock (_bloomfilter)        {          var newsize = this.Count() + Configuration.DictionarySplitSize * 2;          var newbloom = new BloomFilter<string>(newsize);          foreach (var d in _primarystore)            foreach (var k in d.Keys)              newbloom.Add(k);            _bloomfilter = newbloom;          _indexpossibleincoerences = 0;        }
Magic Number,DeNSo,StoreManager,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\StoreManager.cs,ShutDown,The following statement contains a magic number: if (_saveDBThread != null)          _saveDBThread.Join((int)new TimeSpan(0' 5' 0).TotalMilliseconds);
Magic Number,DeNSo,StoreManager,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\StoreManager.cs,SaveDBThreadMethod,The following statement contains a magic number: while (!ShutDownEvent.WaitOne(2))        {          ShutDownEvent.WaitOne(Configuration.SaveInterval);          lock (_stores)            foreach (var db in _stores.Keys)            {              SaveDataBase(db);              ShutDownEvent.WaitOne(Configuration.DBCheckTimeSpan);            }        }
Magic Number,DeNSo,LogWriter,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\LogWriter.cs,LogMessage,The following statement contains a magic number: if (VerboseLevel == 2 && entrytype == LogEntryType.Information) return;
Magic Number,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,bestK,The following statement contains a magic number: return (int)Math.Round(Math.Log(2.0) * bestM(capacity' errorRate) / capacity);
Magic Number,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,bestM,The following statement contains a magic number: return (int)Math.Ceiling(capacity * Math.Log(errorRate' (1.0 / Math.Pow(2' Math.Log(2.0)))));
Magic Number,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,bestM,The following statement contains a magic number: return (int)Math.Ceiling(capacity * Math.Log(errorRate' (1.0 / Math.Pow(2' Math.Log(2.0)))));
Magic Number,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,bestErrorRate,The following statement contains a magic number: if (c != 0)          return c;        else          return (float)Math.Pow(0.6185' int.MaxValue / capacity);
Magic Number,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,hashInt32,The following statement contains a magic number: unchecked        {          x = ~x + (x << 15); // x = (x << 15) - x- 1' as (~x) + y is equivalent to y - x - 1 in two's complement representation          x = x ^ (x >> 12);          x = x + (x << 2);          x = x ^ (x >> 4);          x = x * 2057; // x = (x + (x << 3)) + (x<< 11);          x = x ^ (x >> 16);          return (int)x;        }
Magic Number,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,hashInt32,The following statement contains a magic number: unchecked        {          x = ~x + (x << 15); // x = (x << 15) - x- 1' as (~x) + y is equivalent to y - x - 1 in two's complement representation          x = x ^ (x >> 12);          x = x + (x << 2);          x = x ^ (x >> 4);          x = x * 2057; // x = (x + (x << 3)) + (x<< 11);          x = x ^ (x >> 16);          return (int)x;        }
Magic Number,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,hashInt32,The following statement contains a magic number: unchecked        {          x = ~x + (x << 15); // x = (x << 15) - x- 1' as (~x) + y is equivalent to y - x - 1 in two's complement representation          x = x ^ (x >> 12);          x = x + (x << 2);          x = x ^ (x >> 4);          x = x * 2057; // x = (x + (x << 3)) + (x<< 11);          x = x ^ (x >> 16);          return (int)x;        }
Magic Number,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,hashInt32,The following statement contains a magic number: unchecked        {          x = ~x + (x << 15); // x = (x << 15) - x- 1' as (~x) + y is equivalent to y - x - 1 in two's complement representation          x = x ^ (x >> 12);          x = x + (x << 2);          x = x ^ (x >> 4);          x = x * 2057; // x = (x + (x << 3)) + (x<< 11);          x = x ^ (x >> 16);          return (int)x;        }
Magic Number,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,hashInt32,The following statement contains a magic number: unchecked        {          x = ~x + (x << 15); // x = (x << 15) - x- 1' as (~x) + y is equivalent to y - x - 1 in two's complement representation          x = x ^ (x >> 12);          x = x + (x << 2);          x = x ^ (x >> 4);          x = x * 2057; // x = (x + (x << 3)) + (x<< 11);          x = x ^ (x >> 16);          return (int)x;        }
Magic Number,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,hashInt32,The following statement contains a magic number: unchecked        {          x = ~x + (x << 15); // x = (x << 15) - x- 1' as (~x) + y is equivalent to y - x - 1 in two's complement representation          x = x ^ (x >> 12);          x = x + (x << 2);          x = x ^ (x >> 4);          x = x * 2057; // x = (x + (x << 3)) + (x<< 11);          x = x ^ (x >> 16);          return (int)x;        }
Magic Number,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,hashString,The following statement contains a magic number: for (int i = 0; i < s.Length; i++)        {          hash += s[i];          hash += (hash << 10);          hash ^= (hash >> 6);        }
Magic Number,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,hashString,The following statement contains a magic number: for (int i = 0; i < s.Length; i++)        {          hash += s[i];          hash += (hash << 10);          hash ^= (hash >> 6);        }
Magic Number,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,hashString,The following statement contains a magic number: hash += (hash << 3);
Magic Number,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,hashString,The following statement contains a magic number: hash ^= (hash >> 11);
Magic Number,DeNSo.Core.Filters,BloomFilter<T>,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Filters\BloomFilter.cs,hashString,The following statement contains a magic number: hash += (hash << 15);
Magic Number,DeNSo.Struct,StoreGuid,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Struct\StoreKey.cs,init,The following statement contains a magic number: if (values == null)          values = new byte[16];
Magic Number,DeNSo.Struct,StoreGuid,C:\repos\teamdev_DensoDB\Windows\DeNSo.Core\Struct\StoreKey.cs,Increment,The following statement contains a magic number: for (short x = 15; x > 0; x--)        {          values[x] = (byte)(values[x] + 1);          var cv = values[x];          if (cv != 0) break;        }
