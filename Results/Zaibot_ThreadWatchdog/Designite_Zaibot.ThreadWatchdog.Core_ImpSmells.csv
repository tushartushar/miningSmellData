Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Zaibot.ThreadWatchdog.Core.Native,Kernel32Api,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Native\Kernel32Api.cs,GetThreadTimes,The method has 5 parameters.
Long Parameter List,Zaibot.ThreadWatchdog.Core.Native,Kernel32Api,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Native\Kernel32Api.cs,DuplicateHandle,The method has 7 parameters.
Long Statement,Zaibot.ThreadWatchdog.Core.Internals,ThreadConcerns,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Internals\ThreadConcerns.cs,GetCurrentThreadHandle,The length of the statement  "	var duplicateHandle = Kernel32Api.DuplicateHandle (processHandle' threadHandle' processHandle' out actualThread' 0' false' Kernel32Api.DUPLICATE_SAME_ACCESS); " is 158.
Long Statement,Zaibot.ThreadWatchdog.Core.Internals,ThreadConcerns,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Internals\ThreadConcerns.cs,GetCurrentThreadHandle,The length of the statement  "		throw new WatchdogException ("Unable to duplicate the native thread handle. " + Marshal.GetLastWin32Error () + " :: " + threadHandle.ToInt64 ().ToString ("X16") + " :: " + processHandle.ToInt64 ().ToString ("X16")); " is 215.
Long Statement,Zaibot.ThreadWatchdog.Core.Reporters,TextReportBase,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Reporters\TextReportBase.cs,OnReport,The length of the statement  "		errorMessage.AppendLine (string.Format ("{0} [{1}] @ {2:P} CPU usage"' Process.GetCurrentProcess ().ProcessName' report.Thread.ManagedThreadId' cpuUsage)); " is 155.
Long Statement,Zaibot.ThreadWatchdog.Core.Reporters,TextReportBase,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Reporters\TextReportBase.cs,OnReport,The length of the statement  "		reportText.AppendLine (string.Format ("{0} [{1}] @ {2:P} CPU usage"' Process.GetCurrentProcess ().ProcessName' report.Thread.ManagedThreadId' cpuUsage)); " is 153.
Magic Number,Zaibot.ThreadWatchdog.Core,Watchdog,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Watchdog.cs,Stop,The following statement contains a magic number: lock (this._workerLock) {  	if (this._workerThread != null) {  		this._workerStopEvent.Set ();  		if (this._workerThread.Join (TimeSpan.FromSeconds (5)) == false) {  			this._workerThread.Abort ();  		}  		this._workerThread = null;  	}  }  
Magic Number,Zaibot.ThreadWatchdog.Core,Watchdog,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Watchdog.cs,Stop,The following statement contains a magic number: if (this._workerThread != null) {  	this._workerStopEvent.Set ();  	if (this._workerThread.Join (TimeSpan.FromSeconds (5)) == false) {  		this._workerThread.Abort ();  	}  	this._workerThread = null;  }  
Magic Number,Zaibot.ThreadWatchdog.Core,Watchdog,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Watchdog.cs,Stop,The following statement contains a magic number: if (this._workerThread.Join (TimeSpan.FromSeconds (5)) == false) {  	this._workerThread.Abort ();  }  
Magic Number,Zaibot.ThreadWatchdog.Core.Reporters,TextReportBase,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Reporters\TextReportBase.cs,OnReport,The following statement contains a magic number: if (result.Error != null) {  	var cpuUsage = report.Usage;  	var errorMessage = new StringBuilder (1024);  	errorMessage.AppendLine (DateTime.Now.ToString (this.DateTimeFormat' CultureInfo.InvariantCulture));  	errorMessage.AppendLine (string.Format ("{0} [{1}] @ {2:P} CPU usage"' Process.GetCurrentProcess ().ProcessName' report.Thread.ManagedThreadId' cpuUsage));  	errorMessage.AppendLine ("Unable to read the stack trace due to an error: " + result.Error.Message);  	errorMessage.AppendLine ();  	errorMessage.AppendLine (result.Error.StackTrace);  	var text = errorMessage.ToString ();  	ThreadPool.QueueUserWorkItem (x => this.OnReportText (text));  }  else if (result.Trace != null) {  	var cpuUsage = report.Usage;  	var reportText = new StringBuilder (1024);  	reportText.AppendLine (DateTime.Now.ToString (this.DateTimeFormat));  	reportText.AppendLine (string.Format ("{0} [{1}] @ {2:P} CPU usage"' Process.GetCurrentProcess ().ProcessName' report.Thread.ManagedThreadId' cpuUsage));  	reportText.AppendLine ();  	reportText.AppendLine ("Thread exceeded threshold CPU usage.");  	reportText.AppendLine (result.Trace.ToString ());  	var text = reportText.ToString ();  	ThreadPool.QueueUserWorkItem (x => this.OnReportText (text));  }  
Magic Number,Zaibot.ThreadWatchdog.Core.Reporters,TextReportBase,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Reporters\TextReportBase.cs,OnReport,The following statement contains a magic number: if (result.Error != null) {  	var cpuUsage = report.Usage;  	var errorMessage = new StringBuilder (1024);  	errorMessage.AppendLine (DateTime.Now.ToString (this.DateTimeFormat' CultureInfo.InvariantCulture));  	errorMessage.AppendLine (string.Format ("{0} [{1}] @ {2:P} CPU usage"' Process.GetCurrentProcess ().ProcessName' report.Thread.ManagedThreadId' cpuUsage));  	errorMessage.AppendLine ("Unable to read the stack trace due to an error: " + result.Error.Message);  	errorMessage.AppendLine ();  	errorMessage.AppendLine (result.Error.StackTrace);  	var text = errorMessage.ToString ();  	ThreadPool.QueueUserWorkItem (x => this.OnReportText (text));  }  else if (result.Trace != null) {  	var cpuUsage = report.Usage;  	var reportText = new StringBuilder (1024);  	reportText.AppendLine (DateTime.Now.ToString (this.DateTimeFormat));  	reportText.AppendLine (string.Format ("{0} [{1}] @ {2:P} CPU usage"' Process.GetCurrentProcess ().ProcessName' report.Thread.ManagedThreadId' cpuUsage));  	reportText.AppendLine ();  	reportText.AppendLine ("Thread exceeded threshold CPU usage.");  	reportText.AppendLine (result.Trace.ToString ());  	var text = reportText.ToString ();  	ThreadPool.QueueUserWorkItem (x => this.OnReportText (text));  }  
Magic Number,Zaibot.ThreadWatchdog.Core.Reporters,TextReportBase,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Reporters\TextReportBase.cs,OnReport,The following statement contains a magic number: if (result.Trace != null) {  	var cpuUsage = report.Usage;  	var reportText = new StringBuilder (1024);  	reportText.AppendLine (DateTime.Now.ToString (this.DateTimeFormat));  	reportText.AppendLine (string.Format ("{0} [{1}] @ {2:P} CPU usage"' Process.GetCurrentProcess ().ProcessName' report.Thread.ManagedThreadId' cpuUsage));  	reportText.AppendLine ();  	reportText.AppendLine ("Thread exceeded threshold CPU usage.");  	reportText.AppendLine (result.Trace.ToString ());  	var text = reportText.ToString ();  	ThreadPool.QueueUserWorkItem (x => this.OnReportText (text));  }  
Magic Number,Zaibot.ThreadWatchdog.Core.Reporters,TextReportToFile,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Reporters\TextReportToFile.cs,TextReportToFile,The following statement contains a magic number: this.Separator = new string ('*'' 100);  
Magic Number,Zaibot.ThreadWatchdog.Core.Reporters,TextReportToFile,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Reporters\TextReportToFile.cs,OnReportText,The following statement contains a magic number: while (true) {  	try {  		lock (this._syncLock) {  			File.AppendAllText (this.FilePath' string.Concat (reportText' this.Separator' Environment.NewLine));  			break;  		}  	}  	catch (IOException) {  		if (triesLeft-- == 0)  			throw;  		Thread.Sleep (10);  	}  }  
Magic Number,Zaibot.ThreadWatchdog.Core.Reporters,TextReportToFile,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Reporters\TextReportToFile.cs,OnReportText,The following statement contains a magic number: try {  	lock (this._syncLock) {  		File.AppendAllText (this.FilePath' string.Concat (reportText' this.Separator' Environment.NewLine));  		break;  	}  }  catch (IOException) {  	if (triesLeft-- == 0)  		throw;  	Thread.Sleep (10);  }  
Magic Number,Zaibot.ThreadWatchdog.Core.Reporters,TextReportToFile,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Reporters\TextReportToFile.cs,OnReportText,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,Zaibot.ThreadWatchdog.Core.Reporters,TextReportToStream,C:\repos\Zaibot_ThreadWatchdog\Core\Source\Zaibot.ThreadWatchdog.Core\Reporters\TextReportToStream.cs,TextReportToStream,The following statement contains a magic number: this.Separator = new string ('*'' 100);  
