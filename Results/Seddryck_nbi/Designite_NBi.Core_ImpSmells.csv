Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NBi.Core.Calculation,BasePredicateFilter,C:\repos\Seddryck_nbi\NBi.Core\Calculation\BasePredicateFilter.cs,GetValueFromRow,Cyclomatic complexity of the method is 8
Complex Method,NBi.Core,DecorationFactory,C:\repos\Seddryck_nbi\NBi.Core\DecorationFactory.cs,Get,Cyclomatic complexity of the method is 9
Complex Method,NBi.Core.Query,DbTypeBuilder,C:\repos\Seddryck_nbi\NBi.Core\Query\DbTypeBuilder.cs,Build,Cyclomatic complexity of the method is 9
Complex Method,NBi.Core.ResultSet,JsonResultSet,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\JsonResultSet.cs,Build,Cyclomatic complexity of the method is 16
Complex Method,NBi.Core.ResultSet,KeyCollection,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\KeyCollection.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,NBi.Core.ResultSet.Comparer,NumericToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\NumericToleranceFactory.cs,Instantiate,Cyclomatic complexity of the method is 12
Complex Method,NBi.Core.ResultSet.Equivalence,BaseEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\BaseEquivaler.cs,CheckSettingsFirstRowCell,Cyclomatic complexity of the method is 8
Complex Method,NBi.Core.ResultSet.Uniqueness,Evaluator,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Uniqueness\Evaluator.cs,CheckSettingsFirstRowCell,Cyclomatic complexity of the method is 8
Complex Method,NBi.Core.ResultSet.Interval,DateTimeIntervalBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Interval\DateTimeIntervalBuilder.cs,BuildClassic,Cyclomatic complexity of the method is 8
Complex Method,NBi.Core.ResultSet.Interval,NumericIntervalBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Interval\NumericIntervalBuilder.cs,BuildClassic,Cyclomatic complexity of the method is 8
Long Parameter List,NBi.Core.Analysis.Member,MembersCommand,C:\repos\Seddryck_nbi\NBi.Core\Analysis\Member\MembersCommand.cs,MembersCommand,The method has 5 parameters. Parameters: connectionString' function' memberCaption' excludedMembers' excludedPatterns
Long Parameter List,NBi.Core.Analysis.Member,MembersCommand,C:\repos\Seddryck_nbi\NBi.Core\Analysis\Member\MembersCommand.cs,Build,The method has 6 parameters. Parameters: perspective' path' function' memberCaption' exludedMembers' excludedPatterns
Long Parameter List,NBi.Core.Analysis.Request,DiscoveryRequestFactory,C:\repos\Seddryck_nbi\NBi.Core\Analysis\Request\DiscoveryRequestFactory.cs,Build,The method has 5 parameters. Parameters: connectionString' excludedMembers' excludedPatterns' perspective' set
Long Parameter List,NBi.Core.Analysis.Request,DiscoveryRequestFactory,C:\repos\Seddryck_nbi\NBi.Core\Analysis\Request\DiscoveryRequestFactory.cs,Build,The method has 6 parameters. Parameters: connectionString' memberCaption' perspective' dimension' hierarchy' level
Long Parameter List,NBi.Core.Analysis.Request,DiscoveryRequestFactory,C:\repos\Seddryck_nbi\NBi.Core\Analysis\Request\DiscoveryRequestFactory.cs,Build,The method has 7 parameters. Parameters: connectionString' memberCaption' excludedMembers' perspective' dimension' hierarchy' level
Long Parameter List,NBi.Core.Analysis.Request,DiscoveryRequestFactory,C:\repos\Seddryck_nbi\NBi.Core\Analysis\Request\DiscoveryRequestFactory.cs,Build,The method has 8 parameters. Parameters: connectionString' memberCaption' excludedMembers' excludedPatterns' perspective' dimension' hierarchy' level
Long Parameter List,NBi.Core.Calculation,SinglePredicateFilter,C:\repos\Seddryck_nbi\NBi.Core\Calculation\SinglePredicateFilter.cs,SinglePredicateFilter,The method has 5 parameters. Parameters: aliases' expressions' operand' implementation' describeFunction
Long Parameter List,NBi.Core,CsvReader,C:\repos\Seddryck_nbi\NBi.Core\CsvReader.cs,GetNextRecords,The method has 5 parameters. Parameters: reader' recordSeparator' bufferSize' alreadyRead' extraRead
Long Parameter List,NBi.Core,CsvProfile,C:\repos\Seddryck_nbi\NBi.Core\CsvDefinition.cs,CsvProfile,The method has 6 parameters. Parameters: fieldSeparator' textQualifier' recordSeparator' firstRowHeader' emptyCell' missingCell
Long Parameter List,NBi.Core.Query,CommandBuilder,C:\repos\Seddryck_nbi\NBi.Core\Query\CommandBuilder.cs,Build,The method has 6 parameters. Parameters: connectionString' text' commandType' parameters' variables' timeout
Long Parameter List,NBi.Core.Query,CommandBuilder,C:\repos\Seddryck_nbi\NBi.Core\Query\CommandBuilder.cs,Build,The method has 5 parameters. Parameters: connectionString' query' parameters' variables' timeout
Long Parameter List,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,SearchDataSet,The method has 5 parameters. Parameters: source' reportPath' reportName' dataSetName' otherDataSets
Long Parameter List,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,SearchSharedDataSet,The method has 5 parameters. Parameters: source' reportPath' reportName' dataSetName' otherDataSets
Long Parameter List,NBi.Core.ResultSet,SettingsIndexResultSet,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\SettingsIndexResultSet.cs,SettingsIndexResultSet,The method has 5 parameters. Parameters: keysDef' valuesDef' valuesDefaultType' defaultTolerance' columnsDef
Long Parameter List,NBi.Core.ResultSet,SettingsNameResultSet,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\SettingsNameResultSet.cs,SettingsNameResultSet,The method has 5 parameters. Parameters: keyNames' valueNames' valuesDefaultType' defaultTolerance' columnsDef
Long Parameter List,NBi.Core.ResultSet,ResultResultSet,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\ResultResultSet.cs,Build,The method has 5 parameters. Parameters: missingRows' unexpectedRows' duplicatedRows' keyMatchingRows' nonMatchingValueRows
Long Parameter List,NBi.Core.ResultSet.Comparer,CellComparer,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\CellComparer.cs,Compare,The method has 5 parameters. Parameters: x' y' columnType' tolerance' rounding
Long Parameter List,NBi.Core.ResultSet.Equivalence,BaseEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\BaseEquivaler.cs,CheckSettingsFirstRowCell,The method has 5 parameters. Parameters: columnRole' columnType' dataColumn' value' messages
Long Parameter List,NBi.Core.ResultSet.Equivalence,BaseEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\BaseEquivaler.cs,WriteSettingsToDataTableProperties,The method has 5 parameters. Parameters: column' role' type' tolerance' rounding
Long Parameter List,NBi.Core.Query.Resolver,SharedDataSetQueryResolverArgs,C:\repos\Seddryck_nbi\NBi.Core\Query\Resolver\SharedDataSetQueryResolverArgs.cs,SharedDataSetQueryResolverArgs,The method has 7 parameters. Parameters: source' path' name' connectionString' parameters' variables' timeout
Long Parameter List,NBi.Core.Query.Resolver,ReportDataSetQueryResolverArgs,C:\repos\Seddryck_nbi\NBi.Core\Query\Resolver\ReportDataSetQueryResolverArgs.cs,ReportDataSetQueryResolverArgs,The method has 8 parameters. Parameters: source' path' name' dataSetName' connectionString' parameters' variables' timeout
Long Parameter List,NBi.Core.Query.Resolver,AssemblyQueryResolverArgs,C:\repos\Seddryck_nbi\NBi.Core\Query\Resolver\AssemblyQueryResolverArgs.cs,AssemblyQueryResolverArgs,The method has 9 parameters. Parameters: path' className' methodName' isStatic' methodParameters' connectionString' parameters' variables' timeout
Long Parameter List,NBi.Core.Query.Resolver,EmbeddedQueryResolverArgs,C:\repos\Seddryck_nbi\NBi.Core\Query\Resolver\EmbeddedQueryResolverArgs.cs,EmbeddedQueryResolverArgs,The method has 5 parameters. Parameters: commandText' connectionString' parameters' variables' timeout
Long Parameter List,NBi.Core.Query.Resolver,ExternalFileQueryResolverArgs,C:\repos\Seddryck_nbi\NBi.Core\Query\Resolver\ExternalFileQueryResolverArgs.cs,ExternalFileQueryResolverArgs,The method has 5 parameters. Parameters: path' connectionString' parameters' variables' timeout
Long Parameter List,NBi.Core.ResultSet.Uniqueness,Evaluator,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Uniqueness\Evaluator.cs,CheckSettingsFirstRowCell,The method has 5 parameters. Parameters: columnRole' columnType' dataColumn' value' messages
Long Parameter List,NBi.Core.ResultSet.Uniqueness,Evaluator,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Uniqueness\Evaluator.cs,WriteSettingsToDataTableProperties,The method has 5 parameters. Parameters: column' role' type' tolerance' rounding
Long Statement,NBi.Core.Analysis.Member,ComparerByCaption,C:\repos\Seddryck_nbi\NBi.Core\Analysis\Member\Member.cs,Compare,The length of the statement  "                throw new ArgumentException(string.Format("'{0}' and '{1}' cannot be compared with this comparer"' x.GetType()' y.GetType())); " is 126.
Long Statement,NBi.Core.Analysis.Member,MembersAdomdEngine,C:\repos\Seddryck_nbi\NBi.Core\Analysis\Member\MembersAdomdEngine.cs,GetMembers,The length of the statement  "            var cmd = new MembersCommand(command.ConnectionString' command.Function' command.MemberCaption' command.ExcludedMembers' command.ExcludedPatterns); " is 147.
Long Statement,NBi.Core.Analysis.Request,DiscoveryRequestFactory,C:\repos\Seddryck_nbi\NBi.Core\Analysis\Request\DiscoveryRequestFactory.cs,Build,The length of the statement  "            if (!string.IsNullOrEmpty(perspective)) disco.SpecifyFilter(new CaptionFilter(perspective' DiscoveryTarget.Perspectives)); " is 122.
Long Statement,NBi.Core.Analysis.Request.FactoryValidations,MeasureNotNull,C:\repos\Seddryck_nbi\NBi.Core\Analysis\Request\FactoryValidations\MeasureNotNull.cs,IsApplicable,The length of the statement  "            return (GetSpecificFilter(DiscoveryTarget.DisplayFolders) != null && GetSpecificFilter(DiscoveryTarget.Dimensions) == null) " is 123.
Long Statement,NBi.Core.Calculation,BasePredicateFilter,C:\repos\Seddryck_nbi\NBi.Core\Calculation\BasePredicateFilter.cs,GetValueFromRow,The length of the statement  "                        throw new ArgumentException($"The variable of the predicate is identified as '{name}' but the column in position '{ordinal}' doesn't exist. The dataset only contains {row.Table.Columns.Count} columns."); " is 203.
Long Statement,NBi.Core.Calculation,BasePredicateFilter,C:\repos\Seddryck_nbi\NBi.Core\Calculation\BasePredicateFilter.cs,GetValueFromRow,The length of the statement  "                    throw new ArgumentException($"The variable of the predicate is identified as '{name}'. All names starting by a '#' matches to a column position and must be followed by an integer."); " is 182.
Long Statement,NBi.Core.Calculation,BasePredicateFilter,C:\repos\Seddryck_nbi\NBi.Core\Calculation\BasePredicateFilter.cs,GetValueFromRow,The length of the statement  "            throw new ArgumentException($"The value '{name}' is not recognized as a column name or a column position or a column alias or an expression."); " is 143.
Long Statement,NBi.Core.Calculation,PredicateFilterFactory,C:\repos\Seddryck_nbi\NBi.Core\Calculation\PredicateFilterFactory.cs,Instantiate,The length of the statement  "                throw new ArgumentException("You must specify an operand for a predicate. The operand is the column or alias or expression on which the predicate will be evaluated."); " is 167.
Long Statement,NBi.Core.Calculation,PredicateFilterFactory,C:\repos\Seddryck_nbi\NBi.Core\Calculation\PredicateFilterFactory.cs,Instantiate,The length of the statement  "                    throw new ArgumentException("You must specify an operand for a predicate. The operand is the column or alias or expression on which the predicate will be evaluated."); " is 167.
Long Statement,NBi.Core.Calculation.Predicate,PredicateFactory,C:\repos\Seddryck_nbi\NBi.Core\Calculation\Predicate\PredicateFactory.cs,Instantiate,The length of the statement  "                            throw new ArgumentOutOfRangeException($"Boolean columns only support Equal' Null' True and False comparers and not the {info.ComparerType.ToString()} comparer."); " is 162.
Long Statement,NBi.Core.Calculation.Predicate.Text,TextMatchesRegex,C:\repos\Seddryck_nbi\NBi.Core\Calculation\Predicate\Text\TextMatchesRegex.cs,Apply,The length of the statement  "            var regexOption = StringComparison == StringComparison.InvariantCultureIgnoreCase ? RegexOptions.IgnoreCase : RegexOptions.None; " is 128.
Long Statement,NBi.Core,OfficeDataConnectionFileParser,C:\repos\Seddryck_nbi\NBi.Core\OfficeDataConnectionFileParser.cs,GetConnectionString,The length of the statement  "                throw new FileNotFoundException(string.Format("Impossible to read the connection from odc file. The file '{0}' doesn't exist."' path)); " is 135.
Long Statement,NBi.Core,OfficeDataConnectionFileParser,C:\repos\Seddryck_nbi\NBi.Core\OfficeDataConnectionFileParser.cs,GetConnectionStringFromText,The length of the statement  "                throw new InvalidDataException(string.Format("Impossible to read the connection from odc file. This file has no tag '<odc:connection>'. ")); " is 140.
Long Statement,NBi.Core,ConnectionFactory,C:\repos\Seddryck_nbi\NBi.Core\ConnectionFactory.cs,InterpretProviderName,The length of the statement  "            if (provider.ToLowerInvariant().StartsWith("sqlncli")) return "System.Data.OleDb"; //Indeed OleDb it's not a mistake! SQL Server Native Client  " is 142.
Long Statement,NBi.Core,ConnectionFactory,C:\repos\Seddryck_nbi\NBi.Core\ConnectionFactory.cs,TranslateProviderName,The length of the statement  "                throw new ArgumentException(string.Format("More than one Provider can be returned based on providerName given: '{0}'"' providerName)); " is 134.
Long Statement,NBi.Core.Connection,ConnectionWaitCommand,C:\repos\Seddryck_nbi\NBi.Core\Connection\ConnectionWaitCommand.cs,Execute,The length of the statement  "            Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' String.Format("Will try to connect to '{0}' during {1} milli-seconds."' connectionString' timeOut)); " is 144.
Long Statement,NBi.Core.Connection,ConnectionWaitCommand,C:\repos\Seddryck_nbi\NBi.Core\Connection\ConnectionWaitCommand.cs,Execute,The length of the statement  "                    Trace.WriteLineIf(NBiTraceSwitch.TraceVerbose' String.Format("Building connection string with '{0}'."' connectionString)); " is 122.
Long Statement,NBi.Core.Connection,ConnectionWaitCommand,C:\repos\Seddryck_nbi\NBi.Core\Connection\ConnectionWaitCommand.cs,Execute,The length of the statement  "                    Trace.WriteLineIf(NBiTraceSwitch.TraceVerbose' String.Format("Trying to connect to '{0}'."' connection.ConnectionString)); " is 122.
Long Statement,NBi.Core.Connection,ConnectionWaitCommand,C:\repos\Seddryck_nbi\NBi.Core\Connection\ConnectionWaitCommand.cs,Execute,The length of the statement  "                    Trace.WriteLineIf(NBiTraceSwitch.TraceVerbose' String.Format("Successful connection to '{0}'."' connection.ConnectionString)); " is 126.
Long Statement,NBi.Core.Connection,ConnectionWaitCommand,C:\repos\Seddryck_nbi\NBi.Core\Connection\ConnectionWaitCommand.cs,Execute,The length of the statement  "                    Trace.WriteLineIf(NBiTraceSwitch.TraceVerbose' String.Format("Fail to connect to '{0}': {1}"' connectionString' ex.Message)); " is 125.
Long Statement,NBi.Core.Connection,ConnectionWaitCommand,C:\repos\Seddryck_nbi\NBi.Core\Connection\ConnectionWaitCommand.cs,Execute,The length of the statement  "                throw new NBiException(String.Format("The connection to '{0}' wasn't available after {1} milli-seconds: timeout reached!"' connectionString' timeOut)); " is 151.
Long Statement,NBi.Core.Batch,BatchRunnerFactory,C:\repos\Seddryck_nbi\NBi.Core\Batch\BatchRunnerFactory.cs,Get,The length of the statement  "                throw new InvalidOperationException(string.Format("Can't find the dll for version '{0}' in '{1}'. NBi was expecting to find a dll named '{2}'."' "2014"' directory' filename)); " is 175.
Long Statement,NBi.Core.Batch,BatchRunnerFactory,C:\repos\Seddryck_nbi\NBi.Core\Batch\BatchRunnerFactory.cs,Get,The length of the statement  "                throw new InvalidOperationException(string.Format("Can't find a class implementing 'IBatchRunnerFatory' in '{0}'."' assembly.FullName)); " is 136.
Long Statement,NBi.Core.Batch,BatchRunnerFactory,C:\repos\Seddryck_nbi\NBi.Core\Batch\BatchRunnerFactory.cs,Get,The length of the statement  "                throw new InvalidOperationException(string.Format("Found more than one class implementing 'IBatchRunnerFatory' in '{0}'."' assembly.FullName)); " is 143.
Long Statement,NBi.Core.DataType,DataTypeDiscoveryFactoryProvider,C:\repos\Seddryck_nbi\NBi.Core\DataType\DataTypeDiscoveryFactoryProvider.cs,InquireFurtherAnalysisService,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceWarning'"Can't detect server mode for SSAS' using Olap. Initial message:" + ex.Message); " is 126.
Long Statement,NBi.Core.DataType,DataTypeDiscoveryFactoryProvider,C:\repos\Seddryck_nbi\NBi.Core\DataType\DataTypeDiscoveryFactoryProvider.cs,ParseXmlaResponse,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceVerbose' "Trying to detect the server mode for SSAS but the server doesn't return this information. Trying to get it from version."); " is 171.
Long Statement,NBi.Core.DataType,DataTypeDiscoveryFactoryProvider,C:\repos\Seddryck_nbi\NBi.Core\DataType\DataTypeDiscoveryFactoryProvider.cs,ParseXmlaResponse,The length of the statement  "                    throw new ArgumentException(string.Format("Unable to locate the node for 'ServerMode' and can't guess based on node 'Version'. Value returned for version is '{0}'. Use AdomdClient 12.0 or higher."' versionNode.InnerText));         " is 222.
Long Statement,NBi.Core.DataType,DataTypeDiscoveryFactoryProvider,C:\repos\Seddryck_nbi\NBi.Core\DataType\DataTypeDiscoveryFactoryProvider.cs,ParseXmlaResponse,The length of the statement  "                throw new ArgumentException("Unable to locate the node for 'ServerMode' or the node for 'Version'. Use AdomdClient 12.0 or higher."); " is 133.
Long Statement,NBi.Core.Etl,EtlRunnerFactory,C:\repos\Seddryck_nbi\NBi.Core\Etl\EtlRunnerFactory.cs,Get,The length of the statement  "                throw new InvalidOperationException(string.Format("Can't find the dll for version '{0}' in '{1}'. NBi was expecting to find a dll named '{2}'."' etl.Version' directory' filename)); " is 180.
Long Statement,NBi.Core.Etl,EtlRunnerFactory,C:\repos\Seddryck_nbi\NBi.Core\Etl\EtlRunnerFactory.cs,Get,The length of the statement  "                throw new InvalidOperationException(string.Format("Can't find a class implementing 'IEtlRunnerFactory' in '{0}'."' assembly.FullName)); " is 135.
Long Statement,NBi.Core.Etl,EtlRunnerFactory,C:\repos\Seddryck_nbi\NBi.Core\Etl\EtlRunnerFactory.cs,Get,The length of the statement  "                throw new InvalidOperationException(string.Format("Found more than one class implementing 'IEtlRunnerFactory' in '{0}'."' assembly.FullName)); " is 142.
Long Statement,NBi.Core.Assemblies,AssemblyManager,C:\repos\Seddryck_nbi\NBi.Core\Assemblies\AssemblyManager.cs,GetInstance,The length of the statement  "                throw new ArgumentException(string.Format("Type {0} not found in assembly located at '{1}'"' typeName' assemblyPath)' "typeName"); " is 130.
Long Statement,NBi.Core.Assemblies,AssemblyManager,C:\repos\Seddryck_nbi\NBi.Core\Assemblies\AssemblyManager.cs,GetStatic,The length of the statement  "                throw new ArgumentException(string.Format("Type {0} not found in assembly located at '{1}'"' typeName' assemblyPath)' "typeName"); " is 130.
Long Statement,NBi.Core.Assemblies,AssemblyManager,C:\repos\Seddryck_nbi\NBi.Core\Assemblies\AssemblyManager.cs,Execute,The length of the statement  "                throw new ArgumentException(string.Format("Method named '{0}' not found in type '{1}'"' methodName' target.GetType())'"methodName"); " is 132.
Long Statement,NBi.Core.Assemblies,AssemblyManager,C:\repos\Seddryck_nbi\NBi.Core\Assemblies\AssemblyManager.cs,ExecuteStatic,The length of the statement  "                throw new ArgumentException(string.Format("Static method named '{0}' not found in type '{1}'"' methodName' type)' "methodName"); " is 128.
Long Statement,NBi.Core.Evaluate,ExpressionComparable,C:\repos\Seddryck_nbi\NBi.Core\Evaluate\ExpressionComparable.cs,Parse,The length of the statement  "                        throw new InvalidExpressionException(string.Format("An expression must start by '=' or '!=' but the expression '{0}' is not."' Sentence)); " is 138.
Long Statement,NBi.Core.Members.Predefined,PredefinedMembersFactory,C:\repos\Seddryck_nbi\NBi.Core\Members\Predefined\PredefinedMembersFactory.cs,Instantiate,The length of the statement  "                throw new ArgumentException(string.Format("'{0}' has no builder registred."' Enum.GetName(typeof(PredefinedMembers)' value))); " is 126.
Long Statement,NBi.Core.PowerBiDesktop,PowerBiDesktopConnectionStringBuilder,C:\repos\Seddryck_nbi\NBi.Core\PowerBiDesktop\PowerBiDesktopConnectionStringBuilder.cs,BuildLocalConnectionString,The length of the statement  "                            new InvalidOperationException("No process found with the name 'msmdsrv'. Are you sure your Power BI desktop solution is running?") " is 130.
Long Statement,NBi.Core.PowerBiDesktop,PowerBiDesktopConnectionStringBuilder,C:\repos\Seddryck_nbi\NBi.Core\PowerBiDesktop\PowerBiDesktopConnectionStringBuilder.cs,BuildLocalConnectionString,The length of the statement  "                        new NullReferenceException(string.Format("No parent process found with the name '{0}'. Existing parent names were {1}."' name' existingParentNameString)) " is 153.
Long Statement,NBi.Core.Query,QueryOdbcEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QueryOdbcEngine.cs,Parse,The length of the statement  "                        var exList = new List<string>(ex.Message.Split(new string[] { "[SQL Server]"' "\r\n" }' System.StringSplitOptions.RemoveEmptyEntries)); " is 135.
Long Statement,NBi.Core.Query,QueryOdbcEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QueryOdbcEngine.cs,ExecuteScalar,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Time needed to execute query [ODBC]: {0}"' timeAfter.Subtract(timeBefore).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 181.
Long Statement,NBi.Core.Query,QueryOdbcEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QueryOdbcEngine.cs,ExecuteList,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Time needed to execute query [ODBC]: {0}"' timeAfter.Subtract(timeBefore).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 181.
Long Statement,NBi.Core.Query,QueryOdbcEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QueryOdbcEngine.cs,Execute,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Time needed to execute query [ODBC]: {0}"' timeAfter.Subtract(timeBefore).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 181.
Long Statement,NBi.Core.Query,QueryAdomdEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QueryAdomdEngine.cs,Execute,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Time needed to execute query [ADOMD]: {0}"' timeAfter.Subtract(timeBefore).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 182.
Long Statement,NBi.Core.Query,QueryAdomdEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QueryAdomdEngine.cs,ExecuteCellSet,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Time needed to execute query [ADOMD]: {0}"' timeAfter.Subtract(timeBefore).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 182.
Long Statement,NBi.Core.Query,QueryAdomdEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QueryAdomdEngine.cs,CleanCache,The length of the statement  "                    throw new ArgumentException("The token 'Initial Catalog' was not provided in the connection string due to this' it was impossible to clean the cache of the database."); " is 168.
Long Statement,NBi.Core.Query,QuerySqlEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QuerySqlEngine.cs,Execute,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Time needed to execute query [SQL Server]: {0}"' timeAfter.Subtract(timeBefore).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 187.
Long Statement,NBi.Core.Query,QuerySqlEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QuerySqlEngine.cs,ExecuteScalar,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Time needed to execute query [SQL Server]: {0}"' timeAfter.Subtract(timeBefore).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 187.
Long Statement,NBi.Core.Query,QuerySqlEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QuerySqlEngine.cs,ExecuteList,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Time needed to execute query [SQL Server]: {0}"' timeAfter.Subtract(timeBefore).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 187.
Long Statement,NBi.Core.Query,QueryOleDbEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QueryOleDbEngine.cs,Execute,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Time needed to execute query [OLEDB]: {0}"' timeAfter.Subtract(timeBefore).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 182.
Long Statement,NBi.Core.Query,QueryOleDbEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QueryOleDbEngine.cs,ExecuteScalar,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Time needed to execute query [OLEDB]: {0}"' timeAfter.Subtract(timeBefore).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 182.
Long Statement,NBi.Core.Query,QueryOleDbEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QueryOleDbEngine.cs,ExecuteList,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Time needed to execute query [OLEDB]: {0}"' timeAfter.Subtract(timeBefore).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 182.
Long Statement,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,ExtractCommand,The length of the statement  "                throw new ArgumentException(string.Format("No report found on path '{0}' with name '{1}'"' request.Path' request.ReportName)); " is 126.
Long Statement,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,ExtractCommand,The length of the statement  "                throw new ArgumentException(string.Format("The requested dataset ('{2}') wasn't found for the report on path '{0}' with name '{1}'. The dataset for this report is {3}"' request.Path' request.ReportName' request.DataSetName' otherDataSets[0])); " is 243.
Long Statement,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,ExtractCommand,The length of the statement  "                throw new ArgumentException(string.Format("The requested dataset ('{2}') wasn't found for the report on path '{0}' with name '{1}'. The datasets for this report are {3}"' request.Path' request.ReportName' request.DataSetName' String.Join("' "' otherDataSets.ToArray()))); " is 271.
Long Statement,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,ExtractCommand,The length of the statement  "            throw new ArgumentException(string.Format("The requested shared dataset ('{1}') wasn't found on path '{0}'."' request.Path' request.SharedDatasetName)); " is 152.
Long Statement,NBi.Core.Report,FileReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\FileReportingParser.cs,ExtractCommand,The length of the statement  "                throw new ArgumentException(string.Format("No report found on path '{0}{1}' with name '{2}'"' request.Source' request.Path' request.ReportName)); " is 145.
Long Statement,NBi.Core.Report,FileReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\FileReportingParser.cs,ExtractCommand,The length of the statement  "            xpath = string.Format("//rd:Report/rd:DataSets/rd:DataSet[@Name=\"{0}\"]/rd:Query/rd:CommandText"' request.DataSetName); " is 120.
Long Statement,NBi.Core.Report,FileReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\FileReportingParser.cs,ExtractCommand,The length of the statement  "                xpath = string.Format("//rd:Report/rd:DataSets/rd:DataSet[@Name=\"{0}\"]/rd:Query/rd:CommandType"' request.DataSetName); " is 120.
Long Statement,NBi.Core.Report,FileReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\FileReportingParser.cs,ExtractCommand,The length of the statement  "            xpath = string.Format("//rd:Report/rd:DataSets/rd:DataSet[@Name=\"{0}\"]/rd:SharedDataSet/rd:SharedDataSetReference"' request.DataSetName); " is 139.
Long Statement,NBi.Core.Report,FileReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\FileReportingParser.cs,ExtractCommand,The length of the statement  "                throw new ArgumentException(string.Format("The data set named '{0}' has been found but no command text or shared dataset reference has been found"' request.DataSetName)); " is 170.
Long Statement,NBi.Core.Report,FileReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\FileReportingParser.cs,ExtractCommand,The length of the statement  "            var reportName = request.SharedDatasetName.EndsWith(".rsd") ? request.SharedDatasetName : request.SharedDatasetName + ".rsd"; " is 125.
Long Statement,NBi.Core.Report,FileReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\FileReportingParser.cs,ExtractCommand,The length of the statement  "                throw new ArgumentException(string.Format("No shared dataset found on path '{0}{1}' with name '{2}'"' request.Source' request.Path' reportName)); " is 145.
Long Statement,NBi.Core.Report,FileReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\FileReportingParser.cs,BuildDataSetNotFoundException,The length of the statement  "                throw new ArgumentException(string.Format("The requested dataset ('{2}') wasn't found for the report on path '{0}' with name '{1}'. The datasets for this report are {3}"' request.Path' request.ReportName' request.DataSetName' String.Join("' "' dataSetFound.ToArray()))); " is 270.
Long Statement,NBi.Core.Report,FileReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\FileReportingParser.cs,BuildDataSetNotFoundException,The length of the statement  "                throw new ArgumentException(string.Format("The requested dataset ('{2}') wasn't found for the report on path '{0}' with name '{1}'. The dataset for this report is named '{3}'"' request.Path' request.ReportName' request.DataSetName' dataSetFound[0])); " is 250.
Long Statement,NBi.Core.ResultSet,SettingsResultSetBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\SettingsResultSetBuilder.cs,PerformInconsistencyChecks,The length of the statement  "                throw new InvalidOperationException("The definition of your settings is not valid. You cannot mix properties applicable for an engine based on columns' index and properties for an engine based on columns' name."); " is 213.
Long Statement,NBi.Core.ResultSet,SettingsResultSetBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\SettingsResultSetBuilder.cs,PerformInconsistencyChecks,The length of the statement  "                throw new InvalidOperationException("You cannot define an engine based on columns' name and specify no keys. Specify at least one column as a key."); " is 149.
Long Statement,NBi.Core.ResultSet,SettingsResultSetBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\SettingsResultSetBuilder.cs,PerformInconsistencyChecks,The length of the statement  "                throw new InvalidOperationException("You cannot define an engine based on columns' name and specify some column's definitions where you explicitely give a value to the 'index' attribute. Use attribute 'index' in place of 'name'."); " is 231.
Long Statement,NBi.Core.ResultSet,SettingsResultSetBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\SettingsResultSetBuilder.cs,PerformInconsistencyChecks,The length of the statement  "                throw new InvalidOperationException("You cannot define some columns' definitions where you explicitely give a value to the 'index' attribute and to the 'name' attribute. Use attribute 'index' or 'name' but not both."); " is 218.
Long Statement,NBi.Core.ResultSet,SettingsResultSetBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\SettingsResultSetBuilder.cs,PerformSetsAndColumnsCheck,The length of the statement  "                throw new InvalidOperationException("You cannot define an engine based on columns' index and specify some columns' definition where you explicitely give a value to the 'name' attribute. Use attribute 'index' in place of 'name'."); " is 230.
Long Statement,NBi.Core.ResultSet,SettingsResultSetBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\SettingsResultSetBuilder.cs,PerformDuplicationChecks,The length of the statement  "                    string.Format("You cannot define an engine where the same column is defined more than once. The column{0} having the index{1} '{2}' {3} defined several times." " is 159.
Long Statement,NBi.Core.ResultSet,SettingsResultSetBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\SettingsResultSetBuilder.cs,PerformDuplicationChecks,The length of the statement  "                    string.Format("You cannot define a comparison where the same column is defined more than once. The column{0} having the name{1} '{2}' {3} defined several times." " is 161.
Long Statement,NBi.Core.ResultSet,DataRowKeysComparerByName,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\DataRowKeysComparerByName.cs,GetKeys,The length of the statement  "                    var txt = "In the column with name '{0}'' NBi can't convert the value '{1}' to the type '{2}'. Key columns must match with their respective types and don't support null' generic or interval values."; " is 199.
Long Statement,NBi.Core.ResultSet,DataRowKeysComparerByName,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\DataRowKeysComparerByName.cs,GetKeys,The length of the statement  "                        var txt = "In the column with name '{0}'' NBi can't convert the value 'DBNull' to the type '{1}'. Key columns must match with their respective types and don't support null' generic or interval values."; " is 202.
Long Statement,NBi.Core.ResultSet,DataRowKeysComparerByIndex,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\DataRowKeysComparerByIndex.cs,GetKeys,The length of the statement  "                        var txt = "In the column with index '{0}'' NBi can't convert the value '{0}' to the type '{1}'. Key columns must match with their respective types and don't support null' generic or interval values."; " is 200.
Long Statement,NBi.Core.ResultSet,DataRowKeysComparerByIndex,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\DataRowKeysComparerByIndex.cs,GetKeys,The length of the statement  "                            var txt = "In the column with index '{0}'' NBi can't convert the value 'DBNull' to the type '{1}'. Key columns must match with their respective types and don't support null' generic or interval values."; " is 203.
Long Statement,NBi.Core.ResultSet,SettingsIndexResultSet,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\SettingsIndexResultSet.cs,GetTolerance,The length of the statement  "            if (GetColumnType(index) != ColumnType.Numeric && GetColumnType(index) != ColumnType.DateTime && GetColumnType(index) != ColumnType.Text) " is 137.
Long Statement,NBi.Core.ResultSet,ResultResultSet,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\ResultResultSet.cs,Build,The length of the statement  "            if (missingRows.Count() == 0 && unexpectedRows.Count() == 0 && duplicatedRows.Count()==0 && nonMatchingValueRows.Count() == 0) " is 126.
Long Statement,NBi.Core.ResultSet.Comparer,TextToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\TextToleranceFactory.cs,Instantiate,The length of the statement  "            var isDistanceNumeric = Double.TryParse(distanceString' NumberStyles.Float' CultureInfo.InvariantCulture' out var distanceNumeric); " is 131.
Long Statement,NBi.Core.ResultSet.Comparer,TextToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\TextToleranceFactory.cs,Instantiate,The length of the statement  "            var distanceEnum = Enum.GetNames(typeof(FuzzyStringComparisonTolerance)).SingleOrDefault(x => x.ToLower() == distanceString.ToLower()); " is 135.
Long Statement,NBi.Core.ResultSet.Comparer,TextToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\TextToleranceFactory.cs,Instantiate,The length of the statement  "                throw new ArgumentException($"The value of the distance/coefficient for a text tolerance must be a numeric value or the specific values weak/normal/strong. The value '{distanceString}' is not."); " is 195.
Long Statement,NBi.Core.ResultSet.Comparer,TextToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\TextToleranceFactory.cs,Instantiate,The length of the statement  "            var names = value.Split(new[] { '(' })[0].Replace("-"' "").Split(new[] { '''' ';' }' StringSplitOptions.RemoveEmptyEntries); " is 124.
Long Statement,NBi.Core.ResultSet.Comparer,TextToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\TextToleranceFactory.cs,Instantiate,The length of the statement  "                throw new ArgumentException($"You cannot specify an exact value when more than one method is specified for the text tolerance."); " is 129.
Long Statement,NBi.Core.ResultSet.Comparer,TextToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\TextToleranceFactory.cs,GetMethod,The length of the statement  "                Func<string' string' double> convert = (x' y) => { return Convert.ToDouble(firstDelegate.DynamicInvoke(new[] { x' y })); }; " is 123.
Long Statement,NBi.Core.ResultSet.Comparer,NumericToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\NumericToleranceFactory.cs,Instantiate,The length of the statement  "                isPercentage = decimal.TryParse(percentage' NumberStyles.Float' NumberFormatInfo.InvariantInfo' out tolerancePercentage); " is 121.
Long Statement,NBi.Core.ResultSet.Comparer,NumericToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\NumericToleranceFactory.cs,Instantiate,The length of the statement  "                isBoundedPercentage = decimal.TryParse(percentage' NumberStyles.Float' NumberFormatInfo.InvariantInfo' out tolerancePercentage); " is 128.
Long Statement,NBi.Core.ResultSet.Comparer,NumericToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\NumericToleranceFactory.cs,Instantiate,The length of the statement  "                var bound = value.Replace(" "' "").Substring(value.Replace(" "' "").IndexOf('%') + 1).Replace("("' "").Replace(")"' "").Replace(":"' "").Replace("="' ""); " is 154.
Long Statement,NBi.Core.ResultSet.Comparer,NumericToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\NumericToleranceFactory.cs,Instantiate,The length of the statement  "                    isBoundedPercentage = decimal.TryParse(bound.Substring(3)' NumberStyles.Float' NumberFormatInfo.InvariantInfo' out toleranceBound); " is 131.
Long Statement,NBi.Core.ResultSet.Comparer,NumericToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\NumericToleranceFactory.cs,Instantiate,The length of the statement  "            throw new ArgumentException(string.Format("Can't convert '{0}' to a double' a percentage or a bounded percentage"' value)' "value"); " is 132.
Long Statement,NBi.Core.ResultSet.Comparer,ToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\ToleranceFactory.cs,Instantiate,The length of the statement  "                throw new ArgumentException("The ColumnDefinition must have have a role defined as 'Value' and is defined as 'Key'"' "columnDefinition"); " is 137.
Long Statement,NBi.Core.ResultSet.Comparer,DateTimeRounding,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\DateTimeRounding.cs,GetValue,The length of the statement  "            var newValueMilliSeconds = GetValue(Convert.ToDecimal(value.TimeOfDay.TotalMilliseconds)' Convert.ToDecimal(step.TotalMilliseconds)); " is 133.
Long Statement,NBi.Core.ResultSet.Comparer,DateTimeComparer,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\DateTimeComparer.cs,IsEqual,The length of the statement  "            //Console.WriteLine("IsEqual: {0} {1} {2} {3} {4} {5}"' x' y' tolerance' Math.Abs(x - y)' x == y' Math.Abs(x - y) <= tolerance); " is 128.
Long Statement,NBi.Core.ResultSet.Comparer,RoundingFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\RoundingFactory.cs,Build,The length of the statement  "                throw new ArgumentException("The ColumnDefinition must have have a role defined as 'Value' and is defined as 'Key'"' "columnDefinition"); " is 137.
Long Statement,NBi.Core.ResultSet.Comparer,RoundingFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\RoundingFactory.cs,Build,The length of the statement  "                    rounding = new NumericRounding(decimal.Parse(columnDefinition.RoundingStep' NumberFormatInfo.InvariantInfo)' columnDefinition.RoundingStyle); " is 141.
Long Statement,NBi.Core.ResultSet.Comparer,RoundingFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\RoundingFactory.cs,Build,The length of the statement  "                    rounding = new DateTimeRounding(TimeSpan.Parse(columnDefinition.RoundingStep' NumberFormatInfo.InvariantInfo)' columnDefinition.RoundingStyle); " is 143.
Long Statement,NBi.Core.ResultSet.Equivalence,BaseEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\BaseEquivaler.cs,doCompare,The length of the statement  "            Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Building first rows dictionary: {0} [{1}]"' x.Rows.Count' stopWatch.Elapsed.ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 183.
Long Statement,NBi.Core.ResultSet.Equivalence,BaseEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\BaseEquivaler.cs,doCompare,The length of the statement  "            Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Building second rows dictionary: {0} [{1}]"' y.Rows.Count' stopWatch.Elapsed.ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 184.
Long Statement,NBi.Core.ResultSet.Equivalence,BaseEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\BaseEquivaler.cs,doCompare,The length of the statement  "            Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Rows with a matching key but without matching value: {0} [{1}]"' nonMatchingValueRows.Count()' stopWatch.Elapsed.ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 220.
Long Statement,NBi.Core.ResultSet.Equivalence,BaseEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\BaseEquivaler.cs,BuildRowDictionary,The length of the statement  "                        string.Format("The {0} data set has some duplicated keys. Check your keys definition or the result set defined in your {1}. The duplicated hashcode is {2}.\r\nRow to insert:{3}.\r\nRow already inserted:{4}."' " is 208.
Long Statement,NBi.Core.ResultSet.Equivalence,BaseEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\BaseEquivaler.cs,CheckSettingsFirstRowCell,The length of the statement  "                    if (columnType == ColumnType.Numeric && !(numericConverter.IsValid(value) || Comparer.BaseComparer.IsValidInterval(value))) " is 123.
Long Statement,NBi.Core.ResultSet.Equivalence,NameEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\NameEquivaler.cs,CompareRows,The length of the statement  "                var result = base.CellComparer.Compare(x' y' Settings.GetColumnType(columnName)' Settings.GetTolerance(columnName)' rounding); " is 126.
Long Statement,NBi.Core.ResultSet.Equivalence,NameEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\NameEquivaler.cs,CheckSettingsAndDataTable,The length of the statement  "                var exception = string.Format("You've defined {0} column{1} named '{2}' as key{1} or value{1} but there is no column with {3} name{1} in the resultset. When using comparison by columns' name' you must ensure that all columns defined as keys and values are effectively available in the result-set." " is 297.
Long Statement,NBi.Core.ResultSet.Equivalence,NameEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\NameEquivaler.cs,CheckSettingsAndFirstRow,The length of the statement  "                                "The column named '{0}' is expecting a numeric value but the first row of your result set contains a value '{1}' not recognized as a valid numeric value or a valid interval." " is 174.
Long Statement,NBi.Core.ResultSet.Equivalence,NameEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\NameEquivaler.cs,CheckSettingsAndFirstRow,The length of the statement  "                                ' " Aren't you trying to use a comma (''' ) as a decimal separator? NBi requires that the decimal separator must be a '.'." " is 123.
Long Statement,NBi.Core.ResultSet.Equivalence,NameEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\NameEquivaler.cs,CheckSettingsAndFirstRow,The length of the statement  "                                ' "The column named '{0}' is expecting a date & time value but the first row of your result set contains a value '{1}' not recognized as a valid date & time value." " is 164.
Long Statement,NBi.Core.ResultSet.Equivalence,SettingsEquivalerBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\SettingsEquivalerBuilder.cs,PerformToleranceChecks,The length of the statement  "                throw new InvalidOperationException($"You cannot define a default type for values as '{valuesDefaultType}' and setup a numeric default tolerance."); " is 148.
Long Statement,NBi.Core.ResultSet.Equivalence,SettingsEquivalerBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\SettingsEquivalerBuilder.cs,PerformToleranceChecks,The length of the statement  "                throw new InvalidOperationException($"You cannot define a default type for values as '{valuesDefaultType}' and setup a text default tolerance."); " is 145.
Long Statement,NBi.Core.ResultSet.Equivalence,SettingsEquivalerBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\SettingsEquivalerBuilder.cs,PerformToleranceChecks,The length of the statement  "                throw new InvalidOperationException($"You cannot define a default type for values as '{valuesDefaultType}' and setup a dateTime default tolerance."); " is 149.
Long Statement,NBi.Core.ResultSet.Equivalence,SingleRowEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\SingleRowEquivaler.cs,doCompare,The length of the statement  "                throw new ArgumentException(string.Format("The query in the assertion returns {0} rows. It was expected to return zero or one row."' x.Rows.Count)); " is 148.
Long Statement,NBi.Core.ResultSet.Equivalence,SingleRowEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\SingleRowEquivaler.cs,doCompare,The length of the statement  "                throw new ArgumentException(string.Format("The query in the system-under-test returns {0} rows. It was expected to return zero or one row."' y.Rows.Count)); " is 156.
Long Statement,NBi.Core.ResultSet.Equivalence,SingleRowEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\SingleRowEquivaler.cs,doCompare,The length of the statement  "            Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Analyzing length of result-sets: [{0}]"' DateTime.Now.Subtract(chrono).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 178.
Long Statement,NBi.Core.ResultSet.Equivalence,SingleRowEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\SingleRowEquivaler.cs,doCompare,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Analyzing length and format of result-sets: [{0}]"' DateTime.Now.Subtract(chrono).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 189.
Long Statement,NBi.Core.ResultSet.Equivalence,SingleRowEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\SingleRowEquivaler.cs,doCompare,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Rows with a matching key but without matching value: {0} [{1}]"' nonMatchingValueRows.Count()' DateTime.Now.Subtract(chrono).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 232.
Long Statement,NBi.Core.ResultSet.Equivalence,IndexEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\IndexEquivaler.cs,CheckSettingsAndDataTable,The length of the statement  "                var exception = string.Format("You've defined a column with an index of {0}' meaning that your result set would have at least {1} columns but your result set has only {2} columns." " is 180.
Long Statement,NBi.Core.ResultSet.Equivalence,IndexEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\IndexEquivaler.cs,CheckSettingsAndDataTable,The length of the statement  "                    exception += " You've no definition for a column with an index of 0. Are you sure you'vent started to index at 1 in place of 0?"; " is 129.
Long Statement,NBi.Core.ResultSet.Equivalence,IndexEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\IndexEquivaler.cs,CheckSettingsAndFirstRow,The length of the statement  "                                "The column with index '{0}' is expecting a numeric value but the first row of your result set contains a value '{1}' not recognized as a valid numeric value or a valid interval." " is 179.
Long Statement,NBi.Core.ResultSet.Equivalence,IndexEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\IndexEquivaler.cs,CheckSettingsAndFirstRow,The length of the statement  "                                ' " Aren't you trying to use a comma (''' ) as a decimal separator? NBi requires that the decimal separator must be a '.'." " is 123.
Long Statement,NBi.Core.ResultSet.Equivalence,IndexEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\IndexEquivaler.cs,CheckSettingsAndFirstRow,The length of the statement  "                                ' "The column with index '{0}' is expecting a 'date & time' value but the first row of your result set contains a value '{1}' not recognized as a valid date & time value." " is 171.
Long Statement,NBi.Core.ResultSet.Converter,BaseNumericConverter,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Converter\BaseNumericConverter.cs,IsParsableNumeric,The length of the statement  "                                ' NumberStyles.AllowLeadingSign | NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowDecimalPoint " is 131.
Long Statement,NBi.Core.ResultSet.Converter,BaseNumericConverter,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Converter\BaseNumericConverter.cs,IsParsableNumeric,The length of the statement  "            //The first method is not enough' you can have cases where this method returns false but the value is effectively a numeric. The problem is in the .ToString() on the object where you apply the regional settings for the numeric values. " is 234.
Long Statement,NBi.Core.Query.Resolver,SharedDataSetQueryResolver,C:\repos\Seddryck_nbi\NBi.Core\Query\Resolver\SharedDataSetQueryResolver.cs,Execute,The length of the statement  "            var cmd = commandBuilder.Build(args.ConnectionString' parsingResult.Text' parsingResult.CommandType' args.Parameters' args.Variables' args.Timeout); " is 148.
Long Statement,NBi.Core.Query.Resolver,ReportDataSetQueryResolver,C:\repos\Seddryck_nbi\NBi.Core\Query\Resolver\ReportDataSetQueryResolver.cs,Execute,The length of the statement  "            var cmd = commandBuilder.Build(args.ConnectionString' reportParsingResult.Text' reportParsingResult.CommandType' args.Parameters' args.Variables' args.Timeout); " is 160.
Long Statement,NBi.Core.Query.Resolver,AssemblyQueryResolver,C:\repos\Seddryck_nbi\NBi.Core\Query\Resolver\AssemblyQueryResolver.cs,Execute,The length of the statement  "            var cmd = commandBuilder.Build(args.ConnectionString' methodExecution as string' args.Parameters' args.Variables' args.Timeout); " is 128.
Long Statement,NBi.Core.ResultSet.Uniqueness,NameEvaluator,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Uniqueness\NameEvaluator.cs,CheckSettingsAndDataTable,The length of the statement  "                var exception = string.Format("You've defined {0} column{1} named '{2}' as key{1} or value{1} but there is no column with {3} name{1} in the resultset. When using comparison by columns' name' you must ensure that all columns defined as keys and values are effectively available in the result-set." " is 297.
Long Statement,NBi.Core.ResultSet.Uniqueness,NameEvaluator,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Uniqueness\NameEvaluator.cs,CheckSettingsAndFirstRow,The length of the statement  "                                "The column named '{0}' is expecting a numeric value but the first row of your result set contains a value '{1}' not recognized as a valid numeric value or a valid interval." " is 174.
Long Statement,NBi.Core.ResultSet.Uniqueness,NameEvaluator,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Uniqueness\NameEvaluator.cs,CheckSettingsAndFirstRow,The length of the statement  "                                ' " Aren't you trying to use a comma (''' ) as a decimal separator? NBi requires that the decimal separator must be a '.'." " is 123.
Long Statement,NBi.Core.ResultSet.Uniqueness,NameEvaluator,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Uniqueness\NameEvaluator.cs,CheckSettingsAndFirstRow,The length of the statement  "                                ' "The column named '{0}' is expecting a date & time value but the first row of your result set contains a value '{1}' not recognized as a valid date & time value." " is 164.
Long Statement,NBi.Core.ResultSet.Uniqueness,Evaluator,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Uniqueness\Evaluator.cs,doCompare,The length of the statement  "            Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Building dictionary: {0} [{1}]"' x.Rows.Count' stopWatch.Elapsed.ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 172.
Long Statement,NBi.Core.ResultSet.Uniqueness,Evaluator,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Uniqueness\Evaluator.cs,CheckSettingsFirstRowCell,The length of the statement  "                    if (columnType == ColumnType.Numeric && !(numericConverter.IsValid(value) || Comparer.BaseComparer.IsValidInterval(value))) " is 123.
Long Statement,NBi.Core.ResultSet.Uniqueness,IndexEvaluator,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Uniqueness\IndexEvaluator.cs,CheckSettingsAndDataTable,The length of the statement  "                var exception = string.Format("You've defined a column with an index of {0}' meaning that your result set would have at least {1} columns but your result set has only {2} columns." " is 180.
Long Statement,NBi.Core.ResultSet.Uniqueness,IndexEvaluator,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Uniqueness\IndexEvaluator.cs,CheckSettingsAndDataTable,The length of the statement  "                    exception += " You've no definition for a column with an index of 0. Are you sure you'vent started to index at 1 in place of 0?"; " is 129.
Long Statement,NBi.Core.ResultSet.Uniqueness,IndexEvaluator,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Uniqueness\IndexEvaluator.cs,CheckSettingsAndFirstRow,The length of the statement  "                                "The column with index '{0}' is expecting a numeric value but the first row of your result set contains a value '{1}' not recognized as a valid numeric value or a valid interval." " is 179.
Long Statement,NBi.Core.ResultSet.Uniqueness,IndexEvaluator,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Uniqueness\IndexEvaluator.cs,CheckSettingsAndFirstRow,The length of the statement  "                                ' " Aren't you trying to use a comma (''' ) as a decimal separator? NBi requires that the decimal separator must be a '.'." " is 123.
Long Statement,NBi.Core.ResultSet.Uniqueness,IndexEvaluator,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Uniqueness\IndexEvaluator.cs,CheckSettingsAndFirstRow,The length of the statement  "                                ' "The column with index '{0}' is expecting a 'date & time' value but the first row of your result set contains a value '{1}' not recognized as a valid date & time value." " is 171.
Long Statement,NBi.Core.ResultSet.Interval,NumericIntervalBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Interval\NumericIntervalBuilder.cs,BuildGeneric,The length of the statement  "			if (double.TryParse(value.Substring(1' value.Length - 1)' NumberStyles.Number' CultureInfo.InvariantCulture.NumberFormat' out d)) " is 129.
Long Statement,NBi.Core.Scalar.Resolver,GlobalVariableScalarResolver<T>,C:\repos\Seddryck_nbi\NBi.Core\Scalar\Resolver\GlobalVariableScalarResolver.cs,Execute,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' $"Time needed for evaluation of variable '{args.VariableName}': {stopWatch.Elapsed.ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s")}"); " is 176.
Long Statement,NBi.Core.Structure,StructureDiscoveryFactoryProvider,C:\repos\Seddryck_nbi\NBi.Core\Structure\StructureDiscoveryFactoryProvider.cs,InquireFurtherAnalysisService,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceWarning'"Can't detect server mode for SSAS' using Olap. Initial message:" + ex.Message); " is 126.
Long Statement,NBi.Core.Structure,StructureDiscoveryFactoryProvider,C:\repos\Seddryck_nbi\NBi.Core\Structure\StructureDiscoveryFactoryProvider.cs,ParseXmlaResponse,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceVerbose' "Trying to detect the server mode for SSAS but the server doesn't return this information. Trying to get it from version."); " is 171.
Long Statement,NBi.Core.Structure,StructureDiscoveryFactoryProvider,C:\repos\Seddryck_nbi\NBi.Core\Structure\StructureDiscoveryFactoryProvider.cs,ParseXmlaResponse,The length of the statement  "                    throw new ArgumentException(string.Format("Unable to locate the node for 'ServerMode' and can't guess based on node 'Version'. Value returned for version is '{0}'. Use AdomdClient 12.0 or higher."' versionNode.InnerText));         " is 222.
Long Statement,NBi.Core.Structure,StructureDiscoveryFactoryProvider,C:\repos\Seddryck_nbi\NBi.Core\Structure\StructureDiscoveryFactoryProvider.cs,ParseXmlaResponse,The length of the statement  "                throw new ArgumentException("Unable to locate the node for 'ServerMode' or the node for 'Version'. Use AdomdClient 12.0 or higher."); " is 133.
Long Statement,NBi.Core.Structure.Relational,RelationalStructureDiscoveryFactory,C:\repos\Seddryck_nbi\NBi.Core\Structure\Relational\RelationalStructureDiscoveryFactory.cs,InstantiateBuilder,The length of the statement  "                    throw new ArgumentOutOfRangeException(string.Format("The value '{0}' is not supported when instantiating with 'RelationalStructureDiscoveryFactory'."' target)); " is 160.
Long Statement,NBi.Core.Transformation.Transformer.Native,NullToValue,C:\repos\Seddryck_nbi\NBi.Core\Transformation\Transformer\Native\NullToValue.cs,Evaluate,The length of the statement  "            if (value == null || DBNull.Value.Equals(value) || string.IsNullOrEmpty(value as string) || value as string == "(null)") " is 120.
Long Statement,NBi.Core.Transformation,TransformerFactory,C:\repos\Seddryck_nbi\NBi.Core\Transformation\TransformerFactory.cs,Build,The length of the statement  "            if (info.Language == LanguageType.Format && (info.OriginalType == ResultSet.ColumnType.Boolean || info.OriginalType == ResultSet.ColumnType.Text)) " is 146.
Long Statement,NBi.Core.Transformation,TransformerFactory,C:\repos\Seddryck_nbi\NBi.Core\Transformation\TransformerFactory.cs,Build,The length of the statement  "                throw new InvalidOperationException("Language 'format' is only supporting transformation from 'numeric' and 'dateTime' data types"); " is 132.
Long Statement,NBi.Core.Transformation,TransformerFactory,C:\repos\Seddryck_nbi\NBi.Core\Transformation\TransformerFactory.cs,Build,The length of the statement  "            if (info.Language == LanguageType.NCalc && (info.OriginalType == ResultSet.ColumnType.Boolean || info.OriginalType == ResultSet.ColumnType.DateTime)) " is 149.
Long Statement,NBi.Core.Transformation,TransformerFactory,C:\repos\Seddryck_nbi\NBi.Core\Transformation\TransformerFactory.cs,Build,The length of the statement  "                throw new InvalidOperationException("Language 'ncalc' is only supporting transformation from 'numeric' and 'text' data types"); " is 127.
Long Statement,NBi.Core.Transformation,TransformationProvider,C:\repos\Seddryck_nbi\NBi.Core\Transformation\TransformationProvider.cs,Transform,The length of the statement  "                Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Time needed to transform column with index {0}: {1}"' index' DateTime.Now.Subtract(tsStart).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s"))); " is 199.
Complex Conditional,NBi.Core.ResultSet,SettingsResultSetBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\SettingsResultSetBuilder.cs,PerformInconsistencyChecks,The conditional expression  "(keysSet != 0 || valuesSet != 0)                  && (nameKeys.Count() > 0 || nameValues.Count() > 0)"  is complex.
Complex Conditional,NBi.Core.ResultSet,ResultResultSet,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\ResultResultSet.cs,Build,The conditional expression  "missingRows.Count() == 0 && unexpectedRows.Count() == 0 && duplicatedRows.Count()==0 && nonMatchingValueRows.Count() == 0"  is complex.
Complex Conditional,NBi.Core.ResultSet.Comparer,NumericToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\NumericToleranceFactory.cs,Instantiate,The conditional expression  "!isDecimal && !isPercentage && !string.IsNullOrEmpty(value) && value.Contains('%')"  is complex.
Complex Conditional,NBi.Core.ResultSet.Comparer,BaseComparer,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\BaseComparer.cs,IsValidInterval,The conditional expression  "valueString.StartsWith("[") || valueString.StartsWith("]")                  && valueString.EndsWith("[") || valueString.EndsWith("]")                  && valueString.Contains(";")"  is complex.
Complex Conditional,NBi.Core.ResultSet.Comparer,Rounding,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\Rounding.cs,GetValue,The conditional expression  "(Style == RoundingStyle.Ceiling && value > 0 && remainder!=0)                  || (Style == RoundingStyle.Floor && value < 0 && remainder != 0)                  || (Style == RoundingStyle.Round && remainder >= step / 2)"  is complex.
Complex Conditional,NBi.Core.ResultSet.Converter,BaseNumericConverter,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Converter\BaseNumericConverter.cs,IsValid,The conditional expression  "value is sbyte                      || value is byte                      || value is ushort                      || value is short                      || value is uint                      || value is int                      || value is ulong                      || value is long                      || value is float                      || value is double                      || value is decimal"  is complex.
Complex Conditional,NBi.Core.Transformation.Transformer.Native,TextToHtml,C:\repos\Seddryck_nbi\NBi.Core\Transformation\Transformer\Native\TextToHtml.cs,EvaluateString,The conditional expression  "string.IsNullOrEmpty(value) || value == "(null)" || value == "(empty)" || value == "(blank)""  is complex.
Complex Conditional,NBi.Core.Transformation.Transformer.Native,NullToValue,C:\repos\Seddryck_nbi\NBi.Core\Transformation\Transformer\Native\NullToValue.cs,Evaluate,The conditional expression  "value == null || DBNull.Value.Equals(value) || string.IsNullOrEmpty(value as string) || value as string == "(null)""  is complex.
Complex Conditional,NBi.Core.Transformation.Transformer.Native,HtmlToText,C:\repos\Seddryck_nbi\NBi.Core\Transformation\Transformer\Native\HtmlToText.cs,EvaluateString,The conditional expression  "string.IsNullOrEmpty(value) || value == "(null)" || value == "(empty)" || value == "(blank)""  is complex.
Complex Conditional,NBi.Core.Transformation.Transformer.Native,TextToWithoutDiacritics,C:\repos\Seddryck_nbi\NBi.Core\Transformation\Transformer\Native\TextToWithoutDiacritics.cs,EvaluateString,The conditional expression  "string.IsNullOrEmpty(value) || value == "(null)" || value == "(empty)" || value == "(blank)""  is complex.
Complex Conditional,NBi.Core.Transformation.Transformer.Native,ValueToValue,C:\repos\Seddryck_nbi\NBi.Core\Transformation\Transformer\Native\ValueToValue.cs,Evaluate,The conditional expression  "value == null || DBNull.Value.Equals(value) || (value is string && (value as string) == "(null)")"  is complex.
Virtual Method Call from Constructor,NBi.Core.DataType,DataTypeDiscoveryFactoryProvider,C:\repos\Seddryck_nbi\NBi.Core\DataType\DataTypeDiscoveryFactoryProvider.cs,DataTypeDiscoveryFactoryProvider,The constructor "DataTypeDiscoveryFactoryProvider" calls a virtual method "Initialize".
Virtual Method Call from Constructor,NBi.Core.Structure,StructureDiscoveryFactoryProvider,C:\repos\Seddryck_nbi\NBi.Core\Structure\StructureDiscoveryFactoryProvider.cs,StructureDiscoveryFactoryProvider,The constructor "StructureDiscoveryFactoryProvider" calls a virtual method "Initialize".
Magic Number,NBi.Core.Analysis.Member,MembersCommand,C:\repos\Seddryck_nbi\NBi.Core\Analysis\Member\MembersCommand.cs,BuildExcludedPatterns,The following statement contains a magic number: exclusions.Remove(0' 4);
Magic Number,NBi.Core.Analysis.Request,MetadataDiscoveryRequest,C:\repos\Seddryck_nbi\NBi.Core\Analysis\Request\MetadataDiscoveryRequest.cs,GetDepthName,The following statement contains a magic number: switch (Target)              {                  case DiscoveryTarget.Dimensions:                      return depths[0];                  case DiscoveryTarget.Hierarchies:                      return depths[1];                  case DiscoveryTarget.Levels:                      return depths[2];                  case DiscoveryTarget.Properties:                      return depths[3];                  default:                      return string.Empty;              }
Magic Number,NBi.Core.Analysis.Request,MetadataDiscoveryRequest,C:\repos\Seddryck_nbi\NBi.Core\Analysis\Request\MetadataDiscoveryRequest.cs,GetDepthName,The following statement contains a magic number: switch (Target)              {                  case DiscoveryTarget.Dimensions:                      return depths[0];                  case DiscoveryTarget.Hierarchies:                      return depths[1];                  case DiscoveryTarget.Levels:                      return depths[2];                  case DiscoveryTarget.Properties:                      return depths[3];                  default:                      return string.Empty;              }
Magic Number,NBi.Core.Analysis.Request,MetadataDiscoveryRequest,C:\repos\Seddryck_nbi\NBi.Core\Analysis\Request\MetadataDiscoveryRequest.cs,GetNextDepthName,The following statement contains a magic number: switch (Target)              {                  case DiscoveryTarget.Dimensions:                      return depths[1];                  case DiscoveryTarget.Hierarchies:                      return depths[2];                  case DiscoveryTarget.Levels:                      return depths[3];                  default:                      return string.Empty;              }
Magic Number,NBi.Core.Analysis.Request,MetadataDiscoveryRequest,C:\repos\Seddryck_nbi\NBi.Core\Analysis\Request\MetadataDiscoveryRequest.cs,GetNextDepthName,The following statement contains a magic number: switch (Target)              {                  case DiscoveryTarget.Dimensions:                      return depths[1];                  case DiscoveryTarget.Hierarchies:                      return depths[2];                  case DiscoveryTarget.Levels:                      return depths[3];                  default:                      return string.Empty;              }
Magic Number,NBi.Core.Calculation,BasePredicateFilter,C:\repos\Seddryck_nbi\NBi.Core\Calculation\BasePredicateFilter.cs,GetValueFromRow,The following statement contains a magic number: if (name.StartsWith("[") && name.EndsWith("]"))                  name = name.Substring(1' name.Length - 2);
Magic Number,NBi.Core.Calculation.Predicate.Combination,BaseCombinationPredicateFilter,C:\repos\Seddryck_nbi\NBi.Core\Calculation\Combination\BaseCombinationPredicateFilter.cs,Describe,The following statement contains a magic number: sb.Remove(sb.Length - this.Description.Length - 2' this.Description.Length + 2);
Magic Number,NBi.Core.Calculation.Predicate.Combination,BaseCombinationPredicateFilter,C:\repos\Seddryck_nbi\NBi.Core\Calculation\Combination\BaseCombinationPredicateFilter.cs,Describe,The following statement contains a magic number: sb.Remove(sb.Length - this.Description.Length - 2' this.Description.Length + 2);
Magic Number,NBi.Core,CsvReader,C:\repos\Seddryck_nbi\NBi.Core\CsvReader.cs,Read,The following statement contains a magic number: using (StreamReader reader = new StreamReader(stream' Encoding.UTF8' true))              {                  var count = CountRecordSeparator(reader' Definition.RecordSeparator' BufferSize);                  count -= Convert.ToInt16(firstRowHeader);                  stream.Position = 0;                  reader.DiscardBufferedData();                    ////Check if the first byte is BOM or not                  var encodingBytesCount = 0;                  var buffer = new char[4];                  reader.Read(buffer' 0' 4);                  var startingString = new string(buffer);                  if (startingString[0] == 65279)                      encodingBytesCount = 1;                    stream.Position = 0;                  reader.DiscardBufferedData();                    //Get first row to know the count of columns                  RaiseProgressStatus("Defining fields");                  var columnCount = 0;                  var columnNames = new List<string>();                  var firstLine = GetFirstRecord(reader' Definition.RecordSeparator' BufferSize);                  if (encodingBytesCount>0)                      firstLine = firstLine.Substring(encodingBytesCount' firstLine.Length - encodingBytesCount);                  if (firstLine.EndsWith(Definition.RecordSeparator))                      firstLine = firstLine.Substring(0' firstLine.Length - Definition.RecordSeparator.Length);                  columnCount = firstLine.Split(Definition.FieldSeparator).Length;                  if (firstRowHeader)                      columnNames.AddRange(SplitLine(firstLine));                                      //Correctly define the columns for the table                  for (int c = 0; c < columnCount; c++)                  {                      if (columnNames.Count == 0)                          table.Columns.Add(string.Format("No name {0}"' c.ToString())' typeof(string));                      else                          table.Columns.Add(columnNames[c]' typeof(string));                  }                    //Parse the whole file                  stream.Position = 0;                  reader.DiscardBufferedData();                    bool isLastRecord = false;                  i = 0;                  var alreadyRead = string.Empty;                  var extraRead = string.Empty;                    while (!isLastRecord)                  {                      RaiseProgressStatus("Loading row {0} of {1}"' i' count);                      var records = GetNextRecords(reader' Definition.RecordSeparator' BufferSize' alreadyRead' out extraRead);                      foreach (var record in records)                      {                          var recordToParse = record;                                                    if (i==0 && encodingBytesCount>0)                              recordToParse = recordToParse.Substring(encodingBytesCount' recordToParse.Length - encodingBytesCount);                                                    i++;                          if (i!=1 || !firstRowHeader)                          {                               isLastRecord = IsLastRecord(recordToParse);                              var cleanRecord = CleanRecord(recordToParse' Definition.RecordSeparator);                              var cells = SplitLine(cleanRecord).ToList();                              var row = table.NewRow();                              if (row.ItemArray.Length<cells.Count)                                  throw new InvalidDataException                                  (                                      string.Format                                      (                                          "The row {0} contains {1} more field{2} than expected."                                          ' table.Rows.Count + 1 + Convert.ToInt32(firstRowHeader)                                          ' cells.Count - row.ItemArray.Length                                          ' cells.Count - row.ItemArray.Length>1 ? "s" : string.Empty                                      )                                  );                                //fill the missing cells                              while (row.ItemArray.Length > cells.Count)                                  cells.Add(Definition.MissingCell);                                row.ItemArray = cells.ToArray();                              table.Rows.Add(row);                          }                      }                      alreadyRead = extraRead;                      isLastRecord |= records.Count() == 0;                                         }              }
Magic Number,NBi.Core,CsvReader,C:\repos\Seddryck_nbi\NBi.Core\CsvReader.cs,Read,The following statement contains a magic number: using (StreamReader reader = new StreamReader(stream' Encoding.UTF8' true))              {                  var count = CountRecordSeparator(reader' Definition.RecordSeparator' BufferSize);                  count -= Convert.ToInt16(firstRowHeader);                  stream.Position = 0;                  reader.DiscardBufferedData();                    ////Check if the first byte is BOM or not                  var encodingBytesCount = 0;                  var buffer = new char[4];                  reader.Read(buffer' 0' 4);                  var startingString = new string(buffer);                  if (startingString[0] == 65279)                      encodingBytesCount = 1;                    stream.Position = 0;                  reader.DiscardBufferedData();                    //Get first row to know the count of columns                  RaiseProgressStatus("Defining fields");                  var columnCount = 0;                  var columnNames = new List<string>();                  var firstLine = GetFirstRecord(reader' Definition.RecordSeparator' BufferSize);                  if (encodingBytesCount>0)                      firstLine = firstLine.Substring(encodingBytesCount' firstLine.Length - encodingBytesCount);                  if (firstLine.EndsWith(Definition.RecordSeparator))                      firstLine = firstLine.Substring(0' firstLine.Length - Definition.RecordSeparator.Length);                  columnCount = firstLine.Split(Definition.FieldSeparator).Length;                  if (firstRowHeader)                      columnNames.AddRange(SplitLine(firstLine));                                      //Correctly define the columns for the table                  for (int c = 0; c < columnCount; c++)                  {                      if (columnNames.Count == 0)                          table.Columns.Add(string.Format("No name {0}"' c.ToString())' typeof(string));                      else                          table.Columns.Add(columnNames[c]' typeof(string));                  }                    //Parse the whole file                  stream.Position = 0;                  reader.DiscardBufferedData();                    bool isLastRecord = false;                  i = 0;                  var alreadyRead = string.Empty;                  var extraRead = string.Empty;                    while (!isLastRecord)                  {                      RaiseProgressStatus("Loading row {0} of {1}"' i' count);                      var records = GetNextRecords(reader' Definition.RecordSeparator' BufferSize' alreadyRead' out extraRead);                      foreach (var record in records)                      {                          var recordToParse = record;                                                    if (i==0 && encodingBytesCount>0)                              recordToParse = recordToParse.Substring(encodingBytesCount' recordToParse.Length - encodingBytesCount);                                                    i++;                          if (i!=1 || !firstRowHeader)                          {                               isLastRecord = IsLastRecord(recordToParse);                              var cleanRecord = CleanRecord(recordToParse' Definition.RecordSeparator);                              var cells = SplitLine(cleanRecord).ToList();                              var row = table.NewRow();                              if (row.ItemArray.Length<cells.Count)                                  throw new InvalidDataException                                  (                                      string.Format                                      (                                          "The row {0} contains {1} more field{2} than expected."                                          ' table.Rows.Count + 1 + Convert.ToInt32(firstRowHeader)                                          ' cells.Count - row.ItemArray.Length                                          ' cells.Count - row.ItemArray.Length>1 ? "s" : string.Empty                                      )                                  );                                //fill the missing cells                              while (row.ItemArray.Length > cells.Count)                                  cells.Add(Definition.MissingCell);                                row.ItemArray = cells.ToArray();                              table.Rows.Add(row);                          }                      }                      alreadyRead = extraRead;                      isLastRecord |= records.Count() == 0;                                         }              }
Magic Number,NBi.Core,CsvReader,C:\repos\Seddryck_nbi\NBi.Core\CsvReader.cs,Read,The following statement contains a magic number: using (StreamReader reader = new StreamReader(stream' Encoding.UTF8' true))              {                  var count = CountRecordSeparator(reader' Definition.RecordSeparator' BufferSize);                  count -= Convert.ToInt16(firstRowHeader);                  stream.Position = 0;                  reader.DiscardBufferedData();                    ////Check if the first byte is BOM or not                  var encodingBytesCount = 0;                  var buffer = new char[4];                  reader.Read(buffer' 0' 4);                  var startingString = new string(buffer);                  if (startingString[0] == 65279)                      encodingBytesCount = 1;                    stream.Position = 0;                  reader.DiscardBufferedData();                    //Get first row to know the count of columns                  RaiseProgressStatus("Defining fields");                  var columnCount = 0;                  var columnNames = new List<string>();                  var firstLine = GetFirstRecord(reader' Definition.RecordSeparator' BufferSize);                  if (encodingBytesCount>0)                      firstLine = firstLine.Substring(encodingBytesCount' firstLine.Length - encodingBytesCount);                  if (firstLine.EndsWith(Definition.RecordSeparator))                      firstLine = firstLine.Substring(0' firstLine.Length - Definition.RecordSeparator.Length);                  columnCount = firstLine.Split(Definition.FieldSeparator).Length;                  if (firstRowHeader)                      columnNames.AddRange(SplitLine(firstLine));                                      //Correctly define the columns for the table                  for (int c = 0; c < columnCount; c++)                  {                      if (columnNames.Count == 0)                          table.Columns.Add(string.Format("No name {0}"' c.ToString())' typeof(string));                      else                          table.Columns.Add(columnNames[c]' typeof(string));                  }                    //Parse the whole file                  stream.Position = 0;                  reader.DiscardBufferedData();                    bool isLastRecord = false;                  i = 0;                  var alreadyRead = string.Empty;                  var extraRead = string.Empty;                    while (!isLastRecord)                  {                      RaiseProgressStatus("Loading row {0} of {1}"' i' count);                      var records = GetNextRecords(reader' Definition.RecordSeparator' BufferSize' alreadyRead' out extraRead);                      foreach (var record in records)                      {                          var recordToParse = record;                                                    if (i==0 && encodingBytesCount>0)                              recordToParse = recordToParse.Substring(encodingBytesCount' recordToParse.Length - encodingBytesCount);                                                    i++;                          if (i!=1 || !firstRowHeader)                          {                               isLastRecord = IsLastRecord(recordToParse);                              var cleanRecord = CleanRecord(recordToParse' Definition.RecordSeparator);                              var cells = SplitLine(cleanRecord).ToList();                              var row = table.NewRow();                              if (row.ItemArray.Length<cells.Count)                                  throw new InvalidDataException                                  (                                      string.Format                                      (                                          "The row {0} contains {1} more field{2} than expected."                                          ' table.Rows.Count + 1 + Convert.ToInt32(firstRowHeader)                                          ' cells.Count - row.ItemArray.Length                                          ' cells.Count - row.ItemArray.Length>1 ? "s" : string.Empty                                      )                                  );                                //fill the missing cells                              while (row.ItemArray.Length > cells.Count)                                  cells.Add(Definition.MissingCell);                                row.ItemArray = cells.ToArray();                              table.Rows.Add(row);                          }                      }                      alreadyRead = extraRead;                      isLastRecord |= records.Count() == 0;                                         }              }
Magic Number,NBi.Core,CsvReader,C:\repos\Seddryck_nbi\NBi.Core\CsvReader.cs,RemoveTextQualifier,The following statement contains a magic number: if (item[0] == Definition.TextQualifier && item[item.Length - 1] == Definition.TextQualifier)                  return item.Substring(1' item.Length - 2);
Magic Number,NBi.Core,ConnectionFactory,C:\repos\Seddryck_nbi\NBi.Core\ConnectionFactory.cs,TranslateProviderName,The following statement contains a magic number: foreach (DataRowView item in DbProviderFactories.GetFactoryClasses().DefaultView)                  providers.Add((string)item[2]);
Magic Number,NBi.Core.DataType,DataTypeDiscoveryFactoryProvider,C:\repos\Seddryck_nbi\NBi.Core\DataType\DataTypeDiscoveryFactoryProvider.cs,ParseXmlaResponse,The following statement contains a magic number: if (serverModeNode == null)              {                  Trace.WriteLineIf(NBiTraceSwitch.TraceVerbose' "Trying to detect the server mode for SSAS but the server doesn't return this information. Trying to get it from version.");                  var versionNode = root.SelectSingleNode("//default:Version"' nm);                  if (versionNode != null)                  {                      var splitVersion = versionNode.InnerText.Split('.');                      short releaseVersion = 0;                      if (splitVersion.Count() >= 1)                          if (short.TryParse(splitVersion[0]' out releaseVersion))                              if (releaseVersion < 11)                                  return "Multidimensional";                      throw new ArgumentException(string.Format("Unable to locate the node for 'ServerMode' and can't guess based on node 'Version'. Value returned for version is '{0}'. Use AdomdClient 12.0 or higher."' versionNode.InnerText));                          }                  throw new ArgumentException("Unable to locate the node for 'ServerMode' or the node for 'Version'. Use AdomdClient 12.0 or higher.");              }
Magic Number,NBi.Core.DataType.Relational,RelationalCommand,C:\repos\Seddryck_nbi\NBi.Core\DataType\Relational\RelationalCommand.cs,Execute,The following statement contains a magic number: if (rdr.Read())              {                  row = new RelationalRow();                  row.IsNullable = rdr.GetString(0);                  row.DataType = rdr.GetString(1);                  row.CharacterMaximumLength = rdr.IsDBNull(2) ? 0 : rdr.GetInt32(2);                  row.NumericPrecision = rdr.IsDBNull(3) ? 0 : rdr.GetByte(3);                  row.NumericScale = rdr.IsDBNull(4) ? 0 : rdr.GetInt32(4);                  row.DateTimePrecision = rdr.IsDBNull(5) ? 0 : rdr.GetInt16(5);                  row.CharacterSetName = rdr.IsDBNull(6) ? string.Empty : rdr.GetString(6);                  row.CollationName = rdr.IsDBNull(7) ? string.Empty : rdr.GetString(7);                  row.DomainName = rdr.IsDBNull(8) ? string.Empty : rdr.GetString(8);                                }
Magic Number,NBi.Core.DataType.Relational,RelationalCommand,C:\repos\Seddryck_nbi\NBi.Core\DataType\Relational\RelationalCommand.cs,Execute,The following statement contains a magic number: if (rdr.Read())              {                  row = new RelationalRow();                  row.IsNullable = rdr.GetString(0);                  row.DataType = rdr.GetString(1);                  row.CharacterMaximumLength = rdr.IsDBNull(2) ? 0 : rdr.GetInt32(2);                  row.NumericPrecision = rdr.IsDBNull(3) ? 0 : rdr.GetByte(3);                  row.NumericScale = rdr.IsDBNull(4) ? 0 : rdr.GetInt32(4);                  row.DateTimePrecision = rdr.IsDBNull(5) ? 0 : rdr.GetInt16(5);                  row.CharacterSetName = rdr.IsDBNull(6) ? string.Empty : rdr.GetString(6);                  row.CollationName = rdr.IsDBNull(7) ? string.Empty : rdr.GetString(7);                  row.DomainName = rdr.IsDBNull(8) ? string.Empty : rdr.GetString(8);                                }
Magic Number,NBi.Core.DataType.Relational,RelationalCommand,C:\repos\Seddryck_nbi\NBi.Core\DataType\Relational\RelationalCommand.cs,Execute,The following statement contains a magic number: if (rdr.Read())              {                  row = new RelationalRow();                  row.IsNullable = rdr.GetString(0);                  row.DataType = rdr.GetString(1);                  row.CharacterMaximumLength = rdr.IsDBNull(2) ? 0 : rdr.GetInt32(2);                  row.NumericPrecision = rdr.IsDBNull(3) ? 0 : rdr.GetByte(3);                  row.NumericScale = rdr.IsDBNull(4) ? 0 : rdr.GetInt32(4);                  row.DateTimePrecision = rdr.IsDBNull(5) ? 0 : rdr.GetInt16(5);                  row.CharacterSetName = rdr.IsDBNull(6) ? string.Empty : rdr.GetString(6);                  row.CollationName = rdr.IsDBNull(7) ? string.Empty : rdr.GetString(7);                  row.DomainName = rdr.IsDBNull(8) ? string.Empty : rdr.GetString(8);                                }
Magic Number,NBi.Core.DataType.Relational,RelationalCommand,C:\repos\Seddryck_nbi\NBi.Core\DataType\Relational\RelationalCommand.cs,Execute,The following statement contains a magic number: if (rdr.Read())              {                  row = new RelationalRow();                  row.IsNullable = rdr.GetString(0);                  row.DataType = rdr.GetString(1);                  row.CharacterMaximumLength = rdr.IsDBNull(2) ? 0 : rdr.GetInt32(2);                  row.NumericPrecision = rdr.IsDBNull(3) ? 0 : rdr.GetByte(3);                  row.NumericScale = rdr.IsDBNull(4) ? 0 : rdr.GetInt32(4);                  row.DateTimePrecision = rdr.IsDBNull(5) ? 0 : rdr.GetInt16(5);                  row.CharacterSetName = rdr.IsDBNull(6) ? string.Empty : rdr.GetString(6);                  row.CollationName = rdr.IsDBNull(7) ? string.Empty : rdr.GetString(7);                  row.DomainName = rdr.IsDBNull(8) ? string.Empty : rdr.GetString(8);                                }
Magic Number,NBi.Core.DataType.Relational,RelationalCommand,C:\repos\Seddryck_nbi\NBi.Core\DataType\Relational\RelationalCommand.cs,Execute,The following statement contains a magic number: if (rdr.Read())              {                  row = new RelationalRow();                  row.IsNullable = rdr.GetString(0);                  row.DataType = rdr.GetString(1);                  row.CharacterMaximumLength = rdr.IsDBNull(2) ? 0 : rdr.GetInt32(2);                  row.NumericPrecision = rdr.IsDBNull(3) ? 0 : rdr.GetByte(3);                  row.NumericScale = rdr.IsDBNull(4) ? 0 : rdr.GetInt32(4);                  row.DateTimePrecision = rdr.IsDBNull(5) ? 0 : rdr.GetInt16(5);                  row.CharacterSetName = rdr.IsDBNull(6) ? string.Empty : rdr.GetString(6);                  row.CollationName = rdr.IsDBNull(7) ? string.Empty : rdr.GetString(7);                  row.DomainName = rdr.IsDBNull(8) ? string.Empty : rdr.GetString(8);                                }
Magic Number,NBi.Core.DataType.Relational,RelationalCommand,C:\repos\Seddryck_nbi\NBi.Core\DataType\Relational\RelationalCommand.cs,Execute,The following statement contains a magic number: if (rdr.Read())              {                  row = new RelationalRow();                  row.IsNullable = rdr.GetString(0);                  row.DataType = rdr.GetString(1);                  row.CharacterMaximumLength = rdr.IsDBNull(2) ? 0 : rdr.GetInt32(2);                  row.NumericPrecision = rdr.IsDBNull(3) ? 0 : rdr.GetByte(3);                  row.NumericScale = rdr.IsDBNull(4) ? 0 : rdr.GetInt32(4);                  row.DateTimePrecision = rdr.IsDBNull(5) ? 0 : rdr.GetInt16(5);                  row.CharacterSetName = rdr.IsDBNull(6) ? string.Empty : rdr.GetString(6);                  row.CollationName = rdr.IsDBNull(7) ? string.Empty : rdr.GetString(7);                  row.DomainName = rdr.IsDBNull(8) ? string.Empty : rdr.GetString(8);                                }
Magic Number,NBi.Core.DataType.Relational,RelationalCommand,C:\repos\Seddryck_nbi\NBi.Core\DataType\Relational\RelationalCommand.cs,Execute,The following statement contains a magic number: if (rdr.Read())              {                  row = new RelationalRow();                  row.IsNullable = rdr.GetString(0);                  row.DataType = rdr.GetString(1);                  row.CharacterMaximumLength = rdr.IsDBNull(2) ? 0 : rdr.GetInt32(2);                  row.NumericPrecision = rdr.IsDBNull(3) ? 0 : rdr.GetByte(3);                  row.NumericScale = rdr.IsDBNull(4) ? 0 : rdr.GetInt32(4);                  row.DateTimePrecision = rdr.IsDBNull(5) ? 0 : rdr.GetInt16(5);                  row.CharacterSetName = rdr.IsDBNull(6) ? string.Empty : rdr.GetString(6);                  row.CollationName = rdr.IsDBNull(7) ? string.Empty : rdr.GetString(7);                  row.DomainName = rdr.IsDBNull(8) ? string.Empty : rdr.GetString(8);                                }
Magic Number,NBi.Core.DataType.Relational,RelationalCommand,C:\repos\Seddryck_nbi\NBi.Core\DataType\Relational\RelationalCommand.cs,Execute,The following statement contains a magic number: if (rdr.Read())              {                  row = new RelationalRow();                  row.IsNullable = rdr.GetString(0);                  row.DataType = rdr.GetString(1);                  row.CharacterMaximumLength = rdr.IsDBNull(2) ? 0 : rdr.GetInt32(2);                  row.NumericPrecision = rdr.IsDBNull(3) ? 0 : rdr.GetByte(3);                  row.NumericScale = rdr.IsDBNull(4) ? 0 : rdr.GetInt32(4);                  row.DateTimePrecision = rdr.IsDBNull(5) ? 0 : rdr.GetInt16(5);                  row.CharacterSetName = rdr.IsDBNull(6) ? string.Empty : rdr.GetString(6);                  row.CollationName = rdr.IsDBNull(7) ? string.Empty : rdr.GetString(7);                  row.DomainName = rdr.IsDBNull(8) ? string.Empty : rdr.GetString(8);                                }
Magic Number,NBi.Core.DataType.Relational,RelationalCommand,C:\repos\Seddryck_nbi\NBi.Core\DataType\Relational\RelationalCommand.cs,Execute,The following statement contains a magic number: if (rdr.Read())              {                  row = new RelationalRow();                  row.IsNullable = rdr.GetString(0);                  row.DataType = rdr.GetString(1);                  row.CharacterMaximumLength = rdr.IsDBNull(2) ? 0 : rdr.GetInt32(2);                  row.NumericPrecision = rdr.IsDBNull(3) ? 0 : rdr.GetByte(3);                  row.NumericScale = rdr.IsDBNull(4) ? 0 : rdr.GetInt32(4);                  row.DateTimePrecision = rdr.IsDBNull(5) ? 0 : rdr.GetInt16(5);                  row.CharacterSetName = rdr.IsDBNull(6) ? string.Empty : rdr.GetString(6);                  row.CollationName = rdr.IsDBNull(7) ? string.Empty : rdr.GetString(7);                  row.DomainName = rdr.IsDBNull(8) ? string.Empty : rdr.GetString(8);                                }
Magic Number,NBi.Core.DataType.Relational,RelationalCommand,C:\repos\Seddryck_nbi\NBi.Core\DataType\Relational\RelationalCommand.cs,Execute,The following statement contains a magic number: if (rdr.Read())              {                  row = new RelationalRow();                  row.IsNullable = rdr.GetString(0);                  row.DataType = rdr.GetString(1);                  row.CharacterMaximumLength = rdr.IsDBNull(2) ? 0 : rdr.GetInt32(2);                  row.NumericPrecision = rdr.IsDBNull(3) ? 0 : rdr.GetByte(3);                  row.NumericScale = rdr.IsDBNull(4) ? 0 : rdr.GetInt32(4);                  row.DateTimePrecision = rdr.IsDBNull(5) ? 0 : rdr.GetInt16(5);                  row.CharacterSetName = rdr.IsDBNull(6) ? string.Empty : rdr.GetString(6);                  row.CollationName = rdr.IsDBNull(7) ? string.Empty : rdr.GetString(7);                  row.DomainName = rdr.IsDBNull(8) ? string.Empty : rdr.GetString(8);                                }
Magic Number,NBi.Core.DataType.Relational,RelationalCommand,C:\repos\Seddryck_nbi\NBi.Core\DataType\Relational\RelationalCommand.cs,Execute,The following statement contains a magic number: if (rdr.Read())              {                  row = new RelationalRow();                  row.IsNullable = rdr.GetString(0);                  row.DataType = rdr.GetString(1);                  row.CharacterMaximumLength = rdr.IsDBNull(2) ? 0 : rdr.GetInt32(2);                  row.NumericPrecision = rdr.IsDBNull(3) ? 0 : rdr.GetByte(3);                  row.NumericScale = rdr.IsDBNull(4) ? 0 : rdr.GetInt32(4);                  row.DateTimePrecision = rdr.IsDBNull(5) ? 0 : rdr.GetInt16(5);                  row.CharacterSetName = rdr.IsDBNull(6) ? string.Empty : rdr.GetString(6);                  row.CollationName = rdr.IsDBNull(7) ? string.Empty : rdr.GetString(7);                  row.DomainName = rdr.IsDBNull(8) ? string.Empty : rdr.GetString(8);                                }
Magic Number,NBi.Core.DataType.Relational,RelationalCommand,C:\repos\Seddryck_nbi\NBi.Core\DataType\Relational\RelationalCommand.cs,Execute,The following statement contains a magic number: if (rdr.Read())              {                  row = new RelationalRow();                  row.IsNullable = rdr.GetString(0);                  row.DataType = rdr.GetString(1);                  row.CharacterMaximumLength = rdr.IsDBNull(2) ? 0 : rdr.GetInt32(2);                  row.NumericPrecision = rdr.IsDBNull(3) ? 0 : rdr.GetByte(3);                  row.NumericScale = rdr.IsDBNull(4) ? 0 : rdr.GetInt32(4);                  row.DateTimePrecision = rdr.IsDBNull(5) ? 0 : rdr.GetInt16(5);                  row.CharacterSetName = rdr.IsDBNull(6) ? string.Empty : rdr.GetString(6);                  row.CollationName = rdr.IsDBNull(7) ? string.Empty : rdr.GetString(7);                  row.DomainName = rdr.IsDBNull(8) ? string.Empty : rdr.GetString(8);                                }
Magic Number,NBi.Core.DataType.Relational,RelationalCommand,C:\repos\Seddryck_nbi\NBi.Core\DataType\Relational\RelationalCommand.cs,Execute,The following statement contains a magic number: if (rdr.Read())              {                  row = new RelationalRow();                  row.IsNullable = rdr.GetString(0);                  row.DataType = rdr.GetString(1);                  row.CharacterMaximumLength = rdr.IsDBNull(2) ? 0 : rdr.GetInt32(2);                  row.NumericPrecision = rdr.IsDBNull(3) ? 0 : rdr.GetByte(3);                  row.NumericScale = rdr.IsDBNull(4) ? 0 : rdr.GetInt32(4);                  row.DateTimePrecision = rdr.IsDBNull(5) ? 0 : rdr.GetInt16(5);                  row.CharacterSetName = rdr.IsDBNull(6) ? string.Empty : rdr.GetString(6);                  row.CollationName = rdr.IsDBNull(7) ? string.Empty : rdr.GetString(7);                  row.DomainName = rdr.IsDBNull(8) ? string.Empty : rdr.GetString(8);                                }
Magic Number,NBi.Core.DataType.Relational,RelationalCommand,C:\repos\Seddryck_nbi\NBi.Core\DataType\Relational\RelationalCommand.cs,Execute,The following statement contains a magic number: if (rdr.Read())              {                  row = new RelationalRow();                  row.IsNullable = rdr.GetString(0);                  row.DataType = rdr.GetString(1);                  row.CharacterMaximumLength = rdr.IsDBNull(2) ? 0 : rdr.GetInt32(2);                  row.NumericPrecision = rdr.IsDBNull(3) ? 0 : rdr.GetByte(3);                  row.NumericScale = rdr.IsDBNull(4) ? 0 : rdr.GetInt32(4);                  row.DateTimePrecision = rdr.IsDBNull(5) ? 0 : rdr.GetInt16(5);                  row.CharacterSetName = rdr.IsDBNull(6) ? string.Empty : rdr.GetString(6);                  row.CollationName = rdr.IsDBNull(7) ? string.Empty : rdr.GetString(7);                  row.DomainName = rdr.IsDBNull(8) ? string.Empty : rdr.GetString(8);                                }
Magic Number,NBi.Core.Members.Predefined,MonthsOfYearBuilder,C:\repos\Seddryck_nbi\NBi.Core\Members\Predefined\MonthsOfYearBuilder.cs,InternalBuild,The following statement contains a magic number: Result =  Build(Culture' 1' 2013' ToTitleCase);
Magic Number,NBi.Core.Members.Predefined,DaysOfWeekBuilder,C:\repos\Seddryck_nbi\NBi.Core\Members\Predefined\DaysOfWeekBuilder.cs,Build,The following statement contains a magic number: var list = new List<string>(7);
Magic Number,NBi.Core.PowerBiDesktop,PowerBiDesktopConnectionStringBuilder,C:\repos\Seddryck_nbi\NBi.Core\PowerBiDesktop\PowerBiDesktopConnectionStringBuilder.cs,BuildLocalConnectionString,The following statement contains a magic number: if (process==null)              {                  var existingParentNameString = new StringBuilder();                  foreach (var p in processes)  		            existingParentNameString.AppendFormat("'{0}'' '"' p.GetParent().MainWindowTitle);  	            existingParentNameString = existingParentNameString.Remove(existingParentNameString.Length - 2' 2);                                    throw new ConnectionException                      (                          new NullReferenceException(string.Format("No parent process found with the name '{0}'. Existing parent names were {1}."' name' existingParentNameString))                          ' string.Format("PBIX = {0}"' name)                      );              }
Magic Number,NBi.Core.PowerBiDesktop,PowerBiDesktopConnectionStringBuilder,C:\repos\Seddryck_nbi\NBi.Core\PowerBiDesktop\PowerBiDesktopConnectionStringBuilder.cs,BuildLocalConnectionString,The following statement contains a magic number: if (process==null)              {                  var existingParentNameString = new StringBuilder();                  foreach (var p in processes)  		            existingParentNameString.AppendFormat("'{0}'' '"' p.GetParent().MainWindowTitle);  	            existingParentNameString = existingParentNameString.Remove(existingParentNameString.Length - 2' 2);                                    throw new ConnectionException                      (                          new NullReferenceException(string.Format("No parent process found with the name '{0}'. Existing parent names were {1}."' name' existingParentNameString))                          ' string.Format("PBIX = {0}"' name)                      );              }
Magic Number,NBi.Core.Query,CommandBuilder,C:\repos\Seddryck_nbi\NBi.Core\Query\CommandBuilder.cs,Build,The following statement contains a magic number: var commandTimeout = Math.Max(0' (int)Math.Ceiling(timeout / 1000.0));
Magic Number,NBi.Core.Query,QueryOdbcEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QueryOdbcEngine.cs,CheckPerformance,The following statement contains a magic number: command.CommandTimeout = timeout / 1000;
Magic Number,NBi.Core.Query,QuerySqlEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QuerySqlEngine.cs,CheckPerformance,The following statement contains a magic number: command.CommandTimeout = timeout / 1000;
Magic Number,NBi.Core.Query,QuerySqlEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QuerySqlEngine.cs,Execute,The following statement contains a magic number: using (var connection = new SqlConnection())              {                  var connectionString = command.Connection.ConnectionString;                  try                  { connection.ConnectionString = connectionString; }                  catch (ArgumentException ex)                  { throw new ConnectionException(ex' connectionString); }                  try                      {connection.Open();}                  catch (SqlException ex)                  { throw new ConnectionException(ex' connectionString); }                    Trace.WriteLineIf(NBiTraceSwitch.TraceVerbose' command.CommandText);                  foreach (SqlParameter param in command.Parameters)                      Trace.WriteLineIf(NBiTraceSwitch.TraceVerbose' string.Format("{0} => {1}"' param.ParameterName' param.Value));                    // capture time before execution                  DateTime timeBefore = DateTime.Now;                  var adapter = new SqlDataAdapter(command);                  var ds = new DataSet();                    try                  {                      adapter.Fill(ds);                  }                  catch (SqlException ex)                  {                      if (ex.Number == -2)                          throw new CommandTimeoutException(ex' adapter.SelectCommand);                      throw;                  }                                      // capture time after execution                  DateTime timeAfter = DateTime.Now;                    // setting query runtime                  elapsedSec = (float)timeAfter.Subtract(timeBefore).TotalSeconds;                  Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Time needed to execute query [SQL Server]: {0}"' timeAfter.Subtract(timeBefore).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s")));                    return ds;              }
Magic Number,NBi.Core.Query,QuerySqlEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QuerySqlEngine.cs,ExecuteScalar,The following statement contains a magic number: using (var connection = new SqlConnection())              {                  var connectionString = command.Connection.ConnectionString;                  try                  { connection.ConnectionString = connectionString; }                  catch (ArgumentException ex)                  { throw new ConnectionException(ex' connectionString); }                  try                  { connection.Open(); }                  catch (SqlException ex)                  { throw new ConnectionException(ex' connectionString); }                    Trace.WriteLineIf(NBiTraceSwitch.TraceVerbose' command.CommandText);                  foreach (SqlParameter param in command.Parameters)                      Trace.WriteLineIf(NBiTraceSwitch.TraceVerbose' string.Format("{0} => {1}"' param.ParameterName' param.Value));                    // capture time before execution                  DateTime timeBefore = DateTime.Now;                  object value = null;                  try                  {                      command.Connection = connection;                      value = command.ExecuteScalar();                  }                  catch (SqlException ex)                  {                      if (ex.Number == -2)                          throw new CommandTimeoutException(ex' command);                      throw;                  }                  finally                  {                      if (connection.State != ConnectionState.Closed)                          connection.Close();                  }                    // capture time after execution                  DateTime timeAfter = DateTime.Now;                    // setting query runtime                  var elapsedSec = (float)timeAfter.Subtract(timeBefore).TotalSeconds;                  Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Time needed to execute query [SQL Server]: {0}"' timeAfter.Subtract(timeBefore).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s")));                    return value;              }
Magic Number,NBi.Core.Query,QuerySqlEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QuerySqlEngine.cs,ExecuteList,The following statement contains a magic number: using (var connection = new SqlConnection())              {                  var connectionString = command.Connection.ConnectionString;                  try                  { connection.ConnectionString = connectionString; }                  catch (ArgumentException ex)                  { throw new ConnectionException(ex' connectionString); }                  try                  { connection.Open(); }                  catch (SqlException ex)                  { throw new ConnectionException(ex' connectionString); }                    Trace.WriteLineIf(NBiTraceSwitch.TraceVerbose' command.CommandText);                  foreach (SqlParameter param in command.Parameters)                      Trace.WriteLineIf(NBiTraceSwitch.TraceVerbose' string.Format("{0} => {1}"' param.ParameterName' param.Value));                    // capture time before execution                  DateTime timeBefore = DateTime.Now;                  var list = new List<T>();                  try                  {                      command.Connection = connection;                      var dr = command.ExecuteReader();                      while (dr.Read())                          list.Add((T)dr.GetValue(0));                  }                  catch (SqlException ex)                  {                      if (ex.Number == -2)                          throw new CommandTimeoutException(ex' command);                      throw;                  }                  finally                  {                      if (connection.State != ConnectionState.Closed)                          connection.Close();                  }                    // capture time after execution                  DateTime timeAfter = DateTime.Now;                    // setting query runtime                  var elapsedSec = (float)timeAfter.Subtract(timeBefore).TotalSeconds;                  Trace.WriteLineIf(NBiTraceSwitch.TraceInfo' string.Format("Time needed to execute query [SQL Server]: {0}"' timeAfter.Subtract(timeBefore).ToString(@"d\d\.hh\h\:mm\m\:ss\s\ \+fff\m\s")));                    return list;              }
Magic Number,NBi.Core.Query,PerformanceResult,C:\repos\Seddryck_nbi\NBi.Core\Query\PerformanceResult.cs,Timeout,The following statement contains a magic number: return new PerformanceResult() {IsTimeOut=true' TimeOut = new TimeSpan(timeout*1000*10)};
Magic Number,NBi.Core.Query,PerformanceResult,C:\repos\Seddryck_nbi\NBi.Core\Query\PerformanceResult.cs,Timeout,The following statement contains a magic number: return new PerformanceResult() {IsTimeOut=true' TimeOut = new TimeSpan(timeout*1000*10)};
Magic Number,NBi.Core.Query,QueryOleDbEngine,C:\repos\Seddryck_nbi\NBi.Core\Query\QueryOleDbEngine.cs,CheckPerformance,The following statement contains a magic number: command.CommandTimeout = timeout / 1000;
Magic Number,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,SearchDataSet,The following statement contains a magic number: using (var conn = new SqlConnection())              {                  //create connection and define sql query                  conn.ConnectionString = source;                  var cmd = new SqlCommand();                  cmd.Connection = conn;                  cmd.CommandText = ReadQueryFromContent("ListDataSet");                    //create the three parameters for the sql query                  var paramReportPath = new SqlParameter("ReportPath"' System.Data.SqlDbType.NVarChar' 425);                  paramReportPath.Value = reportPath;                  cmd.Parameters.Add(paramReportPath);                  var paramReportName = new SqlParameter("ReportName"' System.Data.SqlDbType.NVarChar' 425);                  paramReportName.Value = reportName;                  cmd.Parameters.Add(paramReportName);                    //execute the command                  conn.Open();                  var dr = cmd.ExecuteReader();                                    while (dr.Read())                      if (dr.GetString(2) == dataSetName)                      {                          var command = new ReportingCommand();                          command.CommandType = (CommandType)Enum.Parse(typeof(CommandType)' dr.GetString(4)); //CommandType                          command.Text = dr.GetString(5); //CommandText                          return command;                      }                      else                          otherDataSets.Add(dr.GetString(2));              }
Magic Number,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,SearchDataSet,The following statement contains a magic number: using (var conn = new SqlConnection())              {                  //create connection and define sql query                  conn.ConnectionString = source;                  var cmd = new SqlCommand();                  cmd.Connection = conn;                  cmd.CommandText = ReadQueryFromContent("ListDataSet");                    //create the three parameters for the sql query                  var paramReportPath = new SqlParameter("ReportPath"' System.Data.SqlDbType.NVarChar' 425);                  paramReportPath.Value = reportPath;                  cmd.Parameters.Add(paramReportPath);                  var paramReportName = new SqlParameter("ReportName"' System.Data.SqlDbType.NVarChar' 425);                  paramReportName.Value = reportName;                  cmd.Parameters.Add(paramReportName);                    //execute the command                  conn.Open();                  var dr = cmd.ExecuteReader();                                    while (dr.Read())                      if (dr.GetString(2) == dataSetName)                      {                          var command = new ReportingCommand();                          command.CommandType = (CommandType)Enum.Parse(typeof(CommandType)' dr.GetString(4)); //CommandType                          command.Text = dr.GetString(5); //CommandText                          return command;                      }                      else                          otherDataSets.Add(dr.GetString(2));              }
Magic Number,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,SearchDataSet,The following statement contains a magic number: using (var conn = new SqlConnection())              {                  //create connection and define sql query                  conn.ConnectionString = source;                  var cmd = new SqlCommand();                  cmd.Connection = conn;                  cmd.CommandText = ReadQueryFromContent("ListDataSet");                    //create the three parameters for the sql query                  var paramReportPath = new SqlParameter("ReportPath"' System.Data.SqlDbType.NVarChar' 425);                  paramReportPath.Value = reportPath;                  cmd.Parameters.Add(paramReportPath);                  var paramReportName = new SqlParameter("ReportName"' System.Data.SqlDbType.NVarChar' 425);                  paramReportName.Value = reportName;                  cmd.Parameters.Add(paramReportName);                    //execute the command                  conn.Open();                  var dr = cmd.ExecuteReader();                                    while (dr.Read())                      if (dr.GetString(2) == dataSetName)                      {                          var command = new ReportingCommand();                          command.CommandType = (CommandType)Enum.Parse(typeof(CommandType)' dr.GetString(4)); //CommandType                          command.Text = dr.GetString(5); //CommandText                          return command;                      }                      else                          otherDataSets.Add(dr.GetString(2));              }
Magic Number,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,SearchDataSet,The following statement contains a magic number: using (var conn = new SqlConnection())              {                  //create connection and define sql query                  conn.ConnectionString = source;                  var cmd = new SqlCommand();                  cmd.Connection = conn;                  cmd.CommandText = ReadQueryFromContent("ListDataSet");                    //create the three parameters for the sql query                  var paramReportPath = new SqlParameter("ReportPath"' System.Data.SqlDbType.NVarChar' 425);                  paramReportPath.Value = reportPath;                  cmd.Parameters.Add(paramReportPath);                  var paramReportName = new SqlParameter("ReportName"' System.Data.SqlDbType.NVarChar' 425);                  paramReportName.Value = reportName;                  cmd.Parameters.Add(paramReportName);                    //execute the command                  conn.Open();                  var dr = cmd.ExecuteReader();                                    while (dr.Read())                      if (dr.GetString(2) == dataSetName)                      {                          var command = new ReportingCommand();                          command.CommandType = (CommandType)Enum.Parse(typeof(CommandType)' dr.GetString(4)); //CommandType                          command.Text = dr.GetString(5); //CommandText                          return command;                      }                      else                          otherDataSets.Add(dr.GetString(2));              }
Magic Number,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,SearchDataSet,The following statement contains a magic number: using (var conn = new SqlConnection())              {                  //create connection and define sql query                  conn.ConnectionString = source;                  var cmd = new SqlCommand();                  cmd.Connection = conn;                  cmd.CommandText = ReadQueryFromContent("ListDataSet");                    //create the three parameters for the sql query                  var paramReportPath = new SqlParameter("ReportPath"' System.Data.SqlDbType.NVarChar' 425);                  paramReportPath.Value = reportPath;                  cmd.Parameters.Add(paramReportPath);                  var paramReportName = new SqlParameter("ReportName"' System.Data.SqlDbType.NVarChar' 425);                  paramReportName.Value = reportName;                  cmd.Parameters.Add(paramReportName);                    //execute the command                  conn.Open();                  var dr = cmd.ExecuteReader();                                    while (dr.Read())                      if (dr.GetString(2) == dataSetName)                      {                          var command = new ReportingCommand();                          command.CommandType = (CommandType)Enum.Parse(typeof(CommandType)' dr.GetString(4)); //CommandType                          command.Text = dr.GetString(5); //CommandText                          return command;                      }                      else                          otherDataSets.Add(dr.GetString(2));              }
Magic Number,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,SearchDataSet,The following statement contains a magic number: using (var conn = new SqlConnection())              {                  //create connection and define sql query                  conn.ConnectionString = source;                  var cmd = new SqlCommand();                  cmd.Connection = conn;                  cmd.CommandText = ReadQueryFromContent("ListDataSet");                    //create the three parameters for the sql query                  var paramReportPath = new SqlParameter("ReportPath"' System.Data.SqlDbType.NVarChar' 425);                  paramReportPath.Value = reportPath;                  cmd.Parameters.Add(paramReportPath);                  var paramReportName = new SqlParameter("ReportName"' System.Data.SqlDbType.NVarChar' 425);                  paramReportName.Value = reportName;                  cmd.Parameters.Add(paramReportName);                    //execute the command                  conn.Open();                  var dr = cmd.ExecuteReader();                                    while (dr.Read())                      if (dr.GetString(2) == dataSetName)                      {                          var command = new ReportingCommand();                          command.CommandType = (CommandType)Enum.Parse(typeof(CommandType)' dr.GetString(4)); //CommandType                          command.Text = dr.GetString(5); //CommandText                          return command;                      }                      else                          otherDataSets.Add(dr.GetString(2));              }
Magic Number,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,SearchSharedDataSet,The following statement contains a magic number: using (var conn = new SqlConnection())              {                  //create connection and define sql query                  conn.ConnectionString = source;                  var cmd = new SqlCommand();                  cmd.Connection = conn;                  cmd.CommandText = ReadQueryFromContent("ListSharedDataSet");                    //create the three parameters for the sql query                  var paramReportPath = new SqlParameter("ReportPath"' System.Data.SqlDbType.NVarChar' 425);                  paramReportPath.Value = reportPath;                  cmd.Parameters.Add(paramReportPath);                  var paramReportName = new SqlParameter("ReportName"' System.Data.SqlDbType.NVarChar' 425);                  paramReportName.Value = reportName;                  cmd.Parameters.Add(paramReportName);                    //execute the command                  conn.Open();                  var dr = cmd.ExecuteReader();                    while (dr.Read())                      if (dr.GetString(2) == dataSetName)                          return dr.GetString(3);                      else                          otherDataSets.Add(dr.GetString(2));              }
Magic Number,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,SearchSharedDataSet,The following statement contains a magic number: using (var conn = new SqlConnection())              {                  //create connection and define sql query                  conn.ConnectionString = source;                  var cmd = new SqlCommand();                  cmd.Connection = conn;                  cmd.CommandText = ReadQueryFromContent("ListSharedDataSet");                    //create the three parameters for the sql query                  var paramReportPath = new SqlParameter("ReportPath"' System.Data.SqlDbType.NVarChar' 425);                  paramReportPath.Value = reportPath;                  cmd.Parameters.Add(paramReportPath);                  var paramReportName = new SqlParameter("ReportName"' System.Data.SqlDbType.NVarChar' 425);                  paramReportName.Value = reportName;                  cmd.Parameters.Add(paramReportName);                    //execute the command                  conn.Open();                  var dr = cmd.ExecuteReader();                    while (dr.Read())                      if (dr.GetString(2) == dataSetName)                          return dr.GetString(3);                      else                          otherDataSets.Add(dr.GetString(2));              }
Magic Number,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,SearchSharedDataSet,The following statement contains a magic number: using (var conn = new SqlConnection())              {                  //create connection and define sql query                  conn.ConnectionString = source;                  var cmd = new SqlCommand();                  cmd.Connection = conn;                  cmd.CommandText = ReadQueryFromContent("ListSharedDataSet");                    //create the three parameters for the sql query                  var paramReportPath = new SqlParameter("ReportPath"' System.Data.SqlDbType.NVarChar' 425);                  paramReportPath.Value = reportPath;                  cmd.Parameters.Add(paramReportPath);                  var paramReportName = new SqlParameter("ReportName"' System.Data.SqlDbType.NVarChar' 425);                  paramReportName.Value = reportName;                  cmd.Parameters.Add(paramReportName);                    //execute the command                  conn.Open();                  var dr = cmd.ExecuteReader();                    while (dr.Read())                      if (dr.GetString(2) == dataSetName)                          return dr.GetString(3);                      else                          otherDataSets.Add(dr.GetString(2));              }
Magic Number,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,SearchSharedDataSet,The following statement contains a magic number: using (var conn = new SqlConnection())              {                  //create connection and define sql query                  conn.ConnectionString = source;                  var cmd = new SqlCommand();                  cmd.Connection = conn;                  cmd.CommandText = ReadQueryFromContent("ListSharedDataSet");                    //create the three parameters for the sql query                  var paramReportPath = new SqlParameter("ReportPath"' System.Data.SqlDbType.NVarChar' 425);                  paramReportPath.Value = reportPath;                  cmd.Parameters.Add(paramReportPath);                  var paramReportName = new SqlParameter("ReportName"' System.Data.SqlDbType.NVarChar' 425);                  paramReportName.Value = reportName;                  cmd.Parameters.Add(paramReportName);                    //execute the command                  conn.Open();                  var dr = cmd.ExecuteReader();                    while (dr.Read())                      if (dr.GetString(2) == dataSetName)                          return dr.GetString(3);                      else                          otherDataSets.Add(dr.GetString(2));              }
Magic Number,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,SearchSharedDataSet,The following statement contains a magic number: using (var conn = new SqlConnection())              {                  //create connection and define sql query                  conn.ConnectionString = source;                  var cmd = new SqlCommand();                  cmd.Connection = conn;                  cmd.CommandText = ReadQueryFromContent("ListSharedDataSet");                    //create the three parameters for the sql query                  var paramReportPath = new SqlParameter("ReportPath"' System.Data.SqlDbType.NVarChar' 425);                  paramReportPath.Value = reportPath;                  cmd.Parameters.Add(paramReportPath);                  var paramReportName = new SqlParameter("ReportName"' System.Data.SqlDbType.NVarChar' 425);                  paramReportName.Value = reportName;                  cmd.Parameters.Add(paramReportName);                    //execute the command                  conn.Open();                  var dr = cmd.ExecuteReader();                    while (dr.Read())                      if (dr.GetString(2) == dataSetName)                          return dr.GetString(3);                      else                          otherDataSets.Add(dr.GetString(2));              }
Magic Number,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,ReadQueryFromSharedDataSet,The following statement contains a magic number: using (var conn = new SqlConnection())              {                  //create connection and define sql query                  conn.ConnectionString = source;                  var cmd = new SqlCommand();                  cmd.Connection = conn;                  cmd.CommandText = ReadQueryFromContent("QueryFromSharedDataSet");                    //create the two parameters for the sql query                  var paramPath = new SqlParameter("SharedDataSetPath"' System.Data.SqlDbType.NVarChar' 425);                  paramPath.Value = path;                  cmd.Parameters.Add(paramPath);                      var paramReference = new SqlParameter("SharedDataSetName"' System.Data.SqlDbType.NVarChar' 425);                  paramReference.Value = reference;                  cmd.Parameters.Add(paramReference);                    //execute the command                  conn.Open();                  var dr = cmd.ExecuteReader();                                      if (dr.Read())                  {                      var command = new ReportingCommand();                      command.CommandType = (CommandType)Enum.Parse(typeof(CommandType)' dr.GetString(2)) ; //CommandType                      command.Text = dr.GetString(3); //CommandText                      return command;                  }              }
Magic Number,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,ReadQueryFromSharedDataSet,The following statement contains a magic number: using (var conn = new SqlConnection())              {                  //create connection and define sql query                  conn.ConnectionString = source;                  var cmd = new SqlCommand();                  cmd.Connection = conn;                  cmd.CommandText = ReadQueryFromContent("QueryFromSharedDataSet");                    //create the two parameters for the sql query                  var paramPath = new SqlParameter("SharedDataSetPath"' System.Data.SqlDbType.NVarChar' 425);                  paramPath.Value = path;                  cmd.Parameters.Add(paramPath);                      var paramReference = new SqlParameter("SharedDataSetName"' System.Data.SqlDbType.NVarChar' 425);                  paramReference.Value = reference;                  cmd.Parameters.Add(paramReference);                    //execute the command                  conn.Open();                  var dr = cmd.ExecuteReader();                                      if (dr.Read())                  {                      var command = new ReportingCommand();                      command.CommandType = (CommandType)Enum.Parse(typeof(CommandType)' dr.GetString(2)) ; //CommandType                      command.Text = dr.GetString(3); //CommandText                      return command;                  }              }
Magic Number,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,ReadQueryFromSharedDataSet,The following statement contains a magic number: using (var conn = new SqlConnection())              {                  //create connection and define sql query                  conn.ConnectionString = source;                  var cmd = new SqlCommand();                  cmd.Connection = conn;                  cmd.CommandText = ReadQueryFromContent("QueryFromSharedDataSet");                    //create the two parameters for the sql query                  var paramPath = new SqlParameter("SharedDataSetPath"' System.Data.SqlDbType.NVarChar' 425);                  paramPath.Value = path;                  cmd.Parameters.Add(paramPath);                      var paramReference = new SqlParameter("SharedDataSetName"' System.Data.SqlDbType.NVarChar' 425);                  paramReference.Value = reference;                  cmd.Parameters.Add(paramReference);                    //execute the command                  conn.Open();                  var dr = cmd.ExecuteReader();                                      if (dr.Read())                  {                      var command = new ReportingCommand();                      command.CommandType = (CommandType)Enum.Parse(typeof(CommandType)' dr.GetString(2)) ; //CommandType                      command.Text = dr.GetString(3); //CommandText                      return command;                  }              }
Magic Number,NBi.Core.Report,DatabaseReportingParser,C:\repos\Seddryck_nbi\NBi.Core\Report\DatabaseReportingParser.cs,ReadQueryFromSharedDataSet,The following statement contains a magic number: using (var conn = new SqlConnection())              {                  //create connection and define sql query                  conn.ConnectionString = source;                  var cmd = new SqlCommand();                  cmd.Connection = conn;                  cmd.CommandText = ReadQueryFromContent("QueryFromSharedDataSet");                    //create the two parameters for the sql query                  var paramPath = new SqlParameter("SharedDataSetPath"' System.Data.SqlDbType.NVarChar' 425);                  paramPath.Value = path;                  cmd.Parameters.Add(paramPath);                      var paramReference = new SqlParameter("SharedDataSetName"' System.Data.SqlDbType.NVarChar' 425);                  paramReference.Value = reference;                  cmd.Parameters.Add(paramReference);                    //execute the command                  conn.Open();                  var dr = cmd.ExecuteReader();                                      if (dr.Read())                  {                      var command = new ReportingCommand();                      command.CommandType = (CommandType)Enum.Parse(typeof(CommandType)' dr.GetString(2)) ; //CommandType                      command.Text = dr.GetString(3); //CommandText                      return command;                  }              }
Magic Number,NBi.Core.ResultSet,DataRowKeysComparer,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\DataRowKeysComparer.cs,GetHashCode,The following statement contains a magic number: foreach (var value in GetKeys(dr).Members)              {                  string v = null;                  if (value is IConvertible)                      v = ((IConvertible)value).ToString(CultureInfo.InvariantCulture);                  else                      v = value.ToString();                    hash = (hash * 397) ^ v.GetHashCode();                }
Magic Number,NBi.Core.ResultSet,KeyCollection,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\KeyCollection.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 0;                  for (int i = 0; i < this.Members.Length; i++)                  {                      hash = hash ^ 397 * Members[i].GetHashCode();                  }                  return hash;              }
Magic Number,NBi.Core.ResultSet,ResultSet,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\ResultSet.cs,ConsoleDisplay,The following statement contains a magic number: Trace.WriteLine(string.Format(new string('-'' 30)));
Magic Number,NBi.Core.ResultSet,ResultSet,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\ResultSet.cs,ConsoleDisplay,The following statement contains a magic number: Trace.WriteLine(string.Format(new string('-'' 30)));
Magic Number,NBi.Core.ResultSet.Comparer,NumericToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\NumericToleranceFactory.cs,Instantiate,The following statement contains a magic number: if (isPercentage)                  return new NumericPercentageTolerance(tolerancePercentage / 100' side);
Magic Number,NBi.Core.ResultSet.Comparer,NumericToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\NumericToleranceFactory.cs,Instantiate,The following statement contains a magic number: if (!isDecimal && !isPercentage && !string.IsNullOrEmpty(value) && value.Contains('%'))              {                  var percentage = value.Replace(" "' "").Substring(0' value.Replace(" "' "").IndexOf('%'));                  isBoundedPercentage = decimal.TryParse(percentage' NumberStyles.Float' NumberFormatInfo.InvariantInfo' out tolerancePercentage);                  var bound = value.Replace(" "' "").Substring(value.Replace(" "' "").IndexOf('%') + 1).Replace("("' "").Replace(")"' "").Replace(":"' "").Replace("="' "");                    if (bound.Length > 3 && (bound.Substring(0' 3) == "min" || bound.Substring(0' 3) == "max"))                  {                      isBoundedPercentage = decimal.TryParse(bound.Substring(3)' NumberStyles.Float' NumberFormatInfo.InvariantInfo' out toleranceBound);                      if (bound.ToLower().Contains("min"))                          min = toleranceBound;                      if (bound.ToLower().Contains("max"))                          max = toleranceBound;                      isBoundedPercentage = (min != max);                  }                }
Magic Number,NBi.Core.ResultSet.Comparer,NumericToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\NumericToleranceFactory.cs,Instantiate,The following statement contains a magic number: if (!isDecimal && !isPercentage && !string.IsNullOrEmpty(value) && value.Contains('%'))              {                  var percentage = value.Replace(" "' "").Substring(0' value.Replace(" "' "").IndexOf('%'));                  isBoundedPercentage = decimal.TryParse(percentage' NumberStyles.Float' NumberFormatInfo.InvariantInfo' out tolerancePercentage);                  var bound = value.Replace(" "' "").Substring(value.Replace(" "' "").IndexOf('%') + 1).Replace("("' "").Replace(")"' "").Replace(":"' "").Replace("="' "");                    if (bound.Length > 3 && (bound.Substring(0' 3) == "min" || bound.Substring(0' 3) == "max"))                  {                      isBoundedPercentage = decimal.TryParse(bound.Substring(3)' NumberStyles.Float' NumberFormatInfo.InvariantInfo' out toleranceBound);                      if (bound.ToLower().Contains("min"))                          min = toleranceBound;                      if (bound.ToLower().Contains("max"))                          max = toleranceBound;                      isBoundedPercentage = (min != max);                  }                }
Magic Number,NBi.Core.ResultSet.Comparer,NumericToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\NumericToleranceFactory.cs,Instantiate,The following statement contains a magic number: if (!isDecimal && !isPercentage && !string.IsNullOrEmpty(value) && value.Contains('%'))              {                  var percentage = value.Replace(" "' "").Substring(0' value.Replace(" "' "").IndexOf('%'));                  isBoundedPercentage = decimal.TryParse(percentage' NumberStyles.Float' NumberFormatInfo.InvariantInfo' out tolerancePercentage);                  var bound = value.Replace(" "' "").Substring(value.Replace(" "' "").IndexOf('%') + 1).Replace("("' "").Replace(")"' "").Replace(":"' "").Replace("="' "");                    if (bound.Length > 3 && (bound.Substring(0' 3) == "min" || bound.Substring(0' 3) == "max"))                  {                      isBoundedPercentage = decimal.TryParse(bound.Substring(3)' NumberStyles.Float' NumberFormatInfo.InvariantInfo' out toleranceBound);                      if (bound.ToLower().Contains("min"))                          min = toleranceBound;                      if (bound.ToLower().Contains("max"))                          max = toleranceBound;                      isBoundedPercentage = (min != max);                  }                }
Magic Number,NBi.Core.ResultSet.Comparer,NumericToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\NumericToleranceFactory.cs,Instantiate,The following statement contains a magic number: if (!isDecimal && !isPercentage && !string.IsNullOrEmpty(value) && value.Contains('%'))              {                  var percentage = value.Replace(" "' "").Substring(0' value.Replace(" "' "").IndexOf('%'));                  isBoundedPercentage = decimal.TryParse(percentage' NumberStyles.Float' NumberFormatInfo.InvariantInfo' out tolerancePercentage);                  var bound = value.Replace(" "' "").Substring(value.Replace(" "' "").IndexOf('%') + 1).Replace("("' "").Replace(")"' "").Replace(":"' "").Replace("="' "");                    if (bound.Length > 3 && (bound.Substring(0' 3) == "min" || bound.Substring(0' 3) == "max"))                  {                      isBoundedPercentage = decimal.TryParse(bound.Substring(3)' NumberStyles.Float' NumberFormatInfo.InvariantInfo' out toleranceBound);                      if (bound.ToLower().Contains("min"))                          min = toleranceBound;                      if (bound.ToLower().Contains("max"))                          max = toleranceBound;                      isBoundedPercentage = (min != max);                  }                }
Magic Number,NBi.Core.ResultSet.Comparer,NumericToleranceFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\NumericToleranceFactory.cs,Instantiate,The following statement contains a magic number: if (isBoundedPercentage)                  return new NumericBoundedPercentageTolerance(tolerancePercentage / 100' min' max);
Magic Number,NBi.Core.ResultSet.Comparer,NumericPercentageTolerance,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\NumericPercentageTolerance.cs,NumericPercentageTolerance,The following statement contains a magic number: valueString = (100 * value).ToString(NumberFormatInfo.InvariantInfo);
Magic Number,NBi.Core.ResultSet.Comparer,Rounding,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\Rounding.cs,GetValue,The following statement contains a magic number: if ((Style == RoundingStyle.Ceiling && value > 0 && remainder!=0)                  || (Style == RoundingStyle.Floor && value < 0 && remainder != 0)                  || (Style == RoundingStyle.Round && remainder >= step / 2))                  remainder -= step;
Magic Number,NBi.Core.ResultSet.Equivalence,BaseEquivaler,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Equivalence\BaseEquivaler.cs,CheckSettingsFirstRowCell,The following statement contains a magic number: if (!DBNull.Value.Equals(value))              {                  if (columnRole != ColumnRole.Ignore)                  {                      if (columnType == ColumnType.Numeric && IsNumericField(dataColumn))                          return;                        var numericConverter = new NumericConverter();                      if (columnType == ColumnType.Numeric && !(numericConverter.IsValid(value) || Comparer.BaseComparer.IsValidInterval(value)))                      {                          var exception = string.Format(messages[0]                              ' columnName' value.ToString());                            if (numericConverter.IsValid(value.ToString().Replace("'"' ".")))                              exception += messages[1];                            throw new EquivalerException(exception);                      }                        if (columnType == ColumnType.DateTime && IsDateTimeField(dataColumn))                          return;                        if (columnType == ColumnType.DateTime && !Comparer.BaseComparer.IsValidDateTime(value.ToString()))                      {                          throw new EquivalerException(                              string.Format(messages[2]                                  ' columnName' value.ToString()));                      }                  }              }
Magic Number,NBi.Core.ResultSet.Uniqueness,Evaluator,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Uniqueness\Evaluator.cs,CheckSettingsFirstRowCell,The following statement contains a magic number: if (!DBNull.Value.Equals(value))              {                  if (columnRole != ColumnRole.Ignore)                  {                      if (columnType == ColumnType.Numeric && IsNumericField(dataColumn))                          return;                        var numericConverter = new NumericConverter();                      if (columnType == ColumnType.Numeric && !(numericConverter.IsValid(value) || Comparer.BaseComparer.IsValidInterval(value)))                      {                          var exception = string.Format(messages[0]                              ' columnName' value.ToString());                            if (numericConverter.IsValid(value.ToString().Replace("'"' ".")))                              exception += messages[1];                            throw new EquivalerException(exception);                      }                        if (columnType == ColumnType.DateTime && IsDateTimeField(dataColumn))                          return;                        if (columnType == ColumnType.DateTime && !Comparer.BaseComparer.IsValidDateTime(value.ToString()))                      {                          throw new EquivalerException(                              string.Format(messages[2]                                  ' columnName' value.ToString()));                      }                  }              }
Magic Number,NBi.Core.ResultSet.Interval,DateTimeIntervalBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Interval\DateTimeIntervalBuilder.cs,BuildClassic,The following statement contains a magic number: if (split.Count() > 2)              {                  ex = new ArgumentException("The interval definition must contain only one delimitor ';'");              }
Magic Number,NBi.Core.ResultSet.Interval,NumericIntervalBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Interval\NumericIntervalBuilder.cs,BuildClassic,The following statement contains a magic number: if (split.Count() > 2)  			{  				ex = new ArgumentException("The interval definition must contain only one delimitor ';'");  			}
Magic Number,NBi.Core.ResultSet.Interval,NumericIntervalBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Interval\NumericIntervalBuilder.cs,BuildGeneric,The following statement contains a magic number: value = value.Substring(1' value.Length - 2);
Magic Number,NBi.Core.ResultSet.Interval,NumericIntervalBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Interval\NumericIntervalBuilder.cs,BuildGeneric,The following statement contains a magic number: if (double.TryParse(value.Substring(1' value.Length - 1)' NumberStyles.Number' CultureInfo.InvariantCulture.NumberFormat' out d))  			{  				switch (value.Substring(0'1))  				{  					case ">":  						return new NumericInterval(new LeftEndPointOpen<double>(d)' new RightEndPointPositiveInfinity());  					case "<":  						return new NumericInterval(new LeftEndPointNegativeInfinity()' new RightEndPointOpen<double>(d));  				}  			}  			else if (double.TryParse(value.Substring(2' value.Length - 2)' out d))  			{  				switch (value.Substring(0'2))  				{  					case ">=":  						return new NumericInterval(new LeftEndPointClosed<double>(d)' new RightEndPointPositiveInfinity());  					case "<=":  						return new NumericInterval(new LeftEndPointNegativeInfinity()' new RightEndPointClosed<double>(d));  				}  			}
Magic Number,NBi.Core.ResultSet.Interval,NumericIntervalBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Interval\NumericIntervalBuilder.cs,BuildGeneric,The following statement contains a magic number: if (double.TryParse(value.Substring(1' value.Length - 1)' NumberStyles.Number' CultureInfo.InvariantCulture.NumberFormat' out d))  			{  				switch (value.Substring(0'1))  				{  					case ">":  						return new NumericInterval(new LeftEndPointOpen<double>(d)' new RightEndPointPositiveInfinity());  					case "<":  						return new NumericInterval(new LeftEndPointNegativeInfinity()' new RightEndPointOpen<double>(d));  				}  			}  			else if (double.TryParse(value.Substring(2' value.Length - 2)' out d))  			{  				switch (value.Substring(0'2))  				{  					case ">=":  						return new NumericInterval(new LeftEndPointClosed<double>(d)' new RightEndPointPositiveInfinity());  					case "<=":  						return new NumericInterval(new LeftEndPointNegativeInfinity()' new RightEndPointClosed<double>(d));  				}  			}
Magic Number,NBi.Core.ResultSet.Interval,NumericIntervalBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Interval\NumericIntervalBuilder.cs,BuildGeneric,The following statement contains a magic number: if (double.TryParse(value.Substring(1' value.Length - 1)' NumberStyles.Number' CultureInfo.InvariantCulture.NumberFormat' out d))  			{  				switch (value.Substring(0'1))  				{  					case ">":  						return new NumericInterval(new LeftEndPointOpen<double>(d)' new RightEndPointPositiveInfinity());  					case "<":  						return new NumericInterval(new LeftEndPointNegativeInfinity()' new RightEndPointOpen<double>(d));  				}  			}  			else if (double.TryParse(value.Substring(2' value.Length - 2)' out d))  			{  				switch (value.Substring(0'2))  				{  					case ">=":  						return new NumericInterval(new LeftEndPointClosed<double>(d)' new RightEndPointPositiveInfinity());  					case "<=":  						return new NumericInterval(new LeftEndPointNegativeInfinity()' new RightEndPointClosed<double>(d));  				}  			}
Magic Number,NBi.Core.Scalar,PercentageConverter,C:\repos\Seddryck_nbi\NBi.Core\Scalar\PercentageConverter.cs,ConvertFrom,The following statement contains a magic number: if (value is string)              {                  string s = value as string;                  s = s.TrimEnd(' '' '\t'' '\r'' '\n');                    var percentage = s.EndsWith(culture.NumberFormat.PercentSymbol);                  if (percentage)                      s = s.Substring(0' s.Length - culture.NumberFormat.PercentSymbol.Length);                    double result = (double)conv.ConvertFromString(context' culture' s);                  if (percentage)                      result /= 100;                    return new Percentage(result);              }
Magic Number,NBi.Core.Scalar,PercentageConverter,C:\repos\Seddryck_nbi\NBi.Core\Scalar\PercentageConverter.cs,ConvertTo,The following statement contains a magic number: if (destinationType == typeof(string))              {                  return conv.ConvertTo(context' culture' pct.Value * 100' destinationType) + culture.NumberFormat.PercentSymbol;              }
Magic Number,NBi.Core.Structure,StructureDiscoveryFactoryProvider,C:\repos\Seddryck_nbi\NBi.Core\Structure\StructureDiscoveryFactoryProvider.cs,ParseXmlaResponse,The following statement contains a magic number: if (serverModeNode == null)              {                  Trace.WriteLineIf(NBiTraceSwitch.TraceVerbose' "Trying to detect the server mode for SSAS but the server doesn't return this information. Trying to get it from version.");                  var versionNode = root.SelectSingleNode("//default:Version"' nm);                  if (versionNode != null)                  {                      var splitVersion = versionNode.InnerText.Split('.');                      short releaseVersion = 0;                      if (splitVersion.Count() >= 1)                          if (short.TryParse(splitVersion[0]' out releaseVersion))                              if (releaseVersion < 11)                                  return "Multidimensional";                      throw new ArgumentException(string.Format("Unable to locate the node for 'ServerMode' and can't guess based on node 'Version'. Value returned for version is '{0}'. Use AdomdClient 12.0 or higher."' versionNode.InnerText));                          }                  throw new ArgumentException("Unable to locate the node for 'ServerMode' or the node for 'Version'. Use AdomdClient 12.0 or higher.");              }
Magic Number,NBi.Core.Structure.Olap,DimensionRelationCommand,C:\repos\Seddryck_nbi\NBi.Core\Structure\Olap\DimensionRelationCommand.cs,BuildRow,The following statement contains a magic number: row.Caption = rdr.GetString(0).Substring(1' rdr.GetString(0).Length - 2);
Magic Number,NBi.Core.Structure.Olap,DimensionCommand,C:\repos\Seddryck_nbi\NBi.Core\Structure\Olap\DimensionCommand.cs,BuildRow,The following statement contains a magic number: row.DimensionType = rdr.GetInt16(2);
Magic Number,NBi.Core.Structure.Olap.PostFilters,DimensionType,C:\repos\Seddryck_nbi\NBi.Core\Structure\Olap\PostFilters\DimensionType.cs,Evaluate,The following statement contains a magic number: return !row.DimensionType.Equals(2);
Missing Default,NBi.Core.DataType,DataTypeDiscoveryFactoryProvider,C:\repos\Seddryck_nbi\NBi.Core\DataType\DataTypeDiscoveryFactoryProvider.cs,InquireFurtherAnalysisService,The following switch statement is missing a default case: switch (parsedMode)                  {                      case "Default": return Olap;                      case "Multidimensional": return Olap;                      case "SharePoint": return Tabular;                      case "Tabular": return Tabular;                  }
Missing Default,NBi.Core.Members.Ranges,PatternDecoratorBuilder,C:\repos\Seddryck_nbi\NBi.Core\Members\Ranges\PatternDecoratorBuilder.cs,ApplyPattern,The following switch statement is missing a default case: switch (position)  			{  				case PositionValue.Suffix:   					patternizer = ApplyPatternAsSuffix;  					break;  				case PositionValue.Prefix:   					patternizer = ApplyPatternAsPrefix;  					break;  			}
Missing Default,NBi.Core.ResultSet,SettingsIndexResultSet,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\SettingsIndexResultSet.cs,IsKey,The following switch statement is missing a default case: switch (KeysDef)              {                  case KeysChoice.First:                      return index == 0;                  case KeysChoice.AllExpectLast:                      return index != GetLastColumnIndex();                  case KeysChoice.All:                      return true;              }
Missing Default,NBi.Core.ResultSet,SettingsIndexResultSet,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\SettingsIndexResultSet.cs,IsValue,The following switch statement is missing a default case: switch (KeysDef)              {                  case KeysChoice.First:                      if (index == 0) return false;                      break;                  case KeysChoice.AllExpectLast:                      if (index != GetLastColumnIndex()) return false;                      break;                  case KeysChoice.All:                      return false;              }
Missing Default,NBi.Core.ResultSet,SettingsIndexResultSet,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\SettingsIndexResultSet.cs,IsValue,The following switch statement is missing a default case: switch (ValuesDef)              {                  case ValuesChoice.AllExpectFirst:                      return index != 0;                  case ValuesChoice.Last:                      return index == GetLastColumnIndex();                  case ValuesChoice.None:                      return false;              }
Missing Default,NBi.Core.ResultSet.Comparer,ComparerFactory,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Comparer\ComparerFactory.cs,Get,The following switch statement is missing a default case: switch (type)              {                  case ColumnType.Text:                      return new TextComparer();                  case ColumnType.Numeric:                      return new NumericComparer();                  case ColumnType.DateTime:                      return new DateTimeComparer();                  case ColumnType.Boolean:                      return new BooleanComparer();              }
Missing Default,NBi.Core.ResultSet.Converter,BooleanConverter,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Converter\BooleanConverter.cs,ThreeStateToString,The following switch statement is missing a default case: switch (ts)              {                  case ThreeStateBoolean.False:                      return "false";                  case ThreeStateBoolean.True:                      return "true";              }
Missing Default,NBi.Core.ResultSet.Interval,NumericIntervalBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Interval\NumericIntervalBuilder.cs,BuildGeneric,The following switch statement is missing a default case: switch (value)  			{  				case "positive":  				case "0+":  					return new NumericInterval(new LeftEndPointClosed<double>(0)' new RightEndPointPositiveInfinity());  				case "negative":  				case "-0":  					return new NumericInterval(new LeftEndPointNegativeInfinity()' new RightEndPointClosed<double>(0));  				case "absolutely-positive":   				case "+":   					return new NumericInterval(new LeftEndPointOpen<double>(0)' new RightEndPointPositiveInfinity());  				case "absolutely-negative":   				case "-":   					return new NumericInterval(new LeftEndPointNegativeInfinity()' new RightEndPointOpen<double>(0));  			}
Missing Default,NBi.Core.ResultSet.Interval,NumericIntervalBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Interval\NumericIntervalBuilder.cs,BuildGeneric,The following switch statement is missing a default case: switch (value.Substring(0'1))  				{  					case ">":  						return new NumericInterval(new LeftEndPointOpen<double>(d)' new RightEndPointPositiveInfinity());  					case "<":  						return new NumericInterval(new LeftEndPointNegativeInfinity()' new RightEndPointOpen<double>(d));  				}
Missing Default,NBi.Core.ResultSet.Interval,NumericIntervalBuilder,C:\repos\Seddryck_nbi\NBi.Core\ResultSet\Interval\NumericIntervalBuilder.cs,BuildGeneric,The following switch statement is missing a default case: switch (value.Substring(0'2))  				{  					case ">=":  						return new NumericInterval(new LeftEndPointClosed<double>(d)' new RightEndPointPositiveInfinity());  					case "<=":  						return new NumericInterval(new LeftEndPointNegativeInfinity()' new RightEndPointClosed<double>(d));  				}
Missing Default,NBi.Core.Structure,StructureDiscoveryFactoryProvider,C:\repos\Seddryck_nbi\NBi.Core\Structure\StructureDiscoveryFactoryProvider.cs,InquireFurtherAnalysisService,The following switch statement is missing a default case: switch (parsedMode)                  {                      case "Default": return Olap;                      case "Multidimensional": return Olap;                      case "SharePoint": return Tabular;                      case "Tabular": return Tabular;                  }
