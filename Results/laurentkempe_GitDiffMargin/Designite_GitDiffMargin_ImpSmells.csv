Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GitDiffMargin,GitDiffMarginCommandHandler,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,QueryCommandStatus,Cyclomatic complexity of the method is 13
Complex Method,GitDiffMargin,GitDiffMarginCommandHandler,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,HandlePreExec,Cyclomatic complexity of the method is 16
Complex Method,GitDiffMargin,EditorDiffMargin,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\EditorDiffMargin.cs,UpdateNormalDiffDimensions,Cyclomatic complexity of the method is 21
Complex Method,GitDiffMargin,EditorDiffMargin,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\EditorDiffMargin.cs,UpdateDeletedDiffDimensions,Cyclomatic complexity of the method is 12
Complex Method,GitDiffMargin.Git,GitCommands,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,GetGitDiffFor,Cyclomatic complexity of the method is 21
Complex Method,GitDiffMargin.Git,GitCommands,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,Cyclomatic complexity of the method is 9
Long Parameter List,GitDiffMargin.Core,DiffUpdateBackgroundParser,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Core\DiffUpdateBackgroundParser.cs,DiffUpdateBackgroundParser,The method has 5 parameters.
Long Parameter List,GitDiffMargin.Core,MarginCore,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Core\MarginCore.cs,MarginCore,The method has 5 parameters.
Long Parameter List,GitDiffMargin,GitDiffMarginCommandHandler,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,HandlePreExec,The method has 5 parameters.
Long Identifier,GitDiffMargin.Core,MarginCore,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Core\MarginCore.cs,MarginCore,The length of the parameter classificationFormatMapService is 30.
Long Statement,GitDiffMargin.Core,MarginCore,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Core\MarginCore.cs,HandleFormatMappingChanged,The length of the statement  "	if (e.ChangedItems.Contains (DiffFormatNames.Addition) || e.ChangedItems.Contains (DiffFormatNames.Modification) || e.ChangedItems.Contains (DiffFormatNames.Removed)) { " is 168.
Long Statement,GitDiffMargin.Core,MarginCore,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Core\MarginCore.cs,RollBack,The length of the statement  "			var endLine = snapshot.GetLineFromLineNumber (hunkRangeInfo.NewHunkRange.StartingLineNumber + hunkRangeInfo.NewHunkRange.NumberOfLines - 1); " is 140.
Long Statement,GitDiffMargin.Core,MarginCore,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Core\MarginCore.cs,RollBack,The length of the statement  "			var endLine = snapshot.GetLineFromLineNumber (hunkRangeInfo.NewHunkRange.StartingLineNumber + hunkRangeInfo.NewHunkRange.NumberOfLines - 1); " is 140.
Long Statement,GitDiffMargin,GitDiffMarginCommandHandler,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,QueryCommandStatus,The length of the statement  "			EditorDiffViewModel diffViewModel = viewModel.DiffViewModels.OfType<EditorDiffViewModel> ().FirstOrDefault (i => i.ShowPopup); " is 126.
Long Statement,GitDiffMargin,GitDiffMarginCommandHandler,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,QueryCommandStatus,The length of the statement  "				RelayCommand<DiffViewModel> command = (GitDiffMarginCommand)commandId == GitDiffMarginCommand.NextChange ? viewModel.NextChangeCommand : viewModel.PreviousChangeCommand; " is 169.
Long Statement,GitDiffMargin,GitDiffMarginCommandHandler,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,QueryCommandStatus,The length of the statement  "			EditorDiffViewModel diffViewModel = viewModel.DiffViewModels.OfType<EditorDiffViewModel> ().FirstOrDefault (i => i.ShowPopup); " is 126.
Long Statement,GitDiffMargin,GitDiffMarginCommandHandler,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,QueryCommandStatus,The length of the statement  "				ICommand command = (GitDiffMarginCommand)commandId == GitDiffMarginCommand.RollbackChange ? diffViewModel.RollbackCommand : diffViewModel.CopyOldTextCommand; " is 157.
Long Statement,GitDiffMargin,GitDiffMarginCommandHandler,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,HandlePreExec,The length of the statement  "			RelayCommand<DiffViewModel> command = (GitDiffMarginCommand)commandId == GitDiffMarginCommand.NextChange ? viewModel.NextChangeCommand : viewModel.PreviousChangeCommand; " is 169.
Long Statement,GitDiffMargin,GitDiffMarginCommandHandler,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,HandlePreExec,The length of the statement  "			ICommand command = (GitDiffMarginCommand)commandId == GitDiffMarginCommand.RollbackChange ? diffViewModel.RollbackCommand : diffViewModel.CopyOldTextCommand; " is 157.
Long Statement,GitDiffMargin,GitDiffMarginCommandHandler,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,GetDiffViewModelToMoveTo,The length of the statement  "	return (GitDiffMarginCommand)commandId == GitDiffMarginCommand.NextChange ? viewModel.DiffViewModels.OfType<EditorDiffViewModel> ().FirstOrDefault (model => model.LineNumber > lineNumber) : viewModel.DiffViewModels.OfType<EditorDiffViewModel> ().LastOrDefault (model => model.LineNumber < lineNumber); " is 301.
Long Statement,GitDiffMargin,GitDiffMarginTextViewCreationListener,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginTextViewCreationListener.cs,VsTextViewCreated,The length of the statement  "	GitDiffMarginCommandHandler filter = new GitDiffMarginCommandHandler (textViewAdapter' _editorAdaptersFactoryService' textView); " is 128.
Long Statement,GitDiffMargin,EditorDiffMargin,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\EditorDiffMargin.cs,UpdateNormalDiffDimensions,The length of the statement  "	if (startLineNumber < 0 || startLineNumber >= snapshot.LineCount || endLineNumber < 0 || endLineNumber >= snapshot.LineCount) { " is 127.
Long Statement,GitDiffMargin,DiffMarginFactoryBase,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\DiffMarginFactoryBase.cs,TryGetMarginCore,The length of the statement  "	return textViewHost.TextView.Properties.GetOrCreateSingletonProperty (() => new MarginCore (textViewHost.TextView' TextDocumentFactoryService' ClassificationFormatMapService' EditorFormatMapService' GitCommands)); " is 213.
Long Statement,GitDiffMargin,ScrollDiffMargin,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\ScrollDiffMargin.cs,UpdateDiffDimensions,The length of the statement  "	if (startLineNumber < 0 || startLineNumber >= snapshot.LineCount || endLineNumber < 0 || endLineNumber >= snapshot.LineCount) { " is 127.
Long Statement,GitDiffMargin.Git,GitCommands,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The length of the statement  "		IVsDifferenceService differenceService = _serviceProvider.GetService (typeof(SVsDifferenceService)) as IVsDifferenceService; " is 124.
Long Statement,GitDiffMargin.Git,GitCommands,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The length of the statement  "		differenceService.OpenComparisonWindow2 (leftFileMoniker' rightFileMoniker' caption' tooltip' leftLabel' rightLabel' inlineLabel' roles' (uint)grfDiffOptions); " is 159.
Long Statement,GitDiffMargin.Git,GitDiffParser,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitDiffParser.cs,Parse,The length of the statement  "	select new HunkRangeInfo (new HunkRange (GetHunkOriginalFile (hunkLine.Item1)' _contextLines)' new HunkRange (GetHunkNewFile (hunkLine.Item1)' _contextLines)' hunkLine.Item2' _suppressRollback); " is 194.
Long Statement,GitDiffMargin.Git,GitDiffParser,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitDiffParser.cs,GetUnifiedFormatHunkLines,The length of the statement  "	return splitHunks.Any () ? splitHunks.Select (splitHunk => new Tuple<string' IEnumerable<string>> (splitHunk [0]' splitHunk.Skip (1).TakeWhile ((s' i) => i < splitHunk.Count))) : Enumerable.Empty<Tuple<string' IEnumerable<string>>> (); " is 235.
Long Statement,GitDiffMargin.ViewModel,EditorDiffViewModel,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\ViewModel\EditorDiffViewModel.cs,GetDiffText,The length of the statement  "		return HunkRangeInfo.IsModification || HunkRangeInfo.IsDeletion ? String.Join (Environment.NewLine' HunkRangeInfo.OriginalText) : string.Empty; " is 143.
Complex Conditional,GitDiffMargin,EditorDiffMargin,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\EditorDiffMargin.cs,UpdateNormalDiffDimensions,The conditional expression  "startLineNumber < 0 || startLineNumber >= snapshot.LineCount || endLineNumber < 0 || endLineNumber >= snapshot.LineCount"  is complex.
Complex Conditional,GitDiffMargin,ScrollDiffMargin,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\ScrollDiffMargin.cs,UpdateDiffDimensions,The conditional expression  "startLineNumber < 0 || startLineNumber >= snapshot.LineCount || endLineNumber < 0 || endLineNumber >= snapshot.LineCount"  is complex.
Magic Number,GitDiffMargin.Core,BackgroundParser,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Core\BackgroundParser.cs,BackgroundParser,The following statement contains a magic number: _reparseDelay = TimeSpan.FromMilliseconds (1500);  
Magic Number,GitDiffMargin.Core,DiffUpdateBackgroundParser,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Core\DiffUpdateBackgroundParser.cs,DiffUpdateBackgroundParser,The following statement contains a magic number: ReparseDelay = TimeSpan.FromMilliseconds (500);  
Magic Number,GitDiffMargin,EditorDiffMargin,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\EditorDiffMargin.cs,UpdateDeletedDiffDimensions,The following statement contains a magic number: diffViewModel.Top = center - (height / 2.0);  
Magic Number,GitDiffMargin,ScrollDiffMargin,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\ScrollDiffMargin.cs,UpdateDiffDimensions,The following statement contains a magic number: diffViewModel.Top = Math.Round (_scrollBar.GetYCoordinateOfScrollMapPosition (mapTop)) - 2.0;  
Magic Number,GitDiffMargin,ScrollDiffMargin,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\ScrollDiffMargin.cs,UpdateDiffDimensions,The following statement contains a magic number: diffViewModel.Height = Math.Round (_scrollBar.GetYCoordinateOfScrollMapPosition (mapBottom)) - diffViewModel.Top + 2.0;  
Magic Number,GitDiffMargin,ScrollDiffMarginFactory2012,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\ScrollDiffMarginFactory2012.cs,CreateMargin,The following statement contains a magic number: if (typeof(ErrorHandler).Assembly.GetName ().Version.Major >= 12)  	return null;  
Magic Number,GitDiffMargin,ScrollDiffMarginFactory2013,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\ScrollDiffMarginFactory2013.cs,CreateMargin,The following statement contains a magic number: if (typeof(ErrorHandler).Assembly.GetName ().Version.Major < 12)  	return null;  
Magic Number,GitDiffMargin.Settings,DiffAdditionEditorFormatDefinition,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffAdditionEditorFormatDefinition.cs,DiffAdditionEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb (180' 255' 180);  
Magic Number,GitDiffMargin.Settings,DiffAdditionEditorFormatDefinition,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffAdditionEditorFormatDefinition.cs,DiffAdditionEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb (180' 255' 180);  
Magic Number,GitDiffMargin.Settings,DiffAdditionEditorFormatDefinition,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffAdditionEditorFormatDefinition.cs,DiffAdditionEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb (180' 255' 180);  
Magic Number,GitDiffMargin.Settings,DiffModificationEditorFormatDefinition,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffModificationEditorFormatDefinition.cs,DiffModificationEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb (160' 200' 255);  
Magic Number,GitDiffMargin.Settings,DiffModificationEditorFormatDefinition,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffModificationEditorFormatDefinition.cs,DiffModificationEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb (160' 200' 255);  
Magic Number,GitDiffMargin.Settings,DiffModificationEditorFormatDefinition,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffModificationEditorFormatDefinition.cs,DiffModificationEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb (160' 200' 255);  
Magic Number,GitDiffMargin.Settings,DiffRemovedEditorFormatDefinition,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffRemovedEditorFormatDefinition.cs,DiffRemovedEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb (255' 160' 180);  
Magic Number,GitDiffMargin.Settings,DiffRemovedEditorFormatDefinition,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffRemovedEditorFormatDefinition.cs,DiffRemovedEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb (255' 160' 180);  
Magic Number,GitDiffMargin.Settings,DiffRemovedEditorFormatDefinition,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffRemovedEditorFormatDefinition.cs,DiffRemovedEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb (255' 160' 180);  
Magic Number,GitDiffMargin.Git,GitCommands,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The following statement contains a magic number: using (var repo = new Repository (repositoryPath)) {  	string workingDirectory = repo.Info.WorkingDirectory;  	string relativePath = Path.GetFullPath (filename);  	if (relativePath.StartsWith (workingDirectory' StringComparison.OrdinalIgnoreCase))  		relativePath = relativePath.Substring (workingDirectory.Length);  	// the name of the object in the database  	string objectName = Path.GetFileName (filename);  	Blob oldBlob = null;  	var indexEntry = repo.Index [relativePath];  	if (indexEntry != null) {  		objectName = Path.GetFileName (indexEntry.Path);  		oldBlob = repo.Lookup<Blob> (indexEntry.Id);  	}  	var tempFileName = Path.GetTempFileName ();  	if (oldBlob != null)  		File.WriteAllText (tempFileName' oldBlob.GetContentText (new FilteringOptions (relativePath)));  	IVsDifferenceService differenceService = _serviceProvider.GetService (typeof(SVsDifferenceService)) as IVsDifferenceService;  	string leftFileMoniker = tempFileName;  	// The difference service will automatically load the text from the file open in the editor' even if  	// it has changed.  	string rightFileMoniker = filename;  	string actualFilename = objectName;  	string tempPrefix = Path.GetRandomFileName ().Substring (0' 5);  	string caption = string.Format ("{0}_{1} vs. {1}"' tempPrefix' actualFilename);  	string tooltip = null;  	string leftLabel;  	if (indexEntry != null) {  		// determine if the file has been staged  		string revision;  		var stagedMask = FileStatus.NewInIndex | FileStatus.ModifiedInIndex;  		if ((repo.RetrieveStatus (relativePath) & stagedMask) != 0)  			revision = "index";  		else  			revision = repo.Head.Tip.Sha.Substring (0' 7);  		leftLabel = string.Format ("{0}@{1}"' objectName' revision);  	} else if (oldBlob != null) {  		// file was added  		leftLabel = null;  	} else {  		// we just compared to head  		leftLabel = string.Format ("{0}@{1}"' objectName' repo.Head.Tip.Sha.Substring (0' 7));  	}  	string rightLabel = filename;  	string inlineLabel = null;  	string roles = null;  	__VSDIFFSERVICEOPTIONS grfDiffOptions = __VSDIFFSERVICEOPTIONS.VSDIFFOPT_LeftFileIsTemporary;  	differenceService.OpenComparisonWindow2 (leftFileMoniker' rightFileMoniker' caption' tooltip' leftLabel' rightLabel' inlineLabel' roles' (uint)grfDiffOptions);  	// Since the file is marked as temporary' we can delete it now  	File.Delete (tempFileName);  }  
Magic Number,GitDiffMargin.Git,GitCommands,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The following statement contains a magic number: using (var repo = new Repository (repositoryPath)) {  	string workingDirectory = repo.Info.WorkingDirectory;  	string relativePath = Path.GetFullPath (filename);  	if (relativePath.StartsWith (workingDirectory' StringComparison.OrdinalIgnoreCase))  		relativePath = relativePath.Substring (workingDirectory.Length);  	// the name of the object in the database  	string objectName = Path.GetFileName (filename);  	Blob oldBlob = null;  	var indexEntry = repo.Index [relativePath];  	if (indexEntry != null) {  		objectName = Path.GetFileName (indexEntry.Path);  		oldBlob = repo.Lookup<Blob> (indexEntry.Id);  	}  	var tempFileName = Path.GetTempFileName ();  	if (oldBlob != null)  		File.WriteAllText (tempFileName' oldBlob.GetContentText (new FilteringOptions (relativePath)));  	IVsDifferenceService differenceService = _serviceProvider.GetService (typeof(SVsDifferenceService)) as IVsDifferenceService;  	string leftFileMoniker = tempFileName;  	// The difference service will automatically load the text from the file open in the editor' even if  	// it has changed.  	string rightFileMoniker = filename;  	string actualFilename = objectName;  	string tempPrefix = Path.GetRandomFileName ().Substring (0' 5);  	string caption = string.Format ("{0}_{1} vs. {1}"' tempPrefix' actualFilename);  	string tooltip = null;  	string leftLabel;  	if (indexEntry != null) {  		// determine if the file has been staged  		string revision;  		var stagedMask = FileStatus.NewInIndex | FileStatus.ModifiedInIndex;  		if ((repo.RetrieveStatus (relativePath) & stagedMask) != 0)  			revision = "index";  		else  			revision = repo.Head.Tip.Sha.Substring (0' 7);  		leftLabel = string.Format ("{0}@{1}"' objectName' revision);  	} else if (oldBlob != null) {  		// file was added  		leftLabel = null;  	} else {  		// we just compared to head  		leftLabel = string.Format ("{0}@{1}"' objectName' repo.Head.Tip.Sha.Substring (0' 7));  	}  	string rightLabel = filename;  	string inlineLabel = null;  	string roles = null;  	__VSDIFFSERVICEOPTIONS grfDiffOptions = __VSDIFFSERVICEOPTIONS.VSDIFFOPT_LeftFileIsTemporary;  	differenceService.OpenComparisonWindow2 (leftFileMoniker' rightFileMoniker' caption' tooltip' leftLabel' rightLabel' inlineLabel' roles' (uint)grfDiffOptions);  	// Since the file is marked as temporary' we can delete it now  	File.Delete (tempFileName);  }  
Magic Number,GitDiffMargin.Git,GitCommands,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The following statement contains a magic number: using (var repo = new Repository (repositoryPath)) {  	string workingDirectory = repo.Info.WorkingDirectory;  	string relativePath = Path.GetFullPath (filename);  	if (relativePath.StartsWith (workingDirectory' StringComparison.OrdinalIgnoreCase))  		relativePath = relativePath.Substring (workingDirectory.Length);  	// the name of the object in the database  	string objectName = Path.GetFileName (filename);  	Blob oldBlob = null;  	var indexEntry = repo.Index [relativePath];  	if (indexEntry != null) {  		objectName = Path.GetFileName (indexEntry.Path);  		oldBlob = repo.Lookup<Blob> (indexEntry.Id);  	}  	var tempFileName = Path.GetTempFileName ();  	if (oldBlob != null)  		File.WriteAllText (tempFileName' oldBlob.GetContentText (new FilteringOptions (relativePath)));  	IVsDifferenceService differenceService = _serviceProvider.GetService (typeof(SVsDifferenceService)) as IVsDifferenceService;  	string leftFileMoniker = tempFileName;  	// The difference service will automatically load the text from the file open in the editor' even if  	// it has changed.  	string rightFileMoniker = filename;  	string actualFilename = objectName;  	string tempPrefix = Path.GetRandomFileName ().Substring (0' 5);  	string caption = string.Format ("{0}_{1} vs. {1}"' tempPrefix' actualFilename);  	string tooltip = null;  	string leftLabel;  	if (indexEntry != null) {  		// determine if the file has been staged  		string revision;  		var stagedMask = FileStatus.NewInIndex | FileStatus.ModifiedInIndex;  		if ((repo.RetrieveStatus (relativePath) & stagedMask) != 0)  			revision = "index";  		else  			revision = repo.Head.Tip.Sha.Substring (0' 7);  		leftLabel = string.Format ("{0}@{1}"' objectName' revision);  	} else if (oldBlob != null) {  		// file was added  		leftLabel = null;  	} else {  		// we just compared to head  		leftLabel = string.Format ("{0}@{1}"' objectName' repo.Head.Tip.Sha.Substring (0' 7));  	}  	string rightLabel = filename;  	string inlineLabel = null;  	string roles = null;  	__VSDIFFSERVICEOPTIONS grfDiffOptions = __VSDIFFSERVICEOPTIONS.VSDIFFOPT_LeftFileIsTemporary;  	differenceService.OpenComparisonWindow2 (leftFileMoniker' rightFileMoniker' caption' tooltip' leftLabel' rightLabel' inlineLabel' roles' (uint)grfDiffOptions);  	// Since the file is marked as temporary' we can delete it now  	File.Delete (tempFileName);  }  
Magic Number,GitDiffMargin.Git,GitCommands,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The following statement contains a magic number: if (indexEntry != null) {  	// determine if the file has been staged  	string revision;  	var stagedMask = FileStatus.NewInIndex | FileStatus.ModifiedInIndex;  	if ((repo.RetrieveStatus (relativePath) & stagedMask) != 0)  		revision = "index";  	else  		revision = repo.Head.Tip.Sha.Substring (0' 7);  	leftLabel = string.Format ("{0}@{1}"' objectName' revision);  } else if (oldBlob != null) {  	// file was added  	leftLabel = null;  } else {  	// we just compared to head  	leftLabel = string.Format ("{0}@{1}"' objectName' repo.Head.Tip.Sha.Substring (0' 7));  }  
Magic Number,GitDiffMargin.Git,GitCommands,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The following statement contains a magic number: if (indexEntry != null) {  	// determine if the file has been staged  	string revision;  	var stagedMask = FileStatus.NewInIndex | FileStatus.ModifiedInIndex;  	if ((repo.RetrieveStatus (relativePath) & stagedMask) != 0)  		revision = "index";  	else  		revision = repo.Head.Tip.Sha.Substring (0' 7);  	leftLabel = string.Format ("{0}@{1}"' objectName' revision);  } else if (oldBlob != null) {  	// file was added  	leftLabel = null;  } else {  	// we just compared to head  	leftLabel = string.Format ("{0}@{1}"' objectName' repo.Head.Tip.Sha.Substring (0' 7));  }  
Magic Number,GitDiffMargin.Git,GitCommands,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The following statement contains a magic number: if ((repo.RetrieveStatus (relativePath) & stagedMask) != 0)  	revision = "index";  else  	revision = repo.Head.Tip.Sha.Substring (0' 7);  
Magic Number,GitDiffMargin.Git,GitCommands,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The following statement contains a magic number: revision = repo.Head.Tip.Sha.Substring (0' 7);  
Magic Number,GitDiffMargin.Git,GitCommands,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The following statement contains a magic number: if (oldBlob != null) {  	// file was added  	leftLabel = null;  } else {  	// we just compared to head  	leftLabel = string.Format ("{0}@{1}"' objectName' repo.Head.Tip.Sha.Substring (0' 7));  }  
Magic Number,GitDiffMargin.Git,GitCommands,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The following statement contains a magic number: leftLabel = string.Format ("{0}@{1}"' objectName' repo.Head.Tip.Sha.Substring (0' 7));  
Magic Number,GitDiffMargin.Git,HunkRange,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\HunkRange.cs,HunkRange,The following statement contains a magic number: if (hunkRange.Contains ("'")) {  	var hunkParts = hunkRange.Split (''');  	StartingLineNumber = int.Parse (hunkParts [0]) - 1 + contextLines;  	NumberOfLines = int.Parse (hunkParts [1]) - (2 * contextLines);  } else {  	StartingLineNumber = int.Parse (hunkRange) - 1 + contextLines;  	NumberOfLines = 1;  }  
Magic Number,GitDiffMargin.Git,HunkRange,F:\newReposMay17\laurentkempe_GitDiffMargin\GitDiffMargin\Git\HunkRange.cs,HunkRange,The following statement contains a magic number: NumberOfLines = int.Parse (hunkParts [1]) - (2 * contextLines);  
