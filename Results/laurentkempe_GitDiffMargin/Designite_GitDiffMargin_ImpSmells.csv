Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GitDiffMargin,EditorDiffMargin,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\EditorDiffMargin.cs,UpdateNormalDiffDimensions,Cyclomatic complexity of the method is 10
Complex Method,GitDiffMargin,EditorDiffMargin,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\EditorDiffMargin.cs,UpdateDeletedDiffDimensions,Cyclomatic complexity of the method is 9
Complex Method,GitDiffMargin.Git,GitCommands,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,AdjustPath,Cyclomatic complexity of the method is 14
Long Parameter List,GitDiffMargin.Core,DiffUpdateBackgroundParser,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Core\DiffUpdateBackgroundParser.cs,DiffUpdateBackgroundParser,The method has 6 parameters. Parameters: textBuffer' documentBuffer' originalPath' taskScheduler' textDocumentFactoryService' commands
Long Parameter List,GitDiffMargin.Core,MarginCore,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Core\MarginCore.cs,MarginCore,The method has 6 parameters. Parameters: textView' originalPath' textDocumentFactoryService' classificationFormatMapService' editorFormatMapService' gitCommands
Long Parameter List,GitDiffMargin,GitDiffMarginCommandHandler,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,HandlePreExec,The method has 5 parameters. Parameters: commandGroup' commandId' executionOptions' pvaIn' pvaOut
Long Identifier,GitDiffMargin.Core,MarginCore,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Core\MarginCore.cs,MarginCore,The length of the parameter classificationFormatMapService is 30.
Long Statement,GitDiffMargin.Core,MarginCore,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Core\MarginCore.cs,RollBack,The length of the statement  "                    var endLine = snapshot.GetLineFromLineNumber(hunkRangeInfo.NewHunkRange.StartingLineNumber + hunkRangeInfo.NewHunkRange.NumberOfLines - 1); " is 139.
Long Statement,GitDiffMargin.Core,MarginCore,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Core\MarginCore.cs,RollBack,The length of the statement  "                    var endLine = snapshot.GetLineFromLineNumber(hunkRangeInfo.NewHunkRange.StartingLineNumber + hunkRangeInfo.NewHunkRange.NumberOfLines - 1); " is 139.
Long Statement,GitDiffMargin,GitDiffMarginCommandHandler,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,QueryCommandStatus,The length of the statement  "                        EditorDiffViewModel diffViewModel = viewModel.DiffViewModels.OfType<EditorDiffViewModel>().FirstOrDefault(i => i.ShowPopup); " is 124.
Long Statement,GitDiffMargin,GitDiffMarginCommandHandler,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,QueryCommandStatus,The length of the statement  "                            RelayCommand<DiffViewModel> command = (GitDiffMarginCommand)commandId == GitDiffMarginCommand.NextChange ? viewModel.NextChangeCommand : viewModel.PreviousChangeCommand; " is 169.
Long Statement,GitDiffMargin,GitDiffMarginCommandHandler,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,QueryCommandStatus,The length of the statement  "                        EditorDiffViewModel diffViewModel = viewModel.DiffViewModels.OfType<EditorDiffViewModel>().FirstOrDefault(i => i.ShowPopup); " is 124.
Long Statement,GitDiffMargin,GitDiffMarginCommandHandler,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,QueryCommandStatus,The length of the statement  "                            ICommand command = (GitDiffMarginCommand)commandId == GitDiffMarginCommand.RollbackChange ? diffViewModel.RollbackCommand : diffViewModel.CopyOldTextCommand; " is 157.
Long Statement,GitDiffMargin,GitDiffMarginCommandHandler,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,HandlePreExec,The length of the statement  "                        RelayCommand<DiffViewModel> command = (GitDiffMarginCommand)commandId == GitDiffMarginCommand.NextChange ? viewModel.NextChangeCommand : viewModel.PreviousChangeCommand; " is 169.
Long Statement,GitDiffMargin,GitDiffMarginCommandHandler,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginCommandHandler.cs,HandlePreExec,The length of the statement  "                        ICommand command = (GitDiffMarginCommand)commandId == GitDiffMarginCommand.RollbackChange ? diffViewModel.RollbackCommand : diffViewModel.CopyOldTextCommand; " is 157.
Long Statement,GitDiffMargin,GitDiffMarginTextViewCreationListener,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\GitDiffMarginTextViewCreationListener.cs,VsTextViewCreated,The length of the statement  "            GitDiffMarginCommandHandler filter = new GitDiffMarginCommandHandler(textViewAdapter' _editorAdaptersFactoryService' textView); " is 127.
Long Statement,GitDiffMargin,DiffMarginFactoryBase,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\DiffMarginFactoryBase.cs,TryGetMarginCore,The length of the statement  "                        () => new MarginCore(textViewHost.TextView' originalPath' TextDocumentFactoryService' ClassificationFormatMapService' EditorFormatMapService' GitCommands)); " is 156.
Long Statement,GitDiffMargin.Git,GitCommands,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,GetGitDiffFor,The length of the statement  "                    var treeChanges = repo.Diff.Compare(blob' newBlob' new CompareOptions { ContextLines = ContextLines' InterhunkLines = 0 }); " is 123.
Long Statement,GitDiffMargin.Git,GitCommands,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The length of the statement  "                IVsDifferenceService differenceService = _serviceProvider.GetService(typeof(SVsDifferenceService)) as IVsDifferenceService; " is 123.
Long Statement,GitDiffMargin.Git,GitCommands,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The length of the statement  "                differenceService.OpenComparisonWindow2(leftFileMoniker' rightFileMoniker' caption' tooltip' leftLabel' rightLabel' inlineLabel' roles' (uint)grfDiffOptions); " is 158.
Long Statement,GitDiffMargin.Git,GitCommands,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,AdjustPath,The length of the statement  "            if (!ErrorHandler.Succeeded(solution.GetProjectEnum((uint)__VSENUMPROJFLAGS.EPF_LOADEDINSOLUTION' Guid.Empty' out IEnumHierarchies ppenum)) " is 139.
Long Statement,GitDiffMargin.Git,GitDiffParser,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitDiffParser.cs,Parse,The length of the statement  "                   select new HunkRangeInfo(new HunkRange(GetHunkOriginalFile(hunkLine.Item1)' _contextLines)' new HunkRange(GetHunkNewFile(hunkLine.Item1)' _contextLines)' hunkLine.Item2' _suppressRollback); " is 189.
Long Statement,GitDiffMargin.Git,GitDiffParser,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitDiffParser.cs,GetUnifiedFormatHunkLines,The length of the statement  "                splitHunks.Select(splitHunk => new Tuple<string' IEnumerable<string>>(splitHunk[0]' splitHunk.Skip(1).TakeWhile((s' i) => i < splitHunk.Count))) :  " is 146.
Long Statement,GitDiffMargin.ViewModel,EditorDiffViewModel,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\ViewModel\EditorDiffViewModel.cs,GetDiffText,The length of the statement  "                return HunkRangeInfo.IsModification || HunkRangeInfo.IsDeletion ? String.Join(Environment.NewLine' HunkRangeInfo.OriginalText) : string.Empty; " is 142.
Complex Conditional,GitDiffMargin,EditorDiffMargin,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\EditorDiffMargin.cs,UpdateNormalDiffDimensions,The conditional expression  "startLineNumber < 0                  || startLineNumber >= snapshot.LineCount                  || endLineNumber < 0                  || endLineNumber >= snapshot.LineCount"  is complex.
Complex Conditional,GitDiffMargin,ScrollDiffMargin,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\ScrollDiffMargin.cs,UpdateDiffDimensions,The conditional expression  "startLineNumber < 0                  || startLineNumber >= snapshot.LineCount                  || endLineNumber < 0                  || endLineNumber >= snapshot.LineCount"  is complex.
Virtual Method Call from Constructor,GitDiffMargin.ViewModel,ScrollDiffViewModel,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\ViewModel\ScrollDiffViewModel.cs,ScrollDiffViewModel,The constructor "ScrollDiffViewModel" calls a virtual method "UpdateDimensions".
Magic Number,GitDiffMargin.Core,BackgroundParser,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Core\BackgroundParser.cs,BackgroundParser,The following statement contains a magic number: _reparseDelay = TimeSpan.FromMilliseconds(1500);
Magic Number,GitDiffMargin.Core,DiffUpdateBackgroundParser,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Core\DiffUpdateBackgroundParser.cs,DiffUpdateBackgroundParser,The following statement contains a magic number: ReparseDelay = TimeSpan.FromMilliseconds(500);
Magic Number,GitDiffMargin,EditorDiffMargin,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\EditorDiffMargin.cs,UpdateDeletedDiffDimensions,The following statement contains a magic number: diffViewModel.Top = center - (height / 2.0);
Magic Number,GitDiffMargin,ScrollDiffMargin,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\ScrollDiffMargin.cs,UpdateDiffDimensions,The following statement contains a magic number: var mapTop = _scrollBar.Map.GetCoordinateAtBufferPosition(startLine.Start) - 0.5;
Magic Number,GitDiffMargin,ScrollDiffMargin,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\ScrollDiffMargin.cs,UpdateDiffDimensions,The following statement contains a magic number: var mapBottom = _scrollBar.Map.GetCoordinateAtBufferPosition(endLine.End) + 0.5;
Magic Number,GitDiffMargin,ScrollDiffMargin,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\ScrollDiffMargin.cs,UpdateDiffDimensions,The following statement contains a magic number: diffViewModel.Top = Math.Round(_scrollBar.GetYCoordinateOfScrollMapPosition(mapTop)) - 2.0;
Magic Number,GitDiffMargin,ScrollDiffMargin,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\ScrollDiffMargin.cs,UpdateDiffDimensions,The following statement contains a magic number: diffViewModel.Height = Math.Round(_scrollBar.GetYCoordinateOfScrollMapPosition(mapBottom)) - diffViewModel.Top + 2.0;
Magic Number,GitDiffMargin,ScrollDiffMarginFactory2012,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\ScrollDiffMarginFactory2012.cs,CreateMargin,The following statement contains a magic number: if (typeof(ErrorHandler).Assembly.GetName().Version.Major >= 12)                  return null;
Magic Number,GitDiffMargin,ScrollDiffMarginFactory2013,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\ScrollDiffMarginFactory2013.cs,CreateMargin,The following statement contains a magic number: if (typeof(ErrorHandler).Assembly.GetName().Version.Major < 12)                  return null;
Magic Number,GitDiffMargin.Settings,DiffAdditionEditorFormatDefinition,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffAdditionEditorFormatDefinition.cs,DiffAdditionEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb(180' 255' 180);
Magic Number,GitDiffMargin.Settings,DiffAdditionEditorFormatDefinition,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffAdditionEditorFormatDefinition.cs,DiffAdditionEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb(180' 255' 180);
Magic Number,GitDiffMargin.Settings,DiffAdditionEditorFormatDefinition,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffAdditionEditorFormatDefinition.cs,DiffAdditionEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb(180' 255' 180);
Magic Number,GitDiffMargin.Settings,DiffModificationEditorFormatDefinition,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffModificationEditorFormatDefinition.cs,DiffModificationEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb(160' 200' 255);
Magic Number,GitDiffMargin.Settings,DiffModificationEditorFormatDefinition,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffModificationEditorFormatDefinition.cs,DiffModificationEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb(160' 200' 255);
Magic Number,GitDiffMargin.Settings,DiffModificationEditorFormatDefinition,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffModificationEditorFormatDefinition.cs,DiffModificationEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb(160' 200' 255);
Magic Number,GitDiffMargin.Settings,DiffRemovedEditorFormatDefinition,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffRemovedEditorFormatDefinition.cs,DiffRemovedEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb(255' 160' 180);
Magic Number,GitDiffMargin.Settings,DiffRemovedEditorFormatDefinition,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffRemovedEditorFormatDefinition.cs,DiffRemovedEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb(255' 160' 180);
Magic Number,GitDiffMargin.Settings,DiffRemovedEditorFormatDefinition,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Settings\DiffRemovedEditorFormatDefinition.cs,DiffRemovedEditorFormatDefinition,The following statement contains a magic number: BackgroundColor = Color.FromRgb(255' 160' 180);
Magic Number,GitDiffMargin.Git,GitCommands,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The following statement contains a magic number: using (var repo = new Repository(repositoryPath))              {                  string workingDirectory = repo.Info.WorkingDirectory;                  string relativePath = originalPath;                  if (relativePath.StartsWith(workingDirectory' StringComparison.OrdinalIgnoreCase))                      relativePath = relativePath.Substring(workingDirectory.Length);                    // the name of the object in the database                  string objectName = Path.GetFileName(filename);                    Blob oldBlob = null;                  var indexEntry = repo.Index[relativePath];                  if (indexEntry != null)                  {                      objectName = Path.GetFileName(indexEntry.Path);                      oldBlob = repo.Lookup<Blob>(indexEntry.Id);                  }                    var tempFileName = Path.GetTempFileName();                  if (oldBlob != null)                      File.WriteAllText(tempFileName' oldBlob.GetContentText(new FilteringOptions(relativePath))' GetEncoding(filename));                    IVsDifferenceService differenceService = _serviceProvider.GetService(typeof(SVsDifferenceService)) as IVsDifferenceService;                  string leftFileMoniker = tempFileName;                  // The difference service will automatically load the text from the file open in the editor' even if                  // it has changed. Don't use the original path here.                  string rightFileMoniker = filename;                    string actualFilename = objectName;                  string tempPrefix = Path.GetRandomFileName().Substring(0' 5);                  string caption = string.Format("{0}_{1} vs. {1}"' tempPrefix' actualFilename);                    string tooltip = null;                    string leftLabel;                  if (indexEntry != null)                  {                      // determine if the file has been staged                      string revision;                      var stagedMask = FileStatus.NewInIndex | FileStatus.ModifiedInIndex;                      if ((repo.RetrieveStatus(relativePath) & stagedMask) != 0)                          revision = "index";                      else                          revision = repo.Head.Tip.Sha.Substring(0' 7);                        leftLabel = string.Format("{0}@{1}"' objectName' revision);                  }                  else if (oldBlob != null)                  {                      // file was added                      leftLabel = null;                  }                  else                  {                      // we just compared to head                      leftLabel = string.Format("{0}@{1}"' objectName' repo.Head.Tip.Sha.Substring(0' 7));                  }                    string rightLabel = originalPath;                    string inlineLabel = null;                  string roles = null;                  __VSDIFFSERVICEOPTIONS grfDiffOptions = __VSDIFFSERVICEOPTIONS.VSDIFFOPT_LeftFileIsTemporary;                  differenceService.OpenComparisonWindow2(leftFileMoniker' rightFileMoniker' caption' tooltip' leftLabel' rightLabel' inlineLabel' roles' (uint)grfDiffOptions);                    // Since the file is marked as temporary' we can delete it now                  File.Delete(tempFileName);              }
Magic Number,GitDiffMargin.Git,GitCommands,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The following statement contains a magic number: using (var repo = new Repository(repositoryPath))              {                  string workingDirectory = repo.Info.WorkingDirectory;                  string relativePath = originalPath;                  if (relativePath.StartsWith(workingDirectory' StringComparison.OrdinalIgnoreCase))                      relativePath = relativePath.Substring(workingDirectory.Length);                    // the name of the object in the database                  string objectName = Path.GetFileName(filename);                    Blob oldBlob = null;                  var indexEntry = repo.Index[relativePath];                  if (indexEntry != null)                  {                      objectName = Path.GetFileName(indexEntry.Path);                      oldBlob = repo.Lookup<Blob>(indexEntry.Id);                  }                    var tempFileName = Path.GetTempFileName();                  if (oldBlob != null)                      File.WriteAllText(tempFileName' oldBlob.GetContentText(new FilteringOptions(relativePath))' GetEncoding(filename));                    IVsDifferenceService differenceService = _serviceProvider.GetService(typeof(SVsDifferenceService)) as IVsDifferenceService;                  string leftFileMoniker = tempFileName;                  // The difference service will automatically load the text from the file open in the editor' even if                  // it has changed. Don't use the original path here.                  string rightFileMoniker = filename;                    string actualFilename = objectName;                  string tempPrefix = Path.GetRandomFileName().Substring(0' 5);                  string caption = string.Format("{0}_{1} vs. {1}"' tempPrefix' actualFilename);                    string tooltip = null;                    string leftLabel;                  if (indexEntry != null)                  {                      // determine if the file has been staged                      string revision;                      var stagedMask = FileStatus.NewInIndex | FileStatus.ModifiedInIndex;                      if ((repo.RetrieveStatus(relativePath) & stagedMask) != 0)                          revision = "index";                      else                          revision = repo.Head.Tip.Sha.Substring(0' 7);                        leftLabel = string.Format("{0}@{1}"' objectName' revision);                  }                  else if (oldBlob != null)                  {                      // file was added                      leftLabel = null;                  }                  else                  {                      // we just compared to head                      leftLabel = string.Format("{0}@{1}"' objectName' repo.Head.Tip.Sha.Substring(0' 7));                  }                    string rightLabel = originalPath;                    string inlineLabel = null;                  string roles = null;                  __VSDIFFSERVICEOPTIONS grfDiffOptions = __VSDIFFSERVICEOPTIONS.VSDIFFOPT_LeftFileIsTemporary;                  differenceService.OpenComparisonWindow2(leftFileMoniker' rightFileMoniker' caption' tooltip' leftLabel' rightLabel' inlineLabel' roles' (uint)grfDiffOptions);                    // Since the file is marked as temporary' we can delete it now                  File.Delete(tempFileName);              }
Magic Number,GitDiffMargin.Git,GitCommands,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Git\GitCommands.cs,StartExternalDiff,The following statement contains a magic number: using (var repo = new Repository(repositoryPath))              {                  string workingDirectory = repo.Info.WorkingDirectory;                  string relativePath = originalPath;                  if (relativePath.StartsWith(workingDirectory' StringComparison.OrdinalIgnoreCase))                      relativePath = relativePath.Substring(workingDirectory.Length);                    // the name of the object in the database                  string objectName = Path.GetFileName(filename);                    Blob oldBlob = null;                  var indexEntry = repo.Index[relativePath];                  if (indexEntry != null)                  {                      objectName = Path.GetFileName(indexEntry.Path);                      oldBlob = repo.Lookup<Blob>(indexEntry.Id);                  }                    var tempFileName = Path.GetTempFileName();                  if (oldBlob != null)                      File.WriteAllText(tempFileName' oldBlob.GetContentText(new FilteringOptions(relativePath))' GetEncoding(filename));                    IVsDifferenceService differenceService = _serviceProvider.GetService(typeof(SVsDifferenceService)) as IVsDifferenceService;                  string leftFileMoniker = tempFileName;                  // The difference service will automatically load the text from the file open in the editor' even if                  // it has changed. Don't use the original path here.                  string rightFileMoniker = filename;                    string actualFilename = objectName;                  string tempPrefix = Path.GetRandomFileName().Substring(0' 5);                  string caption = string.Format("{0}_{1} vs. {1}"' tempPrefix' actualFilename);                    string tooltip = null;                    string leftLabel;                  if (indexEntry != null)                  {                      // determine if the file has been staged                      string revision;                      var stagedMask = FileStatus.NewInIndex | FileStatus.ModifiedInIndex;                      if ((repo.RetrieveStatus(relativePath) & stagedMask) != 0)                          revision = "index";                      else                          revision = repo.Head.Tip.Sha.Substring(0' 7);                        leftLabel = string.Format("{0}@{1}"' objectName' revision);                  }                  else if (oldBlob != null)                  {                      // file was added                      leftLabel = null;                  }                  else                  {                      // we just compared to head                      leftLabel = string.Format("{0}@{1}"' objectName' repo.Head.Tip.Sha.Substring(0' 7));                  }                    string rightLabel = originalPath;                    string inlineLabel = null;                  string roles = null;                  __VSDIFFSERVICEOPTIONS grfDiffOptions = __VSDIFFSERVICEOPTIONS.VSDIFFOPT_LeftFileIsTemporary;                  differenceService.OpenComparisonWindow2(leftFileMoniker' rightFileMoniker' caption' tooltip' leftLabel' rightLabel' inlineLabel' roles' (uint)grfDiffOptions);                    // Since the file is marked as temporary' we can delete it now                  File.Delete(tempFileName);              }
Magic Number,GitDiffMargin.Git,HunkRange,C:\repos\laurentkempe_GitDiffMargin\GitDiffMargin\Git\HunkRange.cs,HunkRange,The following statement contains a magic number: if (hunkRange.Contains("'"))              {                  var hunkParts = hunkRange.Split(''');                  StartingLineNumber = int.Parse(hunkParts[0]) -1 + contextLines;                  NumberOfLines = int.Parse(hunkParts[1]) - (2 * contextLines);              }              else              {                  StartingLineNumber = int.Parse(hunkRange) - 1 + contextLines;                  NumberOfLines = 1;              }
