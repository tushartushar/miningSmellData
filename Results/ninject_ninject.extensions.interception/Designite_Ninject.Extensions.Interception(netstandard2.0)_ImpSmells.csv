Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Ninject.Extensions.Interception.Injection.Dynamic,DynamicMethodFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Injection\Dynamic\DynamicMethodFactory.cs,EmitLoadInt,Cyclomatic complexity of the method is 12
Long Parameter List,Ninject.Extensions.Interception.Request,IProxyRequestFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Request\IProxyRequestFactory.cs,Create,The method has 6 parameters. Parameters: context' proxy' target' method' arguments' genericArguments
Long Parameter List,Ninject.Extensions.Interception.Request,ProxyRequest,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Request\ProxyRequest.cs,ProxyRequest,The method has 6 parameters. Parameters: context' proxy' target' method' arguments' genericArguments
Long Parameter List,Ninject.Extensions.Interception.Request,ProxyRequestFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Request\ProxyRequestFactory.cs,Create,The method has 6 parameters. Parameters: context' proxy' target' method' arguments' genericArguments
Long Identifier,Ninject.Extensions.Interception.Injection.Dynamic,DynamicMethodFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Injection\Dynamic\DynamicMethodFactory.cs,,The length of the parameter TargetParameterCountExceptionConstructor is 40.
Long Statement,Ninject.Extensions.Interception,InterceptionModule,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\InterceptionModule.cs,VerifyNoBoundProxyFactoriesExist,The length of the statement  "                    " If you have more than one interception module' please disable automatic extension loading by passing an INinjectSettings object into your Kernel's .ctor with");" is 162.
Long Statement,Ninject.Extensions.Interception.Advice,Advice,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Advice\Advice.cs,MatchesMethod,The length of the statement  "            var index = Array.IndexOf(map.InterfaceMethods' request.Method.IsGenericMethod ? request.Method.GetGenericMethodDefinition() : request.Method);" is 143.
Long Statement,Ninject.Extensions.Interception.Infrastructure.Language,ExtensionsForIBindingSyntax,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Infrastructure\Language\ExtensionsForIBindingSyntax.cs,Intercept,The length of the statement  "                .Create(context => ReferenceEquals(bindingSyntax.BindingConfiguration' context.Binding.BindingConfiguration)' methodPredicate); " is 127.
Long Statement,Ninject.Extensions.Interception.Infrastructure.Language,ExtensionsForMethodInfo,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Infrastructure\Language\ExtensionsForMethodInfo.cs,GetPropertyFromMethod,The length of the statement  "            return implementingType.GetProperty(method.Name.Substring(4)' DefaultBindingFlags' null' returnType' indexerTypes.ToArray()' null);" is 131.
Magic Number,Ninject.Extensions.Interception.Infrastructure.Language,ExtensionsForMethodInfo,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Infrastructure\Language\ExtensionsForMethodInfo.cs,GetPropertyFromMethod,The following statement contains a magic number: !method.IsSpecialName || method.Name.Length < 4
Magic Number,Ninject.Extensions.Interception.Infrastructure.Language,ExtensionsForMethodInfo,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Infrastructure\Language\ExtensionsForMethodInfo.cs,GetPropertyFromMethod,The following statement contains a magic number: var isGetMethod = method.Name.Substring(0' 3) == "get";
Magic Number,Ninject.Extensions.Interception.Infrastructure.Language,ExtensionsForMethodInfo,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Infrastructure\Language\ExtensionsForMethodInfo.cs,GetPropertyFromMethod,The following statement contains a magic number: return implementingType.GetProperty(method.Name.Substring(4)' DefaultBindingFlags' null' returnType' indexerTypes.ToArray()' null);
Magic Number,Ninject.Extensions.Interception.Infrastructure.Language,ExtensionsForMethodInfo,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Infrastructure\Language\ExtensionsForMethodInfo.cs,GetPropertyFromMethod,The following statement contains a magic number: return method.DeclaringType.GetProperty(method.Name.Substring(4)' DefaultBindingFlags);
Magic Number,Ninject.Extensions.Interception.Injection.Dynamic,DynamicMethodFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Injection\Dynamic\DynamicMethodFactory.cs,EmitLoadInt,The following statement contains a magic number: switch (value)             {                 case -1:                     il.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     il.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     il.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     il.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     il.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     il.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     il.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     il.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     il.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     il.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (value > -129 && value < 128)                     {                         il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                     }                     else                     {                         il.Emit(OpCodes.Ldc_I4' value);                     }                      break;             }
Magic Number,Ninject.Extensions.Interception.Injection.Dynamic,DynamicMethodFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Injection\Dynamic\DynamicMethodFactory.cs,EmitLoadInt,The following statement contains a magic number: switch (value)             {                 case -1:                     il.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     il.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     il.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     il.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     il.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     il.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     il.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     il.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     il.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     il.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (value > -129 && value < 128)                     {                         il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                     }                     else                     {                         il.Emit(OpCodes.Ldc_I4' value);                     }                      break;             }
Magic Number,Ninject.Extensions.Interception.Injection.Dynamic,DynamicMethodFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Injection\Dynamic\DynamicMethodFactory.cs,EmitLoadInt,The following statement contains a magic number: switch (value)             {                 case -1:                     il.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     il.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     il.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     il.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     il.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     il.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     il.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     il.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     il.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     il.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (value > -129 && value < 128)                     {                         il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                     }                     else                     {                         il.Emit(OpCodes.Ldc_I4' value);                     }                      break;             }
Magic Number,Ninject.Extensions.Interception.Injection.Dynamic,DynamicMethodFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Injection\Dynamic\DynamicMethodFactory.cs,EmitLoadInt,The following statement contains a magic number: switch (value)             {                 case -1:                     il.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     il.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     il.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     il.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     il.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     il.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     il.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     il.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     il.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     il.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (value > -129 && value < 128)                     {                         il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                     }                     else                     {                         il.Emit(OpCodes.Ldc_I4' value);                     }                      break;             }
Magic Number,Ninject.Extensions.Interception.Injection.Dynamic,DynamicMethodFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Injection\Dynamic\DynamicMethodFactory.cs,EmitLoadInt,The following statement contains a magic number: switch (value)             {                 case -1:                     il.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     il.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     il.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     il.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     il.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     il.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     il.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     il.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     il.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     il.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (value > -129 && value < 128)                     {                         il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                     }                     else                     {                         il.Emit(OpCodes.Ldc_I4' value);                     }                      break;             }
Magic Number,Ninject.Extensions.Interception.Injection.Dynamic,DynamicMethodFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Injection\Dynamic\DynamicMethodFactory.cs,EmitLoadInt,The following statement contains a magic number: switch (value)             {                 case -1:                     il.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     il.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     il.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     il.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     il.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     il.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     il.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     il.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     il.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     il.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (value > -129 && value < 128)                     {                         il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                     }                     else                     {                         il.Emit(OpCodes.Ldc_I4' value);                     }                      break;             }
Magic Number,Ninject.Extensions.Interception.Injection.Dynamic,DynamicMethodFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Injection\Dynamic\DynamicMethodFactory.cs,EmitLoadInt,The following statement contains a magic number: switch (value)             {                 case -1:                     il.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     il.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     il.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     il.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     il.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     il.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     il.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     il.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     il.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     il.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (value > -129 && value < 128)                     {                         il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                     }                     else                     {                         il.Emit(OpCodes.Ldc_I4' value);                     }                      break;             }
Magic Number,Ninject.Extensions.Interception.Injection.Dynamic,DynamicMethodFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Injection\Dynamic\DynamicMethodFactory.cs,EmitLoadInt,The following statement contains a magic number: switch (value)             {                 case -1:                     il.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     il.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     il.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     il.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     il.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     il.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     il.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     il.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     il.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     il.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (value > -129 && value < 128)                     {                         il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                     }                     else                     {                         il.Emit(OpCodes.Ldc_I4' value);                     }                      break;             }
Magic Number,Ninject.Extensions.Interception.Injection.Dynamic,DynamicMethodFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Injection\Dynamic\DynamicMethodFactory.cs,EmitLoadInt,The following statement contains a magic number: switch (value)             {                 case -1:                     il.Emit(OpCodes.Ldc_I4_M1);                     break;                 case 0:                     il.Emit(OpCodes.Ldc_I4_0);                     break;                 case 1:                     il.Emit(OpCodes.Ldc_I4_1);                     break;                 case 2:                     il.Emit(OpCodes.Ldc_I4_2);                     break;                 case 3:                     il.Emit(OpCodes.Ldc_I4_3);                     break;                 case 4:                     il.Emit(OpCodes.Ldc_I4_4);                     break;                 case 5:                     il.Emit(OpCodes.Ldc_I4_5);                     break;                 case 6:                     il.Emit(OpCodes.Ldc_I4_6);                     break;                 case 7:                     il.Emit(OpCodes.Ldc_I4_7);                     break;                 case 8:                     il.Emit(OpCodes.Ldc_I4_8);                     break;                 default:                     if (value > -129 && value < 128)                     {                         il.Emit(OpCodes.Ldc_I4_S' (sbyte)value);                     }                     else                     {                         il.Emit(OpCodes.Ldc_I4' value);                     }                      break;             }
Magic Number,Ninject.Extensions.Interception.Injection.Dynamic,DynamicMethodFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Injection\Dynamic\DynamicMethodFactory.cs,EmitLoadArg,The following statement contains a magic number: switch (index)             {                 case 0:                     il.Emit(OpCodes.Ldarg_0);                     break;                 case 1:                     il.Emit(OpCodes.Ldarg_1);                     break;                 case 2:                     il.Emit(OpCodes.Ldarg_2);                     break;                 case 3:                     il.Emit(OpCodes.Ldarg_3);                     break;                 default:                     if (index > -129 && index < 128)                     {                         il.Emit(OpCodes.Ldarg_S' (sbyte)index);                     }                     else                     {                         il.Emit(OpCodes.Ldarg' index);                     }                      break;             }
Magic Number,Ninject.Extensions.Interception.Injection.Dynamic,DynamicMethodFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Injection\Dynamic\DynamicMethodFactory.cs,EmitLoadArg,The following statement contains a magic number: switch (index)             {                 case 0:                     il.Emit(OpCodes.Ldarg_0);                     break;                 case 1:                     il.Emit(OpCodes.Ldarg_1);                     break;                 case 2:                     il.Emit(OpCodes.Ldarg_2);                     break;                 case 3:                     il.Emit(OpCodes.Ldarg_3);                     break;                 default:                     if (index > -129 && index < 128)                     {                         il.Emit(OpCodes.Ldarg_S' (sbyte)index);                     }                     else                     {                         il.Emit(OpCodes.Ldarg' index);                     }                      break;             }
Magic Number,Ninject.Extensions.Interception.Injection.Dynamic,DynamicMethodFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Injection\Dynamic\DynamicMethodFactory.cs,EmitLoadArg,The following statement contains a magic number: switch (index)             {                 case 0:                     il.Emit(OpCodes.Ldarg_0);                     break;                 case 1:                     il.Emit(OpCodes.Ldarg_1);                     break;                 case 2:                     il.Emit(OpCodes.Ldarg_2);                     break;                 case 3:                     il.Emit(OpCodes.Ldarg_3);                     break;                 default:                     if (index > -129 && index < 128)                     {                         il.Emit(OpCodes.Ldarg_S' (sbyte)index);                     }                     else                     {                         il.Emit(OpCodes.Ldarg' index);                     }                      break;             }
Magic Number,Ninject.Extensions.Interception.Injection.Dynamic,DynamicMethodFactory,C:\research\architectureSmells\repos\ninject_ninject.extensions.interception\src\Ninject.Extensions.Interception\Injection\Dynamic\DynamicMethodFactory.cs,EmitLoadArg,The following statement contains a magic number: switch (index)             {                 case 0:                     il.Emit(OpCodes.Ldarg_0);                     break;                 case 1:                     il.Emit(OpCodes.Ldarg_1);                     break;                 case 2:                     il.Emit(OpCodes.Ldarg_2);                     break;                 case 3:                     il.Emit(OpCodes.Ldarg_3);                     break;                 default:                     if (index > -129 && index < 128)                     {                         il.Emit(OpCodes.Ldarg_S' (sbyte)index);                     }                     else                     {                         il.Emit(OpCodes.Ldarg' index);                     }                      break;             }
