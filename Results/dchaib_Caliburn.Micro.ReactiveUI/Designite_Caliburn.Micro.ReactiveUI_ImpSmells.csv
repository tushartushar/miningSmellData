Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Caliburn.Micro.ReactiveUI,WeakValueDictionary<TKey;TValue>,D:\research\architectureSmells\repos\dchaib_Caliburn.Micro.ReactiveUI\src\Caliburn.Micro.ReactiveUI\WeakValueDictionary.cs,CopyTo,The length of the statement  "                    "The number of elements in the source collection is greater than the available space from arrayIndex to the end of the destination array."); " is 140.
Long Statement,Caliburn.Micro.ReactiveUI,ValueCollection,D:\research\architectureSmells\repos\dchaib_Caliburn.Micro.ReactiveUI\src\Caliburn.Micro.ReactiveUI\WeakValueDictionary.cs,CopyTo,The length of the statement  "                        "The number of elements in the source collection is greater than the available space from arrayIndex to the end of the destination array."); " is 140.
Missing Default,Caliburn.Micro.ReactiveUI,AllActive,D:\research\architectureSmells\repos\dchaib_Caliburn.Micro.ReactiveUI\src\Caliburn.Micro.ReactiveUI\ReactiveConductorWithCollectionAllActive.cs,AllActive,The following switch statement is missing a default case: switch (e.Action)                          {                              case NotifyCollectionChangedAction.Add:                                  e.NewItems.OfType<IChild>().Apply(x => x.Parent = this);                                  break;                              case NotifyCollectionChangedAction.Remove:                                  e.OldItems.OfType<IChild>().Apply(x => x.Parent = null);                                  break;                              case NotifyCollectionChangedAction.Replace:                                  e.NewItems.OfType<IChild>().Apply(x => x.Parent = this);                                  e.OldItems.OfType<IChild>().Apply(x => x.Parent = null);                                  break;                              case NotifyCollectionChangedAction.Reset:                                  items.OfType<IChild>().Apply(x => x.Parent = this);                                  break;                          }
Missing Default,Caliburn.Micro.ReactiveUI,OneActive,D:\research\architectureSmells\repos\dchaib_Caliburn.Micro.ReactiveUI\src\Caliburn.Micro.ReactiveUI\ReactiveConductorWithCollectionOneActive.cs,OneActive,The following switch statement is missing a default case: switch (e.Action)                          {                              case NotifyCollectionChangedAction.Add:                                  e.NewItems.OfType<IChild>().Apply(x => x.Parent = this);                                  break;                              case NotifyCollectionChangedAction.Remove:                                  e.OldItems.OfType<IChild>().Apply(x => x.Parent = null);                                  break;                              case NotifyCollectionChangedAction.Replace:                                  e.NewItems.OfType<IChild>().Apply(x => x.Parent = this);                                  e.OldItems.OfType<IChild>().Apply(x => x.Parent = null);                                  break;                              case NotifyCollectionChangedAction.Reset:                                  items.OfType<IChild>().Apply(x => x.Parent = this);                                  break;                          }
