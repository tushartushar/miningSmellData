Implementation smell,Namespace,Class,File,Method,Description
Long Method,com.esri.gpt.csw,CswClient,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswClient.cs,SubmitHttpRequest,The method has 130 lines of code.
Complex Method,com.esri.gpt.csw,CswCatalog,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswCatalog.cs,ParseCapabilities,Cyclomatic complexity of the method is 11
Complex Method,com.esri.gpt.csw,CswClient,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswClient.cs,SubmitHttpRequest,Cyclomatic complexity of the method is 13
Complex Method,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,Cyclomatic complexity of the method is 10
Complex Method,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,determineResourceUrl,Cyclomatic complexity of the method is 17
Complex Method,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetMetadataByIDResponse,Cyclomatic complexity of the method is 11
Complex Method,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,getServiceType,Cyclomatic complexity of the method is 12
Complex Method,com.esri.gpt.csw,CswProfiles,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfiles.cs,loadProfilefromConfig,Cyclomatic complexity of the method is 9
Complex Method,com.esri.gpt.csw,CswSearchRequest,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswSearchRequest.cs,GetMetadataByID,Cyclomatic complexity of the method is 11
Complex Method,com.esri.gpt.csw,CswSearchRequest,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswSearchRequest.cs,GetAddToMapInfoByID,Cyclomatic complexity of the method is 13
Complex Method,com.esri.gpt.csw,Utils,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\Utils.cs,GetSpecialFolderPath,Cyclomatic complexity of the method is 23
Complex Method,com.esri.gpt.csw,Utils,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\Utils.cs,EnsureTrailingQuestionOrAmpersandInURL,Cyclomatic complexity of the method is 8
Long Parameter List,com.esri.gpt.csw,CswCatalogs,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswCatalogs.cs,updateCatalogNameinConfig,The method has 5 parameters.
Long Parameter List,com.esri.gpt.csw,CswClient,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswClient.cs,SubmitHttpRequest,The method has 5 parameters.
Long Parameter List,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,CswProfile,The method has 11 parameters.
Long Parameter List,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,CswProfile,The method has 12 parameters.
Long Statement,com.esri.gpt.csw,CswCatalog,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswCatalog.cs,GetCapabilities,The length of the statement  "		if (xmlDoc.SelectSingleNode ("/csw:Capabilities|/wrs:Capabilities| /wrs10:Capabilities | /wcs:WCS_Capabilities"' xmlnsManager) != null) " is 135.
Long Statement,com.esri.gpt.csw,CswCatalog,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswCatalog.cs,ParseCapabilities,The length of the statement  "			capabilities.GetRecordByID_GetURL = xmlDoc.SelectSingleNode ("/wcs:WCS_Capabilities/wcs:Capability/wcs:Request/wcs:GetCoverage/wcs:DCPType/wcs:HTTP/wcs:Get/wcs:OnlineResource"' xmlnsManager).Attributes ["xlink:href"].Value; " is 223.
Long Statement,com.esri.gpt.csw,CswCatalog,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswCatalog.cs,ParseCapabilities,The length of the statement  "			//   XmlNodeList parentNodeList = xmlDoc.SelectNodes("//ows:OperationsMetadata/ows:Operation[@name='GetRecords']/ows:DCP/ows:HTTP/ows:Post"' xmlnsManager); " is 155.
Long Statement,com.esri.gpt.csw,CswCatalog,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswCatalog.cs,ParseCapabilities,The length of the statement  "			capabilities.GetRecords_PostURL = xmlDoc.SelectSingleNode ("//ows:OperationsMetadata/ows:Operation[@name='GetRecords']/ows:DCP/ows:HTTP/ows:Post"' xmlnsManager).Attributes ["xlink:href"].Value; " is 193.
Long Statement,com.esri.gpt.csw,CswCatalog,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswCatalog.cs,ParseCapabilities,The length of the statement  "                            XmlNodeList nodeList = xmlDoc.SelectNodes("//ows:OperationsMetadata/ows:Operation[@name='GetRecords']/ows:DCP/ows:HTTP/ows:Post/ows:Constraint/ows:Value"' xmlnsManager);" is 169.
Long Statement,com.esri.gpt.csw,CswCatalog,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswCatalog.cs,ParseCapabilities,The length of the statement  "                            if (nodeList != null && nodeList.Count >0 && (nodeList.Item(0).InnerText.Equals("SOAP") || nodeList.Item(0).InnerText.Equals("soap")))" is 134.
Long Statement,com.esri.gpt.csw,CswCatalog,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswCatalog.cs,ParseCapabilities,The length of the statement  "                            //  capabilities.GetRecords_PostURL = xmlDoc.SelectSingleNode("//ows:OperationsMetadata/ows:Operation[@name='GetRecords']/ows:DCP/ows:HTTP/ows:Post"' xmlnsManager).Attributes["xlink:href"].Value;" is 195.
Long Statement,com.esri.gpt.csw,CswCatalog,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswCatalog.cs,ParseCapabilities,The length of the statement  "                        }*/XmlNodeList nodeList = xmlDoc.SelectNodes ("//ows:OperationsMetadata/ows:Operation[@name='GetRecords']/ows:DCP/ows:HTTP/ows:Post/ows:Constraint/ows:Value"' xmlnsManager); " is 173.
Long Statement,com.esri.gpt.csw,CswCatalog,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswCatalog.cs,ParseCapabilities,The length of the statement  "					if (nodeList.Item (iter).InnerText.Equals ("SOAP") || nodeList.Item (iter).InnerText.Equals ("soap") || capabilities.GetRecords_PostURL.ToLower ().Contains ("soap")) { " is 167.
Long Statement,com.esri.gpt.csw,CswCatalog,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswCatalog.cs,ParseCapabilities,The length of the statement  "			//   capabilities.GetRecords_PostURL = xmlDoc.SelectSingleNode("//ows:OperationsMetadata/ows:Operation[@name='GetRecords']/ows:DCP/ows:HTTP/ows:Post"' xmlnsManager).Attributes["xlink:href"].Value; " is 196.
Long Statement,com.esri.gpt.csw,CswCatalog,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswCatalog.cs,ParseCapabilities,The length of the statement  "			capabilities.GetRecordByID_GetURL = xmlDoc.SelectSingleNode ("//ows:OperationsMetadata/ows:Operation[@name='GetRecordById']/ows:DCP/ows:HTTP/ows:Get"' xmlnsManager).Attributes ["xlink:href"].Value; " is 197.
Long Statement,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The length of the statement  "                            record.BoundingBox.Maxy = Double.Parse(uppercorner.Substring(uppercorner.IndexOf(' ') + 1));*/Boolean parseFlag = false; " is 120.
Long Statement,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The length of the statement  "				parseFlag = Double.TryParse (lowercorner.Substring (0' lowercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult); " is 135.
Long Statement,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The length of the statement  "				parseFlag = Double.TryParse (lowercorner.Substring (lowercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult); " is 136.
Long Statement,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The length of the statement  "				parseFlag = Double.TryParse (uppercorner.Substring (0' uppercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult); " is 135.
Long Statement,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The length of the statement  "				parseFlag = Double.TryParse (uppercorner.Substring (uppercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult); " is 136.
Long Statement,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,determineResourceUrl,The length of the statement  "	if ((resourceUrl.Length > 0) && (serviceType.Equals ("image"' StringComparison.CurrentCultureIgnoreCase) || serviceType.Equals ("feature") || serviceType.Equals ("metadata"))) { " is 177.
Long Statement,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetMetadataByIDResponse,The length of the statement  "					if (serviceType.Equals ("aims") || serviceType.Equals ("ags") || serviceType.Equals ("wms") || serviceType.Equals ("wcs")) { " is 124.
Long Statement,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,getServiceType,The length of the statement  "	if (url.Contains ("service=wms") || url.Contains ("com.esri.wms.esrimap") || url.Contains ("/mapserver/wmsserver") || url.Contains ("/wmsserver") || url.Contains ("wms")) { " is 172.
Long Statement,com.esri.gpt.csw,CswProfiles,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfiles.cs,loadProfilefromConfig,The length of the statement  "			this.AddProfile (id' new CswProfile (id' name' cswnamespace' description' requestKVPs' requestxslt' responsexslt' metadataxslt' displayResponseXslt' livedatamap' extentsearch' spatialboundary)); " is 194.
Long Statement,com.esri.gpt.csw,CswSearchRequest,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswSearchRequest.cs,Search,The length of the statement  "	//   requestQuery = "<csw:GetCapabilities xmlns:csw=\"http://www.opengis.net/cat/csw/2.0.2\" request=\"GetCapabilities\" service=\"CSW\" version=\"2.0.2\"/>"; " is 158.
Long Statement,com.esri.gpt.csw,CswSearchRequest,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswSearchRequest.cs,GetAddToMapInfoByID,The length of the statement  "	if (record.MetadataResourceURL != null && record.MetadataResourceURL.Equals ("") && profile.Name.Equals ("terra catalog CSW 2.0.2 AP ISO")) { " is 141.
Long Statement,com.esri.gpt.csw,CswSearchRequest,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswSearchRequest.cs,GetAddToMapInfoByID,The length of the statement  "		// throw new InvalidOperationException("Neither full metadata nor metadata resource URL was found for the CSW record."); " is 120.
Long Statement,com.esri.gpt.csw,MapServiceInfo,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\MapServiceInfo.cs,ToString,The length of the statement  "	str = "Server: " + _server + "; " + "Service: " + _service + "; " + "ServiceType: " + _serviceType + "; " + "ServiceParam: " + _serviceParam + "; " + "IsSecured: " + _isSecured.ToString (); " is 189.
Long Statement,com.esri.gpt.csw,PromptCredentials,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\PromptCredentials.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(PromptCredentials)); " is 138.
Complex Conditional,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,determineResourceUrl,The conditional expression  "(resourceUrl.Length > 0) && (serviceType.Equals ("image"' StringComparison.CurrentCultureIgnoreCase) || serviceType.Equals ("feature") || serviceType.Equals ("metadata"))"  is complex.
Complex Conditional,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetMetadataByIDResponse,The conditional expression  "serviceType.Equals ("aims") || serviceType.Equals ("ags") || serviceType.Equals ("wms") || serviceType.Equals ("wcs")"  is complex.
Complex Conditional,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,getServiceType,The conditional expression  "url.Contains ("service=wms") || url.Contains ("com.esri.wms.esrimap") || url.Contains ("/mapserver/wmsserver") || url.Contains ("/wmsserver") || url.Contains ("wms")"  is complex.
Empty Catch Block,com.esri.gpt.csw,CswClient,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswClient.cs,SubmitHttpRequest,The method has an empty catch block.
Empty Catch Block,com.esri.gpt.csw,CswClient,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswClient.cs,SubmitHttpRequest,The method has an empty catch block.
Empty Catch Block,com.esri.gpt.csw,CswClient,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswClient.cs,SubmitHttpRequest,The method has an empty catch block.
Empty Catch Block,com.esri.gpt.csw,CswManager,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswManager.cs,isUserCatalogExists,The method has an empty catch block.
Empty Catch Block,com.esri.gpt.csw,Utils,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\Utils.cs,GetSpecialFolderPath,The method has an empty catch block.
Magic Number,com.esri.gpt.csw,CswClient,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswClient.cs,SubmitHttpRequest,The following statement contains a magic number: if (method.Equals ("DOWNLOAD")) {  	FileStream file = null;  	string fileName = response.GetResponseHeader ("Content-Disposition");  	string[] s = null;  	if (fileName.ToLower ().EndsWith (".tif")) {  		s = URL.Split (new String[] {  			"coverage="  		}' 100' StringSplitOptions.RemoveEmptyEntries);  		s [1] = s [1].Trim () + ".tif";  	} else {  		s = fileName.Split ('=');  		s [1] = s [1].Replace ('\\'' ' ');  		s [1] = s [1].Replace ('"'' ' ');  		s [1] = s [1].Trim ();  	}  	try {  		downloadFileName = System.IO.Path.Combine (Utils.GetSpecialFolderPath (SpecialFolder.ConfigurationFiles)' s [1]);  		System.IO.File.Delete (downloadFileName);  		file = System.IO.File.Create (downloadFileName);  		// Buffer to read 10K bytes in chunk:  		byte[] buffer = new Byte[10000];  		int length = 10000;  		int offset = 0;  		while (length > 0) {  			length = responseStream.Read (buffer' 0' length);  			offset += length;  			file.Write (buffer' 0' length);  		}  	} catch (Exception e) {  	} finally {  		if (file != null)  			file.Close ();  		if (responseStream != null)  			responseStream.Close ();  		retryAttempt = true;  	}  	return downloadFileName;  }  
Magic Number,com.esri.gpt.csw,CswClient,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswClient.cs,SubmitHttpRequest,The following statement contains a magic number: if (method.Equals ("DOWNLOAD")) {  	FileStream file = null;  	string fileName = response.GetResponseHeader ("Content-Disposition");  	string[] s = null;  	if (fileName.ToLower ().EndsWith (".tif")) {  		s = URL.Split (new String[] {  			"coverage="  		}' 100' StringSplitOptions.RemoveEmptyEntries);  		s [1] = s [1].Trim () + ".tif";  	} else {  		s = fileName.Split ('=');  		s [1] = s [1].Replace ('\\'' ' ');  		s [1] = s [1].Replace ('"'' ' ');  		s [1] = s [1].Trim ();  	}  	try {  		downloadFileName = System.IO.Path.Combine (Utils.GetSpecialFolderPath (SpecialFolder.ConfigurationFiles)' s [1]);  		System.IO.File.Delete (downloadFileName);  		file = System.IO.File.Create (downloadFileName);  		// Buffer to read 10K bytes in chunk:  		byte[] buffer = new Byte[10000];  		int length = 10000;  		int offset = 0;  		while (length > 0) {  			length = responseStream.Read (buffer' 0' length);  			offset += length;  			file.Write (buffer' 0' length);  		}  	} catch (Exception e) {  	} finally {  		if (file != null)  			file.Close ();  		if (responseStream != null)  			responseStream.Close ();  		retryAttempt = true;  	}  	return downloadFileName;  }  
Magic Number,com.esri.gpt.csw,CswClient,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswClient.cs,SubmitHttpRequest,The following statement contains a magic number: if (method.Equals ("DOWNLOAD")) {  	FileStream file = null;  	string fileName = response.GetResponseHeader ("Content-Disposition");  	string[] s = null;  	if (fileName.ToLower ().EndsWith (".tif")) {  		s = URL.Split (new String[] {  			"coverage="  		}' 100' StringSplitOptions.RemoveEmptyEntries);  		s [1] = s [1].Trim () + ".tif";  	} else {  		s = fileName.Split ('=');  		s [1] = s [1].Replace ('\\'' ' ');  		s [1] = s [1].Replace ('"'' ' ');  		s [1] = s [1].Trim ();  	}  	try {  		downloadFileName = System.IO.Path.Combine (Utils.GetSpecialFolderPath (SpecialFolder.ConfigurationFiles)' s [1]);  		System.IO.File.Delete (downloadFileName);  		file = System.IO.File.Create (downloadFileName);  		// Buffer to read 10K bytes in chunk:  		byte[] buffer = new Byte[10000];  		int length = 10000;  		int offset = 0;  		while (length > 0) {  			length = responseStream.Read (buffer' 0' length);  			offset += length;  			file.Write (buffer' 0' length);  		}  	} catch (Exception e) {  	} finally {  		if (file != null)  			file.Close ();  		if (responseStream != null)  			responseStream.Close ();  		retryAttempt = true;  	}  	return downloadFileName;  }  
Magic Number,com.esri.gpt.csw,CswClient,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswClient.cs,SubmitHttpRequest,The following statement contains a magic number: if (fileName.ToLower ().EndsWith (".tif")) {  	s = URL.Split (new String[] {  		"coverage="  	}' 100' StringSplitOptions.RemoveEmptyEntries);  	s [1] = s [1].Trim () + ".tif";  } else {  	s = fileName.Split ('=');  	s [1] = s [1].Replace ('\\'' ' ');  	s [1] = s [1].Replace ('"'' ' ');  	s [1] = s [1].Trim ();  }  
Magic Number,com.esri.gpt.csw,CswClient,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswClient.cs,SubmitHttpRequest,The following statement contains a magic number: s = URL.Split (new String[] {  	"coverage="  }' 100' StringSplitOptions.RemoveEmptyEntries);  
Magic Number,com.esri.gpt.csw,CswClient,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswClient.cs,SubmitHttpRequest,The following statement contains a magic number: try {  	downloadFileName = System.IO.Path.Combine (Utils.GetSpecialFolderPath (SpecialFolder.ConfigurationFiles)' s [1]);  	System.IO.File.Delete (downloadFileName);  	file = System.IO.File.Create (downloadFileName);  	// Buffer to read 10K bytes in chunk:  	byte[] buffer = new Byte[10000];  	int length = 10000;  	int offset = 0;  	while (length > 0) {  		length = responseStream.Read (buffer' 0' length);  		offset += length;  		file.Write (buffer' 0' length);  	}  } catch (Exception e) {  } finally {  	if (file != null)  		file.Close ();  	if (responseStream != null)  		responseStream.Close ();  	retryAttempt = true;  }  
Magic Number,com.esri.gpt.csw,CswClient,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswClient.cs,SubmitHttpRequest,The following statement contains a magic number: try {  	downloadFileName = System.IO.Path.Combine (Utils.GetSpecialFolderPath (SpecialFolder.ConfigurationFiles)' s [1]);  	System.IO.File.Delete (downloadFileName);  	file = System.IO.File.Create (downloadFileName);  	// Buffer to read 10K bytes in chunk:  	byte[] buffer = new Byte[10000];  	int length = 10000;  	int offset = 0;  	while (length > 0) {  		length = responseStream.Read (buffer' 0' length);  		offset += length;  		file.Write (buffer' 0' length);  	}  } catch (Exception e) {  } finally {  	if (file != null)  		file.Close ();  	if (responseStream != null)  		responseStream.Close ();  	retryAttempt = true;  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: try {  	TextReader textreader = new StringReader (responsestring);  	XmlTextReader xmltextreader = new XmlTextReader (textreader);  	//load the Xml doc  	XPathDocument xPathDoc = new XPathDocument (xmltextreader);  	if (responsexsltobj == null) {  		responsexsltobj = new XslCompiledTransform ();  		XsltSettings settings = new XsltSettings (true' true);  		responsexsltobj.Load (responsexslt' settings' new XmlUrlResolver ());  	}  	//create the output stream  	StringWriter writer = new StringWriter ();  	//do the actual transform of Xml  	responsexsltobj.Transform (xPathDoc' null' writer);  	writer.Close ();  	//populate CswRecords  	XmlDocument doc = new XmlDocument ();  	doc.LoadXml (writer.ToString ());  	XmlNodeList xmlnodes = doc.GetElementsByTagName ("Record");  	foreach (XmlNode xmlnode in xmlnodes) {  		CswRecord record = new CswRecord ();  		record.ID = xmlnode.SelectSingleNode ("ID").InnerText;  		record.Title = xmlnode.SelectSingleNode ("Title").InnerText;  		record.Abstract = xmlnode.SelectSingleNode ("Abstract").InnerText;  		String lowercorner = "";  		if (this.SupportSpatialBoundary) {  			lowercorner = xmlnode.SelectSingleNode ("LowerCorner").InnerText;  		}  		String uppercorner = "";  		if (this.SupportSpatialBoundary) {  			uppercorner = xmlnode.SelectSingleNode ("UpperCorner").InnerText;  		}  		if ((lowercorner.Length > 0 && uppercorner.Length > 0)) {  			/*  record.BoundingBox.Maxx = Double.Parse(lowercorner.Substring(0' lowercorner.IndexOf(' ')));                             record.BoundingBox.Miny = Double.Parse(lowercorner.Substring(lowercorner.IndexOf(' ') + 1));                             record.BoundingBox.Minx = Double.Parse(uppercorner.Substring(0' uppercorner.IndexOf(' ')));                             record.BoundingBox.Maxy = Double.Parse(uppercorner.Substring(uppercorner.IndexOf(' ') + 1));*/Boolean parseFlag = false;  			CultureInfo cultureInfo = new CultureInfo ("en-us");  			double pareseResult = 0.0;  			parseFlag = Double.TryParse (lowercorner.Substring (0' lowercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Minx = pareseResult;  			parseFlag = Double.TryParse (lowercorner.Substring (lowercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Miny = pareseResult;  			parseFlag = Double.TryParse (uppercorner.Substring (0' uppercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Maxx = pareseResult;  			parseFlag = Double.TryParse (uppercorner.Substring (uppercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Maxy = pareseResult;  			if (parseFlag == false) {  				throw new Exception ("Number format error");  			}  		} else {  			record.BoundingBox.Maxx = 500.00;  			record.BoundingBox.Miny = 500.00;  			record.BoundingBox.Minx = 500.00;  			record.BoundingBox.Maxy = 500.00;  		}  		XmlNode node = xmlnode.SelectSingleNode ("Type");  		if (node != null) {  			record.IsLiveDataOrMap = node.InnerText.Equals ("liveData"' StringComparison.OrdinalIgnoreCase);  		} else {  			record.IsLiveDataOrMap = false;  		}  		XmlNode referencesNode = xmlnode.SelectSingleNode ("References");  		if (referencesNode != null) {  			String references = referencesNode.InnerText;  			DcList list = new DcList ();  			list.add (references);  			determineResourceUrl (record' list);  			/*  LinkedList<String> serverList = list.get(DcList.getScheme(DcList.Scheme.SERVER));                                               if (serverList.Count > 0)                           {                               String serviceType = getServiceType(serverList.First.Value);                               if (serviceType.Equals("aims") || serviceType.Equals("ags") || serviceType.Equals("wms") || serviceType.Equals("wcs"))                               {                                   record.MapServerURL = serverList.First.Value;                               }                           }*/} else  			record.MapServerURL = "";  		recordslist.AddRecord (record.ID.GetHashCode ()' record);  	}  } catch (Exception e) {  	throw e;  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: try {  	TextReader textreader = new StringReader (responsestring);  	XmlTextReader xmltextreader = new XmlTextReader (textreader);  	//load the Xml doc  	XPathDocument xPathDoc = new XPathDocument (xmltextreader);  	if (responsexsltobj == null) {  		responsexsltobj = new XslCompiledTransform ();  		XsltSettings settings = new XsltSettings (true' true);  		responsexsltobj.Load (responsexslt' settings' new XmlUrlResolver ());  	}  	//create the output stream  	StringWriter writer = new StringWriter ();  	//do the actual transform of Xml  	responsexsltobj.Transform (xPathDoc' null' writer);  	writer.Close ();  	//populate CswRecords  	XmlDocument doc = new XmlDocument ();  	doc.LoadXml (writer.ToString ());  	XmlNodeList xmlnodes = doc.GetElementsByTagName ("Record");  	foreach (XmlNode xmlnode in xmlnodes) {  		CswRecord record = new CswRecord ();  		record.ID = xmlnode.SelectSingleNode ("ID").InnerText;  		record.Title = xmlnode.SelectSingleNode ("Title").InnerText;  		record.Abstract = xmlnode.SelectSingleNode ("Abstract").InnerText;  		String lowercorner = "";  		if (this.SupportSpatialBoundary) {  			lowercorner = xmlnode.SelectSingleNode ("LowerCorner").InnerText;  		}  		String uppercorner = "";  		if (this.SupportSpatialBoundary) {  			uppercorner = xmlnode.SelectSingleNode ("UpperCorner").InnerText;  		}  		if ((lowercorner.Length > 0 && uppercorner.Length > 0)) {  			/*  record.BoundingBox.Maxx = Double.Parse(lowercorner.Substring(0' lowercorner.IndexOf(' ')));                             record.BoundingBox.Miny = Double.Parse(lowercorner.Substring(lowercorner.IndexOf(' ') + 1));                             record.BoundingBox.Minx = Double.Parse(uppercorner.Substring(0' uppercorner.IndexOf(' ')));                             record.BoundingBox.Maxy = Double.Parse(uppercorner.Substring(uppercorner.IndexOf(' ') + 1));*/Boolean parseFlag = false;  			CultureInfo cultureInfo = new CultureInfo ("en-us");  			double pareseResult = 0.0;  			parseFlag = Double.TryParse (lowercorner.Substring (0' lowercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Minx = pareseResult;  			parseFlag = Double.TryParse (lowercorner.Substring (lowercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Miny = pareseResult;  			parseFlag = Double.TryParse (uppercorner.Substring (0' uppercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Maxx = pareseResult;  			parseFlag = Double.TryParse (uppercorner.Substring (uppercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Maxy = pareseResult;  			if (parseFlag == false) {  				throw new Exception ("Number format error");  			}  		} else {  			record.BoundingBox.Maxx = 500.00;  			record.BoundingBox.Miny = 500.00;  			record.BoundingBox.Minx = 500.00;  			record.BoundingBox.Maxy = 500.00;  		}  		XmlNode node = xmlnode.SelectSingleNode ("Type");  		if (node != null) {  			record.IsLiveDataOrMap = node.InnerText.Equals ("liveData"' StringComparison.OrdinalIgnoreCase);  		} else {  			record.IsLiveDataOrMap = false;  		}  		XmlNode referencesNode = xmlnode.SelectSingleNode ("References");  		if (referencesNode != null) {  			String references = referencesNode.InnerText;  			DcList list = new DcList ();  			list.add (references);  			determineResourceUrl (record' list);  			/*  LinkedList<String> serverList = list.get(DcList.getScheme(DcList.Scheme.SERVER));                                               if (serverList.Count > 0)                           {                               String serviceType = getServiceType(serverList.First.Value);                               if (serviceType.Equals("aims") || serviceType.Equals("ags") || serviceType.Equals("wms") || serviceType.Equals("wcs"))                               {                                   record.MapServerURL = serverList.First.Value;                               }                           }*/} else  			record.MapServerURL = "";  		recordslist.AddRecord (record.ID.GetHashCode ()' record);  	}  } catch (Exception e) {  	throw e;  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: try {  	TextReader textreader = new StringReader (responsestring);  	XmlTextReader xmltextreader = new XmlTextReader (textreader);  	//load the Xml doc  	XPathDocument xPathDoc = new XPathDocument (xmltextreader);  	if (responsexsltobj == null) {  		responsexsltobj = new XslCompiledTransform ();  		XsltSettings settings = new XsltSettings (true' true);  		responsexsltobj.Load (responsexslt' settings' new XmlUrlResolver ());  	}  	//create the output stream  	StringWriter writer = new StringWriter ();  	//do the actual transform of Xml  	responsexsltobj.Transform (xPathDoc' null' writer);  	writer.Close ();  	//populate CswRecords  	XmlDocument doc = new XmlDocument ();  	doc.LoadXml (writer.ToString ());  	XmlNodeList xmlnodes = doc.GetElementsByTagName ("Record");  	foreach (XmlNode xmlnode in xmlnodes) {  		CswRecord record = new CswRecord ();  		record.ID = xmlnode.SelectSingleNode ("ID").InnerText;  		record.Title = xmlnode.SelectSingleNode ("Title").InnerText;  		record.Abstract = xmlnode.SelectSingleNode ("Abstract").InnerText;  		String lowercorner = "";  		if (this.SupportSpatialBoundary) {  			lowercorner = xmlnode.SelectSingleNode ("LowerCorner").InnerText;  		}  		String uppercorner = "";  		if (this.SupportSpatialBoundary) {  			uppercorner = xmlnode.SelectSingleNode ("UpperCorner").InnerText;  		}  		if ((lowercorner.Length > 0 && uppercorner.Length > 0)) {  			/*  record.BoundingBox.Maxx = Double.Parse(lowercorner.Substring(0' lowercorner.IndexOf(' ')));                             record.BoundingBox.Miny = Double.Parse(lowercorner.Substring(lowercorner.IndexOf(' ') + 1));                             record.BoundingBox.Minx = Double.Parse(uppercorner.Substring(0' uppercorner.IndexOf(' ')));                             record.BoundingBox.Maxy = Double.Parse(uppercorner.Substring(uppercorner.IndexOf(' ') + 1));*/Boolean parseFlag = false;  			CultureInfo cultureInfo = new CultureInfo ("en-us");  			double pareseResult = 0.0;  			parseFlag = Double.TryParse (lowercorner.Substring (0' lowercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Minx = pareseResult;  			parseFlag = Double.TryParse (lowercorner.Substring (lowercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Miny = pareseResult;  			parseFlag = Double.TryParse (uppercorner.Substring (0' uppercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Maxx = pareseResult;  			parseFlag = Double.TryParse (uppercorner.Substring (uppercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Maxy = pareseResult;  			if (parseFlag == false) {  				throw new Exception ("Number format error");  			}  		} else {  			record.BoundingBox.Maxx = 500.00;  			record.BoundingBox.Miny = 500.00;  			record.BoundingBox.Minx = 500.00;  			record.BoundingBox.Maxy = 500.00;  		}  		XmlNode node = xmlnode.SelectSingleNode ("Type");  		if (node != null) {  			record.IsLiveDataOrMap = node.InnerText.Equals ("liveData"' StringComparison.OrdinalIgnoreCase);  		} else {  			record.IsLiveDataOrMap = false;  		}  		XmlNode referencesNode = xmlnode.SelectSingleNode ("References");  		if (referencesNode != null) {  			String references = referencesNode.InnerText;  			DcList list = new DcList ();  			list.add (references);  			determineResourceUrl (record' list);  			/*  LinkedList<String> serverList = list.get(DcList.getScheme(DcList.Scheme.SERVER));                                               if (serverList.Count > 0)                           {                               String serviceType = getServiceType(serverList.First.Value);                               if (serviceType.Equals("aims") || serviceType.Equals("ags") || serviceType.Equals("wms") || serviceType.Equals("wcs"))                               {                                   record.MapServerURL = serverList.First.Value;                               }                           }*/} else  			record.MapServerURL = "";  		recordslist.AddRecord (record.ID.GetHashCode ()' record);  	}  } catch (Exception e) {  	throw e;  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: try {  	TextReader textreader = new StringReader (responsestring);  	XmlTextReader xmltextreader = new XmlTextReader (textreader);  	//load the Xml doc  	XPathDocument xPathDoc = new XPathDocument (xmltextreader);  	if (responsexsltobj == null) {  		responsexsltobj = new XslCompiledTransform ();  		XsltSettings settings = new XsltSettings (true' true);  		responsexsltobj.Load (responsexslt' settings' new XmlUrlResolver ());  	}  	//create the output stream  	StringWriter writer = new StringWriter ();  	//do the actual transform of Xml  	responsexsltobj.Transform (xPathDoc' null' writer);  	writer.Close ();  	//populate CswRecords  	XmlDocument doc = new XmlDocument ();  	doc.LoadXml (writer.ToString ());  	XmlNodeList xmlnodes = doc.GetElementsByTagName ("Record");  	foreach (XmlNode xmlnode in xmlnodes) {  		CswRecord record = new CswRecord ();  		record.ID = xmlnode.SelectSingleNode ("ID").InnerText;  		record.Title = xmlnode.SelectSingleNode ("Title").InnerText;  		record.Abstract = xmlnode.SelectSingleNode ("Abstract").InnerText;  		String lowercorner = "";  		if (this.SupportSpatialBoundary) {  			lowercorner = xmlnode.SelectSingleNode ("LowerCorner").InnerText;  		}  		String uppercorner = "";  		if (this.SupportSpatialBoundary) {  			uppercorner = xmlnode.SelectSingleNode ("UpperCorner").InnerText;  		}  		if ((lowercorner.Length > 0 && uppercorner.Length > 0)) {  			/*  record.BoundingBox.Maxx = Double.Parse(lowercorner.Substring(0' lowercorner.IndexOf(' ')));                             record.BoundingBox.Miny = Double.Parse(lowercorner.Substring(lowercorner.IndexOf(' ') + 1));                             record.BoundingBox.Minx = Double.Parse(uppercorner.Substring(0' uppercorner.IndexOf(' ')));                             record.BoundingBox.Maxy = Double.Parse(uppercorner.Substring(uppercorner.IndexOf(' ') + 1));*/Boolean parseFlag = false;  			CultureInfo cultureInfo = new CultureInfo ("en-us");  			double pareseResult = 0.0;  			parseFlag = Double.TryParse (lowercorner.Substring (0' lowercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Minx = pareseResult;  			parseFlag = Double.TryParse (lowercorner.Substring (lowercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Miny = pareseResult;  			parseFlag = Double.TryParse (uppercorner.Substring (0' uppercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Maxx = pareseResult;  			parseFlag = Double.TryParse (uppercorner.Substring (uppercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  			record.BoundingBox.Maxy = pareseResult;  			if (parseFlag == false) {  				throw new Exception ("Number format error");  			}  		} else {  			record.BoundingBox.Maxx = 500.00;  			record.BoundingBox.Miny = 500.00;  			record.BoundingBox.Minx = 500.00;  			record.BoundingBox.Maxy = 500.00;  		}  		XmlNode node = xmlnode.SelectSingleNode ("Type");  		if (node != null) {  			record.IsLiveDataOrMap = node.InnerText.Equals ("liveData"' StringComparison.OrdinalIgnoreCase);  		} else {  			record.IsLiveDataOrMap = false;  		}  		XmlNode referencesNode = xmlnode.SelectSingleNode ("References");  		if (referencesNode != null) {  			String references = referencesNode.InnerText;  			DcList list = new DcList ();  			list.add (references);  			determineResourceUrl (record' list);  			/*  LinkedList<String> serverList = list.get(DcList.getScheme(DcList.Scheme.SERVER));                                               if (serverList.Count > 0)                           {                               String serviceType = getServiceType(serverList.First.Value);                               if (serviceType.Equals("aims") || serviceType.Equals("ags") || serviceType.Equals("wms") || serviceType.Equals("wcs"))                               {                                   record.MapServerURL = serverList.First.Value;                               }                           }*/} else  			record.MapServerURL = "";  		recordslist.AddRecord (record.ID.GetHashCode ()' record);  	}  } catch (Exception e) {  	throw e;  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: foreach (XmlNode xmlnode in xmlnodes) {  	CswRecord record = new CswRecord ();  	record.ID = xmlnode.SelectSingleNode ("ID").InnerText;  	record.Title = xmlnode.SelectSingleNode ("Title").InnerText;  	record.Abstract = xmlnode.SelectSingleNode ("Abstract").InnerText;  	String lowercorner = "";  	if (this.SupportSpatialBoundary) {  		lowercorner = xmlnode.SelectSingleNode ("LowerCorner").InnerText;  	}  	String uppercorner = "";  	if (this.SupportSpatialBoundary) {  		uppercorner = xmlnode.SelectSingleNode ("UpperCorner").InnerText;  	}  	if ((lowercorner.Length > 0 && uppercorner.Length > 0)) {  		/*  record.BoundingBox.Maxx = Double.Parse(lowercorner.Substring(0' lowercorner.IndexOf(' ')));                             record.BoundingBox.Miny = Double.Parse(lowercorner.Substring(lowercorner.IndexOf(' ') + 1));                             record.BoundingBox.Minx = Double.Parse(uppercorner.Substring(0' uppercorner.IndexOf(' ')));                             record.BoundingBox.Maxy = Double.Parse(uppercorner.Substring(uppercorner.IndexOf(' ') + 1));*/Boolean parseFlag = false;  		CultureInfo cultureInfo = new CultureInfo ("en-us");  		double pareseResult = 0.0;  		parseFlag = Double.TryParse (lowercorner.Substring (0' lowercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Minx = pareseResult;  		parseFlag = Double.TryParse (lowercorner.Substring (lowercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Miny = pareseResult;  		parseFlag = Double.TryParse (uppercorner.Substring (0' uppercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Maxx = pareseResult;  		parseFlag = Double.TryParse (uppercorner.Substring (uppercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Maxy = pareseResult;  		if (parseFlag == false) {  			throw new Exception ("Number format error");  		}  	} else {  		record.BoundingBox.Maxx = 500.00;  		record.BoundingBox.Miny = 500.00;  		record.BoundingBox.Minx = 500.00;  		record.BoundingBox.Maxy = 500.00;  	}  	XmlNode node = xmlnode.SelectSingleNode ("Type");  	if (node != null) {  		record.IsLiveDataOrMap = node.InnerText.Equals ("liveData"' StringComparison.OrdinalIgnoreCase);  	} else {  		record.IsLiveDataOrMap = false;  	}  	XmlNode referencesNode = xmlnode.SelectSingleNode ("References");  	if (referencesNode != null) {  		String references = referencesNode.InnerText;  		DcList list = new DcList ();  		list.add (references);  		determineResourceUrl (record' list);  		/*  LinkedList<String> serverList = list.get(DcList.getScheme(DcList.Scheme.SERVER));                                               if (serverList.Count > 0)                           {                               String serviceType = getServiceType(serverList.First.Value);                               if (serviceType.Equals("aims") || serviceType.Equals("ags") || serviceType.Equals("wms") || serviceType.Equals("wcs"))                               {                                   record.MapServerURL = serverList.First.Value;                               }                           }*/} else  		record.MapServerURL = "";  	recordslist.AddRecord (record.ID.GetHashCode ()' record);  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: foreach (XmlNode xmlnode in xmlnodes) {  	CswRecord record = new CswRecord ();  	record.ID = xmlnode.SelectSingleNode ("ID").InnerText;  	record.Title = xmlnode.SelectSingleNode ("Title").InnerText;  	record.Abstract = xmlnode.SelectSingleNode ("Abstract").InnerText;  	String lowercorner = "";  	if (this.SupportSpatialBoundary) {  		lowercorner = xmlnode.SelectSingleNode ("LowerCorner").InnerText;  	}  	String uppercorner = "";  	if (this.SupportSpatialBoundary) {  		uppercorner = xmlnode.SelectSingleNode ("UpperCorner").InnerText;  	}  	if ((lowercorner.Length > 0 && uppercorner.Length > 0)) {  		/*  record.BoundingBox.Maxx = Double.Parse(lowercorner.Substring(0' lowercorner.IndexOf(' ')));                             record.BoundingBox.Miny = Double.Parse(lowercorner.Substring(lowercorner.IndexOf(' ') + 1));                             record.BoundingBox.Minx = Double.Parse(uppercorner.Substring(0' uppercorner.IndexOf(' ')));                             record.BoundingBox.Maxy = Double.Parse(uppercorner.Substring(uppercorner.IndexOf(' ') + 1));*/Boolean parseFlag = false;  		CultureInfo cultureInfo = new CultureInfo ("en-us");  		double pareseResult = 0.0;  		parseFlag = Double.TryParse (lowercorner.Substring (0' lowercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Minx = pareseResult;  		parseFlag = Double.TryParse (lowercorner.Substring (lowercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Miny = pareseResult;  		parseFlag = Double.TryParse (uppercorner.Substring (0' uppercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Maxx = pareseResult;  		parseFlag = Double.TryParse (uppercorner.Substring (uppercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Maxy = pareseResult;  		if (parseFlag == false) {  			throw new Exception ("Number format error");  		}  	} else {  		record.BoundingBox.Maxx = 500.00;  		record.BoundingBox.Miny = 500.00;  		record.BoundingBox.Minx = 500.00;  		record.BoundingBox.Maxy = 500.00;  	}  	XmlNode node = xmlnode.SelectSingleNode ("Type");  	if (node != null) {  		record.IsLiveDataOrMap = node.InnerText.Equals ("liveData"' StringComparison.OrdinalIgnoreCase);  	} else {  		record.IsLiveDataOrMap = false;  	}  	XmlNode referencesNode = xmlnode.SelectSingleNode ("References");  	if (referencesNode != null) {  		String references = referencesNode.InnerText;  		DcList list = new DcList ();  		list.add (references);  		determineResourceUrl (record' list);  		/*  LinkedList<String> serverList = list.get(DcList.getScheme(DcList.Scheme.SERVER));                                               if (serverList.Count > 0)                           {                               String serviceType = getServiceType(serverList.First.Value);                               if (serviceType.Equals("aims") || serviceType.Equals("ags") || serviceType.Equals("wms") || serviceType.Equals("wcs"))                               {                                   record.MapServerURL = serverList.First.Value;                               }                           }*/} else  		record.MapServerURL = "";  	recordslist.AddRecord (record.ID.GetHashCode ()' record);  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: foreach (XmlNode xmlnode in xmlnodes) {  	CswRecord record = new CswRecord ();  	record.ID = xmlnode.SelectSingleNode ("ID").InnerText;  	record.Title = xmlnode.SelectSingleNode ("Title").InnerText;  	record.Abstract = xmlnode.SelectSingleNode ("Abstract").InnerText;  	String lowercorner = "";  	if (this.SupportSpatialBoundary) {  		lowercorner = xmlnode.SelectSingleNode ("LowerCorner").InnerText;  	}  	String uppercorner = "";  	if (this.SupportSpatialBoundary) {  		uppercorner = xmlnode.SelectSingleNode ("UpperCorner").InnerText;  	}  	if ((lowercorner.Length > 0 && uppercorner.Length > 0)) {  		/*  record.BoundingBox.Maxx = Double.Parse(lowercorner.Substring(0' lowercorner.IndexOf(' ')));                             record.BoundingBox.Miny = Double.Parse(lowercorner.Substring(lowercorner.IndexOf(' ') + 1));                             record.BoundingBox.Minx = Double.Parse(uppercorner.Substring(0' uppercorner.IndexOf(' ')));                             record.BoundingBox.Maxy = Double.Parse(uppercorner.Substring(uppercorner.IndexOf(' ') + 1));*/Boolean parseFlag = false;  		CultureInfo cultureInfo = new CultureInfo ("en-us");  		double pareseResult = 0.0;  		parseFlag = Double.TryParse (lowercorner.Substring (0' lowercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Minx = pareseResult;  		parseFlag = Double.TryParse (lowercorner.Substring (lowercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Miny = pareseResult;  		parseFlag = Double.TryParse (uppercorner.Substring (0' uppercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Maxx = pareseResult;  		parseFlag = Double.TryParse (uppercorner.Substring (uppercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Maxy = pareseResult;  		if (parseFlag == false) {  			throw new Exception ("Number format error");  		}  	} else {  		record.BoundingBox.Maxx = 500.00;  		record.BoundingBox.Miny = 500.00;  		record.BoundingBox.Minx = 500.00;  		record.BoundingBox.Maxy = 500.00;  	}  	XmlNode node = xmlnode.SelectSingleNode ("Type");  	if (node != null) {  		record.IsLiveDataOrMap = node.InnerText.Equals ("liveData"' StringComparison.OrdinalIgnoreCase);  	} else {  		record.IsLiveDataOrMap = false;  	}  	XmlNode referencesNode = xmlnode.SelectSingleNode ("References");  	if (referencesNode != null) {  		String references = referencesNode.InnerText;  		DcList list = new DcList ();  		list.add (references);  		determineResourceUrl (record' list);  		/*  LinkedList<String> serverList = list.get(DcList.getScheme(DcList.Scheme.SERVER));                                               if (serverList.Count > 0)                           {                               String serviceType = getServiceType(serverList.First.Value);                               if (serviceType.Equals("aims") || serviceType.Equals("ags") || serviceType.Equals("wms") || serviceType.Equals("wcs"))                               {                                   record.MapServerURL = serverList.First.Value;                               }                           }*/} else  		record.MapServerURL = "";  	recordslist.AddRecord (record.ID.GetHashCode ()' record);  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: foreach (XmlNode xmlnode in xmlnodes) {  	CswRecord record = new CswRecord ();  	record.ID = xmlnode.SelectSingleNode ("ID").InnerText;  	record.Title = xmlnode.SelectSingleNode ("Title").InnerText;  	record.Abstract = xmlnode.SelectSingleNode ("Abstract").InnerText;  	String lowercorner = "";  	if (this.SupportSpatialBoundary) {  		lowercorner = xmlnode.SelectSingleNode ("LowerCorner").InnerText;  	}  	String uppercorner = "";  	if (this.SupportSpatialBoundary) {  		uppercorner = xmlnode.SelectSingleNode ("UpperCorner").InnerText;  	}  	if ((lowercorner.Length > 0 && uppercorner.Length > 0)) {  		/*  record.BoundingBox.Maxx = Double.Parse(lowercorner.Substring(0' lowercorner.IndexOf(' ')));                             record.BoundingBox.Miny = Double.Parse(lowercorner.Substring(lowercorner.IndexOf(' ') + 1));                             record.BoundingBox.Minx = Double.Parse(uppercorner.Substring(0' uppercorner.IndexOf(' ')));                             record.BoundingBox.Maxy = Double.Parse(uppercorner.Substring(uppercorner.IndexOf(' ') + 1));*/Boolean parseFlag = false;  		CultureInfo cultureInfo = new CultureInfo ("en-us");  		double pareseResult = 0.0;  		parseFlag = Double.TryParse (lowercorner.Substring (0' lowercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Minx = pareseResult;  		parseFlag = Double.TryParse (lowercorner.Substring (lowercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Miny = pareseResult;  		parseFlag = Double.TryParse (uppercorner.Substring (0' uppercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Maxx = pareseResult;  		parseFlag = Double.TryParse (uppercorner.Substring (uppercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  		record.BoundingBox.Maxy = pareseResult;  		if (parseFlag == false) {  			throw new Exception ("Number format error");  		}  	} else {  		record.BoundingBox.Maxx = 500.00;  		record.BoundingBox.Miny = 500.00;  		record.BoundingBox.Minx = 500.00;  		record.BoundingBox.Maxy = 500.00;  	}  	XmlNode node = xmlnode.SelectSingleNode ("Type");  	if (node != null) {  		record.IsLiveDataOrMap = node.InnerText.Equals ("liveData"' StringComparison.OrdinalIgnoreCase);  	} else {  		record.IsLiveDataOrMap = false;  	}  	XmlNode referencesNode = xmlnode.SelectSingleNode ("References");  	if (referencesNode != null) {  		String references = referencesNode.InnerText;  		DcList list = new DcList ();  		list.add (references);  		determineResourceUrl (record' list);  		/*  LinkedList<String> serverList = list.get(DcList.getScheme(DcList.Scheme.SERVER));                                               if (serverList.Count > 0)                           {                               String serviceType = getServiceType(serverList.First.Value);                               if (serviceType.Equals("aims") || serviceType.Equals("ags") || serviceType.Equals("wms") || serviceType.Equals("wcs"))                               {                                   record.MapServerURL = serverList.First.Value;                               }                           }*/} else  		record.MapServerURL = "";  	recordslist.AddRecord (record.ID.GetHashCode ()' record);  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: if ((lowercorner.Length > 0 && uppercorner.Length > 0)) {  	/*  record.BoundingBox.Maxx = Double.Parse(lowercorner.Substring(0' lowercorner.IndexOf(' ')));                             record.BoundingBox.Miny = Double.Parse(lowercorner.Substring(lowercorner.IndexOf(' ') + 1));                             record.BoundingBox.Minx = Double.Parse(uppercorner.Substring(0' uppercorner.IndexOf(' ')));                             record.BoundingBox.Maxy = Double.Parse(uppercorner.Substring(uppercorner.IndexOf(' ') + 1));*/Boolean parseFlag = false;  	CultureInfo cultureInfo = new CultureInfo ("en-us");  	double pareseResult = 0.0;  	parseFlag = Double.TryParse (lowercorner.Substring (0' lowercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Minx = pareseResult;  	parseFlag = Double.TryParse (lowercorner.Substring (lowercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Miny = pareseResult;  	parseFlag = Double.TryParse (uppercorner.Substring (0' uppercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Maxx = pareseResult;  	parseFlag = Double.TryParse (uppercorner.Substring (uppercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Maxy = pareseResult;  	if (parseFlag == false) {  		throw new Exception ("Number format error");  	}  } else {  	record.BoundingBox.Maxx = 500.00;  	record.BoundingBox.Miny = 500.00;  	record.BoundingBox.Minx = 500.00;  	record.BoundingBox.Maxy = 500.00;  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: if ((lowercorner.Length > 0 && uppercorner.Length > 0)) {  	/*  record.BoundingBox.Maxx = Double.Parse(lowercorner.Substring(0' lowercorner.IndexOf(' ')));                             record.BoundingBox.Miny = Double.Parse(lowercorner.Substring(lowercorner.IndexOf(' ') + 1));                             record.BoundingBox.Minx = Double.Parse(uppercorner.Substring(0' uppercorner.IndexOf(' ')));                             record.BoundingBox.Maxy = Double.Parse(uppercorner.Substring(uppercorner.IndexOf(' ') + 1));*/Boolean parseFlag = false;  	CultureInfo cultureInfo = new CultureInfo ("en-us");  	double pareseResult = 0.0;  	parseFlag = Double.TryParse (lowercorner.Substring (0' lowercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Minx = pareseResult;  	parseFlag = Double.TryParse (lowercorner.Substring (lowercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Miny = pareseResult;  	parseFlag = Double.TryParse (uppercorner.Substring (0' uppercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Maxx = pareseResult;  	parseFlag = Double.TryParse (uppercorner.Substring (uppercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Maxy = pareseResult;  	if (parseFlag == false) {  		throw new Exception ("Number format error");  	}  } else {  	record.BoundingBox.Maxx = 500.00;  	record.BoundingBox.Miny = 500.00;  	record.BoundingBox.Minx = 500.00;  	record.BoundingBox.Maxy = 500.00;  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: if ((lowercorner.Length > 0 && uppercorner.Length > 0)) {  	/*  record.BoundingBox.Maxx = Double.Parse(lowercorner.Substring(0' lowercorner.IndexOf(' ')));                             record.BoundingBox.Miny = Double.Parse(lowercorner.Substring(lowercorner.IndexOf(' ') + 1));                             record.BoundingBox.Minx = Double.Parse(uppercorner.Substring(0' uppercorner.IndexOf(' ')));                             record.BoundingBox.Maxy = Double.Parse(uppercorner.Substring(uppercorner.IndexOf(' ') + 1));*/Boolean parseFlag = false;  	CultureInfo cultureInfo = new CultureInfo ("en-us");  	double pareseResult = 0.0;  	parseFlag = Double.TryParse (lowercorner.Substring (0' lowercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Minx = pareseResult;  	parseFlag = Double.TryParse (lowercorner.Substring (lowercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Miny = pareseResult;  	parseFlag = Double.TryParse (uppercorner.Substring (0' uppercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Maxx = pareseResult;  	parseFlag = Double.TryParse (uppercorner.Substring (uppercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Maxy = pareseResult;  	if (parseFlag == false) {  		throw new Exception ("Number format error");  	}  } else {  	record.BoundingBox.Maxx = 500.00;  	record.BoundingBox.Miny = 500.00;  	record.BoundingBox.Minx = 500.00;  	record.BoundingBox.Maxy = 500.00;  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: if ((lowercorner.Length > 0 && uppercorner.Length > 0)) {  	/*  record.BoundingBox.Maxx = Double.Parse(lowercorner.Substring(0' lowercorner.IndexOf(' ')));                             record.BoundingBox.Miny = Double.Parse(lowercorner.Substring(lowercorner.IndexOf(' ') + 1));                             record.BoundingBox.Minx = Double.Parse(uppercorner.Substring(0' uppercorner.IndexOf(' ')));                             record.BoundingBox.Maxy = Double.Parse(uppercorner.Substring(uppercorner.IndexOf(' ') + 1));*/Boolean parseFlag = false;  	CultureInfo cultureInfo = new CultureInfo ("en-us");  	double pareseResult = 0.0;  	parseFlag = Double.TryParse (lowercorner.Substring (0' lowercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Minx = pareseResult;  	parseFlag = Double.TryParse (lowercorner.Substring (lowercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Miny = pareseResult;  	parseFlag = Double.TryParse (uppercorner.Substring (0' uppercorner.IndexOf (' '))' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Maxx = pareseResult;  	parseFlag = Double.TryParse (uppercorner.Substring (uppercorner.IndexOf (' ') + 1)' NumberStyles.Number' cultureInfo' out pareseResult);  	record.BoundingBox.Maxy = pareseResult;  	if (parseFlag == false) {  		throw new Exception ("Number format error");  	}  } else {  	record.BoundingBox.Maxx = 500.00;  	record.BoundingBox.Miny = 500.00;  	record.BoundingBox.Minx = 500.00;  	record.BoundingBox.Maxy = 500.00;  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: record.BoundingBox.Maxx = 500.00;  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: record.BoundingBox.Miny = 500.00;  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: record.BoundingBox.Minx = 500.00;  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,ReadCSWGetRecordsResponse,The following statement contains a magic number: record.BoundingBox.Maxy = 500.00;  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,IsUrl,The following statement contains a magic number: if (theString.Length < 4)  	return false;  else {  	if (theString.Substring (0' 5).Equals ("http:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Substring (0' 6).Equals ("https:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Substring (0' 4).Equals ("ftp:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Substring (0' 5).Equals ("file:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Contains ("Server\u2715http:"))  		return true;  	else  		return false;  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,IsUrl,The following statement contains a magic number: if (theString.Length < 4)  	return false;  else {  	if (theString.Substring (0' 5).Equals ("http:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Substring (0' 6).Equals ("https:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Substring (0' 4).Equals ("ftp:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Substring (0' 5).Equals ("file:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Contains ("Server\u2715http:"))  		return true;  	else  		return false;  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,IsUrl,The following statement contains a magic number: if (theString.Length < 4)  	return false;  else {  	if (theString.Substring (0' 5).Equals ("http:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Substring (0' 6).Equals ("https:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Substring (0' 4).Equals ("ftp:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Substring (0' 5).Equals ("file:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Contains ("Server\u2715http:"))  		return true;  	else  		return false;  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,IsUrl,The following statement contains a magic number: if (theString.Length < 4)  	return false;  else {  	if (theString.Substring (0' 5).Equals ("http:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Substring (0' 6).Equals ("https:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Substring (0' 4).Equals ("ftp:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Substring (0' 5).Equals ("file:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Contains ("Server\u2715http:"))  		return true;  	else  		return false;  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,IsUrl,The following statement contains a magic number: if (theString.Length < 4)  	return false;  else {  	if (theString.Substring (0' 5).Equals ("http:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Substring (0' 6).Equals ("https:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Substring (0' 4).Equals ("ftp:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Substring (0' 5).Equals ("file:"' StringComparison.CurrentCultureIgnoreCase))  		return true;  	else if (theString.Contains ("Server\u2715http:"))  		return true;  	else  		return false;  }  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,IsUrl,The following statement contains a magic number: if (theString.Substring (0' 5).Equals ("http:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 6).Equals ("https:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 4).Equals ("ftp:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 5).Equals ("file:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Contains ("Server\u2715http:"))  	return true;  else  	return false;  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,IsUrl,The following statement contains a magic number: if (theString.Substring (0' 5).Equals ("http:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 6).Equals ("https:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 4).Equals ("ftp:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 5).Equals ("file:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Contains ("Server\u2715http:"))  	return true;  else  	return false;  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,IsUrl,The following statement contains a magic number: if (theString.Substring (0' 5).Equals ("http:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 6).Equals ("https:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 4).Equals ("ftp:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 5).Equals ("file:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Contains ("Server\u2715http:"))  	return true;  else  	return false;  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,IsUrl,The following statement contains a magic number: if (theString.Substring (0' 5).Equals ("http:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 6).Equals ("https:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 4).Equals ("ftp:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 5).Equals ("file:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Contains ("Server\u2715http:"))  	return true;  else  	return false;  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,IsUrl,The following statement contains a magic number: if (theString.Substring (0' 6).Equals ("https:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 4).Equals ("ftp:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 5).Equals ("file:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Contains ("Server\u2715http:"))  	return true;  else  	return false;  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,IsUrl,The following statement contains a magic number: if (theString.Substring (0' 6).Equals ("https:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 4).Equals ("ftp:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 5).Equals ("file:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Contains ("Server\u2715http:"))  	return true;  else  	return false;  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,IsUrl,The following statement contains a magic number: if (theString.Substring (0' 6).Equals ("https:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 4).Equals ("ftp:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 5).Equals ("file:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Contains ("Server\u2715http:"))  	return true;  else  	return false;  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,IsUrl,The following statement contains a magic number: if (theString.Substring (0' 4).Equals ("ftp:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 5).Equals ("file:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Contains ("Server\u2715http:"))  	return true;  else  	return false;  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,IsUrl,The following statement contains a magic number: if (theString.Substring (0' 4).Equals ("ftp:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Substring (0' 5).Equals ("file:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Contains ("Server\u2715http:"))  	return true;  else  	return false;  
Magic Number,com.esri.gpt.csw,CswProfile,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\CswProfile.cs,IsUrl,The following statement contains a magic number: if (theString.Substring (0' 5).Equals ("file:"' StringComparison.CurrentCultureIgnoreCase))  	return true;  else if (theString.Contains ("Server\u2715http:"))  	return true;  else  	return false;  
Magic Number,com.esri.gpt.csw,DcList,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\DcList.cs,add,The following statement contains a magic number: for (int i = 0; i < schemeValues.Length; i++) {  	String schemeValue = chkStr (schemeValues [i]);  	if (schemeValue == "") {  		continue;  	}  	arrKeyValue = schemeValue.Split (this.DELIMETER_VALUES' 100' StringSplitOptions.RemoveEmptyEntries);  	if (arrKeyValue.Length == 1) {  		this.AddLast (new Value (arrKeyValue [0]' EMPTY_SCHEME));  		continue;  	}  	this.AddLast (new Value (arrKeyValue [0]' arrKeyValue [1]));  }  
Magic Number,com.esri.gpt.csw,DcList,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\DcList.cs,add,The following statement contains a magic number: arrKeyValue = schemeValue.Split (this.DELIMETER_VALUES' 100' StringSplitOptions.RemoveEmptyEntries);  
Magic Number,com.esri.gpt.csw,PromptCredentials,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\PromptCredentials.cs,passwordTxt_KeyDown,The following statement contains a magic number: if (e.KeyValue == 13) {  	submitBtn_Click (sender' e);  }  
Missing Default,com.esri.gpt.csw,DcList,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\DcList.cs,getScheme,The following switch statement is missing a default case: switch (scheme) {  case Scheme.METADATA_DOCUMENT:  	name = DcList.METADATA_DOCUMENT;  	break;  case Scheme.SERVER:  	name = DcList.SERVER;  	break;  }  
Missing Default,com.esri.gpt.csw,Utils,F:\newReposMay17\Esri_geoportal-server\components\desktop\CswClient\branches\1.0\src\Utils.cs,GetSpecialFolderPath,The following switch statement is missing a default case: switch (folder) {  case SpecialFolder.ConfigurationFiles:  	try {  		folderPath = logger.DataFolder;  	} catch (Exception e) {  		// throw e;  	}  	break;  case SpecialFolder.TransformationFiles:  	// "Documents And Settings\<user>\Application Data\ESRI\PortalFindServices"  	folderPath = GetSpecialFolderPath (Environment.SpecialFolder.ApplicationData);  	folderPath = System.IO.Path.Combine (folderPath' "ESRI");  	break;  case SpecialFolder.Data:  	folderPath = System.IO.Path.Combine (ExecutingAssemblyPath ()' "Data");  	break;  case SpecialFolder.Help:  	folderPath = System.IO.Path.Combine (ExecutingAssemblyPath ()' "Help");  	break;  case SpecialFolder.ExecutingAssembly:  	folderPath = ExecutingAssemblyPath ();  	break;  case SpecialFolder.Application:  	folderPath = System.Windows.Forms.Application.ExecutablePath;  	break;  case SpecialFolder.Temp:  	// Returns the path of the current system's temporary folder  	folderPath = System.IO.Path.GetTempPath ();  	break;  }  
