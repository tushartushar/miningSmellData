Implementation smell,Namespace,Class,File,Method,Description
Long Statement,RavenDBSamples.Indexing,BasicIndexOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\Indexing\BasicIndexOperations.cs,WaitForNonStaleResultsWithCutOff,The length of the statement  "					.Customize(x => x.WaitForNonStaleResultsAsOf(new DateTime(2011' 5' 1' 10' 0' 0' 0))) // Waits for results for specific time " is 123.
Long Statement,RavenDBSamples.BasicOperations,BasicSessionOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\BasicOperations\BasicSessionOperations.cs,QueryForTerms,The length of the statement  "				var secondPage = session.Advanced.DocumentStore.DatabaseCommands.GetTerms("indexName"' "MyProperty"' firstPage.Last()' 128); " is 124.
Magic Number,RavenDBSamples.Attachments,Attachments,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\Attachments\Attachments.cs,PutAttachment,The following statement contains a magic number: var data = new MemoryStream(new byte[] { 1' 2' 3 });
Magic Number,RavenDBSamples.Attachments,Attachments,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\Attachments\Attachments.cs,PutAttachment,The following statement contains a magic number: var data = new MemoryStream(new byte[] { 1' 2' 3 });
Magic Number,RavenDBSamples.Attachments,Attachments,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\Attachments\Attachments.cs,GetAttachmentsMetadata,The following statement contains a magic number: var attachmentsMetadata = DocumentStore.DatabaseCommands.GetAttachmentHeadersStartingWith("video"' start: 0'  			                                                                                          pageSize: 10);
Magic Number,RavenDBSamples.Indexing,BasicIndexOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\Indexing\BasicIndexOperations.cs,CheckForStaleResults,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				RavenQueryStatistics stats;  				var results = session.Query<BlogPost>()  				                     .Statistics(out stats)  				                     .Where(x => x.Comments.Length > 10)  				                     .ToList();  				if (stats.IsStale)  				{  					// Results are known to be stale  				}  			}
Magic Number,RavenDBSamples.Indexing,BasicIndexOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\Indexing\BasicIndexOperations.cs,WaitForNonStaleResults,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				RavenQueryStatistics stats;  				var results = session.Query<BlogPost>()  					.Statistics(out stats)  					.Where(x => x.Comments.Length > 10)  					.Customize(x => x.WaitForNonStaleResults(TimeSpan.FromSeconds(5)))  					.ToList();  			}
Magic Number,RavenDBSamples.Indexing,BasicIndexOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\Indexing\BasicIndexOperations.cs,WaitForNonStaleResults,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				RavenQueryStatistics stats;  				var results = session.Query<BlogPost>()  					.Statistics(out stats)  					.Where(x => x.Comments.Length > 10)  					.Customize(x => x.WaitForNonStaleResults(TimeSpan.FromSeconds(5)))  					.ToList();  			}
Magic Number,RavenDBSamples.Indexing,BasicIndexOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\Indexing\BasicIndexOperations.cs,WaitForNonStaleResultsWithCutOff,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				RavenQueryStatistics stats;  				var results = session.Query<BlogPost>()  					.Statistics(out stats)  					.Where(x => x.Comments.Length > 10)  					.Customize(x => x.WaitForNonStaleResultsAsOf(new DateTime(2011' 5' 1' 10' 0' 0' 0))) // Waits for results for specific time  					.Customize(x => x.WaitForNonStaleResultsAsOfNow()) // waits for non stale results for now  					.Customize(x => x.WaitForNonStaleResultsAsOfLastWrite()) // waits for non stale results for last write  					.ToList();  			}
Magic Number,RavenDBSamples.Indexing,BasicIndexOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\Indexing\BasicIndexOperations.cs,WaitForNonStaleResultsWithCutOff,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				RavenQueryStatistics stats;  				var results = session.Query<BlogPost>()  					.Statistics(out stats)  					.Where(x => x.Comments.Length > 10)  					.Customize(x => x.WaitForNonStaleResultsAsOf(new DateTime(2011' 5' 1' 10' 0' 0' 0))) // Waits for results for specific time  					.Customize(x => x.WaitForNonStaleResultsAsOfNow()) // waits for non stale results for now  					.Customize(x => x.WaitForNonStaleResultsAsOfLastWrite()) // waits for non stale results for last write  					.ToList();  			}
Magic Number,RavenDBSamples.Indexing,BasicIndexOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\Indexing\BasicIndexOperations.cs,WaitForNonStaleResultsWithCutOff,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				RavenQueryStatistics stats;  				var results = session.Query<BlogPost>()  					.Statistics(out stats)  					.Where(x => x.Comments.Length > 10)  					.Customize(x => x.WaitForNonStaleResultsAsOf(new DateTime(2011' 5' 1' 10' 0' 0' 0))) // Waits for results for specific time  					.Customize(x => x.WaitForNonStaleResultsAsOfNow()) // waits for non stale results for now  					.Customize(x => x.WaitForNonStaleResultsAsOfLastWrite()) // waits for non stale results for last write  					.ToList();  			}
Magic Number,RavenDBSamples.Indexing,BasicIndexOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\Indexing\BasicIndexOperations.cs,WaitForNonStaleResultsWithCutOff,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				RavenQueryStatistics stats;  				var results = session.Query<BlogPost>()  					.Statistics(out stats)  					.Where(x => x.Comments.Length > 10)  					.Customize(x => x.WaitForNonStaleResultsAsOf(new DateTime(2011' 5' 1' 10' 0' 0' 0))) // Waits for results for specific time  					.Customize(x => x.WaitForNonStaleResultsAsOfNow()) // waits for non stale results for now  					.Customize(x => x.WaitForNonStaleResultsAsOfLastWrite()) // waits for non stale results for last write  					.ToList();  			}
Magic Number,RavenDBSamples.BasicOperations,BasicQueryOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\BasicOperations\BasicQueryOperations.cs,QuarySample,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				//Get all blog posts from a category  				var results1 = (  					               from blog in session.Query<BlogPost>()  					               where blog.Category == "RavenDB"  					               select blog  				               ).ToList();    				//Get all blog posts that has at least 10 comments  				var results2 = session.Query<BlogPost>()  				                      .Where(x => x.Comments.Length >= 10)  				                      .ToList();    				//Get all the Ids of blog posts from a category with projection  				var results3 = from blog in session.Query<BlogPost>()  								   where blog.Category == "RavenDB"  								   select new { blog.Id }; // This is the projection    				//Get all blog posts that has at least 10 comments sorted by number of comments  				var results4 = session.Query<BlogPost>()  									  .Where(x => x.Comments.Length >= 10)  									  .OrderBy(post => post.Comments.Count())  									  .ToList();    				//Get all blog posts that has at least 10 comments sorted by number of comments decending  				var results5 = session.Query<BlogPost>()  									  .Where(x => x.Comments.Length >= 10)  									  .OrderByDescending(post => post.Comments.Count())  									  .ToList();  			}
Magic Number,RavenDBSamples.BasicOperations,BasicQueryOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\BasicOperations\BasicQueryOperations.cs,QuarySample,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				//Get all blog posts from a category  				var results1 = (  					               from blog in session.Query<BlogPost>()  					               where blog.Category == "RavenDB"  					               select blog  				               ).ToList();    				//Get all blog posts that has at least 10 comments  				var results2 = session.Query<BlogPost>()  				                      .Where(x => x.Comments.Length >= 10)  				                      .ToList();    				//Get all the Ids of blog posts from a category with projection  				var results3 = from blog in session.Query<BlogPost>()  								   where blog.Category == "RavenDB"  								   select new { blog.Id }; // This is the projection    				//Get all blog posts that has at least 10 comments sorted by number of comments  				var results4 = session.Query<BlogPost>()  									  .Where(x => x.Comments.Length >= 10)  									  .OrderBy(post => post.Comments.Count())  									  .ToList();    				//Get all blog posts that has at least 10 comments sorted by number of comments decending  				var results5 = session.Query<BlogPost>()  									  .Where(x => x.Comments.Length >= 10)  									  .OrderByDescending(post => post.Comments.Count())  									  .ToList();  			}
Magic Number,RavenDBSamples.BasicOperations,BasicQueryOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\BasicOperations\BasicQueryOperations.cs,QuarySample,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				//Get all blog posts from a category  				var results1 = (  					               from blog in session.Query<BlogPost>()  					               where blog.Category == "RavenDB"  					               select blog  				               ).ToList();    				//Get all blog posts that has at least 10 comments  				var results2 = session.Query<BlogPost>()  				                      .Where(x => x.Comments.Length >= 10)  				                      .ToList();    				//Get all the Ids of blog posts from a category with projection  				var results3 = from blog in session.Query<BlogPost>()  								   where blog.Category == "RavenDB"  								   select new { blog.Id }; // This is the projection    				//Get all blog posts that has at least 10 comments sorted by number of comments  				var results4 = session.Query<BlogPost>()  									  .Where(x => x.Comments.Length >= 10)  									  .OrderBy(post => post.Comments.Count())  									  .ToList();    				//Get all blog posts that has at least 10 comments sorted by number of comments decending  				var results5 = session.Query<BlogPost>()  									  .Where(x => x.Comments.Length >= 10)  									  .OrderByDescending(post => post.Comments.Count())  									  .ToList();  			}
Magic Number,RavenDBSamples.BasicOperations,BasicQueryOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\BasicOperations\BasicQueryOperations.cs,Paging,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				// Assuming a page size of 10' this is how will retrieve the 3rd page:  				var results = session.Query<BlogPost>()  				                     .Skip(20) // skip 2 pages worth of posts  				                     .Take(10) // Take posts in the page size  				                     .ToList(); // execute the query  			}
Magic Number,RavenDBSamples.BasicOperations,BasicQueryOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\BasicOperations\BasicQueryOperations.cs,Paging,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				// Assuming a page size of 10' this is how will retrieve the 3rd page:  				var results = session.Query<BlogPost>()  				                     .Skip(20) // skip 2 pages worth of posts  				                     .Take(10) // Take posts in the page size  				                     .ToList(); // execute the query  			}
Magic Number,RavenDBSamples.BasicOperations,BasicQueryOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\BasicOperations\BasicQueryOperations.cs,Paging,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				RavenQueryStatistics stats;    				// get the first page  				var results = session.Query<BlogPost>()  					.Statistics(out stats)  					.Skip(0 * 10) // retrieve results for the first page  					.Take(10) // page size is 10  					.Where(x => x.Category == "RavenDB")  					.Distinct()  					.ToList();  				var totalResutls = stats.TotalResults;  				var skippedResults = stats.SkippedResults;    				// get the second page  				results = session.Query<BlogPost>()  					.Statistics(out stats)  					.Skip((1 * 10) + skippedResults) // retrieve results for the second page' taking into account skipped results  					.Take(10) // page size is 10  					.Where(x => x.Category == "RavenDB")  					.Distinct()  					.ToList();  			}
Magic Number,RavenDBSamples.BasicOperations,BasicQueryOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\BasicOperations\BasicQueryOperations.cs,Paging,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				RavenQueryStatistics stats;    				// get the first page  				var results = session.Query<BlogPost>()  					.Statistics(out stats)  					.Skip(0 * 10) // retrieve results for the first page  					.Take(10) // page size is 10  					.Where(x => x.Category == "RavenDB")  					.Distinct()  					.ToList();  				var totalResutls = stats.TotalResults;  				var skippedResults = stats.SkippedResults;    				// get the second page  				results = session.Query<BlogPost>()  					.Statistics(out stats)  					.Skip((1 * 10) + skippedResults) // retrieve results for the second page' taking into account skipped results  					.Take(10) // page size is 10  					.Where(x => x.Category == "RavenDB")  					.Distinct()  					.ToList();  			}
Magic Number,RavenDBSamples.BasicOperations,BasicQueryOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\BasicOperations\BasicQueryOperations.cs,Paging,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				RavenQueryStatistics stats;    				// get the first page  				var results = session.Query<BlogPost>()  					.Statistics(out stats)  					.Skip(0 * 10) // retrieve results for the first page  					.Take(10) // page size is 10  					.Where(x => x.Category == "RavenDB")  					.Distinct()  					.ToList();  				var totalResutls = stats.TotalResults;  				var skippedResults = stats.SkippedResults;    				// get the second page  				results = session.Query<BlogPost>()  					.Statistics(out stats)  					.Skip((1 * 10) + skippedResults) // retrieve results for the second page' taking into account skipped results  					.Take(10) // page size is 10  					.Where(x => x.Category == "RavenDB")  					.Distinct()  					.ToList();  			}
Magic Number,RavenDBSamples.BasicOperations,BasicQueryOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\BasicOperations\BasicQueryOperations.cs,Paging,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				RavenQueryStatistics stats;    				// get the first page  				var results = session.Query<BlogPost>()  					.Statistics(out stats)  					.Skip(0 * 10) // retrieve results for the first page  					.Take(10) // page size is 10  					.Where(x => x.Category == "RavenDB")  					.Distinct()  					.ToList();  				var totalResutls = stats.TotalResults;  				var skippedResults = stats.SkippedResults;    				// get the second page  				results = session.Query<BlogPost>()  					.Statistics(out stats)  					.Skip((1 * 10) + skippedResults) // retrieve results for the second page' taking into account skipped results  					.Take(10) // page size is 10  					.Where(x => x.Category == "RavenDB")  					.Distinct()  					.ToList();  			}
Magic Number,RavenDBSamples.BasicOperations,BasicSessionOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\BasicOperations\BasicSessionOperations.cs,QueryForTerms,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				var firstPage = session.Advanced.DocumentStore.DatabaseCommands.GetTerms("indexName"' "MyProperty"' null' 128);  				var secondPage = session.Advanced.DocumentStore.DatabaseCommands.GetTerms("indexName"' "MyProperty"' firstPage.Last()' 128);  			}
Magic Number,RavenDBSamples.BasicOperations,BasicSessionOperations,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\BasicOperations\BasicSessionOperations.cs,QueryForTerms,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				var firstPage = session.Advanced.DocumentStore.DatabaseCommands.GetTerms("indexName"' "MyProperty"' null' 128);  				var secondPage = session.Advanced.DocumentStore.DatabaseCommands.GetTerms("indexName"' "MyProperty"' firstPage.Last()' 128);  			}
Magic Number,RavenDBSamples.SpatialSearch,SpatialSearch,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\SpatialSearch\SpatialSearch.cs,Spatial,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				var matchingResturants =  					session.Advanced.LuceneQuery<Restaurant>("Restaurants/ByRatingAndLocation")  					       .WhereGreaterThanOrEqual("Rating"' 4)  					       .WithinRadiusOf(radius: 5' latitude: 38.9103000' longitude: -77.3942)  					       .ToList();  			}
Magic Number,RavenDBSamples.SpatialSearch,SpatialSearch,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\SpatialSearch\SpatialSearch.cs,Spatial,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				var matchingResturants =  					session.Advanced.LuceneQuery<Restaurant>("Restaurants/ByRatingAndLocation")  					       .WhereGreaterThanOrEqual("Rating"' 4)  					       .WithinRadiusOf(radius: 5' latitude: 38.9103000' longitude: -77.3942)  					       .ToList();  			}
Magic Number,RavenDBSamples.SpatialSearch,SpatialSearch,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\SpatialSearch\SpatialSearch.cs,Spatial,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				var matchingResturants =  					session.Advanced.LuceneQuery<Restaurant>("Restaurants/ByRatingAndLocation")  					       .WhereGreaterThanOrEqual("Rating"' 4)  					       .WithinRadiusOf(radius: 5' latitude: 38.9103000' longitude: -77.3942)  					       .ToList();  			}
Magic Number,RavenDBSamples.SpatialSearch,SpatialSearch,C:\repos\ravendb_docs\Documentation\2.0\Samples\csharp\Raven.Documentation.Samples\Sample Projects\RavenDBSamples\RavenDBSamples\SpatialSearch\SpatialSearch.cs,Spatial,The following statement contains a magic number: using (var session = DocumentStore.OpenSession())  			{  				var matchingResturants =  					session.Advanced.LuceneQuery<Restaurant>("Restaurants/ByRatingAndLocation")  					       .WhereGreaterThanOrEqual("Rating"' 4)  					       .WithinRadiusOf(radius: 5' latitude: 38.9103000' longitude: -77.3942)  					       .ToList();  			}
