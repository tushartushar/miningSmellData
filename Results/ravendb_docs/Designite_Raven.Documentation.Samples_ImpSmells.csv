Implementation smell,Namespace,Class,File,Method,Description
Long Method,RavenCodeSamples.Consumer,Includes,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Includes.cs,SimplePaging,The method has 126 lines of code.
Long Method,RavenCodeSamples.Consumer,Patching,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Patching.cs,SimplePatching,The method has 145 lines of code.
Long Method,RavenCodeSamples.Server,Bundles,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Server\Bundles.cs,ForDocumenting,The method has 112 lines of code.
Long Statement,RavenCodeSamples.Server,Bundles,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Server\Bundles.cs,ForDocumenting,The length of the statement  "					session.Advanced.GetMetadataFor(parent)["Raven-Cascade-Delete-Documents"] = RavenJArray.FromObject(new[] { "childId1"' "childId2" }); " is 133.
Long Statement,RavenCodeSamples.Server,Bundles,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Server\Bundles.cs,ForDocumenting,The length of the statement  "					session.Advanced.GetMetadataFor(parent)["Raven-Cascade-Delete-Attachments"] = RavenJArray.FromObject(new[] { "attachmentId1"' " attachmentId2" }); " is 146.
Magic Number,RavenCodeSamples,CodeSampleBase,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\CodeSampleBase.cs,NewDocumentStore,The following statement contains a magic number: path = Path.Combine(path' "TestDb").Substring(6);
Magic Number,RavenCodeSamples,HomepageSlides,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\HomepageSlides.cs,Steps,The following statement contains a magic number: using (var session = MyDocStore.OpenSession())              {                  var blogPosts = from post in session.Query<BlogPost>()                                 where post.PublishedAt > new DateTime(2011' 8' 31)                                 select post;                    Console.WriteLine(blogPosts.Count());              }
Magic Number,RavenCodeSamples,HomepageSlides,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\HomepageSlides.cs,Steps,The following statement contains a magic number: using (var session = MyDocStore.OpenSession())              {                  var blogPosts = from post in session.Query<BlogPost>()                                 where post.PublishedAt > new DateTime(2011' 8' 31)                                 select post;                    Console.WriteLine(blogPosts.Count());              }
Magic Number,RavenCodeSamples,HomepageSlides,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\HomepageSlides.cs,Steps,The following statement contains a magic number: using (var session = MyDocStore.OpenSession())              {                  var blogPosts = from post in session.Query<BlogPost>()                                 where post.PublishedAt > new DateTime(2011' 8' 31)                                 select post;                    Console.WriteLine(blogPosts.Count());              }
Magic Number,RavenCodeSamples.Consumer,Attachments,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Attachments.cs,SimpleAttachments,The following statement contains a magic number: using (var documentStore = NewDocumentStore())  			{  				#region retrieving_attachment  				Raven.Abstractions.Data.Attachment attachment = documentStore.DatabaseCommands.GetAttachment("videos/1");  				#endregion    				#region putting_attachment  				Stream data = new MemoryStream(new byte[] { 1' 2' 3 }); // don't forget to load the data from a file or something!  				documentStore.DatabaseCommands.PutAttachment("videos/2"' null' data'  				                                             new RavenJObject {{"Description"' "Kids play in the garden"}});  				#endregion    				#region deleting_attachment  				documentStore.DatabaseCommands.DeleteAttachment("videos/1"' null);  				#endregion  			}
Magic Number,RavenCodeSamples.Consumer,Attachments,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Attachments.cs,SimpleAttachments,The following statement contains a magic number: using (var documentStore = NewDocumentStore())  			{  				#region retrieving_attachment  				Raven.Abstractions.Data.Attachment attachment = documentStore.DatabaseCommands.GetAttachment("videos/1");  				#endregion    				#region putting_attachment  				Stream data = new MemoryStream(new byte[] { 1' 2' 3 }); // don't forget to load the data from a file or something!  				documentStore.DatabaseCommands.PutAttachment("videos/2"' null' data'  				                                             new RavenJObject {{"Description"' "Kids play in the garden"}});  				#endregion    				#region deleting_attachment  				documentStore.DatabaseCommands.DeleteAttachment("videos/1"' null);  				#endregion  			}
Magic Number,RavenCodeSamples.Consumer,DynamicQueries,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\DynamicQueries.cs,LinqQuerying,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region linquerying_1  					var results =   						(  							from company in session.Query<Company>()  							select company  						)  							.ToArray();  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_2  					// Filtering by string comparison on a property  					var results = from company in session.Query<Company>()  					              where company.Name == "Hibernating Rhinos"  					              select company;    					// Numeric property range  					results = from company in session.Query<Company>()  					          where company.NumberOfHappyCustomers > 100  					          select company;    					// Filtering based on a nested (calculated) property  					results = from company in session.Query<Company>()  					          where company.Employees.Count > 10  					          select company;  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_3  					// Filtering by string comparison on a property  					var results = session.Query<Company>()  						.Where(x => x.Name == "Hibernating Rhinos");    					// Numeric property comparison  					results = session.Query<Company>()  						.Where(x => x.NumberOfHappyCustomers > 100);    					// Filtering based on a nested property  					results = session.Query<Company>()  						.Where(x => x.Employees.Count > 10);  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_4  					// Return only companies having at least one employee named "Ayende"  					IQueryable<Company> companies = from c in session.Query<Company>()  									 where c.Employees.Any(employee => employee.Name == "Ayende")  					                 select c;    					// Query on nested collections - will return any company with at least one developer  					// whose specialty is in C#  					companies = from c in session.Query<Company>()  					            where c.Employees.Any(x => x.Specialties.Any(sp => sp == "C#"))  					            select c;    					// Using the In operator - return entities whose a field value is in a provided list  					companies = from c in session.Query<Company>()  								where c.Country.In(new [] {"Israel"' "USA"})  								select c;  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_5  					// In this sample' we are only interested in the names of the companies satisfying  					// our query conditions' so we project those only into an anonymous object.  					var companyNames = from c in session.Query<Company>()  					                   where c.Employees.Any(x => x.Specialties.Any(sp => sp == "C#"))  					                   select new {c.Name}; // This is where the projection happens    					// Same query same idea' but this time we want to get results as objects of type Company.  					// Only the Name property will be populated' the rest will remain empty.  					Company[] companies = (from c in session.Query<Company>()  					                       where c.Employees.Any(x => x.Specialties.Any(sp => sp == "C#"))  					                       select new Company {Name = c.Name}) // This is where the projection happens  						.ToArray();  					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,DynamicQueries,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\DynamicQueries.cs,LinqQuerying,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region linquerying_1  					var results =   						(  							from company in session.Query<Company>()  							select company  						)  							.ToArray();  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_2  					// Filtering by string comparison on a property  					var results = from company in session.Query<Company>()  					              where company.Name == "Hibernating Rhinos"  					              select company;    					// Numeric property range  					results = from company in session.Query<Company>()  					          where company.NumberOfHappyCustomers > 100  					          select company;    					// Filtering based on a nested (calculated) property  					results = from company in session.Query<Company>()  					          where company.Employees.Count > 10  					          select company;  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_3  					// Filtering by string comparison on a property  					var results = session.Query<Company>()  						.Where(x => x.Name == "Hibernating Rhinos");    					// Numeric property comparison  					results = session.Query<Company>()  						.Where(x => x.NumberOfHappyCustomers > 100);    					// Filtering based on a nested property  					results = session.Query<Company>()  						.Where(x => x.Employees.Count > 10);  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_4  					// Return only companies having at least one employee named "Ayende"  					IQueryable<Company> companies = from c in session.Query<Company>()  									 where c.Employees.Any(employee => employee.Name == "Ayende")  					                 select c;    					// Query on nested collections - will return any company with at least one developer  					// whose specialty is in C#  					companies = from c in session.Query<Company>()  					            where c.Employees.Any(x => x.Specialties.Any(sp => sp == "C#"))  					            select c;    					// Using the In operator - return entities whose a field value is in a provided list  					companies = from c in session.Query<Company>()  								where c.Country.In(new [] {"Israel"' "USA"})  								select c;  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_5  					// In this sample' we are only interested in the names of the companies satisfying  					// our query conditions' so we project those only into an anonymous object.  					var companyNames = from c in session.Query<Company>()  					                   where c.Employees.Any(x => x.Specialties.Any(sp => sp == "C#"))  					                   select new {c.Name}; // This is where the projection happens    					// Same query same idea' but this time we want to get results as objects of type Company.  					// Only the Name property will be populated' the rest will remain empty.  					Company[] companies = (from c in session.Query<Company>()  					                       where c.Employees.Any(x => x.Specialties.Any(sp => sp == "C#"))  					                       select new Company {Name = c.Name}) // This is where the projection happens  						.ToArray();  					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,DynamicQueries,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\DynamicQueries.cs,LinqQuerying,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region linquerying_1  					var results =   						(  							from company in session.Query<Company>()  							select company  						)  							.ToArray();  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_2  					// Filtering by string comparison on a property  					var results = from company in session.Query<Company>()  					              where company.Name == "Hibernating Rhinos"  					              select company;    					// Numeric property range  					results = from company in session.Query<Company>()  					          where company.NumberOfHappyCustomers > 100  					          select company;    					// Filtering based on a nested (calculated) property  					results = from company in session.Query<Company>()  					          where company.Employees.Count > 10  					          select company;  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_3  					// Filtering by string comparison on a property  					var results = session.Query<Company>()  						.Where(x => x.Name == "Hibernating Rhinos");    					// Numeric property comparison  					results = session.Query<Company>()  						.Where(x => x.NumberOfHappyCustomers > 100);    					// Filtering based on a nested property  					results = session.Query<Company>()  						.Where(x => x.Employees.Count > 10);  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_4  					// Return only companies having at least one employee named "Ayende"  					IQueryable<Company> companies = from c in session.Query<Company>()  									 where c.Employees.Any(employee => employee.Name == "Ayende")  					                 select c;    					// Query on nested collections - will return any company with at least one developer  					// whose specialty is in C#  					companies = from c in session.Query<Company>()  					            where c.Employees.Any(x => x.Specialties.Any(sp => sp == "C#"))  					            select c;    					// Using the In operator - return entities whose a field value is in a provided list  					companies = from c in session.Query<Company>()  								where c.Country.In(new [] {"Israel"' "USA"})  								select c;  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_5  					// In this sample' we are only interested in the names of the companies satisfying  					// our query conditions' so we project those only into an anonymous object.  					var companyNames = from c in session.Query<Company>()  					                   where c.Employees.Any(x => x.Specialties.Any(sp => sp == "C#"))  					                   select new {c.Name}; // This is where the projection happens    					// Same query same idea' but this time we want to get results as objects of type Company.  					// Only the Name property will be populated' the rest will remain empty.  					Company[] companies = (from c in session.Query<Company>()  					                       where c.Employees.Any(x => x.Specialties.Any(sp => sp == "C#"))  					                       select new Company {Name = c.Name}) // This is where the projection happens  						.ToArray();  					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,DynamicQueries,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\DynamicQueries.cs,LinqQuerying,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region linquerying_1  					var results =   						(  							from company in session.Query<Company>()  							select company  						)  							.ToArray();  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_2  					// Filtering by string comparison on a property  					var results = from company in session.Query<Company>()  					              where company.Name == "Hibernating Rhinos"  					              select company;    					// Numeric property range  					results = from company in session.Query<Company>()  					          where company.NumberOfHappyCustomers > 100  					          select company;    					// Filtering based on a nested (calculated) property  					results = from company in session.Query<Company>()  					          where company.Employees.Count > 10  					          select company;  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_3  					// Filtering by string comparison on a property  					var results = session.Query<Company>()  						.Where(x => x.Name == "Hibernating Rhinos");    					// Numeric property comparison  					results = session.Query<Company>()  						.Where(x => x.NumberOfHappyCustomers > 100);    					// Filtering based on a nested property  					results = session.Query<Company>()  						.Where(x => x.Employees.Count > 10);  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_4  					// Return only companies having at least one employee named "Ayende"  					IQueryable<Company> companies = from c in session.Query<Company>()  									 where c.Employees.Any(employee => employee.Name == "Ayende")  					                 select c;    					// Query on nested collections - will return any company with at least one developer  					// whose specialty is in C#  					companies = from c in session.Query<Company>()  					            where c.Employees.Any(x => x.Specialties.Any(sp => sp == "C#"))  					            select c;    					// Using the In operator - return entities whose a field value is in a provided list  					companies = from c in session.Query<Company>()  								where c.Country.In(new [] {"Israel"' "USA"})  								select c;  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region linquerying_5  					// In this sample' we are only interested in the names of the companies satisfying  					// our query conditions' so we project those only into an anonymous object.  					var companyNames = from c in session.Query<Company>()  					                   where c.Employees.Any(x => x.Specialties.Any(sp => sp == "C#"))  					                   select new {c.Name}; // This is where the projection happens    					// Same query same idea' but this time we want to get results as objects of type Company.  					// Only the Name property will be populated' the rest will remain empty.  					Company[] companies = (from c in session.Query<Company>()  					                       where c.Employees.Any(x => x.Specialties.Any(sp => sp == "C#"))  					                       select new Company {Name = c.Name}) // This is where the projection happens  						.ToArray();  					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Faceted,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Faceted.cs,GetTermsSample,The following statement contains a magic number: using (var documentStore = NewDocumentStore())  			{  				using (var session = documentStore.OpenSession())  				{  					#region getterms1    					var firstPage = session.Advanced.DatabaseCommands.GetTerms("indexName"' "MyProperty"' null' 128);  					var secondPage = session.Advanced.DatabaseCommands.GetTerms("indexName"' "MyProperty"' firstPage.Last()' 128);    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Faceted,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Faceted.cs,GetTermsSample,The following statement contains a magic number: using (var documentStore = NewDocumentStore())  			{  				using (var session = documentStore.OpenSession())  				{  					#region getterms1    					var firstPage = session.Advanced.DatabaseCommands.GetTerms("indexName"' "MyProperty"' null' 128);  					var secondPage = session.Advanced.DatabaseCommands.GetTerms("indexName"' "MyProperty"' firstPage.Last()' 128);    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Includes,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Includes.cs,SimplePaging,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region includes1    					var order = session.Include<Order>(x => x.CustomerId)  						.Load("orders/1234");    					// this will not require querying the server!  					var cust = session.Load<Customer>(order.CustomerId);    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes1_2    					var order = session.Include<Order2' Customer2>(x => x.Customer2Id)  						.Load("orders/1234");    					// this will not require querying the server!  					var cust2 = session.Load<Customer2>(order.Customer2Id);    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes2    					var orders = session.Query<Order>()  						.Customize(x => x.Include<Order>(o => o.CustomerId))  						.Where(x => x.TotalPrice > 100)  						.ToList();    					foreach (var order in orders)  					{  						// this will not require querying the server!  						var cust = session.Load<Customer>(order.CustomerId);  					}    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes2_2    					var orders = session.Query<Order2>()  						.Customize(x => x.Include<Order2' Customer2>(o => o.Customer2Id))  						.Where(x => x.TotalPrice > 100)  						.ToList();    					foreach (var order in orders)  					{  						// this will not require querying the server!  						var cust2 = session.Load<Customer2>(order.Customer2Id);  					}    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes3    					var order = session.Include<Order>(x => x.SupplierIds)  						.Load("orders/1234");    					foreach (var supplierId in order.SupplierIds)  					{  						// this will not require querying the server!  						var supp = session.Load<Supplier>(supplierId);  					}    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes3_2    					var order = session.Include<Order2' Supplier2>(x => x.Supplier2Ids)  						.Load("orders/1234");    					foreach (var supplier2Id in order.Supplier2Ids)  					{  						// this will not require querying the server!  						var supp2 = session.Load<Supplier2>(supplier2Id);  					}    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes4    					var order = session.Include<Order>(x => x.Refferal.CustomerId)  						.Load("orders/1234");    					// this will not require querying the server!  					var referrer = session.Load<Customer>(order.Refferal.CustomerId);    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes4_2    					var order = session.Include<Order2' Customer2>(x => x.Refferal2.Customer2Id)  						.Load("orders/1234");    					// this will not require querying the server!  					var referrer2 = session.Load<Customer2>(order.Refferal2.Customer2Id);    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes5    					var order = session.Include<Order>(x => x.LineItems.Select(li => li.ProductId))  						.Load("orders/1234");    					foreach (var lineItem in order.LineItems)  					{  						// this will not require querying the server!  						var product = session.Load<Product>(lineItem.ProductId);  					}    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes5_2    					var order = session.Include<Order2' Product2>(x => x.LineItem2s.Select(li => li.Product2Id))  					.Load("orders/1234");    					foreach (var lineItem2 in order.LineItem2s)  					{  						// this will not require querying the server!  						var product2 = session.Load<Product2>(lineItem2.Product2Id);  					}    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes6    					var order = session.Include<Order3' Customer2>(x => x.Customer.Id)  						.Load("orders/1234");    					// this will not require querying the server!  					var fullCustomer = session.Load<Customer2>(order.Customer.Id);    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Includes,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Includes.cs,SimplePaging,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region includes1    					var order = session.Include<Order>(x => x.CustomerId)  						.Load("orders/1234");    					// this will not require querying the server!  					var cust = session.Load<Customer>(order.CustomerId);    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes1_2    					var order = session.Include<Order2' Customer2>(x => x.Customer2Id)  						.Load("orders/1234");    					// this will not require querying the server!  					var cust2 = session.Load<Customer2>(order.Customer2Id);    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes2    					var orders = session.Query<Order>()  						.Customize(x => x.Include<Order>(o => o.CustomerId))  						.Where(x => x.TotalPrice > 100)  						.ToList();    					foreach (var order in orders)  					{  						// this will not require querying the server!  						var cust = session.Load<Customer>(order.CustomerId);  					}    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes2_2    					var orders = session.Query<Order2>()  						.Customize(x => x.Include<Order2' Customer2>(o => o.Customer2Id))  						.Where(x => x.TotalPrice > 100)  						.ToList();    					foreach (var order in orders)  					{  						// this will not require querying the server!  						var cust2 = session.Load<Customer2>(order.Customer2Id);  					}    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes3    					var order = session.Include<Order>(x => x.SupplierIds)  						.Load("orders/1234");    					foreach (var supplierId in order.SupplierIds)  					{  						// this will not require querying the server!  						var supp = session.Load<Supplier>(supplierId);  					}    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes3_2    					var order = session.Include<Order2' Supplier2>(x => x.Supplier2Ids)  						.Load("orders/1234");    					foreach (var supplier2Id in order.Supplier2Ids)  					{  						// this will not require querying the server!  						var supp2 = session.Load<Supplier2>(supplier2Id);  					}    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes4    					var order = session.Include<Order>(x => x.Refferal.CustomerId)  						.Load("orders/1234");    					// this will not require querying the server!  					var referrer = session.Load<Customer>(order.Refferal.CustomerId);    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes4_2    					var order = session.Include<Order2' Customer2>(x => x.Refferal2.Customer2Id)  						.Load("orders/1234");    					// this will not require querying the server!  					var referrer2 = session.Load<Customer2>(order.Refferal2.Customer2Id);    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes5    					var order = session.Include<Order>(x => x.LineItems.Select(li => li.ProductId))  						.Load("orders/1234");    					foreach (var lineItem in order.LineItems)  					{  						// this will not require querying the server!  						var product = session.Load<Product>(lineItem.ProductId);  					}    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes5_2    					var order = session.Include<Order2' Product2>(x => x.LineItem2s.Select(li => li.Product2Id))  					.Load("orders/1234");    					foreach (var lineItem2 in order.LineItem2s)  					{  						// this will not require querying the server!  						var product2 = session.Load<Product2>(lineItem2.Product2Id);  					}    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region includes6    					var order = session.Include<Order3' Customer2>(x => x.Customer.Id)  						.Load("orders/1234");    					// this will not require querying the server!  					var fullCustomer = session.Load<Customer2>(order.Customer.Id);    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Paging,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Paging.cs,SimplePaging,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region paging1    					// Assuming a page size of 10' this is how will retrieve the 3rd page:  					var results = session.Query<BlogPost>()  						.Skip(20) // skip 2 pages worth of posts  						.Take(10) // Take posts in the page size  						.ToArray() // execute the query  						;    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region paging2    					RavenQueryStatistics stats;  					var results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Where(x => x.Category == "RavenDB")  						.Take(10)  						.ToArray();  					var totalResults = stats.TotalResults;    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region paging3    					RavenQueryStatistics stats;    					// get the first page  					var results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Skip(0 * 10) // retrieve results for the first page  						.Take(10) // page size is 10  						.Where(x => x.Category == "RavenDB")  						.Distinct()  						.ToArray();  					var totalResults = stats.TotalResults;  					var skippedResults = stats.SkippedResults;    					// get the second page  					results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Skip((1 * 10) + skippedResults) // retrieve results for the second page' taking into account skipped results  						.Take(10) // page size is 10  						.Where(x => x.Category == "RavenDB")  						.Distinct()  						.ToArray();    					// and so on...    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Paging,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Paging.cs,SimplePaging,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region paging1    					// Assuming a page size of 10' this is how will retrieve the 3rd page:  					var results = session.Query<BlogPost>()  						.Skip(20) // skip 2 pages worth of posts  						.Take(10) // Take posts in the page size  						.ToArray() // execute the query  						;    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region paging2    					RavenQueryStatistics stats;  					var results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Where(x => x.Category == "RavenDB")  						.Take(10)  						.ToArray();  					var totalResults = stats.TotalResults;    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region paging3    					RavenQueryStatistics stats;    					// get the first page  					var results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Skip(0 * 10) // retrieve results for the first page  						.Take(10) // page size is 10  						.Where(x => x.Category == "RavenDB")  						.Distinct()  						.ToArray();  					var totalResults = stats.TotalResults;  					var skippedResults = stats.SkippedResults;    					// get the second page  					results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Skip((1 * 10) + skippedResults) // retrieve results for the second page' taking into account skipped results  						.Take(10) // page size is 10  						.Where(x => x.Category == "RavenDB")  						.Distinct()  						.ToArray();    					// and so on...    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Paging,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Paging.cs,SimplePaging,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region paging1    					// Assuming a page size of 10' this is how will retrieve the 3rd page:  					var results = session.Query<BlogPost>()  						.Skip(20) // skip 2 pages worth of posts  						.Take(10) // Take posts in the page size  						.ToArray() // execute the query  						;    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region paging2    					RavenQueryStatistics stats;  					var results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Where(x => x.Category == "RavenDB")  						.Take(10)  						.ToArray();  					var totalResults = stats.TotalResults;    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region paging3    					RavenQueryStatistics stats;    					// get the first page  					var results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Skip(0 * 10) // retrieve results for the first page  						.Take(10) // page size is 10  						.Where(x => x.Category == "RavenDB")  						.Distinct()  						.ToArray();  					var totalResults = stats.TotalResults;  					var skippedResults = stats.SkippedResults;    					// get the second page  					results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Skip((1 * 10) + skippedResults) // retrieve results for the second page' taking into account skipped results  						.Take(10) // page size is 10  						.Where(x => x.Category == "RavenDB")  						.Distinct()  						.ToArray();    					// and so on...    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Paging,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Paging.cs,SimplePaging,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region paging1    					// Assuming a page size of 10' this is how will retrieve the 3rd page:  					var results = session.Query<BlogPost>()  						.Skip(20) // skip 2 pages worth of posts  						.Take(10) // Take posts in the page size  						.ToArray() // execute the query  						;    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region paging2    					RavenQueryStatistics stats;  					var results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Where(x => x.Category == "RavenDB")  						.Take(10)  						.ToArray();  					var totalResults = stats.TotalResults;    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region paging3    					RavenQueryStatistics stats;    					// get the first page  					var results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Skip(0 * 10) // retrieve results for the first page  						.Take(10) // page size is 10  						.Where(x => x.Category == "RavenDB")  						.Distinct()  						.ToArray();  					var totalResults = stats.TotalResults;  					var skippedResults = stats.SkippedResults;    					// get the second page  					results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Skip((1 * 10) + skippedResults) // retrieve results for the second page' taking into account skipped results  						.Take(10) // page size is 10  						.Where(x => x.Category == "RavenDB")  						.Distinct()  						.ToArray();    					// and so on...    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Paging,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Paging.cs,SimplePaging,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region paging1    					// Assuming a page size of 10' this is how will retrieve the 3rd page:  					var results = session.Query<BlogPost>()  						.Skip(20) // skip 2 pages worth of posts  						.Take(10) // Take posts in the page size  						.ToArray() // execute the query  						;    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region paging2    					RavenQueryStatistics stats;  					var results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Where(x => x.Category == "RavenDB")  						.Take(10)  						.ToArray();  					var totalResults = stats.TotalResults;    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region paging3    					RavenQueryStatistics stats;    					// get the first page  					var results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Skip(0 * 10) // retrieve results for the first page  						.Take(10) // page size is 10  						.Where(x => x.Category == "RavenDB")  						.Distinct()  						.ToArray();  					var totalResults = stats.TotalResults;  					var skippedResults = stats.SkippedResults;    					// get the second page  					results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Skip((1 * 10) + skippedResults) // retrieve results for the second page' taking into account skipped results  						.Take(10) // page size is 10  						.Where(x => x.Category == "RavenDB")  						.Distinct()  						.ToArray();    					// and so on...    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Paging,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Paging.cs,SimplePaging,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region paging1    					// Assuming a page size of 10' this is how will retrieve the 3rd page:  					var results = session.Query<BlogPost>()  						.Skip(20) // skip 2 pages worth of posts  						.Take(10) // Take posts in the page size  						.ToArray() // execute the query  						;    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region paging2    					RavenQueryStatistics stats;  					var results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Where(x => x.Category == "RavenDB")  						.Take(10)  						.ToArray();  					var totalResults = stats.TotalResults;    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region paging3    					RavenQueryStatistics stats;    					// get the first page  					var results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Skip(0 * 10) // retrieve results for the first page  						.Take(10) // page size is 10  						.Where(x => x.Category == "RavenDB")  						.Distinct()  						.ToArray();  					var totalResults = stats.TotalResults;  					var skippedResults = stats.SkippedResults;    					// get the second page  					results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Skip((1 * 10) + skippedResults) // retrieve results for the second page' taking into account skipped results  						.Take(10) // page size is 10  						.Where(x => x.Category == "RavenDB")  						.Distinct()  						.ToArray();    					// and so on...    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Paging,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Paging.cs,SimplePaging,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region paging1    					// Assuming a page size of 10' this is how will retrieve the 3rd page:  					var results = session.Query<BlogPost>()  						.Skip(20) // skip 2 pages worth of posts  						.Take(10) // Take posts in the page size  						.ToArray() // execute the query  						;    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region paging2    					RavenQueryStatistics stats;  					var results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Where(x => x.Category == "RavenDB")  						.Take(10)  						.ToArray();  					var totalResults = stats.TotalResults;    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region paging3    					RavenQueryStatistics stats;    					// get the first page  					var results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Skip(0 * 10) // retrieve results for the first page  						.Take(10) // page size is 10  						.Where(x => x.Category == "RavenDB")  						.Distinct()  						.ToArray();  					var totalResults = stats.TotalResults;  					var skippedResults = stats.SkippedResults;    					// get the second page  					results = session.Query<BlogPost>()  						.Statistics(out stats)  						.Skip((1 * 10) + skippedResults) // retrieve results for the second page' taking into account skipped results  						.Take(10) // page size is 10  						.Where(x => x.Category == "RavenDB")  						.Distinct()  						.ToArray();    					// and so on...    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Sharding,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Sharding.cs,Sharding,The following statement contains a magic number: using (var session = documentStore.OpenSession())  			{  				var asian = new Company { Name = "Company 1"' Region = "Asia" };  				session.Store(asian);  				var middleEastern = new Company { Name = "Company 2"' Region = "Middle-East" };  				session.Store(middleEastern);  				var american = new Company { Name = "Company 3"' Region = "America" };  				session.Store(american);    				session.Store(new Invoice { CompanyId = american.Id' Amount = 3' IssuedAt = DateTime.Today.AddDays(-1) });  				session.Store(new Invoice { CompanyId = asian.Id' Amount = 5' IssuedAt = DateTime.Today.AddDays(-1) });  				session.Store(new Invoice { CompanyId = middleEastern.Id' Amount = 12' IssuedAt = DateTime.Today });  				session.SaveChanges();  			}
Magic Number,RavenCodeSamples.Consumer,Sharding,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Sharding.cs,Sharding,The following statement contains a magic number: using (var session = documentStore.OpenSession())  			{  				var asian = new Company { Name = "Company 1"' Region = "Asia" };  				session.Store(asian);  				var middleEastern = new Company { Name = "Company 2"' Region = "Middle-East" };  				session.Store(middleEastern);  				var american = new Company { Name = "Company 3"' Region = "America" };  				session.Store(american);    				session.Store(new Invoice { CompanyId = american.Id' Amount = 3' IssuedAt = DateTime.Today.AddDays(-1) });  				session.Store(new Invoice { CompanyId = asian.Id' Amount = 5' IssuedAt = DateTime.Today.AddDays(-1) });  				session.Store(new Invoice { CompanyId = middleEastern.Id' Amount = 12' IssuedAt = DateTime.Today });  				session.SaveChanges();  			}
Magic Number,RavenCodeSamples.Consumer,Sharding,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Sharding.cs,Sharding,The following statement contains a magic number: using (var session = documentStore.OpenSession())  			{  				var asian = new Company { Name = "Company 1"' Region = "Asia" };  				session.Store(asian);  				var middleEastern = new Company { Name = "Company 2"' Region = "Middle-East" };  				session.Store(middleEastern);  				var american = new Company { Name = "Company 3"' Region = "America" };  				session.Store(american);    				session.Store(new Invoice { CompanyId = american.Id' Amount = 3' IssuedAt = DateTime.Today.AddDays(-1) });  				session.Store(new Invoice { CompanyId = asian.Id' Amount = 5' IssuedAt = DateTime.Today.AddDays(-1) });  				session.Store(new Invoice { CompanyId = middleEastern.Id' Amount = 12' IssuedAt = DateTime.Today });  				session.SaveChanges();  			}
Magic Number,RavenCodeSamples.Consumer,Spatial,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Spatial.cs,BasicSpatialSearch,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region spatial2  					var matchingRestaurants =  						session.Advanced.LuceneQuery<Restaurant>("Restaurants/ByRatingAndLocation")  							.WhereGreaterThanOrEqual("Rating"' 4)  							.WithinRadiusOf(radius: 5' latitude: 38.9103000' longitude: -77.3942)  							.ToList();  					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Spatial,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Spatial.cs,BasicSpatialSearch,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region spatial2  					var matchingRestaurants =  						session.Advanced.LuceneQuery<Restaurant>("Restaurants/ByRatingAndLocation")  							.WhereGreaterThanOrEqual("Rating"' 4)  							.WithinRadiusOf(radius: 5' latitude: 38.9103000' longitude: -77.3942)  							.ToList();  					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Spatial,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Spatial.cs,BasicSpatialSearch,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region spatial2  					var matchingRestaurants =  						session.Advanced.LuceneQuery<Restaurant>("Restaurants/ByRatingAndLocation")  							.WhereGreaterThanOrEqual("Rating"' 4)  							.WithinRadiusOf(radius: 5' latitude: 38.9103000' longitude: -77.3942)  							.ToList();  					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Spatial,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Spatial.cs,BasicSpatialSearch,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region spatial2  					var matchingRestaurants =  						session.Advanced.LuceneQuery<Restaurant>("Restaurants/ByRatingAndLocation")  							.WhereGreaterThanOrEqual("Rating"' 4)  							.WithinRadiusOf(radius: 5' latitude: 38.9103000' longitude: -77.3942)  							.ToList();  					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Stale,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Stale.cs,SimpleStaleChecks,The following statement contains a magic number: using (var documentStore = NewDocumentStore())  			{  				using (var session = documentStore.OpenSession())  				{  					#region stale1    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.ToArray();    					if (stats.IsStale)  					{  						// Results are known to be stale  					}    					#endregion  				}    				using (var session = documentStore.OpenSession())  				{    					#region stale2    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.Customize(x => x.WaitForNonStaleResults(TimeSpan.FromSeconds(5)))  						.ToArray();    					#endregion  				}    				using (var session = documentStore.OpenSession())  				{    					#region stale3    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.Customize(x => x.WaitForNonStaleResultsAsOf(new DateTime(2011' 5' 1' 10' 0' 0' 0)))  						.ToArray();    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Stale,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Stale.cs,SimpleStaleChecks,The following statement contains a magic number: using (var documentStore = NewDocumentStore())  			{  				using (var session = documentStore.OpenSession())  				{  					#region stale1    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.ToArray();    					if (stats.IsStale)  					{  						// Results are known to be stale  					}    					#endregion  				}    				using (var session = documentStore.OpenSession())  				{    					#region stale2    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.Customize(x => x.WaitForNonStaleResults(TimeSpan.FromSeconds(5)))  						.ToArray();    					#endregion  				}    				using (var session = documentStore.OpenSession())  				{    					#region stale3    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.Customize(x => x.WaitForNonStaleResultsAsOf(new DateTime(2011' 5' 1' 10' 0' 0' 0)))  						.ToArray();    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Stale,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Stale.cs,SimpleStaleChecks,The following statement contains a magic number: using (var documentStore = NewDocumentStore())  			{  				using (var session = documentStore.OpenSession())  				{  					#region stale1    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.ToArray();    					if (stats.IsStale)  					{  						// Results are known to be stale  					}    					#endregion  				}    				using (var session = documentStore.OpenSession())  				{    					#region stale2    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.Customize(x => x.WaitForNonStaleResults(TimeSpan.FromSeconds(5)))  						.ToArray();    					#endregion  				}    				using (var session = documentStore.OpenSession())  				{    					#region stale3    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.Customize(x => x.WaitForNonStaleResultsAsOf(new DateTime(2011' 5' 1' 10' 0' 0' 0)))  						.ToArray();    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Stale,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Stale.cs,SimpleStaleChecks,The following statement contains a magic number: using (var documentStore = NewDocumentStore())  			{  				using (var session = documentStore.OpenSession())  				{  					#region stale1    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.ToArray();    					if (stats.IsStale)  					{  						// Results are known to be stale  					}    					#endregion  				}    				using (var session = documentStore.OpenSession())  				{    					#region stale2    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.Customize(x => x.WaitForNonStaleResults(TimeSpan.FromSeconds(5)))  						.ToArray();    					#endregion  				}    				using (var session = documentStore.OpenSession())  				{    					#region stale3    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.Customize(x => x.WaitForNonStaleResultsAsOf(new DateTime(2011' 5' 1' 10' 0' 0' 0)))  						.ToArray();    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Stale,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Stale.cs,SimpleStaleChecks,The following statement contains a magic number: using (var documentStore = NewDocumentStore())  			{  				using (var session = documentStore.OpenSession())  				{  					#region stale1    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.ToArray();    					if (stats.IsStale)  					{  						// Results are known to be stale  					}    					#endregion  				}    				using (var session = documentStore.OpenSession())  				{    					#region stale2    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.Customize(x => x.WaitForNonStaleResults(TimeSpan.FromSeconds(5)))  						.ToArray();    					#endregion  				}    				using (var session = documentStore.OpenSession())  				{    					#region stale3    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.Customize(x => x.WaitForNonStaleResultsAsOf(new DateTime(2011' 5' 1' 10' 0' 0' 0)))  						.ToArray();    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Stale,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Stale.cs,SimpleStaleChecks,The following statement contains a magic number: using (var documentStore = NewDocumentStore())  			{  				using (var session = documentStore.OpenSession())  				{  					#region stale1    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.ToArray();    					if (stats.IsStale)  					{  						// Results are known to be stale  					}    					#endregion  				}    				using (var session = documentStore.OpenSession())  				{    					#region stale2    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.Customize(x => x.WaitForNonStaleResults(TimeSpan.FromSeconds(5)))  						.ToArray();    					#endregion  				}    				using (var session = documentStore.OpenSession())  				{    					#region stale3    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.Customize(x => x.WaitForNonStaleResultsAsOf(new DateTime(2011' 5' 1' 10' 0' 0' 0)))  						.ToArray();    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Consumer,Stale,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Consumer\Stale.cs,SimpleStaleChecks,The following statement contains a magic number: using (var documentStore = NewDocumentStore())  			{  				using (var session = documentStore.OpenSession())  				{  					#region stale1    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.ToArray();    					if (stats.IsStale)  					{  						// Results are known to be stale  					}    					#endregion  				}    				using (var session = documentStore.OpenSession())  				{    					#region stale2    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.Customize(x => x.WaitForNonStaleResults(TimeSpan.FromSeconds(5)))  						.ToArray();    					#endregion  				}    				using (var session = documentStore.OpenSession())  				{    					#region stale3    					RavenQueryStatistics stats;  					var results = session.Query<Product>()  						.Statistics(out stats)  						.Where(x => x.Price > 10)  						.Customize(x => x.WaitForNonStaleResultsAsOf(new DateTime(2011' 5' 1' 10' 0' 0' 0)))  						.ToArray();    					#endregion  				}  			}
Magic Number,RavenCodeSamples.Intro,BasicOperations,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Intro\BasicOperations.cs,BasicSamples,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				#region open_the_session  				// Saving changes using the session API  				using (IDocumentSession session = store.OpenSession())  				{  					// Operations against session    					// Flush those changes  					session.SaveChanges();  				}  				#endregion    				using (var session = store.OpenSession())  				{  					#region saving_document_2    					// Saving the new instance to RavenDB  					session.Store(post);  					session.SaveChanges();    					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region editing_document_1  					// BlogPosts/1 is entity of type BlogPost with Id of 1  					BlogPost existingBlogPost = session.Load<BlogPost>("BlogPosts/1");  					#endregion    					#region editing_document_2  					existingBlogPost.Title = "Some new title";  					#endregion    					#region editing_document_3  					session.SaveChanges();  					#endregion    					#region deleting_document_1  					session.Delete(existingBlogPost);  					session.SaveChanges();  					#endregion    					#region deleting_document_2  					session.Advanced.DatabaseCommands.Delete("posts/1234"' null);  					#endregion    					#region deleting_document_using_defer  					session.Advanced.Defer(new DeleteCommandData {Key = "posts/1234"});  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region transaction_support_1  					using (var transaction = new TransactionScope())  					{  						BlogPost entity = session.Load<BlogPost>("blogs/1");    						entity.Title = "Some new title";    						session.SaveChanges();    						session.Delete(entity);  						session.SaveChanges();    						transaction.Complete();  					}  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region basic_querying_1  					var results = from blog in session.Query<BlogPost>()  					              where blog.Category == "RavenDB"  					              select blog;  					#endregion  				}    				using (var session = store.OpenSession())  				{  					#region basic_querying_2  					var results = session.Query<BlogPost>()  						.Where(x => x.Comments.Length >= 10)  						.ToList();  					#endregion  				}  			}
Magic Number,RavenCodeSamples.Server,Bundles,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Server\Bundles.cs,VersioningBundle,The following statement contains a magic number: using (var store = NewDocumentStore())  			{  				using (var session = store.OpenSession())  				{  					#region versioning1    					session.Store(new  					{  						Exclude = false'  						Id = "Raven/Versioning/DefaultConfiguration"'  						MaxRevisions = 5  					});    					#endregion    					#region versioning2    					session.Store(new  					{  						Exclude = true'  						Id = "Raven/Versioning/Users"'  					});    					#endregion  				}    				#region versioning3    				using (var session = store.OpenSession())  				{  					session.Store(new User { Name = "Ayende Rahien" });  					session.SaveChanges();  				}    				#endregion  			}
Magic Number,RavenCodeSamples.Server,Bundles,C:\repos\ravendb_docs\Documentation\1.0\Samples\csharp\Raven.Documentation.Samples\Server\Bundles.cs,ForDocumenting,The following statement contains a magic number: using (var documentStore = new DocumentStore())  			{  				#region expiration1    				var expiry = DateTime.Now.AddMinutes(5);  				using (var session = documentStore.OpenSession())  				{  					session.Store(userSession);  					session.Advanced.GetMetadataFor(userSession)["Raven-Expiration-Date"] = new RavenJValue(expiry.ToUniversalTime());  					session.SaveChanges();  				}    				#endregion    				#region cascadedelete1  				using (var session = documentStore.OpenSession())  				{  					session.Store(parent);  					session.Advanced.GetMetadataFor(parent)["Raven-Cascade-Delete-Documents"] = RavenJArray.FromObject(new[] { "childId1"' "childId2" });  					session.Advanced.GetMetadataFor(parent)["Raven-Cascade-Delete-Attachments"] = RavenJArray.FromObject(new[] { "attachmentId1"' " attachmentId2" });  					session.SaveChanges();  				}  				#endregion    				#region replicationconflicts1  				using (var session = documentStore.OpenSession())  				{  					try  					{  						var user = session.Load<User>("users/ayende");  						Console.WriteLine(user.Name);  					}  					catch (ConflictException e)  					{  						Console.WriteLine("Choose which document you want to preserver:");  						var list = new List<JsonDocument>();  						for (int i = 0; i < e.ConflictedVersionIds.Length; i++)  						{  							var doc = documentStore.DatabaseCommands.Get(e.ConflictedVersionIds[i]);  							list.Add(doc);  							Console.WriteLine("{0}. {1}"' i' doc.DataAsJson.ToString(Formatting.None));  						}  						var select = int.Parse(Console.ReadLine());  						var resolved = list[select];  						documentStore.DatabaseCommands.Put("users/ayende"' null' resolved.DataAsJson' resolved.Metadata);  					}  				}  				#endregion  				using (var session = documentStore.OpenSession())  				{  					#region authorization1    					// Allow nurses to schedule appointment for patients  					session.Store(new AuthorizationRole  					{  						Id = "Authorization/Roles/Nurses"'  						Permissions =  							{  								new OperationPermission  								{  									Allow = true'  									Operation = "Appointment/Schedule"'  									Tags = new List<string>{"Patient"}  								}  							}  					});    					// Allow doctors to authorize hospitalizations  					session.Store(new AuthorizationRole  					{  						Id = "Authorization/Roles/Doctors"'  						Permissions =  							{  								new OperationPermission  								{  									Allow = true'  									Operation = "Hospitalization/Authorize"'  									Tags = new List<string>{"Patient"}  								}  							}  					});  					#endregion    					#region authorization2  					// Associate Patient with clinic  					session.SetAuthorizationFor(session.Load<Patient>("Patients/MaryMallon")' new DocumentAuthorization  					{  						Tags = {"Clinics/Kirya"' "Patient"}  					});  					  					// Associate Doctor with clinic  					session.Store(new AuthorizationUser  					{  						Id = "Authorization/Users/DrHowser"'  						Name = "Doogie Howser"'  						Roles = {"Authorization/Roles/Doctors"}'  						Permissions =  							{  								new OperationPermission  								{  									Allow = true'  									Operation = "Patient/View"'  									Tags = new List<string>{"Clinics/Kirya"}  								}'  							}  					});  					#endregion    					#region authorization3  					session.SecureFor("Authorization/Users/DrHowser"' "Hospitalization/Authorize");  					var mary = session.Load<Patient>("Patients/MaryMallon");  					mary.AuthorizeHospitalization();  					session.SaveChanges();  					#endregion  				}  			}
