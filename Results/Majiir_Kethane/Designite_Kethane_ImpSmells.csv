Implementation smell,Namespace,Class,File,Method,Description
Long Method,Kethane.PartModules,KethaneDrillAnimatorLegacy,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDrillAnimatorLegacy.cs,Update,The method has 111 lines of code.
Long Method,Kethane.Scenarios,KethaneScanningTutorial,C:\repos\Majiir_Kethane\Plugin\Kethane\Scenarios\KethaneScanningTutorial.cs,OnTutorialSetup,The method has 152 lines of code.
Complex Method,Kethane.PartModules,KethaneExtractor,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneExtractor.cs,Update,Cyclomatic complexity of the method is 10
Complex Method,Kethane.UserInterface,MainMenuOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MainMenuOverlay.cs,startMenuOverlay,Cyclomatic complexity of the method is 8
Complex Method,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,OnGUI,Cyclomatic complexity of the method is 12
Complex Method,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,controlWindow,Cyclomatic complexity of the method is 9
Long Statement,Kethane,ResourceData,C:\repos\Majiir_Kethane\Plugin\Kethane\ResourceData.cs,createGenerator,The length of the statement  "            if (constructor == null) { Debug.LogError("[Kethane] Could not find appropriate constructor for " + name); return null; } " is 121.
Long Statement,Kethane,KethaneData,C:\repos\Majiir_Kethane\Plugin\Kethane\KethaneData.cs,OnSave,The length of the statement  "            configNode.AddValue("Version"' System.Diagnostics.FileVersionInfo.GetVersionInfo(System.Reflection.Assembly.GetExecutingAssembly().Location).ProductVersion); " is 157.
Long Statement,Kethane,KethaneController,C:\repos\Majiir_Kethane\Plugin\Kethane\KethaneController.cs,loadResourceDefinitions,The length of the statement  "            foreach (var definition in GameDatabase.Instance.GetConfigNodes("KethaneResource").Select(TryLoadResourceDefinition).Where(d => d != null)) " is 139.
Long Statement,Kethane.Generators,Polygon,C:\repos\Majiir_Kethane\Plugin\Kethane\Generators\LegacyResourceGenerator.cs,PointInPolygon,The length of the statement  "                    (p.x < (_vertices[j].x - _vertices[i].x) * (p.y - _vertices[i].y) / (_vertices[j].y - _vertices[i].y) + _vertices[i].x)) " is 120.
Long Statement,Kethane.PartModules,HeatSinkAnimator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\HeatSinkAnimator.cs,OnFixedUpdate,The length of the statement  "            var outsideTemp = FlightGlobals.getExternalTemperature(FlightGlobals.getAltitudeAtPos(position)' FlightGlobals.getMainBody()); " is 126.
Long Statement,Kethane.PartModules,HeatSinkAnimator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\HeatSinkAnimator.cs,OnFixedUpdate,The length of the statement  "            var rate = InternalDissipation + deployAmount * (HeatSinkDissipation + pressure * (PressureDissipation + AirSpeedDissipation * airSpeed)); " is 138.
Long Statement,Kethane.PartModules,KethaneDetectorAnimator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDetectorAnimator.cs,OnUpdate,The length of the statement  "            RotH.localRotation = Quaternion.RotateTowards(RotH.localRotation' Quaternion.AngleAxis(beta' new Vector3(0' 1' 0))' speed); " is 123.
Long Statement,Kethane.PartModules,KethaneDetectorAnimator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDetectorAnimator.cs,OnUpdate,The length of the statement  "            RotV.localRotation = Quaternion.RotateTowards(RotV.localRotation' Quaternion.AngleAxis(alpha' new Vector3(1' 0' 0))' speed); " is 124.
Long Statement,Kethane.PartModules,KethaneDrillAnimator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDrillAnimator.cs,Update,The length of the statement  "                deployState.speed = (CurrentState == ExtractorState.Deploying || CurrentState == ExtractorState.Deployed) ? speed : -speed; " is 123.
Long Statement,Kethane.PartModules,KethaneGenerator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneGenerator.cs,OnFixedUpdate,The length of the statement  "            var kethaneDemand = demand * KethaneRate * TimeWarp.fixedDeltaTime / (1 + fanSpeed.Average * pressure * pressureEfficiencyFactor); " is 130.
Long Statement,Kethane.PartModules,KethaneGenerator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneGenerator.cs,OnFixedUpdate,The length of the statement  "            part.RequestResource("XenonGas"' -kethaneDrawn * XenonMassRatio * PartResourceLibrary.Instance.GetDefinition("Kethane").density / PartResourceLibrary.Instance.GetDefinition("XenonGas").density); " is 194.
Long Statement,Kethane.PartModules,KethaneGenerator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneGenerator.cs,GetInfo,The length of the statement  "            return String.Format("Kethane Consumption: {0:F1}L/s\nPower Generation: {1:F1}/s\nXenonGas Byproduct: {2:F2}L/s"' KethaneRate' PowerRate' KethaneRate * XenonMassRatio * PartResourceLibrary.Instance.GetDefinition("Kethane").density / PartResourceLibrary.Instance.GetDefinition("XenonGas").density); " is 297.
Long Statement,Kethane.PartModules,KethaneExtractor,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneExtractor.cs,GetInfo,The length of the statement  "            return String.Concat(resources.Select(r => String.Format("{0} Rate: {1:F2}L/s\n"' r.Name' r.Rate)).ToArray()) + String.Format("Power Consumption: {0:F2}/s"' PowerConsumption); " is 175.
Long Statement,Kethane.PartModules,KethaneExtractor,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneExtractor.cs,Update,The length of the statement  "                foreach (var window in GameObject.FindObjectsOfType(typeof(UIPartActionWindow)).OfType<UIPartActionWindow>().Where(w => w.part == part)) " is 136.
Long Statement,Kethane.PartModules,KethaneExtractor,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneExtractor.cs,raycastGround,The length of the statement  "            return Physics.Raycast(tailTransform.position - direction.normalized * TailOffset' direction' out hitInfo' direction.magnitude + HeadOffset + TailOffset' mask); " is 160.
Long Statement,Kethane.PartModules,KethaneConverter,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneConverter.cs,loadConfig,The length of the statement  "            var reqOutRates = outRates.Where(r => !r.Optional).Select(r => r * (inputMassRate / definitions[r.Resource].density)).GroupBy(r => r.Resource).Select(g => new ResourceRate(g.Key' g.Sum(r => r.Rate)' false)); " is 207.
Long Statement,Kethane.PartModules,KethaneConverter,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneConverter.cs,loadConfig,The length of the statement  "            var optOutRates = outRates.Where(r => r.Optional).Select(r => r * (inputMassRate / definitions[r.Resource].density)).GroupBy(r => r.Resource).Select(g => new ResourceRate(g.Key' g.Sum(r => r.Rate)' true)); " is 205.
Long Statement,Kethane.PartModules,KethaneConverter,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneConverter.cs,OnStart,The length of the statement  "            Actions["ActivateConverterAction"].guiName = Events["ActivateConverter"].guiName = String.Format("Activate {0} Converter"' Label); " is 130.
Long Statement,Kethane.PartModules,KethaneConverter,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneConverter.cs,OnStart,The length of the statement  "            Actions["DeactivateConverterAction"].guiName = Events["DeactivateConverter"].guiName = String.Format("Deactivate {0} Converter"' Label); " is 136.
Long Statement,Kethane.PartModules,KethaneConverter,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneConverter.cs,OnFixedUpdate,The length of the statement  "            var ratio = rates.Where(r => !r.Optional).Select(r => this.part.GetConnectedResources(r.Resource).Select(c => r.Rate > 0 ? c.amount : c.maxAmount - c.amount).DefaultIfEmpty().Max() / Math.Abs(r.Rate)).Where(r => r < 1).DefaultIfEmpty(1).Min(); " is 243.
Long Statement,Kethane.PartModules,KethaneDetector,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDetector.cs,GetInfo,The length of the statement  "            return String.Format("Maximum Altitude: {0:N0}m\nPower Consumption: {1:F2}/s\nScanning Period: {2:F2}s\nDetects: {3}"' DetectingHeight' PowerConsumption' DetectingPeriod' String.Join("' "' resources.ToArray())); " is 211.
Long Statement,Kethane.PartModules,KethaneDetector,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDetector.cs,getTrueAltitude,The length of the statement  "                altitudeTrue = vessel.mainBody.GetAltitude(CoM) - (vessel.mainBody.pqsController.GetSurfaceHeight(QuaternionD.AngleAxis(vessel.mainBody.GetLongitude(CoM)' Vector3d.down) * QuaternionD.AngleAxis(vessel.mainBody.GetLatitude(CoM)' Vector3d.forward) * Vector3d.right) - vessel.mainBody.pqsController.radius); " is 304.
Long Statement,Kethane.PartModules,KethaneParticleDynamics,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneParticleDynamics.cs,OnUpdate,The length of the statement  "            emitter.Force = FlightGlobals.getGeeForceAtPosition(emitter.EmitterTransform.position) * (GravityConstant + GravityPressure * pressure); " is 136.
Long Statement,Kethane.PartModules,KethaneWetMassIndicator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneWetMassIndicator.cs,GetInfo,The length of the statement  "            return String.Format("{0}: {1}"' Label ?? "Wet Mass"' (float)this.part.Resources.Cast<PartResource>().Sum(r => r.maxAmount * PartResourceLibrary.Instance.GetDefinition(r.resourceName).density) + this.part.mass); " is 211.
Long Statement,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,setUpComponents,The length of the statement  "            var material = new Material(new System.IO.StreamReader(System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("Kethane.Resources.AlphaUnlitVertexColored.txt")).ReadToEnd()); " is 194.
Long Statement,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,Start,The length of the statement  "                button = ApplicationLauncher.Instance.AddModApplication(null' null' null' null' null' null' ApplicationLauncher.AppScenes.MAPVIEW | ApplicationLauncher.AppScenes.TRACKSTATION' tex); " is 181.
Long Statement,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,mouseWindow,The length of the statement  "            GUILayout.Label(String.Format("{0:F1} {1}' {2:F1} {3}"' Math.Abs(lat)' lat < 0 ? "S" : "N"' Math.Abs(lon)' lon < 0 ? "W" : "E")); " is 129.
Long Statement,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,export,The length of the statement  "                cells[cell] = String.Format(CultureInfo.InvariantCulture' "{0}'{1}'{2}'{3}'{4}'{5}'"' cell.Index' lat' lon' pos.x' pos.y' pos.z); " is 129.
Long Statement,Kethane.Utilities,CompatibilityChecker,C:\repos\Majiir_Kethane\Plugin\Kethane\Utilities\CompatibilityChecker.cs,IsCompatible,The length of the statement  "            return (Versioning.version_major == compatibleMajor) && (Versioning.version_minor == compatibleMinor) && (Versioning.Revision == compatibleRevision); " is 149.
Long Statement,Kethane.Utilities,CompatibilityChecker,C:\repos\Majiir_Kethane\Plugin\Kethane\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "            Debug.Log(String.Format("[CompatibilityChecker] Running checker version {0} from '{1}'"' _version' Assembly.GetExecutingAssembly().GetName().Name)); " is 148.
Long Statement,Kethane.Utilities,CompatibilityChecker,C:\repos\Majiir_Kethane\Plugin\Kethane\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "                        Debug.LogWarning(String.Format("[CompatibilityChecker] Exception while invoking IsCompatible() from '{0}':\n\n{1}"' m.DeclaringType.Assembly.GetName().Name' e)); " is 161.
Long Statement,Kethane.Utilities,CompatibilityChecker,C:\repos\Majiir_Kethane\Plugin\Kethane\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "                        Debug.LogWarning(String.Format("[CompatibilityChecker] Exception while invoking IsUnityCompatible() from '{0}':\n\n{1}"' m.DeclaringType.Assembly.GetName().Name' e)); " is 166.
Long Statement,Kethane.Utilities,CompatibilityChecker,C:\repos\Majiir_Kethane\Plugin\Kethane\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "                message += "WARNING: You are using 64-bit KSP on Windows. This version of KSP is known to cause crashes. It's highly recommended that you use either 32-bit KSP on Windows or switch to Linux."; " is 192.
Long Statement,Kethane.Utilities,CompatibilityChecker,C:\repos\Majiir_Kethane\Plugin\Kethane\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "                message += ((message == String.Empty) ? "Some" : "\n\nAdditionally' some") + " installed mods may be incompatible with this version of Kerbal Space Program. Features may be broken or disabled. Please check for updates to the listed mods."; " is 239.
Long Statement,Kethane.Utilities,CompatibilityChecker,C:\repos\Majiir_Kethane\Plugin\Kethane\Utilities\CompatibilityChecker.cs,Start,The length of the statement  "                    message += String.Format("\n\nThese mods are incompatible with KSP {0}.{1}.{2}:\n\n"' Versioning.version_major' Versioning.version_minor' Versioning.Revision); " is 159.
Long Statement,Kethane.Utilities,InstallCleanup,C:\repos\Majiir_Kethane\Plugin\Kethane\Utilities\InstallCleanup.cs,Start,The length of the statement  "            File.Delete(KSPUtil.ApplicationRootPath + "GameData" + Path.DirectorySeparatorChar + "Kethane" + Path.DirectorySeparatorChar + "Plugins" + Path.DirectorySeparatorChar + "MMI_Kethane.dll"); " is 188.
Long Statement,Kethane.Utilities,InstallCleanup,C:\repos\Majiir_Kethane\Plugin\Kethane\Utilities\InstallCleanup.cs,Start,The length of the statement  "            File.Delete(KSPUtil.ApplicationRootPath + "GameData" + Path.DirectorySeparatorChar + "Kethane" + Path.DirectorySeparatorChar + "Plugins" + Path.DirectorySeparatorChar + "KethaneToolbar.dll"); " is 191.
Long Statement,Kethane.Utilities,InstallChecker,C:\repos\Majiir_Kethane\Plugin\Kethane\Utilities\InstallChecker.cs,Start,The length of the statement  "            var assemblies = AssemblyLoader.loadedAssemblies.Where(a => a.assembly.GetName().Name == Assembly.GetExecutingAssembly().GetName().Name).Where(a => a.url != "Kethane/Plugins"); " is 176.
Long Statement,Kethane.Utilities,InstallChecker,C:\repos\Majiir_Kethane\Plugin\Kethane\Utilities\InstallChecker.cs,Start,The length of the statement  "                var badPaths = assemblies.Select(a => a.path).Select(p => Uri.UnescapeDataString(new Uri(Path.GetFullPath(KSPUtil.ApplicationRootPath)).MakeRelativeUri(new Uri(p)).ToString().Replace('/'' Path.DirectorySeparatorChar))); " is 219.
Long Statement,Kethane.Utilities,InstallChecker,C:\repos\Majiir_Kethane\Plugin\Kethane\Utilities\InstallChecker.cs,Start,The length of the statement  "                PopupDialog.SpawnPopupDialog("Incorrect Kethane Installation"' "Kethane has been installed incorrectly and will not function properly. All Kethane files should be located in KSP/GameData/Kethane. Do not move any files from inside the Kethane folder.\n\nIncorrect path(s):\n" + String.Join("\n"' badPaths.ToArray())' "OK"' false' HighLogic.Skin); " is 345.
Long Statement,Kethane.Scenarios,KethaneScanningTutorial,C:\repos\Majiir_Kethane\Plugin\Kethane\Scenarios\KethaneScanningTutorial.cs,OnTutorialSetup,The length of the statement  "                GUILayout.Label("Hi there! Today we're going to use satellites to scan for Kethane' a valuable resource found all around the Kerbal system. Kethane can be processed into rocket fuel or burned in special engines' but we'll have to find it first.\n\nWe'll be controlling a Mun satellite together from here at KSC. It's been equipped with a Kethane survey unit and solar panels for power. Let's get started!"); " is 407.
Long Statement,Kethane.Scenarios,KethaneScanningTutorial,C:\repos\Majiir_Kethane\Plugin\Kethane\Scenarios\KethaneScanningTutorial.cs,OnTutorialSetup,The length of the statement  "                GUILayout.Label("Here we are in the map view. The cellular grid around the Mun will display resource scan data once we've collected it.\n\nYou can hide the grid or switch to other resources (if you have other resource mods installed) using the green window. (It might be hidden under this one.) The grid will appear around whatever planet or moon you're focused on' so you can view scan data from anywhere in the system.\n\nTake a moment to get comfortable with the grid controls and we'll continue when you're ready."); " is 520.
Long Statement,Kethane.Scenarios,KethaneScanningTutorial,C:\repos\Majiir_Kethane\Plugin\Kethane\Scenarios\KethaneScanningTutorial.cs,OnTutorialSetup,The length of the statement  "                GUILayout.Label("Now' let's get scanning! There's a Kethane detector mounted on the front of the satellite. Right-click it and click \"Activate Detector\" to begin scanning."); " is 176.
Long Statement,Kethane.Scenarios,KethaneScanningTutorial,C:\repos\Majiir_Kethane\Plugin\Kethane\Scenarios\KethaneScanningTutorial.cs,OnTutorialSetup,The length of the statement  "                GUILayout.Label("Excellent! The detector has turned toward the surface of the Mun' scanning for underground Kethane deposits. You'll occasionally hear beeping or blipping noises as the detector passes over cells on the grid. A louder tone indicates the presence of Kethane directly underneath the satellite.\n\nWhen you're ready' open the map view and we'll take a look at the results."); " is 388.
Long Statement,Kethane.Scenarios,KethaneScanningTutorial,C:\repos\Majiir_Kethane\Plugin\Kethane\Scenarios\KethaneScanningTutorial.cs,OnTutorialSetup,The length of the statement  "                GUILayout.Label("Now that we're scanning' you can see that some cells on the grid have changed color. Green cells indicate the presence of Kethane' and light gray cells have been scanned but nothing was found underneath.\n\nFor detailed information' you can hover your mouse over a cell on the grid. When you hover over a resource deposit' the quantity available for mining will also be displayed."); " is 400.
Long Statement,Kethane.Scenarios,KethaneScanningTutorial,C:\repos\Majiir_Kethane\Plugin\Kethane\Scenarios\KethaneScanningTutorial.cs,OnTutorialSetup,The length of the statement  "                GUILayout.Label("Scanning the Mun is going to take a while at this rate. Luckily' we can send our satellite into time warp to finish the job faster. Note that while warping' the detector will lose some data' but overall it will still work faster.\n\nUse time warp to get 2% of the Mun scanned. Watch your battery levels as you approach the dark side. Detectors use a lot of power!"); " is 383.
Long Statement,Kethane.Scenarios,KethaneScanningTutorial,C:\repos\Majiir_Kethane\Plugin\Kethane\Scenarios\KethaneScanningTutorial.cs,OnTutorialSetup,The length of the statement  "                surfaceCoverage = (float)Cell.AtLevel(KethaneData.GridLevel).Count(c => KethaneData.Current["Kethane"][FlightGlobals.currentMainBody].IsCellScanned(c)) / Cell.CountAtLevel(KethaneData.GridLevel); " is 195.
Long Statement,Kethane.Scenarios,KethaneScanningTutorial,C:\repos\Majiir_Kethane\Plugin\Kethane\Scenarios\KethaneScanningTutorial.cs,OnTutorialSetup,The length of the statement  "                GUILayout.Label("Nice work! That wraps up our scanning session. Now try building a satellite of your own' or we can move onto using drills to extract Kethane from the ground. Thanks for stopping by!"); " is 201.
Complex Conditional,Kethane.PartModules,KethaneDetector,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDetector.cs,OnFixedUpdate,The conditional expression  "IsDetecting && this.vessel != null && this.vessel.gameObject.activeSelf && Altitude <= this.DetectingHeight"  is complex.
Complex Conditional,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,Update,The conditional expression  "!MapView.MapIsEnabled || !ShowOverlay || MapView.MapCamera == null || KethaneData.Current == null"  is complex.
Magic Number,Kethane.Generators,CellularResourceGenerator,C:\repos\Majiir_Kethane\Plugin\Kethane\Generators\CellularResourceGenerator.cs,Load,The following statement contains a magic number: if (node == null)              {                  var amounts = new CellMap<double>(KethaneData.GridLevel);                  Initialize(body' amounts);                  return new BodyResources(new CellMap<double>(amounts));              }              else              {                  var bytes = Misc.FromBase64String(node.GetValue("amounts"));                  ensureBigEndian(bytes);                    var amounts = new CellMap<double>(KethaneData.GridLevel);                  var count = Cell.CountAtLevel(KethaneData.GridLevel);                  for (uint i = 0; i < count; i++) {                      amounts[new Cell(i)] = BitConverter.ToDouble(bytes' (int)i * 8);                  }                    return new BodyResources(amounts);              }
Magic Number,Kethane.Generators,CellularResourceGenerator,C:\repos\Majiir_Kethane\Plugin\Kethane\Generators\CellularResourceGenerator.cs,ensureBigEndian,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  for (var i = 0; i < bytes.Length; i += 8)                  {                      for (var j = 0; j < 4; j++)                      {                          var temp = bytes[i + j];                          bytes[i + j] = bytes[i + 7 - j];                          bytes[i + 7 - j] = temp;                      }                  }              }
Magic Number,Kethane.Generators,CellularResourceGenerator,C:\repos\Majiir_Kethane\Plugin\Kethane\Generators\CellularResourceGenerator.cs,ensureBigEndian,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  for (var i = 0; i < bytes.Length; i += 8)                  {                      for (var j = 0; j < 4; j++)                      {                          var temp = bytes[i + j];                          bytes[i + j] = bytes[i + 7 - j];                          bytes[i + 7 - j] = temp;                      }                  }              }
Magic Number,Kethane.Generators,CellularResourceGenerator,C:\repos\Majiir_Kethane\Plugin\Kethane\Generators\CellularResourceGenerator.cs,ensureBigEndian,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  for (var i = 0; i < bytes.Length; i += 8)                  {                      for (var j = 0; j < 4; j++)                      {                          var temp = bytes[i + j];                          bytes[i + j] = bytes[i + 7 - j];                          bytes[i + 7 - j] = temp;                      }                  }              }
Magic Number,Kethane.Generators,CellularResourceGenerator,C:\repos\Majiir_Kethane\Plugin\Kethane\Generators\CellularResourceGenerator.cs,ensureBigEndian,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  for (var i = 0; i < bytes.Length; i += 8)                  {                      for (var j = 0; j < 4; j++)                      {                          var temp = bytes[i + j];                          bytes[i + j] = bytes[i + 7 - j];                          bytes[i + 7 - j] = temp;                      }                  }              }
Magic Number,Kethane.Generators,BodyResources,C:\repos\Majiir_Kethane\Plugin\Kethane\Generators\CellularResourceGenerator.cs,Save,The following statement contains a magic number: var bytes = new byte[count * 8];
Magic Number,Kethane.Generators,BodyResources,C:\repos\Majiir_Kethane\Plugin\Kethane\Generators\CellularResourceGenerator.cs,Save,The following statement contains a magic number: for (uint i = 0; i < count; i++) {                      var b = BitConverter.GetBytes(amounts[new Cell(i)]);                      for (int j = 0; j < 8; j++)                      {                          bytes[i * 8 + j] = b[j];                      }                  }
Magic Number,Kethane.Generators,BodyResources,C:\repos\Majiir_Kethane\Plugin\Kethane\Generators\CellularResourceGenerator.cs,Save,The following statement contains a magic number: for (uint i = 0; i < count; i++) {                      var b = BitConverter.GetBytes(amounts[new Cell(i)]);                      for (int j = 0; j < 8; j++)                      {                          bytes[i * 8 + j] = b[j];                      }                  }
Magic Number,Kethane.Generators,BodyDeposits,C:\repos\Majiir_Kethane\Plugin\Kethane\Generators\LegacyResourceGenerator.cs,BodyDeposits,The following statement contains a magic number: for (int i = 0; i < resource.DepositCount; i++)                  {                      float R = random.Range(resource.MinRadius' resource.MaxRadius);                      for (int j = 0; j < resource.NumberOfTries; j++)                      {                          Vector2 Pos = new Vector2(random.Range(R' 360 - R)' random.Range(R' 180 - R));                          var deposit = Deposit.Generate(Pos' R' random' resource);                          if (!deposits.Any(d => d.Shape.Vertices.Any(v => deposit.Shape.PointInPolygon(new Vector2(v.x' v.y)))) && !deposit.Shape.Vertices.Any(v => deposits.Any(d => d.Shape.PointInPolygon(new Vector2(v.x' v.y)))))                          {                              deposits.Add(deposit);                              break;                          }                      }                  }
Magic Number,Kethane.Generators,BodyDeposits,C:\repos\Majiir_Kethane\Plugin\Kethane\Generators\LegacyResourceGenerator.cs,BodyDeposits,The following statement contains a magic number: for (int i = 0; i < resource.DepositCount; i++)                  {                      float R = random.Range(resource.MinRadius' resource.MaxRadius);                      for (int j = 0; j < resource.NumberOfTries; j++)                      {                          Vector2 Pos = new Vector2(random.Range(R' 360 - R)' random.Range(R' 180 - R));                          var deposit = Deposit.Generate(Pos' R' random' resource);                          if (!deposits.Any(d => d.Shape.Vertices.Any(v => deposit.Shape.PointInPolygon(new Vector2(v.x' v.y)))) && !deposit.Shape.Vertices.Any(v => deposits.Any(d => d.Shape.PointInPolygon(new Vector2(v.x' v.y)))))                          {                              deposits.Add(deposit);                              break;                          }                      }                  }
Magic Number,Kethane.Generators,BodyDeposits,C:\repos\Majiir_Kethane\Plugin\Kethane\Generators\LegacyResourceGenerator.cs,getDeposit,The following statement contains a magic number: var lat = (float)(Math.Atan2(pos.y' Math.Sqrt(pos.x * pos.x + pos.z * pos.z)) * 180 / Math.PI);
Magic Number,Kethane.Generators,BodyDeposits,C:\repos\Majiir_Kethane\Plugin\Kethane\Generators\LegacyResourceGenerator.cs,getDeposit,The following statement contains a magic number: var lon = (float)(Math.Atan2(pos.z' pos.x) * 180 / Math.PI);
Magic Number,Kethane.PartModules,HeatSinkAnimator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\HeatSinkAnimator.cs,OnUpdate,The following statement contains a magic number: var draperPoint = 525;
Magic Number,Kethane.PartModules,KethaneDetectorAnimator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDetectorAnimator.cs,OnUpdate,The following statement contains a magic number: var alpha = (float)normalizeAngle(pos.x + 90);
Magic Number,Kethane.PartModules,KethaneDetectorAnimator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDetectorAnimator.cs,OnUpdate,The following statement contains a magic number: if (Math.Abs(RotH.localEulerAngles.y - beta) > 90)              {                  beta += 180;                  alpha = 360 - alpha;              }
Magic Number,Kethane.PartModules,KethaneDetectorAnimator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDetectorAnimator.cs,OnUpdate,The following statement contains a magic number: if (Math.Abs(RotH.localEulerAngles.y - beta) > 90)              {                  beta += 180;                  alpha = 360 - alpha;              }
Magic Number,Kethane.PartModules,KethaneDetectorAnimator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDetectorAnimator.cs,OnUpdate,The following statement contains a magic number: if (Math.Abs(RotH.localEulerAngles.y - beta) > 90)              {                  beta += 180;                  alpha = 360 - alpha;              }
Magic Number,Kethane.PartModules,KethaneDetectorAnimator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDetectorAnimator.cs,OnUpdate,The following statement contains a magic number: var speed = Time.deltaTime * PowerRatio * 60;
Magic Number,Kethane.PartModules,KethaneDetectorAnimator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDetectorAnimator.cs,normalizeAngle,The following statement contains a magic number: a = a % 360;
Magic Number,Kethane.PartModules,KethaneDetectorAnimator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDetectorAnimator.cs,normalizeAngle,The following statement contains a magic number: if (a < 0)                  a += 360;
Magic Number,Kethane.PartModules,KethaneDrillAnimator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDrillAnimator.cs,Update,The following statement contains a magic number: foreach (var deployState in deployStates)              {                  var time = Mathf.Clamp01(deployState.normalizedTime);                  deployState.normalizedTime = time;                  var speed = HighLogic.LoadedSceneIsEditor ? 1 - 10 * (time - 1) * time : 1;                  deployState.speed = (CurrentState == ExtractorState.Deploying || CurrentState == ExtractorState.Deployed) ? speed : -speed;              }
Magic Number,Kethane.PartModules,KethaneDrillAnimatorLegacy,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDrillAnimatorLegacy.cs,Update,The following statement contains a magic number: switch (DrillDeploymentState)              {                  case DeployState.Idle:                      {                            if (down)                              DrillDeploymentState = DeployState.DeployBase;                      } break;                    case DeployState.DeployBase:                      {                          Vector3 Translation = new Vector3(-dt * 0.35f' 0' 0);                          BaseTransform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (BaseTransform.localPosition.x <= -0.35)                              {                                  BaseTransform.localPosition = new Vector3(-0.35f' BaseTransform.localPosition.y' BaseTransform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm1;                              }                          }                          else                          {                              if (BaseTransform.localPosition.x >= -0.0521)                              {                                  BaseTransform.localPosition = new Vector3(-0.0521f' BaseTransform.localPosition.y' BaseTransform.localPosition.z);                                  DrillDeploymentState = DeployState.Idle;                              }                          }                      } break;                    case DeployState.DeployArm1:                      {                          float Speed = 0.5f;                          Vector3 Translation = new Vector3(0' -dt * Speed' 0);                          Cyl1Transform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (Cyl1Transform.localPosition.y <= -0.399f)                              {                                  Cyl1Transform.localPosition = new Vector3(Cyl1Transform.localPosition.x' -0.399f' Cyl1Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm2;                              }                          }                          else                          {                              if (Cyl1Transform.localPosition.y >= 0.417346f)                              {                                  Cyl1Transform.localPosition = new Vector3(Cyl1Transform.localPosition.x' 0.417346f' Cyl1Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployBase;                              }                          }                      } break;                    case DeployState.DeployArm2:                      {                          float Speed = 0.5f;                          Vector3 Translation = new Vector3(0' -dt * Speed' 0);                          Cyl2Transform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (Cyl2Transform.localPosition.y <= -0.899f)                              {                                  Cyl2Transform.localPosition = new Vector3(Cyl2Transform.localPosition.x' -0.899f' Cyl2Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm3;                              }                          }                          else                          {                              if (Cyl2Transform.localPosition.y >= -0.01016799f)                              {                                  Cyl2Transform.localPosition = new Vector3(Cyl2Transform.localPosition.x' -0.01016799f' Cyl2Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm1;                              }                          }                      } break;                    case DeployState.DeployArm3:                      {                          float Speed = 0.5f;                          Vector3 Translation = new Vector3(0' -dt * Speed' 0);                          Cyl3Transform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (Cyl3Transform.localPosition.y <= -0.899f)                              {                                  Cyl3Transform.localPosition = new Vector3(Cyl3Transform.localPosition.x' -0.899f' Cyl3Transform.localPosition.z);                                  DrillDeploymentState = DeployState.Deployed;                              }                          }                          else                          {                              if (Cyl3Transform.localPosition.y >= 0.037)                              {                                  Cyl3Transform.localPosition = new Vector3(Cyl3Transform.localPosition.x' 0.037f' Cyl3Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm2;                              }                          }                      } break;                    case DeployState.Deployed:                      {                          if (down == false)                              DrillDeploymentState = DeployState.DeployArm3;                      } break;              }
Magic Number,Kethane.PartModules,KethaneDrillAnimatorLegacy,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDrillAnimatorLegacy.cs,Update,The following statement contains a magic number: switch (DrillDeploymentState)              {                  case DeployState.Idle:                      {                            if (down)                              DrillDeploymentState = DeployState.DeployBase;                      } break;                    case DeployState.DeployBase:                      {                          Vector3 Translation = new Vector3(-dt * 0.35f' 0' 0);                          BaseTransform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (BaseTransform.localPosition.x <= -0.35)                              {                                  BaseTransform.localPosition = new Vector3(-0.35f' BaseTransform.localPosition.y' BaseTransform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm1;                              }                          }                          else                          {                              if (BaseTransform.localPosition.x >= -0.0521)                              {                                  BaseTransform.localPosition = new Vector3(-0.0521f' BaseTransform.localPosition.y' BaseTransform.localPosition.z);                                  DrillDeploymentState = DeployState.Idle;                              }                          }                      } break;                    case DeployState.DeployArm1:                      {                          float Speed = 0.5f;                          Vector3 Translation = new Vector3(0' -dt * Speed' 0);                          Cyl1Transform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (Cyl1Transform.localPosition.y <= -0.399f)                              {                                  Cyl1Transform.localPosition = new Vector3(Cyl1Transform.localPosition.x' -0.399f' Cyl1Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm2;                              }                          }                          else                          {                              if (Cyl1Transform.localPosition.y >= 0.417346f)                              {                                  Cyl1Transform.localPosition = new Vector3(Cyl1Transform.localPosition.x' 0.417346f' Cyl1Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployBase;                              }                          }                      } break;                    case DeployState.DeployArm2:                      {                          float Speed = 0.5f;                          Vector3 Translation = new Vector3(0' -dt * Speed' 0);                          Cyl2Transform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (Cyl2Transform.localPosition.y <= -0.899f)                              {                                  Cyl2Transform.localPosition = new Vector3(Cyl2Transform.localPosition.x' -0.899f' Cyl2Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm3;                              }                          }                          else                          {                              if (Cyl2Transform.localPosition.y >= -0.01016799f)                              {                                  Cyl2Transform.localPosition = new Vector3(Cyl2Transform.localPosition.x' -0.01016799f' Cyl2Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm1;                              }                          }                      } break;                    case DeployState.DeployArm3:                      {                          float Speed = 0.5f;                          Vector3 Translation = new Vector3(0' -dt * Speed' 0);                          Cyl3Transform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (Cyl3Transform.localPosition.y <= -0.899f)                              {                                  Cyl3Transform.localPosition = new Vector3(Cyl3Transform.localPosition.x' -0.899f' Cyl3Transform.localPosition.z);                                  DrillDeploymentState = DeployState.Deployed;                              }                          }                          else                          {                              if (Cyl3Transform.localPosition.y >= 0.037)                              {                                  Cyl3Transform.localPosition = new Vector3(Cyl3Transform.localPosition.x' 0.037f' Cyl3Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm2;                              }                          }                      } break;                    case DeployState.Deployed:                      {                          if (down == false)                              DrillDeploymentState = DeployState.DeployArm3;                      } break;              }
Magic Number,Kethane.PartModules,KethaneDrillAnimatorLegacy,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDrillAnimatorLegacy.cs,Update,The following statement contains a magic number: switch (DrillDeploymentState)              {                  case DeployState.Idle:                      {                            if (down)                              DrillDeploymentState = DeployState.DeployBase;                      } break;                    case DeployState.DeployBase:                      {                          Vector3 Translation = new Vector3(-dt * 0.35f' 0' 0);                          BaseTransform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (BaseTransform.localPosition.x <= -0.35)                              {                                  BaseTransform.localPosition = new Vector3(-0.35f' BaseTransform.localPosition.y' BaseTransform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm1;                              }                          }                          else                          {                              if (BaseTransform.localPosition.x >= -0.0521)                              {                                  BaseTransform.localPosition = new Vector3(-0.0521f' BaseTransform.localPosition.y' BaseTransform.localPosition.z);                                  DrillDeploymentState = DeployState.Idle;                              }                          }                      } break;                    case DeployState.DeployArm1:                      {                          float Speed = 0.5f;                          Vector3 Translation = new Vector3(0' -dt * Speed' 0);                          Cyl1Transform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (Cyl1Transform.localPosition.y <= -0.399f)                              {                                  Cyl1Transform.localPosition = new Vector3(Cyl1Transform.localPosition.x' -0.399f' Cyl1Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm2;                              }                          }                          else                          {                              if (Cyl1Transform.localPosition.y >= 0.417346f)                              {                                  Cyl1Transform.localPosition = new Vector3(Cyl1Transform.localPosition.x' 0.417346f' Cyl1Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployBase;                              }                          }                      } break;                    case DeployState.DeployArm2:                      {                          float Speed = 0.5f;                          Vector3 Translation = new Vector3(0' -dt * Speed' 0);                          Cyl2Transform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (Cyl2Transform.localPosition.y <= -0.899f)                              {                                  Cyl2Transform.localPosition = new Vector3(Cyl2Transform.localPosition.x' -0.899f' Cyl2Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm3;                              }                          }                          else                          {                              if (Cyl2Transform.localPosition.y >= -0.01016799f)                              {                                  Cyl2Transform.localPosition = new Vector3(Cyl2Transform.localPosition.x' -0.01016799f' Cyl2Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm1;                              }                          }                      } break;                    case DeployState.DeployArm3:                      {                          float Speed = 0.5f;                          Vector3 Translation = new Vector3(0' -dt * Speed' 0);                          Cyl3Transform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (Cyl3Transform.localPosition.y <= -0.899f)                              {                                  Cyl3Transform.localPosition = new Vector3(Cyl3Transform.localPosition.x' -0.899f' Cyl3Transform.localPosition.z);                                  DrillDeploymentState = DeployState.Deployed;                              }                          }                          else                          {                              if (Cyl3Transform.localPosition.y >= 0.037)                              {                                  Cyl3Transform.localPosition = new Vector3(Cyl3Transform.localPosition.x' 0.037f' Cyl3Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm2;                              }                          }                      } break;                    case DeployState.Deployed:                      {                          if (down == false)                              DrillDeploymentState = DeployState.DeployArm3;                      } break;              }
Magic Number,Kethane.PartModules,KethaneGenerator,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneGenerator.cs,OnFixedUpdate,The following statement contains a magic number: fanSpeed.Update(TimeWarp.fixedDeltaTime' demand * (2 * pressure) / (pressure * pressure + 1));
Magic Number,Kethane.PartModules,KethaneKerbalBlender,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneKerbalBlender.cs,ConsumeKerbal,The following statement contains a magic number: if (vessel.GetVesselCrew()[0].isBadass)              {                  vessel.rootPart.explosionPotential = 10000;              }
Magic Number,Kethane.PartModules,KethaneKerbalBlender,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneKerbalBlender.cs,ConsumeKerbal,The following statement contains a magic number: this.part.RequestResource("Kethane"' -150);
Magic Number,Kethane.PartModules,KethaneExtractor,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneExtractor.cs,raycastGround,The following statement contains a magic number: var mask = 1 << 15;
Magic Number,Kethane.PartModules,KethaneDetector,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDetector.cs,getTrueAltitude,The following statement contains a magic number: if (Physics.Raycast(CoM' -up' out sfc' (float)altitudeASL + 10000.0F' 1 << 15))                  altitudeTrue = sfc.distance;              else if (vessel.mainBody.pqsController != null)                  altitudeTrue = vessel.mainBody.GetAltitude(CoM) - (vessel.mainBody.pqsController.GetSurfaceHeight(QuaternionD.AngleAxis(vessel.mainBody.GetLongitude(CoM)' Vector3d.down) * QuaternionD.AngleAxis(vessel.mainBody.GetLatitude(CoM)' Vector3d.forward) * Vector3d.right) - vessel.mainBody.pqsController.radius);              else                  altitudeTrue = vessel.mainBody.GetAltitude(CoM);
Magic Number,Kethane.PartModules,KethaneParticleEmitter,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneParticleEmitter.cs,Setup,The following statement contains a magic number: animator.colorAnimation = new Color[5];
Magic Number,Kethane.PartModules,OrthogonalIntake,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\OrthogonalIntake.cs,FixedUpdate,The following statement contains a magic number: AirFlow = amount * 1000;
Magic Number,Kethane.UserInterface,MainMenuOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MainMenuOverlay.cs,startMenuOverlay,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(KethaneData.GridLevel))              {                  var rand = random.Next(100);                  Color32 color;                  if (rand < 16)                  {                      color = rand < 4 ? new Color32(21' 176' 26' 255) : new Color32(128' 128' 128' 192);                      foreach (var neighbor in cell.GetNeighbors(KethaneData.GridLevel))                      {                          if (random.Next(2) < 1)                          {                              colors[neighbor] = color;                          }                      }                  }                  else                  {                      color = new Color32(0' 0' 0' 128);                  }                    colors[cell] = color;              }
Magic Number,Kethane.UserInterface,MainMenuOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MainMenuOverlay.cs,startMenuOverlay,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(KethaneData.GridLevel))              {                  var rand = random.Next(100);                  Color32 color;                  if (rand < 16)                  {                      color = rand < 4 ? new Color32(21' 176' 26' 255) : new Color32(128' 128' 128' 192);                      foreach (var neighbor in cell.GetNeighbors(KethaneData.GridLevel))                      {                          if (random.Next(2) < 1)                          {                              colors[neighbor] = color;                          }                      }                  }                  else                  {                      color = new Color32(0' 0' 0' 128);                  }                    colors[cell] = color;              }
Magic Number,Kethane.UserInterface,MainMenuOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MainMenuOverlay.cs,startMenuOverlay,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(KethaneData.GridLevel))              {                  var rand = random.Next(100);                  Color32 color;                  if (rand < 16)                  {                      color = rand < 4 ? new Color32(21' 176' 26' 255) : new Color32(128' 128' 128' 192);                      foreach (var neighbor in cell.GetNeighbors(KethaneData.GridLevel))                      {                          if (random.Next(2) < 1)                          {                              colors[neighbor] = color;                          }                      }                  }                  else                  {                      color = new Color32(0' 0' 0' 128);                  }                    colors[cell] = color;              }
Magic Number,Kethane.UserInterface,MainMenuOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MainMenuOverlay.cs,startMenuOverlay,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(KethaneData.GridLevel))              {                  var rand = random.Next(100);                  Color32 color;                  if (rand < 16)                  {                      color = rand < 4 ? new Color32(21' 176' 26' 255) : new Color32(128' 128' 128' 192);                      foreach (var neighbor in cell.GetNeighbors(KethaneData.GridLevel))                      {                          if (random.Next(2) < 1)                          {                              colors[neighbor] = color;                          }                      }                  }                  else                  {                      color = new Color32(0' 0' 0' 128);                  }                    colors[cell] = color;              }
Magic Number,Kethane.UserInterface,MainMenuOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MainMenuOverlay.cs,startMenuOverlay,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(KethaneData.GridLevel))              {                  var rand = random.Next(100);                  Color32 color;                  if (rand < 16)                  {                      color = rand < 4 ? new Color32(21' 176' 26' 255) : new Color32(128' 128' 128' 192);                      foreach (var neighbor in cell.GetNeighbors(KethaneData.GridLevel))                      {                          if (random.Next(2) < 1)                          {                              colors[neighbor] = color;                          }                      }                  }                  else                  {                      color = new Color32(0' 0' 0' 128);                  }                    colors[cell] = color;              }
Magic Number,Kethane.UserInterface,MainMenuOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MainMenuOverlay.cs,startMenuOverlay,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(KethaneData.GridLevel))              {                  var rand = random.Next(100);                  Color32 color;                  if (rand < 16)                  {                      color = rand < 4 ? new Color32(21' 176' 26' 255) : new Color32(128' 128' 128' 192);                      foreach (var neighbor in cell.GetNeighbors(KethaneData.GridLevel))                      {                          if (random.Next(2) < 1)                          {                              colors[neighbor] = color;                          }                      }                  }                  else                  {                      color = new Color32(0' 0' 0' 128);                  }                    colors[cell] = color;              }
Magic Number,Kethane.UserInterface,MainMenuOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MainMenuOverlay.cs,startMenuOverlay,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(KethaneData.GridLevel))              {                  var rand = random.Next(100);                  Color32 color;                  if (rand < 16)                  {                      color = rand < 4 ? new Color32(21' 176' 26' 255) : new Color32(128' 128' 128' 192);                      foreach (var neighbor in cell.GetNeighbors(KethaneData.GridLevel))                      {                          if (random.Next(2) < 1)                          {                              colors[neighbor] = color;                          }                      }                  }                  else                  {                      color = new Color32(0' 0' 0' 128);                  }                    colors[cell] = color;              }
Magic Number,Kethane.UserInterface,MainMenuOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MainMenuOverlay.cs,startMenuOverlay,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(KethaneData.GridLevel))              {                  var rand = random.Next(100);                  Color32 color;                  if (rand < 16)                  {                      color = rand < 4 ? new Color32(21' 176' 26' 255) : new Color32(128' 128' 128' 192);                      foreach (var neighbor in cell.GetNeighbors(KethaneData.GridLevel))                      {                          if (random.Next(2) < 1)                          {                              colors[neighbor] = color;                          }                      }                  }                  else                  {                      color = new Color32(0' 0' 0' 128);                  }                    colors[cell] = color;              }
Magic Number,Kethane.UserInterface,MainMenuOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MainMenuOverlay.cs,startMenuOverlay,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(KethaneData.GridLevel))              {                  var rand = random.Next(100);                  Color32 color;                  if (rand < 16)                  {                      color = rand < 4 ? new Color32(21' 176' 26' 255) : new Color32(128' 128' 128' 192);                      foreach (var neighbor in cell.GetNeighbors(KethaneData.GridLevel))                      {                          if (random.Next(2) < 1)                          {                              colors[neighbor] = color;                          }                      }                  }                  else                  {                      color = new Color32(0' 0' 0' 128);                  }                    colors[cell] = color;              }
Magic Number,Kethane.UserInterface,MainMenuOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MainMenuOverlay.cs,startMenuOverlay,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(KethaneData.GridLevel))              {                  var rand = random.Next(100);                  Color32 color;                  if (rand < 16)                  {                      color = rand < 4 ? new Color32(21' 176' 26' 255) : new Color32(128' 128' 128' 192);                      foreach (var neighbor in cell.GetNeighbors(KethaneData.GridLevel))                      {                          if (random.Next(2) < 1)                          {                              colors[neighbor] = color;                          }                      }                  }                  else                  {                      color = new Color32(0' 0' 0' 128);                  }                    colors[cell] = color;              }
Magic Number,Kethane.UserInterface,MainMenuOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MainMenuOverlay.cs,startMenuOverlay,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(KethaneData.GridLevel))              {                  var rand = random.Next(100);                  Color32 color;                  if (rand < 16)                  {                      color = rand < 4 ? new Color32(21' 176' 26' 255) : new Color32(128' 128' 128' 192);                      foreach (var neighbor in cell.GetNeighbors(KethaneData.GridLevel))                      {                          if (random.Next(2) < 1)                          {                              colors[neighbor] = color;                          }                      }                  }                  else                  {                      color = new Color32(0' 0' 0' 128);                  }                    colors[cell] = color;              }
Magic Number,Kethane.UserInterface,MainMenuOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MainMenuOverlay.cs,startMenuOverlay,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(KethaneData.GridLevel))              {                  var rand = random.Next(100);                  Color32 color;                  if (rand < 16)                  {                      color = rand < 4 ? new Color32(21' 176' 26' 255) : new Color32(128' 128' 128' 192);                      foreach (var neighbor in cell.GetNeighbors(KethaneData.GridLevel))                      {                          if (random.Next(2) < 1)                          {                              colors[neighbor] = color;                          }                      }                  }                  else                  {                      color = new Color32(0' 0' 0' 128);                  }                    colors[cell] = color;              }
Magic Number,Kethane.UserInterface,MainMenuOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MainMenuOverlay.cs,startMenuOverlay,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(KethaneData.GridLevel))              {                  var rand = random.Next(100);                  Color32 color;                  if (rand < 16)                  {                      color = rand < 4 ? new Color32(21' 176' 26' 255) : new Color32(128' 128' 128' 192);                      foreach (var neighbor in cell.GetNeighbors(KethaneData.GridLevel))                      {                          if (random.Next(2) < 1)                          {                              colors[neighbor] = color;                          }                      }                  }                  else                  {                      color = new Color32(0' 0' 0' 128);                  }                    colors[cell] = color;              }
Magic Number,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,setCellColor,The following statement contains a magic number: var idx = cell.Index * 6;
Magic Number,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,setCellColor,The following statement contains a magic number: for (var i = idx; i < idx + 6; i++)              {                  colors[i] = color;              }
Magic Number,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,updateTriangles,The following statement contains a magic number: mesh.vertices = new Vector3[Cell.CountAtLevel(gridLevel) * 6];
Magic Number,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,updateTriangles,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(gridLevel))              {                  var t = (int)cell.Index * 6;                  if (cell.IsPentagon)                  {                      for (var i = 0; i < 5; i++)                      {                          triangles.AddRange(new[] { t + 1 + i' t + 1 + (i + 1) % 5' t });                      }                  }                  else                  {                      triangles.AddRange(new[] { t + 0' t + 1' t + 2' t + 2' t + 3' t + 4' t + 4' t + 5' t + 0' t + 0' t + 2' t + 4 });                  }              }
Magic Number,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,updateTriangles,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(gridLevel))              {                  var t = (int)cell.Index * 6;                  if (cell.IsPentagon)                  {                      for (var i = 0; i < 5; i++)                      {                          triangles.AddRange(new[] { t + 1 + i' t + 1 + (i + 1) % 5' t });                      }                  }                  else                  {                      triangles.AddRange(new[] { t + 0' t + 1' t + 2' t + 2' t + 3' t + 4' t + 4' t + 5' t + 0' t + 0' t + 2' t + 4 });                  }              }
Magic Number,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,updateTriangles,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(gridLevel))              {                  var t = (int)cell.Index * 6;                  if (cell.IsPentagon)                  {                      for (var i = 0; i < 5; i++)                      {                          triangles.AddRange(new[] { t + 1 + i' t + 1 + (i + 1) % 5' t });                      }                  }                  else                  {                      triangles.AddRange(new[] { t + 0' t + 1' t + 2' t + 2' t + 3' t + 4' t + 4' t + 5' t + 0' t + 0' t + 2' t + 4 });                  }              }
Magic Number,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,updateTriangles,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(gridLevel))              {                  var t = (int)cell.Index * 6;                  if (cell.IsPentagon)                  {                      for (var i = 0; i < 5; i++)                      {                          triangles.AddRange(new[] { t + 1 + i' t + 1 + (i + 1) % 5' t });                      }                  }                  else                  {                      triangles.AddRange(new[] { t + 0' t + 1' t + 2' t + 2' t + 3' t + 4' t + 4' t + 5' t + 0' t + 0' t + 2' t + 4 });                  }              }
Magic Number,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,updateTriangles,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(gridLevel))              {                  var t = (int)cell.Index * 6;                  if (cell.IsPentagon)                  {                      for (var i = 0; i < 5; i++)                      {                          triangles.AddRange(new[] { t + 1 + i' t + 1 + (i + 1) % 5' t });                      }                  }                  else                  {                      triangles.AddRange(new[] { t + 0' t + 1' t + 2' t + 2' t + 3' t + 4' t + 4' t + 5' t + 0' t + 0' t + 2' t + 4 });                  }              }
Magic Number,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,updateTriangles,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(gridLevel))              {                  var t = (int)cell.Index * 6;                  if (cell.IsPentagon)                  {                      for (var i = 0; i < 5; i++)                      {                          triangles.AddRange(new[] { t + 1 + i' t + 1 + (i + 1) % 5' t });                      }                  }                  else                  {                      triangles.AddRange(new[] { t + 0' t + 1' t + 2' t + 2' t + 3' t + 4' t + 4' t + 5' t + 0' t + 0' t + 2' t + 4 });                  }              }
Magic Number,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,updateTriangles,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(gridLevel))              {                  var t = (int)cell.Index * 6;                  if (cell.IsPentagon)                  {                      for (var i = 0; i < 5; i++)                      {                          triangles.AddRange(new[] { t + 1 + i' t + 1 + (i + 1) % 5' t });                      }                  }                  else                  {                      triangles.AddRange(new[] { t + 0' t + 1' t + 2' t + 2' t + 3' t + 4' t + 4' t + 5' t + 0' t + 0' t + 2' t + 4 });                  }              }
Magic Number,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,updateTriangles,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(gridLevel))              {                  var t = (int)cell.Index * 6;                  if (cell.IsPentagon)                  {                      for (var i = 0; i < 5; i++)                      {                          triangles.AddRange(new[] { t + 1 + i' t + 1 + (i + 1) % 5' t });                      }                  }                  else                  {                      triangles.AddRange(new[] { t + 0' t + 1' t + 2' t + 2' t + 3' t + 4' t + 4' t + 5' t + 0' t + 0' t + 2' t + 4 });                  }              }
Magic Number,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,updateTriangles,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(gridLevel))              {                  var t = (int)cell.Index * 6;                  if (cell.IsPentagon)                  {                      for (var i = 0; i < 5; i++)                      {                          triangles.AddRange(new[] { t + 1 + i' t + 1 + (i + 1) % 5' t });                      }                  }                  else                  {                      triangles.AddRange(new[] { t + 0' t + 1' t + 2' t + 2' t + 3' t + 4' t + 4' t + 5' t + 0' t + 0' t + 2' t + 4 });                  }              }
Magic Number,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,updateTriangles,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(gridLevel))              {                  var t = (int)cell.Index * 6;                  if (cell.IsPentagon)                  {                      for (var i = 0; i < 5; i++)                      {                          triangles.AddRange(new[] { t + 1 + i' t + 1 + (i + 1) % 5' t });                      }                  }                  else                  {                      triangles.AddRange(new[] { t + 0' t + 1' t + 2' t + 2' t + 3' t + 4' t + 4' t + 5' t + 0' t + 0' t + 2' t + 4 });                  }              }
Magic Number,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,updateTriangles,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(gridLevel))              {                  var t = (int)cell.Index * 6;                  if (cell.IsPentagon)                  {                      for (var i = 0; i < 5; i++)                      {                          triangles.AddRange(new[] { t + 1 + i' t + 1 + (i + 1) % 5' t });                      }                  }                  else                  {                      triangles.AddRange(new[] { t + 0' t + 1' t + 2' t + 2' t + 3' t + 4' t + 4' t + 5' t + 0' t + 0' t + 2' t + 4 });                  }              }
Magic Number,Kethane.UserInterface,OverlayRenderer,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\OverlayRenderer.cs,updateScale,The following statement contains a magic number: gameObject.transform.localScale = Vector3.one * 1000 * radiusMultiplier;
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,Update,The following statement contains a magic number: if (bodyChanged)              {                  body = newBody;                    heightAt = getHeightRatioMap();                  bounds = new BoundsMap(heightAt' KethaneData.GridLevel);                    overlayRenderer.SetHeightMap(heightAt);                    var radius = bodyRadii.ContainsKey(body) ? bodyRadii[body] : 1.025;                  var parent = ScaledSpace.Instance.scaledSpaceTransforms.FirstOrDefault(t => t.name == body.name);                  overlayRenderer.SetRadiusMultiplier((float)radius);                  overlayRenderer.SetTarget(parent);              }
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,OnGUI,The following statement contains a magic number: if (skin == null)              {                  GUI.skin = null;                  skin = (GUISkin)GameObject.Instantiate(GUI.skin);                    var window = skin.window;                  window.padding = new RectOffset(6' 6' 20' 6);                  window.fontSize = 10;                  skin.window = window;                    var label = skin.label;                  label.margin = new RectOffset(1' 1' 1' 1);                  label.padding = new RectOffset(1' 1' 1' 1);                  label.fontSize = 10;                  skin.label = label;              }
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,OnGUI,The following statement contains a magic number: if (skin == null)              {                  GUI.skin = null;                  skin = (GUISkin)GameObject.Instantiate(GUI.skin);                    var window = skin.window;                  window.padding = new RectOffset(6' 6' 20' 6);                  window.fontSize = 10;                  skin.window = window;                    var label = skin.label;                  label.margin = new RectOffset(1' 1' 1' 1);                  label.padding = new RectOffset(1' 1' 1' 1);                  label.fontSize = 10;                  skin.label = label;              }
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,OnGUI,The following statement contains a magic number: if (skin == null)              {                  GUI.skin = null;                  skin = (GUISkin)GameObject.Instantiate(GUI.skin);                    var window = skin.window;                  window.padding = new RectOffset(6' 6' 20' 6);                  window.fontSize = 10;                  skin.window = window;                    var label = skin.label;                  label.margin = new RectOffset(1' 1' 1' 1);                  label.padding = new RectOffset(1' 1' 1' 1);                  label.fontSize = 10;                  skin.label = label;              }
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,OnGUI,The following statement contains a magic number: if (skin == null)              {                  GUI.skin = null;                  skin = (GUISkin)GameObject.Instantiate(GUI.skin);                    var window = skin.window;                  window.padding = new RectOffset(6' 6' 20' 6);                  window.fontSize = 10;                  skin.window = window;                    var label = skin.label;                  label.margin = new RectOffset(1' 1' 1' 1);                  label.padding = new RectOffset(1' 1' 1' 1);                  label.fontSize = 10;                  skin.label = label;              }
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,OnGUI,The following statement contains a magic number: if (skin == null)              {                  GUI.skin = null;                  skin = (GUISkin)GameObject.Instantiate(GUI.skin);                    var window = skin.window;                  window.padding = new RectOffset(6' 6' 20' 6);                  window.fontSize = 10;                  skin.window = window;                    var label = skin.label;                  label.margin = new RectOffset(1' 1' 1' 1);                  label.padding = new RectOffset(1' 1' 1' 1);                  label.fontSize = 10;                  skin.label = label;              }
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,OnGUI,The following statement contains a magic number: if (skin == null)              {                  GUI.skin = null;                  skin = (GUISkin)GameObject.Instantiate(GUI.skin);                    var window = skin.window;                  window.padding = new RectOffset(6' 6' 20' 6);                  window.fontSize = 10;                  skin.window = window;                    var label = skin.label;                  label.margin = new RectOffset(1' 1' 1' 1);                  label.padding = new RectOffset(1' 1' 1' 1);                  label.fontSize = 10;                  skin.label = label;              }
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,OnGUI,The following statement contains a magic number: if (hoverCell != null && ShowOverlay)              {                  var mouse = Event.current.mousePosition;                  var position = new Rect(mouse.x + 16' mouse.y + 4' 160' 32);                  GUILayout.Window(12359' position' mouseWindow' "Resource Info");              }
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,OnGUI,The following statement contains a magic number: if (hoverCell != null && ShowOverlay)              {                  var mouse = Event.current.mousePosition;                  var position = new Rect(mouse.x + 16' mouse.y + 4' 160' 32);                  GUILayout.Window(12359' position' mouseWindow' "Resource Info");              }
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,OnGUI,The following statement contains a magic number: if (hoverCell != null && ShowOverlay)              {                  var mouse = Event.current.mousePosition;                  var position = new Rect(mouse.x + 16' mouse.y + 4' 160' 32);                  GUILayout.Window(12359' position' mouseWindow' "Resource Info");              }
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,OnGUI,The following statement contains a magic number: if (hoverCell != null && ShowOverlay)              {                  var mouse = Event.current.mousePosition;                  var position = new Rect(mouse.x + 16' mouse.y + 4' 160' 32);                  GUILayout.Window(12359' position' mouseWindow' "Resource Info");              }
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,OnGUI,The following statement contains a magic number: if (hoverCell != null && ShowOverlay)              {                  var mouse = Event.current.mousePosition;                  var position = new Rect(mouse.x + 16' mouse.y + 4' 160' 32);                  GUILayout.Window(12359' position' mouseWindow' "Resource Info");              }
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,OnGUI,The following statement contains a magic number: controlWindowPos = GUILayout.Window(12358' controlWindowPos' controlWindow' "Kethane Scan Map");
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,mouseWindow,The following statement contains a magic number: var lat = (float)(Math.Atan2(pos.y' Math.Sqrt(pos.x * pos.x + pos.z * pos.z)) * 180 / Math.PI);
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,mouseWindow,The following statement contains a magic number: var lon = (float)(Math.Atan2(pos.z' pos.x) * 180 / Math.PI);
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,export,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(KethaneData.GridLevel))              {                  var pos = cell.Position;                  var lat = (float)(Math.Atan2(pos.y' Math.Sqrt(pos.x * pos.x + pos.z * pos.z)) * 180 / Math.PI);                  var lon = (float)(Math.Atan2(pos.z' pos.x) * 180 / Math.PI);                  cells[cell] = String.Format(CultureInfo.InvariantCulture' "{0}'{1}'{2}'{3}'{4}'{5}'"' cell.Index' lat' lon' pos.x' pos.y' pos.z);              }
Magic Number,Kethane.UserInterface,MapOverlay,C:\repos\Majiir_Kethane\Plugin\Kethane\UserInterface\MapOverlay.cs,export,The following statement contains a magic number: foreach (var cell in Cell.AtLevel(KethaneData.GridLevel))              {                  var pos = cell.Position;                  var lat = (float)(Math.Atan2(pos.y' Math.Sqrt(pos.x * pos.x + pos.z * pos.z)) * 180 / Math.PI);                  var lon = (float)(Math.Atan2(pos.z' pos.x) * 180 / Math.PI);                  cells[cell] = String.Format(CultureInfo.InvariantCulture' "{0}'{1}'{2}'{3}'{4}'{5}'"' cell.Index' lat' lon' pos.x' pos.y' pos.z);              }
Magic Number,Kethane.Utilities,CompatibilityChecker,C:\repos\Majiir_Kethane\Plugin\Kethane\Utilities\CompatibilityChecker.cs,IsCompatible,The following statement contains a magic number: const int compatibleMinor = 90;
Magic Number,Kethane.Utilities,CompatibilityChecker,C:\repos\Majiir_Kethane\Plugin\Kethane\Utilities\CompatibilityChecker.cs,IsWin64,The following statement contains a magic number: return (IntPtr.Size == 8) && (Environment.OSVersion.Platform == PlatformID.Win32NT);
Magic Number,Kethane.Scenarios,KethaneScanningTutorial,C:\repos\Majiir_Kethane\Plugin\Kethane\Scenarios\KethaneScanningTutorial.cs,OnTutorialSetup,The following statement contains a magic number: conclusion.OnEnter = s =>              {                  instructor.PlayEmoteRepeating(instructor.anim_true_smileB' 2);                  InputLockManager.RemoveControlLock(lockName + "_map");              };
Missing Default,Kethane.PartModules,KethaneDrillAnimatorLegacy,C:\repos\Majiir_Kethane\Plugin\Kethane\PartModules\KethaneDrillAnimatorLegacy.cs,Update,The following switch statement is missing a default case: switch (DrillDeploymentState)              {                  case DeployState.Idle:                      {                            if (down)                              DrillDeploymentState = DeployState.DeployBase;                      } break;                    case DeployState.DeployBase:                      {                          Vector3 Translation = new Vector3(-dt * 0.35f' 0' 0);                          BaseTransform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (BaseTransform.localPosition.x <= -0.35)                              {                                  BaseTransform.localPosition = new Vector3(-0.35f' BaseTransform.localPosition.y' BaseTransform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm1;                              }                          }                          else                          {                              if (BaseTransform.localPosition.x >= -0.0521)                              {                                  BaseTransform.localPosition = new Vector3(-0.0521f' BaseTransform.localPosition.y' BaseTransform.localPosition.z);                                  DrillDeploymentState = DeployState.Idle;                              }                          }                      } break;                    case DeployState.DeployArm1:                      {                          float Speed = 0.5f;                          Vector3 Translation = new Vector3(0' -dt * Speed' 0);                          Cyl1Transform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (Cyl1Transform.localPosition.y <= -0.399f)                              {                                  Cyl1Transform.localPosition = new Vector3(Cyl1Transform.localPosition.x' -0.399f' Cyl1Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm2;                              }                          }                          else                          {                              if (Cyl1Transform.localPosition.y >= 0.417346f)                              {                                  Cyl1Transform.localPosition = new Vector3(Cyl1Transform.localPosition.x' 0.417346f' Cyl1Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployBase;                              }                          }                      } break;                    case DeployState.DeployArm2:                      {                          float Speed = 0.5f;                          Vector3 Translation = new Vector3(0' -dt * Speed' 0);                          Cyl2Transform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (Cyl2Transform.localPosition.y <= -0.899f)                              {                                  Cyl2Transform.localPosition = new Vector3(Cyl2Transform.localPosition.x' -0.899f' Cyl2Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm3;                              }                          }                          else                          {                              if (Cyl2Transform.localPosition.y >= -0.01016799f)                              {                                  Cyl2Transform.localPosition = new Vector3(Cyl2Transform.localPosition.x' -0.01016799f' Cyl2Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm1;                              }                          }                      } break;                    case DeployState.DeployArm3:                      {                          float Speed = 0.5f;                          Vector3 Translation = new Vector3(0' -dt * Speed' 0);                          Cyl3Transform.localPosition += (down ? Translation : -Translation);                          if (down)                          {                              if (Cyl3Transform.localPosition.y <= -0.899f)                              {                                  Cyl3Transform.localPosition = new Vector3(Cyl3Transform.localPosition.x' -0.899f' Cyl3Transform.localPosition.z);                                  DrillDeploymentState = DeployState.Deployed;                              }                          }                          else                          {                              if (Cyl3Transform.localPosition.y >= 0.037)                              {                                  Cyl3Transform.localPosition = new Vector3(Cyl3Transform.localPosition.x' 0.037f' Cyl3Transform.localPosition.z);                                  DrillDeploymentState = DeployState.DeployArm2;                              }                          }                      } break;                    case DeployState.Deployed:                      {                          if (down == false)                              DrillDeploymentState = DeployState.DeployArm3;                      } break;              }
