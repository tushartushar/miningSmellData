Implementation smell,Namespace,Class,File,Method,Description
Long Method,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,searchoradd,The method has 188 lines of code.
Long Method,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,remove,The method has 172 lines of code.
Long Method,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,Check,The method has 145 lines of code.
Long Method,C5,Interval,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,GetEnumerator,The method has 131 lines of code.
Long Method,C5,Interval,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,GetEnumerator,The method has 131 lines of code.
Long Method,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Check,The method has 201 lines of code.
Long Method,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Check,The method has 201 lines of code.
Long Method,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,addIterative,The method has 263 lines of code.
Long Method,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,removeIterativePhase2,The method has 380 lines of code.
Long Method,C5,Enumerator,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,MoveNext,The method has 144 lines of code.
Long Method,C5,Enumerator,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,MoveNext,The method has 144 lines of code.
Long Method,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,addIterative,The method has 263 lines of code.
Long Method,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,removeIterativePhase2,The method has 380 lines of code.
Complex Method,C5,ArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\ArrayList.cs,RemoveAll,Cyclomatic complexity of the method is 9
Complex Method,C5,ArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\ArrayList.cs,RemoveAll,Cyclomatic complexity of the method is 8
Complex Method,C5,ArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\ArrayList.cs,RetainAll,Cyclomatic complexity of the method is 8
Complex Method,C5,ArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\ArrayList.cs,Check,Cyclomatic complexity of the method is 11
Complex Method,C5,HashedArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\HashedArrayList.cs,RemoveAll,Cyclomatic complexity of the method is 10
Complex Method,C5,HashedArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\HashedArrayList.cs,RemoveAll,Cyclomatic complexity of the method is 9
Complex Method,C5,HashedArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\HashedArrayList.cs,RetainAll,Cyclomatic complexity of the method is 9
Complex Method,C5,HashedArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\HashedArrayList.cs,RetainAll,Cyclomatic complexity of the method is 8
Complex Method,C5,HashedArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\HashedArrayList.cs,Check,Cyclomatic complexity of the method is 15
Complex Method,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,Cut,Cyclomatic complexity of the method is 13
Complex Method,C5,CollectionBase<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,StaticEquals,Cyclomatic complexity of the method is 9
Complex Method,C5,Showing,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Formatting.cs,ShowCollectionValue,Cyclomatic complexity of the method is 8
Complex Method,C5,HashBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashBag.cs,RetainAll,Cyclomatic complexity of the method is 11
Complex Method,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,searchoradd,Cyclomatic complexity of the method is 9
Complex Method,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,RetainAll,Cyclomatic complexity of the method is 8
Complex Method,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,Check,Cyclomatic complexity of the method is 9
Complex Method,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,heapifyMin,Cyclomatic complexity of the method is 9
Complex Method,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,heapifyMax,Cyclomatic complexity of the method is 9
Complex Method,C5,Interval,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,GetEnumerator,Cyclomatic complexity of the method is 10
Complex Method,C5,Interval,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,GetEnumerator,Cyclomatic complexity of the method is 8
Complex Method,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,fixViewsAfterInsert,Cyclomatic complexity of the method is 8
Complex Method,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,fixViewsBeforeSingleRemove,Cyclomatic complexity of the method is 8
Complex Method,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,removefromtaggroup,Cyclomatic complexity of the method is 8
Complex Method,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Reverse,Cyclomatic complexity of the method is 10
Complex Method,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Sort,Cyclomatic complexity of the method is 16
Complex Method,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,clear,Cyclomatic complexity of the method is 8
Complex Method,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,checkViews,Cyclomatic complexity of the method is 11
Complex Method,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Check,Cyclomatic complexity of the method is 37
Complex Method,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,fixViewsAfterInsert,Cyclomatic complexity of the method is 8
Complex Method,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,fixViewsBeforeSingleRemove,Cyclomatic complexity of the method is 8
Complex Method,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,fixViewsBeforeRemove,Cyclomatic complexity of the method is 8
Complex Method,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Reverse,Cyclomatic complexity of the method is 10
Complex Method,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Sort,Cyclomatic complexity of the method is 9
Complex Method,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,checkViews,Cyclomatic complexity of the method is 11
Complex Method,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Check,Cyclomatic complexity of the method is 12
Complex Method,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,addIterative,Cyclomatic complexity of the method is 14
Complex Method,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,AddAll,Cyclomatic complexity of the method is 9
Complex Method,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,addSorted,Cyclomatic complexity of the method is 12
Complex Method,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,removeIterativePhase2,Cyclomatic complexity of the method is 19
Complex Method,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,RetainAll,Cyclomatic complexity of the method is 14
Complex Method,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,FindAll,Cyclomatic complexity of the method is 9
Complex Method,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,removeAt,Cyclomatic complexity of the method is 8
Complex Method,C5,Enumerator,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,MoveNext,Cyclomatic complexity of the method is 10
Complex Method,C5,Enumerator,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,MoveNext,Cyclomatic complexity of the method is 9
Complex Method,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,addIterative,Cyclomatic complexity of the method is 14
Complex Method,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,AddAll,Cyclomatic complexity of the method is 9
Complex Method,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,addSorted,Cyclomatic complexity of the method is 12
Complex Method,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,removeIterativePhase2,Cyclomatic complexity of the method is 19
Complex Method,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,RetainAll,Cyclomatic complexity of the method is 13
Long Parameter List,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,Cut,The method has 5 parameters. Parameters: c' low' lowIsValid' high' highIsValid
Long Parameter List,C5,Range,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,Range,The method has 6 parameters. Parameters: basis' haslowend' lowend' hashighend' highend' direction
Long Parameter List,C5,Range,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,Range,The method has 6 parameters. Parameters: basis' haslowend' lowend' hashighend' highend' direction
Long Parameter List,C5,SortedDictionaryBase<K;V>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Dictionaries.cs,Cut,The method has 5 parameters. Parameters: cutter' lowEntry' lowIsValid' highEntry' highIsValid
Long Parameter List,C5,SortedKeysCollection,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Dictionaries.cs,Cut,The method has 5 parameters. Parameters: c' low' lowIsValid' high' highIsValid
Long Parameter List,C5,ISorted,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Interfaces.cs,Cut,The method has 5 parameters. Parameters: cutFunction' low' lowIsValid' high' highIsValid
Long Parameter List,C5,ISortedDictionary,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Interfaces.cs,Cut,The method has 5 parameters. Parameters: cutFunction' lowEntry' lowIsValid' highEntry' highIsValid
Long Parameter List,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,getPair,The method has 6 parameters. Parameters: p1' p2' n1' n2' positions' nodes
Long Parameter List,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,mirrorViewSentinelsForReverse,The method has 6 parameters. Parameters: positions' poslow' poshigh' a' b' i
Long Parameter List,C5,Node,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,update,The method has 5 parameters. Parameters: cursor' leftnode' child' maxsnapid' generation
Long Parameter List,C5,Node,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,update,The method has 5 parameters. Parameters: cursor' leftnode' child' maxsnapid' generation
Long Parameter List,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,getPair,The method has 6 parameters. Parameters: p1' p2' n1' n2' positions' nodes
Long Parameter List,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,mirrorViewSentinelsForReverse,The method has 6 parameters. Parameters: positions' poslow' poshigh' a' b' i
Long Parameter List,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,Cut,The method has 5 parameters. Parameters: c' low' lowIsValid' high' highIsValid
Long Parameter List,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,rbminicheck,The method has 6 parameters. Parameters: n' redp' o' min' max' blackheight
Long Parameter List,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,rbminisnapcheck,The method has 5 parameters. Parameters: n' o' size' min' max
Long Parameter List,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,Cut,The method has 5 parameters. Parameters: c' low' lowIsValid' high' highIsValid
Long Parameter List,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,rbminicheck,The method has 6 parameters. Parameters: n' redp' o' min' max' blackheight
Long Parameter List,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,rbminisnapcheck,The method has 5 parameters. Parameters: n' o' size' min' max
Long Parameter List,C5,GuardedSorted<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Wrappers.cs,Cut,The method has 5 parameters. Parameters: c' low' lval' high' hval
Long Parameter List,C5,GuardedSortedDictionary<K;V>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Wrappers.cs,Cut,The method has 5 parameters. Parameters: c' lowEntry' lowIsValid' highEntry' highIsValid
Long Identifier,C5,EqualityComparer<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Hashers.cs,,The length of the parameter orderedcollectionequalityComparer is 33.
Long Identifier,C5,EqualityComparer<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Hashers.cs,,The length of the parameter unorderedcollectionequalityComparer is 35.
Long Statement,C5,CollectionBase<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,ComputeHashCode,The length of the statement  "                    Console.WriteLine("Code {5}' Pair ({1}'{2}) number {0} matched other pair ({3}'{4})"' set.Count' a[0]' a[1]' b[0]' b[1]' h); " is 124.
Long Statement,C5,CollectionBase<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,StaticEquals,The length of the statement  "        if ((stit = collection1 as ISorted<T>) != null && (stat = collection2 as ISorted<T>) != null && stit.Comparer == stat.Comparer) " is 127.
Long Statement,C5,CollectionBase<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,StaticEquals,The length of the statement  "      if (!collection1.AllowsDuplicates && (collection2.AllowsDuplicates || collection2.ContainsSpeed >= collection1.ContainsSpeed)) " is 126.
Long Statement,C5,Range,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,inside,The length of the statement  "        return (!haslowend || basis.comparer.Compare(item' lowend) >= 0) && (!hashighend || basis.comparer.Compare(item' highend) < 0); " is 127.
Long Statement,C5,Range,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,Backwards,The length of the statement  "        b.direction = direction == EnumerationDirection.Forwards ? EnumerationDirection.Backwards : EnumerationDirection.Forwards; " is 122.
Long Statement,C5,Range,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,inside,The length of the statement  "        return (!haslowend || basis.comparer.Compare(item' lowend) >= 0) && (!hashighend || basis.comparer.Compare(item' highend) < 0); " is 127.
Long Statement,C5,Range,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,Backwards,The length of the statement  "        b.direction = direction == EnumerationDirection.Forwards ? EnumerationDirection.Backwards : EnumerationDirection.Forwards; " is 122.
Long Statement,C5,SortedDictionaryBase<K;V>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Dictionaries.cs,Cut,The length of the statement  "      return sortedpairs.Cut(new KeyValuePairComparable(cutter)' out lowEntry' out lowIsValid' out highEntry' out highIsValid); " is 121.
Long Statement,C5,EqualityComparer<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Hashers.cs,createAndCache,The length of the statement  "      return cachedDefault = (SCG.IEqualityComparer<T>)(equalityComparertype.GetProperty("Default"' BindingFlags.Static | BindingFlags.Public).GetValue(null' null)); " is 159.
Long Statement,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,Check,The length of the statement  "          Console.WriteLine("Bad cell item={0}' hashval={1}' hashindex={2}' cellindex={3}' lasthole={4}"' b.item' b.hashval' hashindex' cellindex' lasthole); " is 147.
Long Statement,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,Check,The length of the statement  "            Console.WriteLine("Bad cell item={0}' hashval={1}' hashindex={2}' cellindex={3}' latesthole={4}"' b.item' b.hashval' hashindex' cellindex' latesthole); " is 151.
Long Statement,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,Check,The length of the statement  "            Console.WriteLine("Bad cell item={0}' hashval={1}' hashindex={2}' cellindex={3}' latesthole={4}"' b.item' b.hashval' hashindex' cellindex' latesthole); " is 151.
Long Statement,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,Check,The length of the statement  "        Console.WriteLine("resizethreshhold != (int)(table.Length * fillfactor) ({0}' {1}' {2})"' resizethreshhold' table.Length' fillfactor); " is 134.
Long Statement,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,check,The length of the statement  "          Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size); " is 125.
Long Statement,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,check,The length of the statement  "          Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size); " is 125.
Long Statement,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,check,The length of the statement  "          Console.WriteLine("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size); " is 129.
Long Statement,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,viewPosition,The length of the statement  "      int end = offset + size' otherOffset = otherView.offset' otherSize = otherView.size' otherEnd = otherOffset + otherSize; " is 120.
Long Statement,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,checkViews,The length of the statement  "          //Console.WriteLine("Bad view(hash {0}' offset {1}' size {2})' wrong stamp view:{2} underlying: {3}"' view.GetHashCode()'view.offset' view.size' view.stamp' stamp); " is 164.
Long Statement,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "            Console.WriteLine("node.prev.tag ({0}' {1}) >= node.tag ({2}' {3}) at index={4} item={5} "' node.prev.taggroup.tag' node.prev.tag' node.taggroup.tag' node.tag' count' node.item); " is 178.
Long Statement,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "              Console.WriteLine("Bad first pointer in taggroup: node.taggroup.first.item ({0})' node.item ({1}) at index={2} item={3}"' ntfi' node.item' count' node.item); " is 157.
Long Statement,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "                Console.WriteLine("Bad taggroupsize: oldtg.count ({0}) != taggroupsize ({1}) at index={2} item={3}"' oldtg.count' taggroupsize' count' node.item); " is 146.
Long Statement,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "                Console.WriteLine("Two small taggroups in a row: oldtaggroupsize ({0})' taggroupsize ({1}) at index={2} item={3}"' oldtaggroupsize' taggroupsize' count' node.item); " is 164.
Long Statement,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "                Console.WriteLine("Taggroup tags not strictly increasing: oldtaggrouptag ({0})' taggrouptag ({1}) at index={2} item={3}"' oldtg.tag' node.taggroup.tag' count' node.item); " is 170.
Long Statement,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "                Console.WriteLine("Bad last pointer in taggroup: oldtg.last.item ({0})' node.prev.item ({1}) at index={2} item={3}"' oldtg.last.item' node.prev.item' count' node.item); " is 168.
Long Statement,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "            Console.WriteLine("Bad taggroupsize: oldtg.count ({0}) != taggroupsize ({1}) at index={2} item={3}"' oldtg.count' taggroupsize' count' node.item); " is 146.
Long Statement,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "            Console.WriteLine("Two small taggroups in a row: oldtaggroupsize ({0})' taggroupsize ({1}) at index={2} item={3}"' oldtaggroupsize' taggroupsize' count' node.item); " is 164.
Long Statement,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "                Console.WriteLine("Taggroup tags not strictly increasing: oldtaggrouptag ({0})' taggrouptag ({1}) at index={2} item={3}"' oldtg.tag' node.taggroup.tag' count' node.item); " is 170.
Long Statement,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Check,The length of the statement  "                Console.WriteLine("Bad last pointer in taggroup: oldtg.last.item ({0})' node.prev.item ({1}) at index={2} item={3}"' zeitem(oldtg.last)' zeitem(node.prev)' count' node.item); " is 174.
Long Statement,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,viewPosition,The length of the statement  "      int end = offset + size' otherOffset = otherView.offset' otherSize = otherView.size' otherEnd = otherOffset + otherSize; " is 120.
Long Statement,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,checkViews,The length of the statement  "          //Console.WriteLine("Bad view(hash {0}' offset {1}' size {2})' wrong stamp view:{2} underlying: {3}"' view.GetHashCode()'view.offset' view.size' view.stamp' stamp); " is 164.
Long Statement,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Check,The length of the statement  "            Console.WriteLine("node.prev.tag ({0}' {1}) >= node.tag ({2}' {3}) at index={4} item={5} "' node.prev.taggroup.tag' node.prev.tag' node.taggroup.tag' node.tag' count' node.item); " is 178.
Long Statement,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Check,The length of the statement  "              Console.WriteLine("Bad first pointer in taggroup: node.taggroup.first.item ({0})' node.item ({1}) at index={2} item={3}"' ntfi' node.item' count' node.item); " is 157.
Long Statement,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Check,The length of the statement  "                Console.WriteLine("Bad taggroupsize: oldtg.count ({0}) != taggroupsize ({1}) at index={2} item={3}"' oldtg.count' taggroupsize' count' node.item); " is 146.
Long Statement,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Check,The length of the statement  "                Console.WriteLine("Two small taggroups in a row: oldtaggroupsize ({0})' taggroupsize ({1}) at index={2} item={3}"' oldtaggroupsize' taggroupsize' count' node.item); " is 164.
Long Statement,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Check,The length of the statement  "                Console.WriteLine("Taggroup tags not strictly increasing: oldtaggrouptag ({0})' taggrouptag ({1}) at index={2} item={3}"' oldtg.tag' node.taggroup.tag' count' node.item); " is 170.
Long Statement,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Check,The length of the statement  "                Console.WriteLine("Bad last pointer in taggroup: oldtg.last.item ({0})' node.prev.item ({1}) at index={2} item={3}"' oldtg.last.item' node.prev.item' count' node.item); " is 168.
Long Statement,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Check,The length of the statement  "            Console.WriteLine("Bad taggroupsize: oldtg.count ({0}) != taggroupsize ({1}) at index={2} item={3}"' oldtg.count' taggroupsize' count' node.item); " is 146.
Long Statement,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Check,The length of the statement  "            Console.WriteLine("Two small taggroups in a row: oldtaggroupsize ({0})' taggroupsize ({1}) at index={2} item={3}"' oldtaggroupsize' taggroupsize' count' node.item); " is 164.
Long Statement,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Check,The length of the statement  "                Console.WriteLine("Taggroup tags not strictly increasing: oldtaggrouptag ({0})' taggrouptag ({1}) at index={2} item={3}"' oldtg.tag' node.taggroup.tag' count' node.item); " is 170.
Long Statement,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Check,The length of the statement  "                Console.WriteLine("Bad last pointer in taggroup: oldtg.last.item ({0})' node.prev.item ({1}) at index={2} item={3}"' zeitem(oldtg.last)' zeitem(node.prev)' count' node.item); " is 174.
Long Statement,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,removeIterativePhase2,The length of the statement  "            parent.size = parent.items + (parent.left == null ? 0 : parent.left.size) + (parent.right == null ? 0 : parent.right.size); " is 123.
Long Statement,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,removeIterativePhase2,The length of the statement  "            nearnephew.size = nearnephew.items + (nearnephew.left == null ? 0 : nearnephew.left.size) + (nearnephew.right == null ? 0 : nearnephew.right.size); " is 147.
Long Statement,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,removeIterativePhase2,The length of the statement  "            nearnephew.size = 1 + (nearnephew.left == null ? 0 : nearnephew.left.size) + (nearnephew.right == null ? 0 : nearnephew.right.size); " is 132.
Long Statement,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,removeIterativePhase2,The length of the statement  "          parent.size = parent.items + (parent.left == null ? 0 : parent.left.size) + (parent.right == null ? 0 : parent.right.size); " is 123.
Long Statement,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,removeIterativePhase2,The length of the statement  "          childsibling.size = childsibling.items + (childsibling.left == null ? 0 : childsibling.left.size) + (childsibling.right == null ? 0 : childsibling.right.size); " is 159.
Long Statement,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,removeIterativePhase2,The length of the statement  "          childsibling.size = 1 + (childsibling.left == null ? 0 : childsibling.left.size) + (childsibling.right == null ? 0 : childsibling.right.size); " is 142.
Long Statement,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,minidump,The length of the statement  "				n.extra == null ? "" : String.Format(" [extra: lg={0}' c={1}' i={2}]"' n.extra.lastgeneration' n.extra.leftnode ? "L" : "R"' n.extra.oldref == null ? "()" : "" + n.extra.oldref.item)' " is 183.
Long Statement,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,minidump,The length of the statement  " n.lastgeneration == -1 ? "" : String.Format(" [extra: lg={0}' c={1}' i={2}]"' n.lastgeneration' n.leftnode ? "L" : "R"' n.oldref == null ? "()" : "" + n.oldref.item)' " is 166.
Long Statement,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,dump,The length of the statement  "      Console.WriteLine(String.Format(">>>>>>>>>>>>>>>>>>> dump {0} (count={1}' blackdepth={2}' depth={3}' gen={4})"' msg' size' blackdepth' " is 134.
Long Statement,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,dump,The length of the statement  "      Console.WriteLine(String.Format(">>>>>>>>>>>>>>>>>>> dump {0} (count={1}' blackdepth={2}' depth={3}' gen={4})"' msg' size' blackdepth' " is 134.
Long Statement,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,rbminicheck,The length of the statement  "      res = massert(n.right == null || n.left != null || n.right.red' n' "Right child black' but left child empty"' o) && res; " is 120.
Long Statement,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,removeIterativePhase2,The length of the statement  "            parent.size = parent.items + (parent.left == null ? 0 : parent.left.size) + (parent.right == null ? 0 : parent.right.size); " is 123.
Long Statement,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,removeIterativePhase2,The length of the statement  "            nearnephew.size = nearnephew.items + (nearnephew.left == null ? 0 : nearnephew.left.size) + (nearnephew.right == null ? 0 : nearnephew.right.size); " is 147.
Long Statement,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,removeIterativePhase2,The length of the statement  "            nearnephew.size = 1 + (nearnephew.left == null ? 0 : nearnephew.left.size) + (nearnephew.right == null ? 0 : nearnephew.right.size); " is 132.
Long Statement,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,removeIterativePhase2,The length of the statement  "          parent.size = parent.items + (parent.left == null ? 0 : parent.left.size) + (parent.right == null ? 0 : parent.right.size); " is 123.
Long Statement,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,removeIterativePhase2,The length of the statement  "          childsibling.size = childsibling.items + (childsibling.left == null ? 0 : childsibling.left.size) + (childsibling.right == null ? 0 : childsibling.right.size); " is 159.
Long Statement,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,removeIterativePhase2,The length of the statement  "          childsibling.size = 1 + (childsibling.left == null ? 0 : childsibling.left.size) + (childsibling.right == null ? 0 : childsibling.right.size); " is 142.
Long Statement,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,minidump,The length of the statement  "				n.extra == null ? "" : String.Format(" [extra: lg={0}' c={1}' i={2}]"' n.extra.lastgeneration' n.extra.leftnode ? "L" : "R"' n.extra.oldref == null ? "()" : "" + n.extra.oldref.item)' " is 183.
Long Statement,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,minidump,The length of the statement  " n.lastgeneration == -1 ? "" : String.Format(" [extra: lg={0}' c={1}' i={2}]"' n.lastgeneration' n.leftnode ? "L" : "R"' n.oldref == null ? "()" : "" + n.oldref.item)' " is 166.
Long Statement,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,dump,The length of the statement  "      Console.WriteLine(String.Format(">>>>>>>>>>>>>>>>>>> dump {0} (count={1}' blackdepth={2}' depth={3}' gen={4})"' msg' size' blackdepth' " is 134.
Long Statement,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,dump,The length of the statement  "      Console.WriteLine(String.Format(">>>>>>>>>>>>>>>>>>> dump {0} (count={1}' blackdepth={2}' depth={3}' gen={4})"' msg' size' blackdepth' " is 134.
Long Statement,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,rbminicheck,The length of the statement  "      res = massert(n.right == null || n.left != null || n.right.red' n' "Right child black' but left child empty"' o) && res; " is 120.
Complex Conditional,C5,CircularQueue<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\CircularQueue.cs,Check,The conditional expression  "front < 0 || front >= array.Length || back < 0 || back >= array.Length ||            (front <= back && size != back - front) || (front > back && size != array.Length + back - front)"  is complex.
Complex Conditional,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Check,The conditional expression  "tg.count != 0 || tg.first != null || tg.last != null || tg.tag != int.MinValue"  is complex.
Complex Conditional,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Check,The conditional expression  "tg.count != 0 || tg.first != null || tg.last != null || tg.tag != int.MaxValue"  is complex.
Complex Conditional,i4o,IndexSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\IndexSet.cs,WhereUsingIndex,The conditional expression  "BodyIsBinary(predicate) &&                  BodyTypeIsEqual(predicate) &&                  LeftSideIsMemberExpression(predicate) &&                  LeftSideMemberIsIndexed(predicate)"  is complex.
Magic Number,C5,ArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\ArrayList.cs,expand,The following statement contains a magic number: expand(2 * array.Length' underlyingsize);
Magic Number,C5,ArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\ArrayList.cs,disposeOverlappingViews,The following statement contains a magic number: if (views != null)          foreach (ArrayList<T> view in views)          {            if (view != this)            {              switch (viewPosition(view.offset' view.size))              {                case MutualViewPosition.ContainedIn:                  if (reverse)                    view.offset = 2 * offset + size - view.size - view.offset;                  else                    view.Dispose();                  break;                case MutualViewPosition.Overlapping:                  view.Dispose();                  break;                case MutualViewPosition.Contains:                case MutualViewPosition.NonOverlapping:                  break;              }            }          }
Magic Number,C5,ArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\ArrayList.cs,FindAll,The following statement contains a magic number: for (int i = 0; i < size; i++)        {          T a = array[offset + i];          bool found = filter(a);          modifycheck(stamp);          if (found)          {            if (j == rescap) res.expand(rescap = 2 * rescap' j);            res.array[j++] = a;          }        }
Magic Number,C5,ArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\ArrayList.cs,Reverse,The following statement contains a magic number: for (int i = 0' length = size / 2' end = offset + size - 1; i < length; i++)        {          T swap = array[offset + i];            array[offset + i] = array[end - i];          array[end - i] = swap;        }
Magic Number,C5,ArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\ArrayList.cs,Clear,The following statement contains a magic number: if (underlying == null)        {          updatecheck();          if (size == 0)            return;          int oldsize = size;          fixViewsBeforeRemove(0' size);  #if HASHINDEX          itemIndex.Clear();  #endif          array = new T[8];          size = 0;          (underlying ?? this).raiseForRemoveInterval(offset' oldsize);        }        else          RemoveInterval(0' size);
Magic Number,C5,CircularQueue<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\CircularQueue.cs,expand,The following statement contains a magic number: int newlength = 2 * array.Length;
Magic Number,C5,CircularQueue<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\CircularQueue.cs,CircularQueue,The following statement contains a magic number: int newlength = 8;
Magic Number,C5,CircularQueue<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\CircularQueue.cs,CircularQueue,The following statement contains a magic number: while (newlength < capacity) newlength *= 2;
Magic Number,C5,HashedArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\HashedArrayList.cs,expand,The following statement contains a magic number: expand(2 * array.Length' underlyingsize);
Magic Number,C5,HashedArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\HashedArrayList.cs,disposeOverlappingViews,The following statement contains a magic number: if (views != null)          foreach (HashedArrayList<T> view in views)          {            if (view != this)            {              switch (viewPosition(view.offset' view.size))              {                case MutualViewPosition.ContainedIn:                  if (reverse)                    view.offset = 2 * offset + size - view.size - view.offset;                  else                    view.Dispose();                  break;                case MutualViewPosition.Overlapping:                  view.Dispose();                  break;                case MutualViewPosition.Contains:                case MutualViewPosition.NonOverlapping:                  break;              }            }          }
Magic Number,C5,HashedArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\HashedArrayList.cs,FindAll,The following statement contains a magic number: for (int i = 0; i < size; i++)        {          T a = array[offset + i];          bool found = filter(a);          modifycheck(stamp);          if (found)          {            if (j == rescap) res.expand(rescap = 2 * rescap' j);            res.array[j++] = a;          }        }
Magic Number,C5,HashedArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\HashedArrayList.cs,Reverse,The following statement contains a magic number: for (int i = 0' length = size / 2' end = offset + size - 1; i < length; i++)        {          T swap = array[offset + i];            array[offset + i] = array[end - i];          array[end - i] = swap;        }
Magic Number,C5,HashedArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\HashedArrayList.cs,Clear,The following statement contains a magic number: if (underlying == null)        {          updatecheck();          if (size == 0)            return;          int oldsize = size;          fixViewsBeforeRemove(0' size);  #if HASHINDEX          itemIndex.Clear();  #endif          array = new T[8];          size = 0;          (underlying ?? this).raiseForRemoveInterval(offset' oldsize);        }        else          RemoveInterval(0' size);
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,binarySearch,The following statement contains a magic number: mid = top / 2;
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,binarySearch,The following statement contains a magic number: while (top > bot)        {          int c;            if ((c = comparer.Compare(array[mid]' item)) == 0)            return true;            if (c > 0)          { top = mid; }          else          { bot = mid + 1; }            mid = (bot + top) / 2;        }
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,FindAll,The following statement contains a magic number: for (int i = 0; i < size; i++)        {          T a = array[i];            if (f(a))          {            if (j == rescap) res.expand(rescap = 2 * rescap' j);              res.array[j++] = a;          }        }
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,Cut,The following statement contains a magic number: mid = top / 2;
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,Cut,The following statement contains a magic number: while (top > bot)        {          if ((comp = c.CompareTo(array[mid])) == 0)            break;            if (comp < 0)          { rbest = top = mid; }          else          { lbest = mid; bot = mid + 1; }            mid = (bot + top) / 2;        }
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,Cut,The following statement contains a magic number: while (rbest > bot)        {          mid = (bot + rbest) / 2;          if (c.CompareTo(array[mid]) < 0)          { rbest = mid; }          else          { bot = mid + 1; }        }
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,Cut,The following statement contains a magic number: while (top > lbest)        {          mid = (lbest + top + 1) / 2;          if (c.CompareTo(array[mid]) > 0)          { lbest = mid; }          else          { top = mid - 1; }        }
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,RemoveAll,The following statement contains a magic number: int[] toremove = new int[(size >> 5) + 1];
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,RemoveAll,The following statement contains a magic number: foreach (T item in items)          if (binarySearch(item' out ind))            toremove[ind >> 5] |= 1 << (ind & 31);
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,RemoveAll,The following statement contains a magic number: foreach (T item in items)          if (binarySearch(item' out ind))            toremove[ind >> 5] |= 1 << (ind & 31);
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,RemoveAll,The following statement contains a magic number: for (int i = 0; i < size; i++)          if ((toremove[i >> 5] & (1 << (i & 31))) == 0)            array[j++] = array[i];          else if (mustFire)            raiseHandler.Remove(array[i]);
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,RemoveAll,The following statement contains a magic number: for (int i = 0; i < size; i++)          if ((toremove[i >> 5] & (1 << (i & 31))) == 0)            array[j++] = array[i];          else if (mustFire)            raiseHandler.Remove(array[i]);
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,RetainAll,The following statement contains a magic number: int[] toretain = new int[(size >> 5) + 1];
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,RetainAll,The following statement contains a magic number: foreach (T item in items)          if (binarySearch(item' out ind))            toretain[ind >> 5] |= 1 << (ind & 31);
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,RetainAll,The following statement contains a magic number: foreach (T item in items)          if (binarySearch(item' out ind))            toretain[ind >> 5] |= 1 << (ind & 31);
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,RetainAll,The following statement contains a magic number: for (int i = 0; i < size; i++)          if ((toretain[i >> 5] & (1 << (i & 31))) != 0)            array[j++] = array[i];          else if (mustFire)            raiseHandler.Remove(array[i]);
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,RetainAll,The following statement contains a magic number: for (int i = 0; i < size; i++)          if ((toretain[i >> 5] & (1 << (i & 31))) != 0)            array[j++] = array[i];          else if (mustFire)            raiseHandler.Remove(array[i]);
Magic Number,C5,SortedArray<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\SortedArray.cs,AddAll,The following statement contains a magic number: while (newsize < size + toadd) { newsize *= 2; }
Magic Number,C5,CollectionBase<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,ComputeHashCode,The following statement contains a magic number: foreach (T item in items)        {          uint h1 = (uint)itemequalityComparer.GetHashCode(item);            h += (int)((h1 * 1529784657 + 1) ^ (h1 * 2912831877) ^ (h1 * 1118771817 + 2));        }
Magic Number,C5,CollectionBase<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,ComputeHashCode,The following statement contains a magic number: foreach (T item in items)        {          uint h1 = (uint)itemequalityComparer.GetHashCode(item);            h += (int)((h1 * 1529784657 + 1) ^ (h1 * 2912831877) ^ (h1 * 1118771817 + 2));        }
Magic Number,C5,CollectionBase<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,ComputeHashCode,The following statement contains a magic number: foreach (T item in items)        {          uint h1 = (uint)itemequalityComparer.GetHashCode(item);            h += (int)((h1 * 1529784657 + 1) ^ (h1 * 2912831877) ^ (h1 * 1118771817 + 2));        }
Magic Number,C5,CollectionBase<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,ComputeHashCode,The following statement contains a magic number: foreach (T item in items)        {          uint h1 = (uint)itemequalityComparer.GetHashCode(item);            h += (int)((h1 * 1529784657 + 1) ^ (h1 * 2912831877) ^ (h1 * 1118771817 + 2));        }
Magic Number,C5,ArrayBase<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,expand,The following statement contains a magic number: expand(2 * array.Length' size);
Magic Number,C5,ArrayBase<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,expand,The following statement contains a magic number: while (newlength < newcapacity) newlength *= 2;
Magic Number,C5,ArrayBase<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,ArrayBase,The following statement contains a magic number: int newlength = 8;
Magic Number,C5,ArrayBase<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,ArrayBase,The following statement contains a magic number: while (newlength < capacity) newlength *= 2;
Magic Number,C5,ArrayBase<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Collections.cs,Clear,The following statement contains a magic number: array = new T[8];
Magic Number,C5,KeyValuePair,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Dictionaries.cs,GetHashCode,The following statement contains a magic number: return EqualityComparer<K>.Default.GetHashCode(Key) + 13984681 * EqualityComparer<V>.Default.GetHashCode(Value);
Magic Number,C5,KeyValuePair,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Dictionaries.cs,Show,The following statement contains a magic number: rest -= 4;
Magic Number,C5,Showing,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Formatting.cs,maxLength,The following statement contains a magic number: if (format == null)          return 80;
Magic Number,C5,Showing,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Formatting.cs,ShowCollectionValue,The following statement contains a magic number: rest -= 2 * startdelim.Length;
Magic Number,C5,Showing,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Formatting.cs,ShowCollectionValue,The following statement contains a magic number: if (showMultiplicities)        {          foreach (KeyValuePair<T' int> p in coll.ItemMultiplicities())          {            complete = false;            if (rest <= 0)              break;            if (first)              first = false;            else            {              stringbuilder.Append("' ");              rest -= 2;            }            if (complete = Showing.Show(p.Key' stringbuilder' ref rest' formatProvider))            {              string multiplicityString = string.Format("(*{0})"' p.Value);              stringbuilder.Append(multiplicityString);              rest -= multiplicityString.Length;            }          }        }        else        {          foreach (T x in items)          {            complete = false;            if (rest <= 0)              break;            if (first)              first = false;            else            {              stringbuilder.Append("' ");              rest -= 2;            }            if (showIndexes)            {              string indexString = string.Format("{0}:"' index++);              stringbuilder.Append(indexString);              rest -= indexString.Length;            }            complete = Showing.Show(x' stringbuilder' ref rest' formatProvider);          }        }
Magic Number,C5,Showing,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Formatting.cs,ShowCollectionValue,The following statement contains a magic number: if (showMultiplicities)        {          foreach (KeyValuePair<T' int> p in coll.ItemMultiplicities())          {            complete = false;            if (rest <= 0)              break;            if (first)              first = false;            else            {              stringbuilder.Append("' ");              rest -= 2;            }            if (complete = Showing.Show(p.Key' stringbuilder' ref rest' formatProvider))            {              string multiplicityString = string.Format("(*{0})"' p.Value);              stringbuilder.Append(multiplicityString);              rest -= multiplicityString.Length;            }          }        }        else        {          foreach (T x in items)          {            complete = false;            if (rest <= 0)              break;            if (first)              first = false;            else            {              stringbuilder.Append("' ");              rest -= 2;            }            if (showIndexes)            {              string indexString = string.Format("{0}:"' index++);              stringbuilder.Append(indexString);              rest -= indexString.Length;            }            complete = Showing.Show(x' stringbuilder' ref rest' formatProvider);          }        }
Magic Number,C5,Showing,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Formatting.cs,ShowCollectionValue,The following statement contains a magic number: if (!complete)        {          stringbuilder.Append("...");          rest -= 3;        }
Magic Number,C5,Showing,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Formatting.cs,ShowDictionary,The following statement contains a magic number: rest -= 4;
Magic Number,C5,Showing,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Formatting.cs,ShowDictionary,The following statement contains a magic number: foreach (KeyValuePair<K' V> p in dictionary)        {          complete = false;          if (rest <= 0)            break;          if (first)            first = false;          else          {            stringbuilder.Append("' ");            rest -= 2;          }          complete = Showing.Show(p' stringbuilder' ref rest' formatProvider);        }
Magic Number,C5,Showing,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Formatting.cs,ShowDictionary,The following statement contains a magic number: if (!complete)        {          stringbuilder.Append("...");          rest -= 3;        }
Magic Number,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,shrink,The following statement contains a magic number: if (bits > 3)        {          //Console.WriteLine(String.Format("Shrink to {0} bits"' bits - 1));          resize(bits - 1);        }
Magic Number,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,resize,The following statement contains a magic number: bitsc = 32 - bits;
Magic Number,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,clear,The following statement contains a magic number: bitsc = 32 - bits;
Magic Number,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,HashSet,The following statement contains a magic number: if (fill < 0.1 || fill > 0.9)          throw new ArgumentException("Fill outside valid range [0.1' 0.9]");
Magic Number,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,HashSet,The following statement contains a magic number: if (fill < 0.1 || fill > 0.9)          throw new ArgumentException("Fill outside valid range [0.1' 0.9]");
Magic Number,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,HashSet,The following statement contains a magic number: origbits = 4;
Magic Number,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,Check,The following statement contains a magic number: if (bitsc != 32 - bits)        {          Console.WriteLine("bitsc != 32 - bits ({0}' {1})"' bitsc' bits);          retval = false;        }
Magic Number,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,Check,The following statement contains a magic number: if (bitsc != 32 - bits)        {          Console.WriteLine("resizethreshhold != (int)(table.Length * fillfactor) ({0}' {1}' {2})"' resizethreshhold' table.Length' fillfactor);          retval = false;        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,heapifyMin,The following statement contains a magic number: if (i > 0)        {          T other = heap[cell].last;          if (2 * cell + 1 < size && comparer.Compare(currentitem' other) > 0)          {            swappedroot = true;            Handle otherhandle = heap[cell].lasthandle;            updateLast(cell' currentitem' currenthandle);            currentitem = other;            currenthandle = otherhandle;          }        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,heapifyMin,The following statement contains a magic number: while (true)        {          int l = 2 * cell + 1' r = l + 1;          T lv' rv;            if (2 * l < size && comparer.Compare(lv = heap[l].first' minitem) < 0)          { currentmin = l; minitem = lv; }            if (2 * r < size && comparer.Compare(rv = heap[r].first' minitem) < 0)          { currentmin = r; minitem = rv; }            if (currentmin == cell)            break;            minhandle = heap[currentmin].firsthandle;          updateFirst(cell' minitem' minhandle);          cell = currentmin;            //Maybe swap first and last          T other = heap[cell].last;          if (2 * currentmin + 1 < size && comparer.Compare(currentitem' other) > 0)          {            Handle otherhandle = heap[cell].lasthandle;            updateLast(cell' currentitem' currenthandle);            currentitem = other;            currenthandle = otherhandle;          }              minitem = currentitem;          minhandle = currenthandle;        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,heapifyMin,The following statement contains a magic number: while (true)        {          int l = 2 * cell + 1' r = l + 1;          T lv' rv;            if (2 * l < size && comparer.Compare(lv = heap[l].first' minitem) < 0)          { currentmin = l; minitem = lv; }            if (2 * r < size && comparer.Compare(rv = heap[r].first' minitem) < 0)          { currentmin = r; minitem = rv; }            if (currentmin == cell)            break;            minhandle = heap[currentmin].firsthandle;          updateFirst(cell' minitem' minhandle);          cell = currentmin;            //Maybe swap first and last          T other = heap[cell].last;          if (2 * currentmin + 1 < size && comparer.Compare(currentitem' other) > 0)          {            Handle otherhandle = heap[cell].lasthandle;            updateLast(cell' currentitem' currenthandle);            currentitem = other;            currenthandle = otherhandle;          }              minitem = currentitem;          minhandle = currenthandle;        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,heapifyMin,The following statement contains a magic number: while (true)        {          int l = 2 * cell + 1' r = l + 1;          T lv' rv;            if (2 * l < size && comparer.Compare(lv = heap[l].first' minitem) < 0)          { currentmin = l; minitem = lv; }            if (2 * r < size && comparer.Compare(rv = heap[r].first' minitem) < 0)          { currentmin = r; minitem = rv; }            if (currentmin == cell)            break;            minhandle = heap[currentmin].firsthandle;          updateFirst(cell' minitem' minhandle);          cell = currentmin;            //Maybe swap first and last          T other = heap[cell].last;          if (2 * currentmin + 1 < size && comparer.Compare(currentitem' other) > 0)          {            Handle otherhandle = heap[cell].lasthandle;            updateLast(cell' currentitem' currenthandle);            currentitem = other;            currenthandle = otherhandle;          }              minitem = currentitem;          minhandle = currenthandle;        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,heapifyMin,The following statement contains a magic number: while (true)        {          int l = 2 * cell + 1' r = l + 1;          T lv' rv;            if (2 * l < size && comparer.Compare(lv = heap[l].first' minitem) < 0)          { currentmin = l; minitem = lv; }            if (2 * r < size && comparer.Compare(rv = heap[r].first' minitem) < 0)          { currentmin = r; minitem = rv; }            if (currentmin == cell)            break;            minhandle = heap[currentmin].firsthandle;          updateFirst(cell' minitem' minhandle);          cell = currentmin;            //Maybe swap first and last          T other = heap[cell].last;          if (2 * currentmin + 1 < size && comparer.Compare(currentitem' other) > 0)          {            Handle otherhandle = heap[cell].lasthandle;            updateLast(cell' currentitem' currenthandle);            currentitem = other;            currenthandle = otherhandle;          }              minitem = currentitem;          minhandle = currenthandle;        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,heapifyMax,The following statement contains a magic number: while (true)        {          int l = 2 * cell + 1' r = l + 1;          T lv' rv;            if (2 * l + 1 < size && comparer.Compare(lv = heap[l].last' maxitem) > 0)          { currentmax = l; maxitem = lv; }            if (2 * r + 1 < size && comparer.Compare(rv = heap[r].last' maxitem) > 0)          { currentmax = r; maxitem = rv; }            if (currentmax == cell)            break;            maxhandle = heap[currentmax].lasthandle;          updateLast(cell' maxitem' maxhandle);          cell = currentmax;            //Maybe swap first and last          T other = heap[cell].first;          if (comparer.Compare(currentitem' other) < 0)          {            Handle otherhandle = heap[cell].firsthandle;            updateFirst(cell' currentitem' currenthandle);            currentitem = other;            currenthandle = otherhandle;          }            maxitem = currentitem;          maxhandle = currenthandle;        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,heapifyMax,The following statement contains a magic number: while (true)        {          int l = 2 * cell + 1' r = l + 1;          T lv' rv;            if (2 * l + 1 < size && comparer.Compare(lv = heap[l].last' maxitem) > 0)          { currentmax = l; maxitem = lv; }            if (2 * r + 1 < size && comparer.Compare(rv = heap[r].last' maxitem) > 0)          { currentmax = r; maxitem = rv; }            if (currentmax == cell)            break;            maxhandle = heap[currentmax].lasthandle;          updateLast(cell' maxitem' maxhandle);          cell = currentmax;            //Maybe swap first and last          T other = heap[cell].first;          if (comparer.Compare(currentitem' other) < 0)          {            Handle otherhandle = heap[cell].firsthandle;            updateFirst(cell' currentitem' currenthandle);            currentitem = other;            currenthandle = otherhandle;          }            maxitem = currentitem;          maxhandle = currenthandle;        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,heapifyMax,The following statement contains a magic number: while (true)        {          int l = 2 * cell + 1' r = l + 1;          T lv' rv;            if (2 * l + 1 < size && comparer.Compare(lv = heap[l].last' maxitem) > 0)          { currentmax = l; maxitem = lv; }            if (2 * r + 1 < size && comparer.Compare(rv = heap[r].last' maxitem) > 0)          { currentmax = r; maxitem = rv; }            if (currentmax == cell)            break;            maxhandle = heap[currentmax].lasthandle;          updateLast(cell' maxitem' maxhandle);          cell = currentmax;            //Maybe swap first and last          T other = heap[cell].first;          if (comparer.Compare(currentitem' other) < 0)          {            Handle otherhandle = heap[cell].firsthandle;            updateFirst(cell' currentitem' currenthandle);            currentitem = other;            currenthandle = otherhandle;          }            maxitem = currentitem;          maxhandle = currenthandle;        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,bubbleUpMin,The following statement contains a magic number: if (i > 0)        {          T min = heap[i].first' iv = min;          Handle minhandle = heap[i].firsthandle;          int p = (i + 1) / 2 - 1;            while (i > 0)          {            if (comparer.Compare(iv' min = heap[p = (i + 1) / 2 - 1].first) < 0)            {              updateFirst(i' min' heap[p].firsthandle);              min = iv;              i = p;            }            else              break;          }            updateFirst(i' iv' minhandle);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,bubbleUpMin,The following statement contains a magic number: if (i > 0)        {          T min = heap[i].first' iv = min;          Handle minhandle = heap[i].firsthandle;          int p = (i + 1) / 2 - 1;            while (i > 0)          {            if (comparer.Compare(iv' min = heap[p = (i + 1) / 2 - 1].first) < 0)            {              updateFirst(i' min' heap[p].firsthandle);              min = iv;              i = p;            }            else              break;          }            updateFirst(i' iv' minhandle);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,bubbleUpMax,The following statement contains a magic number: if (i > 0)        {          T max = heap[i].last' iv = max;          Handle maxhandle = heap[i].lasthandle;          int p = (i + 1) / 2 - 1;            while (i > 0)          {            if (comparer.Compare(iv' max = heap[p = (i + 1) / 2 - 1].last) > 0)            {              updateLast(i' max' heap[p].lasthandle);              max = iv;              i = p;            }            else              break;          }            updateLast(i' iv' maxhandle);          }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,bubbleUpMax,The following statement contains a magic number: if (i > 0)        {          T max = heap[i].last' iv = max;          Handle maxhandle = heap[i].lasthandle;          int p = (i + 1) / 2 - 1;            while (i > 0)          {            if (comparer.Compare(iv' max = heap[p = (i + 1) / 2 - 1].last) > 0)            {              updateLast(i' max' heap[p].lasthandle);              max = iv;              i = p;            }            else              break;          }            updateLast(i' iv' maxhandle);          }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,add,The following statement contains a magic number: if (size == 2 * heap.Length)        {          Interval[] newheap = new Interval[2 * heap.Length];            Array.Copy(heap' newheap' heap.Length);          heap = newheap;        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,add,The following statement contains a magic number: if (size == 2 * heap.Length)        {          Interval[] newheap = new Interval[2 * heap.Length];            Array.Copy(heap' newheap' heap.Length);          heap = newheap;        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,add,The following statement contains a magic number: if (size % 2 == 0)        {          int i = size / 2' p = (i + 1) / 2 - 1;          T tmp = heap[p].last;            if (comparer.Compare(item' tmp) > 0)          {            updateFirst(i' tmp' heap[p].lasthandle);            updateLast(p' item' itemhandle);            bubbleUpMax(p);          }          else          {            updateFirst(i' item' itemhandle);              if (comparer.Compare(item' heap[p].first) < 0)              bubbleUpMin(i);          }        }        else        {          int i = size / 2;          T other = heap[i].first;            if (comparer.Compare(item' other) < 0)          {            updateLast(i' other' heap[i].firsthandle);            updateFirst(i' item' itemhandle);            bubbleUpMin(i);          }          else          {            updateLast(i' item' itemhandle);            bubbleUpMax(i);          }        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,add,The following statement contains a magic number: if (size % 2 == 0)        {          int i = size / 2' p = (i + 1) / 2 - 1;          T tmp = heap[p].last;            if (comparer.Compare(item' tmp) > 0)          {            updateFirst(i' tmp' heap[p].lasthandle);            updateLast(p' item' itemhandle);            bubbleUpMax(p);          }          else          {            updateFirst(i' item' itemhandle);              if (comparer.Compare(item' heap[p].first) < 0)              bubbleUpMin(i);          }        }        else        {          int i = size / 2;          T other = heap[i].first;            if (comparer.Compare(item' other) < 0)          {            updateLast(i' other' heap[i].firsthandle);            updateFirst(i' item' itemhandle);            bubbleUpMin(i);          }          else          {            updateLast(i' item' itemhandle);            bubbleUpMax(i);          }        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,add,The following statement contains a magic number: if (size % 2 == 0)        {          int i = size / 2' p = (i + 1) / 2 - 1;          T tmp = heap[p].last;            if (comparer.Compare(item' tmp) > 0)          {            updateFirst(i' tmp' heap[p].lasthandle);            updateLast(p' item' itemhandle);            bubbleUpMax(p);          }          else          {            updateFirst(i' item' itemhandle);              if (comparer.Compare(item' heap[p].first) < 0)              bubbleUpMin(i);          }        }        else        {          int i = size / 2;          T other = heap[i].first;            if (comparer.Compare(item' other) < 0)          {            updateLast(i' other' heap[i].firsthandle);            updateFirst(i' item' itemhandle);            bubbleUpMin(i);          }          else          {            updateLast(i' item' itemhandle);            bubbleUpMax(i);          }        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,add,The following statement contains a magic number: if (size % 2 == 0)        {          int i = size / 2' p = (i + 1) / 2 - 1;          T tmp = heap[p].last;            if (comparer.Compare(item' tmp) > 0)          {            updateFirst(i' tmp' heap[p].lasthandle);            updateLast(p' item' itemhandle);            bubbleUpMax(p);          }          else          {            updateFirst(i' item' itemhandle);              if (comparer.Compare(item' heap[p].first) < 0)              bubbleUpMin(i);          }        }        else        {          int i = size / 2;          T other = heap[i].first;            if (comparer.Compare(item' other) < 0)          {            updateLast(i' other' heap[i].firsthandle);            updateFirst(i' item' itemhandle);            bubbleUpMin(i);          }          else          {            updateLast(i' item' itemhandle);            bubbleUpMax(i);          }        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,updateLast,The following statement contains a magic number: if (handle != null)          handle.index = 2 * cell + 1;
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,updateFirst,The following statement contains a magic number: if (handle != null)          handle.index = 2 * cell;
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,GetEnumerator,The following statement contains a magic number: for (int i = 0; i < size; i++)        {          if (mystamp != stamp) throw new CollectionModifiedException();          yield return i % 2 == 0 ? heap[i >> 1].first : heap[i >> 1].last;        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size)        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' max) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }            return retval;        }        else        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' last) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size);            retval = false;          }            if (comparer.Compare(last' max) > 0)          {            Console.WriteLine("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }          if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1)          {            Console.WriteLine("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size);            retval = false;          }            int l = 2 * i + 1' r = l + 1;            if (2 * l < size)            retval = retval && check(l' first' last);            if (2 * r < size)            retval = retval && check(r' first' last);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size)        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' max) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }            return retval;        }        else        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' last) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size);            retval = false;          }            if (comparer.Compare(last' max) > 0)          {            Console.WriteLine("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }          if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1)          {            Console.WriteLine("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size);            retval = false;          }            int l = 2 * i + 1' r = l + 1;            if (2 * l < size)            retval = retval && check(l' first' last);            if (2 * r < size)            retval = retval && check(r' first' last);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size)        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' max) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }            return retval;        }        else        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' last) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size);            retval = false;          }            if (comparer.Compare(last' max) > 0)          {            Console.WriteLine("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }          if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1)          {            Console.WriteLine("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size);            retval = false;          }            int l = 2 * i + 1' r = l + 1;            if (2 * l < size)            retval = retval && check(l' first' last);            if (2 * r < size)            retval = retval && check(r' first' last);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size)        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' max) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }            return retval;        }        else        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' last) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size);            retval = false;          }            if (comparer.Compare(last' max) > 0)          {            Console.WriteLine("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }          if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1)          {            Console.WriteLine("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size);            retval = false;          }            int l = 2 * i + 1' r = l + 1;            if (2 * l < size)            retval = retval && check(l' first' last);            if (2 * r < size)            retval = retval && check(r' first' last);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size)        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' max) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }            return retval;        }        else        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' last) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size);            retval = false;          }            if (comparer.Compare(last' max) > 0)          {            Console.WriteLine("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }          if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1)          {            Console.WriteLine("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size);            retval = false;          }            int l = 2 * i + 1' r = l + 1;            if (2 * l < size)            retval = retval && check(l' first' last);            if (2 * r < size)            retval = retval && check(r' first' last);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size)        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' max) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }            return retval;        }        else        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' last) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size);            retval = false;          }            if (comparer.Compare(last' max) > 0)          {            Console.WriteLine("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }          if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1)          {            Console.WriteLine("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size);            retval = false;          }            int l = 2 * i + 1' r = l + 1;            if (2 * l < size)            retval = retval && check(l' first' last);            if (2 * r < size)            retval = retval && check(r' first' last);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size)        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' max) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }            return retval;        }        else        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' last) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size);            retval = false;          }            if (comparer.Compare(last' max) > 0)          {            Console.WriteLine("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }          if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1)          {            Console.WriteLine("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size);            retval = false;          }            int l = 2 * i + 1' r = l + 1;            if (2 * l < size)            retval = retval && check(l' first' last);            if (2 * r < size)            retval = retval && check(r' first' last);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size)        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' max) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }            return retval;        }        else        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' last) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size);            retval = false;          }            if (comparer.Compare(last' max) > 0)          {            Console.WriteLine("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }          if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1)          {            Console.WriteLine("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size);            retval = false;          }            int l = 2 * i + 1' r = l + 1;            if (2 * l < size)            retval = retval && check(l' first' last);            if (2 * r < size)            retval = retval && check(r' first' last);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size)        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' max) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }            return retval;        }        else        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' last) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size);            retval = false;          }            if (comparer.Compare(last' max) > 0)          {            Console.WriteLine("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }          if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1)          {            Console.WriteLine("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size);            retval = false;          }            int l = 2 * i + 1' r = l + 1;            if (2 * l < size)            retval = retval && check(l' first' last);            if (2 * r < size)            retval = retval && check(r' first' last);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,check,The following statement contains a magic number: if (2 * i + 1 == size)        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' max) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > parent.last({2})  [size={3}]"' i' first' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }            return retval;        }        else        {          if (comparer.Compare(min' first) > 0)          {            Console.WriteLine("Cell {0}: parent.first({1}) > first({2})  [size={3}]"' i' min' first' size);            retval = false;          }            if (comparer.Compare(first' last) > 0)          {            Console.WriteLine("Cell {0}: first({1}) > last({2})  [size={3}]"' i' first' last' size);            retval = false;          }            if (comparer.Compare(last' max) > 0)          {            Console.WriteLine("Cell {0}: last({1}) > parent.last({2})  [size={3}]"' i' last' max' size);            retval = false;          }          if (interval.firsthandle != null && interval.firsthandle.index != 2 * i)          {            Console.WriteLine("Cell {0}: firsthandle.index({1}) != 2*cell({2})  [size={3}]"' i' interval.firsthandle.index' 2 * i' size);            retval = false;          }          if (interval.lasthandle != null && interval.lasthandle.index != 2 * i + 1)          {            Console.WriteLine("Cell {0}: lasthandle.index({1}) != 2*cell+1({2})  [size={3}]"' i' interval.lasthandle.index' 2 * i + 1' size);            retval = false;          }            int l = 2 * i + 1' r = l + 1;            if (2 * l < size)            retval = retval && check(l' first' last);            if (2 * r < size)            retval = retval && check(r' first' last);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,Find,The following statement contains a magic number: int cell = toremove / 2;
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,Find,The following statement contains a magic number: bool isfirst = toremove % 2 == 0;
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,Delete,The following statement contains a magic number: int lastcell = (size - 1) / 2;
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,Delete,The following statement contains a magic number: if (cell == lastcell)        {          if (isfirst)          {            retval = heap[cell].first;            if (size % 2 == 0)            {              updateFirst(cell' heap[cell].last' heap[cell].lasthandle);              heap[cell].last = default(T);              heap[cell].lasthandle = null;            }            else            {              heap[cell].first = default(T);              heap[cell].firsthandle = null;            }          }          else          {            retval = heap[cell].last;            heap[cell].last = default(T);            heap[cell].lasthandle = null;          }          size--;        }        else if (isfirst)        {          retval = heap[cell].first;            if (size % 2 == 0)          {            updateFirst(cell' heap[lastcell].last' heap[lastcell].lasthandle);            heap[lastcell].last = default(T);            heap[lastcell].lasthandle = null;          }          else          {            updateFirst(cell' heap[lastcell].first' heap[lastcell].firsthandle);            heap[lastcell].first = default(T);            heap[lastcell].firsthandle = null;          }            size--;          if (heapifyMin(cell))            bubbleUpMax(cell);          else            bubbleUpMin(cell);        }        else        {          retval = heap[cell].last;            if (size % 2 == 0)          {            updateLast(cell' heap[lastcell].last' heap[lastcell].lasthandle);            heap[lastcell].last = default(T);            heap[lastcell].lasthandle = null;          }          else          {            updateLast(cell' heap[lastcell].first' heap[lastcell].firsthandle);            heap[lastcell].first = default(T);            heap[lastcell].firsthandle = null;          }            size--;          if (heapifyMax(cell))            bubbleUpMin(cell);          else            bubbleUpMax(cell);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,Delete,The following statement contains a magic number: if (cell == lastcell)        {          if (isfirst)          {            retval = heap[cell].first;            if (size % 2 == 0)            {              updateFirst(cell' heap[cell].last' heap[cell].lasthandle);              heap[cell].last = default(T);              heap[cell].lasthandle = null;            }            else            {              heap[cell].first = default(T);              heap[cell].firsthandle = null;            }          }          else          {            retval = heap[cell].last;            heap[cell].last = default(T);            heap[cell].lasthandle = null;          }          size--;        }        else if (isfirst)        {          retval = heap[cell].first;            if (size % 2 == 0)          {            updateFirst(cell' heap[lastcell].last' heap[lastcell].lasthandle);            heap[lastcell].last = default(T);            heap[lastcell].lasthandle = null;          }          else          {            updateFirst(cell' heap[lastcell].first' heap[lastcell].firsthandle);            heap[lastcell].first = default(T);            heap[lastcell].firsthandle = null;          }            size--;          if (heapifyMin(cell))            bubbleUpMax(cell);          else            bubbleUpMin(cell);        }        else        {          retval = heap[cell].last;            if (size % 2 == 0)          {            updateLast(cell' heap[lastcell].last' heap[lastcell].lasthandle);            heap[lastcell].last = default(T);            heap[lastcell].lasthandle = null;          }          else          {            updateLast(cell' heap[lastcell].first' heap[lastcell].firsthandle);            heap[lastcell].first = default(T);            heap[lastcell].firsthandle = null;          }            size--;          if (heapifyMax(cell))            bubbleUpMin(cell);          else            bubbleUpMax(cell);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,Delete,The following statement contains a magic number: if (cell == lastcell)        {          if (isfirst)          {            retval = heap[cell].first;            if (size % 2 == 0)            {              updateFirst(cell' heap[cell].last' heap[cell].lasthandle);              heap[cell].last = default(T);              heap[cell].lasthandle = null;            }            else            {              heap[cell].first = default(T);              heap[cell].firsthandle = null;            }          }          else          {            retval = heap[cell].last;            heap[cell].last = default(T);            heap[cell].lasthandle = null;          }          size--;        }        else if (isfirst)        {          retval = heap[cell].first;            if (size % 2 == 0)          {            updateFirst(cell' heap[lastcell].last' heap[lastcell].lasthandle);            heap[lastcell].last = default(T);            heap[lastcell].lasthandle = null;          }          else          {            updateFirst(cell' heap[lastcell].first' heap[lastcell].firsthandle);            heap[lastcell].first = default(T);            heap[lastcell].firsthandle = null;          }            size--;          if (heapifyMin(cell))            bubbleUpMax(cell);          else            bubbleUpMin(cell);        }        else        {          retval = heap[cell].last;            if (size % 2 == 0)          {            updateLast(cell' heap[lastcell].last' heap[lastcell].lasthandle);            heap[lastcell].last = default(T);            heap[lastcell].lasthandle = null;          }          else          {            updateLast(cell' heap[lastcell].first' heap[lastcell].firsthandle);            heap[lastcell].first = default(T);            heap[lastcell].firsthandle = null;          }            size--;          if (heapifyMax(cell))            bubbleUpMin(cell);          else            bubbleUpMax(cell);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,checkHandle,The following statement contains a magic number: cell = toremove / 2;
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,checkHandle,The following statement contains a magic number: isfirst = toremove % 2 == 0;
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,Replace,The following statement contains a magic number: if (isfirst)        {          retval = heap[cell].first;          heap[cell].first = item;          if (size == 1)          {          }          else if (size == 2 * cell + 1) // cell == lastcell          {            int p = (cell + 1) / 2 - 1;            if (comparer.Compare(item' heap[p].last) > 0)            {              Handle thehandle = heap[cell].firsthandle;              updateFirst(cell' heap[p].last' heap[p].lasthandle);              updateLast(p' item' thehandle);              bubbleUpMax(p);            }            else              bubbleUpMin(cell);          }          else if (heapifyMin(cell))            bubbleUpMax(cell);          else            bubbleUpMin(cell);        }        else        {          retval = heap[cell].last;          heap[cell].last = item;          if (heapifyMax(cell))            bubbleUpMin(cell);          else            bubbleUpMax(cell);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,Replace,The following statement contains a magic number: if (isfirst)        {          retval = heap[cell].first;          heap[cell].first = item;          if (size == 1)          {          }          else if (size == 2 * cell + 1) // cell == lastcell          {            int p = (cell + 1) / 2 - 1;            if (comparer.Compare(item' heap[p].last) > 0)            {              Handle thehandle = heap[cell].firsthandle;              updateFirst(cell' heap[p].last' heap[p].lasthandle);              updateLast(p' item' thehandle);              bubbleUpMax(p);            }            else              bubbleUpMin(cell);          }          else if (heapifyMin(cell))            bubbleUpMax(cell);          else            bubbleUpMin(cell);        }        else        {          retval = heap[cell].last;          heap[cell].last = item;          if (heapifyMax(cell))            bubbleUpMin(cell);          else            bubbleUpMax(cell);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,DeleteMin,The following statement contains a magic number: if (size == 1)        {          size = 0;          heap[0].first = default(T);          heap[0].firsthandle = null;        }        else        {          int lastcell = (size - 1) / 2;            if (size % 2 == 0)          {            updateFirst(0' heap[lastcell].last' heap[lastcell].lasthandle);            heap[lastcell].last = default(T);            heap[lastcell].lasthandle = null;          }          else          {            updateFirst(0' heap[lastcell].first' heap[lastcell].firsthandle);            heap[lastcell].first = default(T);            heap[lastcell].firsthandle = null;          }            size--;          heapifyMin(0);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,DeleteMin,The following statement contains a magic number: if (size == 1)        {          size = 0;          heap[0].first = default(T);          heap[0].firsthandle = null;        }        else        {          int lastcell = (size - 1) / 2;            if (size % 2 == 0)          {            updateFirst(0' heap[lastcell].last' heap[lastcell].lasthandle);            heap[lastcell].last = default(T);            heap[lastcell].lasthandle = null;          }          else          {            updateFirst(0' heap[lastcell].first' heap[lastcell].firsthandle);            heap[lastcell].first = default(T);            heap[lastcell].firsthandle = null;          }            size--;          heapifyMin(0);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,DeleteMax,The following statement contains a magic number: if (size == 1)        {          size = 0;          retval = heap[0].first;          myhandle = heap[0].firsthandle;          if (myhandle != null)            myhandle.index = -1;          heap[0].first = default(T);          heap[0].firsthandle = null;        }        else        {          retval = heap[0].last;          myhandle = heap[0].lasthandle;          if (myhandle != null)            myhandle.index = -1;            int lastcell = (size - 1) / 2;            if (size % 2 == 0)          {            updateLast(0' heap[lastcell].last' heap[lastcell].lasthandle);            heap[lastcell].last = default(T);            heap[lastcell].lasthandle = null;          }          else          {            updateLast(0' heap[lastcell].first' heap[lastcell].firsthandle);            heap[lastcell].first = default(T);            heap[lastcell].firsthandle = null;          }            size--;          heapifyMax(0);        }
Magic Number,C5,IntervalHeap<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,DeleteMax,The following statement contains a magic number: if (size == 1)        {          size = 0;          retval = heap[0].first;          myhandle = heap[0].firsthandle;          if (myhandle != null)            myhandle.index = -1;          heap[0].first = default(T);          heap[0].firsthandle = null;        }        else        {          retval = heap[0].last;          myhandle = heap[0].lasthandle;          if (myhandle != null)            myhandle.index = -1;            int lastcell = (size - 1) / 2;            if (size % 2 == 0)          {            updateLast(0' heap[lastcell].last' heap[lastcell].lasthandle);            heap[lastcell].last = default(T);            heap[lastcell].lasthandle = null;          }          else          {            updateLast(0' heap[lastcell].first' heap[lastcell].firsthandle);            heap[lastcell].first = default(T);            heap[lastcell].firsthandle = null;          }            size--;          heapifyMax(0);        }
Magic Number,C5,Interval,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,GetEnumerator,The following statement contains a magic number: Node[] path = new Node[2 * tree.blackdepth];
Magic Number,C5,Interval,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\heaps\IntervalHeap.cs,GetEnumerator,The following statement contains a magic number: Node[] path = new Node[2 * tree.blackdepth];
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,get,The following statement contains a magic number: if (pos < 0 || pos >= size)          throw new IndexOutOfRangeException();        else if (pos < size / 2)        {              // Closer to front          Node node = startsentinel;            for (int i = 0; i <= pos; i++)            node = node.next;            return node;        }        else        {                            // Closer to end          Node node = endsentinel;            for (int i = size; i > pos; i--)            node = node.prev;            return node;        }
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup == succgroup)        {          node.taggroup = predgroup;          predgroup.count++;          if (pred.tag + 1 == succ.tag)            splittaggroup(predgroup);          else            node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;        }        else if (predgroup.first != null)        {          node.taggroup = predgroup;          predgroup.last = node;          predgroup.count++;          if (pred.tag == int.MaxValue)            splittaggroup(predgroup);          else            node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;        }        else if (succgroup.first != null)        {          node.taggroup = succgroup;          succgroup.first = node;          succgroup.count++;          if (succ.tag == int.MinValue)            splittaggroup(node.taggroup);          else            node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;        }        else        {          Debug.Assert(Taggroups == 0);            TagGroup newgroup = new TagGroup();            Taggroups = 1;          node.taggroup = newgroup;          newgroup.first = newgroup.last = node;          newgroup.count = 1;          return;        }
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup == succgroup)        {          node.taggroup = predgroup;          predgroup.count++;          if (pred.tag + 1 == succ.tag)            splittaggroup(predgroup);          else            node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;        }        else if (predgroup.first != null)        {          node.taggroup = predgroup;          predgroup.last = node;          predgroup.count++;          if (pred.tag == int.MaxValue)            splittaggroup(predgroup);          else            node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;        }        else if (succgroup.first != null)        {          node.taggroup = succgroup;          succgroup.first = node;          succgroup.count++;          if (succ.tag == int.MinValue)            splittaggroup(node.taggroup);          else            node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;        }        else        {          Debug.Assert(Taggroups == 0);            TagGroup newgroup = new TagGroup();            Taggroups = 1;          node.taggroup = newgroup;          newgroup.first = newgroup.last = node;          newgroup.count = 1;          return;        }
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup == succgroup)        {          node.taggroup = predgroup;          predgroup.count++;          if (pred.tag + 1 == succ.tag)            splittaggroup(predgroup);          else            node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;        }        else if (predgroup.first != null)        {          node.taggroup = predgroup;          predgroup.last = node;          predgroup.count++;          if (pred.tag == int.MaxValue)            splittaggroup(predgroup);          else            node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;        }        else if (succgroup.first != null)        {          node.taggroup = succgroup;          succgroup.first = node;          succgroup.count++;          if (succ.tag == int.MinValue)            splittaggroup(node.taggroup);          else            node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;        }        else        {          Debug.Assert(Taggroups == 0);            TagGroup newgroup = new TagGroup();            Taggroups = 1;          node.taggroup = newgroup;          newgroup.first = newgroup.last = node;          newgroup.count = 1;          return;        }
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup == succgroup)        {          node.taggroup = predgroup;          predgroup.count++;          if (pred.tag + 1 == succ.tag)            splittaggroup(predgroup);          else            node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;        }        else if (predgroup.first != null)        {          node.taggroup = predgroup;          predgroup.last = node;          predgroup.count++;          if (pred.tag == int.MaxValue)            splittaggroup(predgroup);          else            node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;        }        else if (succgroup.first != null)        {          node.taggroup = succgroup;          succgroup.first = node;          succgroup.count++;          if (succ.tag == int.MinValue)            splittaggroup(node.taggroup);          else            node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;        }        else        {          Debug.Assert(Taggroups == 0);            TagGroup newgroup = new TagGroup();            Taggroups = 1;          node.taggroup = newgroup;          newgroup.first = newgroup.last = node;          newgroup.count = 1;          return;        }
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup == succgroup)        {          node.taggroup = predgroup;          predgroup.count++;          if (pred.tag + 1 == succ.tag)            splittaggroup(predgroup);          else            node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;        }        else if (predgroup.first != null)        {          node.taggroup = predgroup;          predgroup.last = node;          predgroup.count++;          if (pred.tag == int.MaxValue)            splittaggroup(predgroup);          else            node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;        }        else if (succgroup.first != null)        {          node.taggroup = succgroup;          succgroup.first = node;          succgroup.count++;          if (succ.tag == int.MinValue)            splittaggroup(node.taggroup);          else            node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;        }        else        {          Debug.Assert(Taggroups == 0);            TagGroup newgroup = new TagGroup();            Taggroups = 1;          node.taggroup = newgroup;          newgroup.first = newgroup.last = node;          newgroup.count = 1;          return;        }
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,settag,The following statement contains a magic number: if (predgroup == succgroup)        {          node.taggroup = predgroup;          predgroup.count++;          if (pred.tag + 1 == succ.tag)            splittaggroup(predgroup);          else            node.tag = (pred.tag + 1) / 2 + (succ.tag - 1) / 2;        }        else if (predgroup.first != null)        {          node.taggroup = predgroup;          predgroup.last = node;          predgroup.count++;          if (pred.tag == int.MaxValue)            splittaggroup(predgroup);          else            node.tag = pred.tag / 2 + int.MaxValue / 2 + 1;        }        else if (succgroup.first != null)        {          node.taggroup = succgroup;          succgroup.first = node;          succgroup.count++;          if (succ.tag == int.MinValue)            splittaggroup(node.taggroup);          else            node.tag = int.MinValue / 2 + (succ.tag - 1) / 2;        }        else        {          Debug.Assert(Taggroups == 0);            TagGroup newgroup = new TagGroup();            Taggroups = 1;          node.taggroup = newgroup;          newgroup.first = newgroup.last = node;          newgroup.count = 1;          return;        }
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,splittaggroup,The following statement contains a magic number: int tgtdelta = (int)((ntgt + 0.0 - ptgt) / (newtgs + 2))' tgtag = ptgt;
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,redistributetaggroups,The following statement contains a magic number: double limit = 1' bigt = Math.Pow(Taggroups' 1.0 / 30);
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Reverse,The following statement contains a magic number: for (int i = 0; i < size / 2; i++)        {          T swap;          swap = a.item; a.item = b.item; b.item = swap;  #if HASHINDEX          dict[a.item] = a; dict[b.item] = b;  #endif          if (positions != null)            mirrorViewSentinelsForReverse(positions' ref poslow' ref poshigh' a' b' i);          a = a.next; b = b.prev;        }
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Reverse,The following statement contains a magic number: if (positions != null && size % 2 != 0)          mirrorViewSentinelsForReverse(positions' ref poslow' ref poshigh' a' b' size / 2);
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Reverse,The following statement contains a magic number: if (positions != null && size % 2 != 0)          mirrorViewSentinelsForReverse(positions' ref poslow' ref poshigh' a' b' size / 2);
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,RemoveAll,The following statement contains a magic number: foreach (T item in items)          if (dictremove(item' out node))          {            if (mustFire)              raiseHandler.Remove(node.item);            remove(node' 118);          }
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,RemoveAll,The following statement contains a magic number: {          Node n = startsentinel.next;            while (n != endsentinel)          {            bool removeIt = predicate(n.item);            updatecheck();            if (removeIt)            {              dict.Remove(n.item);              remove(n' 119);              if (mustFire)                raiseHandler.Remove(n.item);            }              n = n.next;          }        }
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,RetainAll,The following statement contains a magic number: {          HashSet<T> toremove = new HashSet<T>(itemequalityComparer);            foreach (T item in this)            toremove.Add(item);            foreach (T item in items)            toremove.Remove(item);            Node n = startsentinel.next;            while (n != endsentinel && toremove.Count > 0)          {            if (toremove.Contains(n.item))            {              dict.Remove(n.item);              remove(n' 119);              if (mustFire)                raiseHandler.Remove(n.item);            }              n = n.next;          }        }
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,RetainAll,The following statement contains a magic number: {          Node n = startsentinel.next;            while (n != endsentinel)          {            bool removeIt = !predicate(n.item);            updatecheck();            if (removeIt)            {              dict.Remove(n.item);              remove(n' 119);              if (mustFire)                raiseHandler.Remove(n.item);            }              n = n.next;          }        }
Magic Number,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,checkViews,The following statement contains a magic number: Node[] nodes = new Node[size + 2];
Magic Number,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,get,The following statement contains a magic number: if (pos < 0 || pos >= size)          throw new IndexOutOfRangeException();        else if (pos < size / 2)        {              // Closer to front          Node node = startsentinel;            for (int i = 0; i <= pos; i++)            node = node.next;            return node;        }        else        {                            // Closer to end          Node node = endsentinel;            for (int i = size; i > pos; i--)            node = node.prev;            return node;        }
Magic Number,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Reverse,The following statement contains a magic number: for (int i = 0; i < size / 2; i++)        {          T swap;          swap = a.item; a.item = b.item; b.item = swap;  #if HASHINDEX          dict[a.item] = a; dict[b.item] = b;  #endif          if (positions != null)            mirrorViewSentinelsForReverse(positions' ref poslow' ref poshigh' a' b' i);          a = a.next; b = b.prev;        }
Magic Number,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Reverse,The following statement contains a magic number: if (positions != null && size % 2 != 0)          mirrorViewSentinelsForReverse(positions' ref poslow' ref poshigh' a' b' size / 2);
Magic Number,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Reverse,The following statement contains a magic number: if (positions != null && size % 2 != 0)          mirrorViewSentinelsForReverse(positions' ref poslow' ref poshigh' a' b' size / 2);
Magic Number,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,checkViews,The following statement contains a magic number: Node[] nodes = new Node[size + 2];
Magic Number,C5,C5Random,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Random.cs,Cmwc,The following statement contains a magic number: i = (i + 1) & 15;
Magic Number,C5,C5Random,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Random.cs,Cmwc,The following statement contains a magic number: c = (uint)(t >> 32);
Magic Number,C5,C5Random,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Random.cs,NextDouble,The following statement contains a magic number: return Cmwc() / 4294967296.0;
Magic Number,C5,C5Random,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Random.cs,Next,The following statement contains a magic number: return (int)(Cmwc() / 4294967296.0 * max);
Magic Number,C5,C5Random,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Random.cs,Next,The following statement contains a magic number: return min + (int)(Cmwc() / 4294967296.0 * (max - min));
Magic Number,C5,C5Random,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Random.cs,C5Random,The following statement contains a magic number: for (int i = 0; i < 16; i++)        {          j ^= j << 13;          j ^= j >> 17;          j ^= j << 5;          Q[i] = j;        }
Magic Number,C5,C5Random,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Random.cs,C5Random,The following statement contains a magic number: for (int i = 0; i < 16; i++)        {          j ^= j << 13;          j ^= j >> 17;          j ^= j << 5;          Q[i] = j;        }
Magic Number,C5,C5Random,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Random.cs,C5Random,The following statement contains a magic number: for (int i = 0; i < 16; i++)        {          j ^= j << 13;          j ^= j >> 17;          j ^= j << 5;          Q[i] = j;        }
Magic Number,C5,C5Random,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Random.cs,C5Random,The following statement contains a magic number: for (int i = 0; i < 16; i++)        {          j ^= j << 13;          j ^= j >> 17;          j ^= j << 5;          Q[i] = j;        }
Magic Number,C5,C5Random,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Random.cs,C5Random,The following statement contains a magic number: Q[15] = (uint)(seed ^ (seed >> 32));
Magic Number,C5,C5Random,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Random.cs,C5Random,The following statement contains a magic number: Q[15] = (uint)(seed ^ (seed >> 32));
Magic Number,C5,C5Random,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Random.cs,C5Random,The following statement contains a magic number: if (Q.Length != 16)          throw new ArgumentException("Q must have length 16' was " + Q.Length);
Magic Number,C5,C5Random,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Random.cs,C5Random,The following statement contains a magic number: Array.Copy(Q' this.Q' 16);
Magic Number,C5,Rec,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Records.cs,Show,The following statement contains a magic number: rest -= 2;
Magic Number,C5,Rec,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Records.cs,Show,The following statement contains a magic number: try        {          if (incomplete = !Showing.Show(X1' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X2' stringbuilder' ref rest' formatProvider))            return false;        }        finally        {          if (incomplete)          {            stringbuilder.Append("...");            rest -= 3;          }          stringbuilder.Append(")");        }
Magic Number,C5,Rec,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Records.cs,Show,The following statement contains a magic number: try        {          if (incomplete = !Showing.Show(X1' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X2' stringbuilder' ref rest' formatProvider))            return false;        }        finally        {          if (incomplete)          {            stringbuilder.Append("...");            rest -= 3;          }          stringbuilder.Append(")");        }
Magic Number,C5,Rec,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Records.cs,Show,The following statement contains a magic number: rest -= 2;
Magic Number,C5,Rec,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Records.cs,Show,The following statement contains a magic number: try        {          if (incomplete = !Showing.Show(X1' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X2' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X3' stringbuilder' ref rest' formatProvider))            return false;        }        finally        {          if (incomplete)          {            stringbuilder.Append("...");            rest -= 3;          }          stringbuilder.Append(")");        }
Magic Number,C5,Rec,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Records.cs,Show,The following statement contains a magic number: try        {          if (incomplete = !Showing.Show(X1' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X2' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X3' stringbuilder' ref rest' formatProvider))            return false;        }        finally        {          if (incomplete)          {            stringbuilder.Append("...");            rest -= 3;          }          stringbuilder.Append(")");        }
Magic Number,C5,Rec,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Records.cs,Show,The following statement contains a magic number: try        {          if (incomplete = !Showing.Show(X1' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X2' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X3' stringbuilder' ref rest' formatProvider))            return false;        }        finally        {          if (incomplete)          {            stringbuilder.Append("...");            rest -= 3;          }          stringbuilder.Append(")");        }
Magic Number,C5,Rec,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Records.cs,Show,The following statement contains a magic number: rest -= 2;
Magic Number,C5,Rec,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Records.cs,Show,The following statement contains a magic number: try        {          if (incomplete = !Showing.Show(X1' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X2' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X3' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X4' stringbuilder' ref rest' formatProvider))            return false;        }        finally        {          if (incomplete)          {            stringbuilder.Append("...");            rest -= 3;          }          stringbuilder.Append(")");        }
Magic Number,C5,Rec,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Records.cs,Show,The following statement contains a magic number: try        {          if (incomplete = !Showing.Show(X1' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X2' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X3' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X4' stringbuilder' ref rest' formatProvider))            return false;        }        finally        {          if (incomplete)          {            stringbuilder.Append("...");            rest -= 3;          }          stringbuilder.Append(")");        }
Magic Number,C5,Rec,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Records.cs,Show,The following statement contains a magic number: try        {          if (incomplete = !Showing.Show(X1' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X2' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X3' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X4' stringbuilder' ref rest' formatProvider))            return false;        }        finally        {          if (incomplete)          {            stringbuilder.Append("...");            rest -= 3;          }          stringbuilder.Append(")");        }
Magic Number,C5,Rec,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Records.cs,Show,The following statement contains a magic number: try        {          if (incomplete = !Showing.Show(X1' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X2' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X3' stringbuilder' ref rest' formatProvider))            return false;          stringbuilder.Append("' ");          rest -= 2;          if (incomplete = !Showing.Show(X4' stringbuilder' ref rest' formatProvider))            return false;        }        finally        {          if (incomplete)          {            stringbuilder.Append("...");            rest -= 3;          }          stringbuilder.Append(")");        }
Magic Number,C5,Sorter<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Sorting.cs,IntroSort,The following statement contains a magic number: if (b - f > 31)          {            int depth_limit = (int)Math.Floor(2.5 * Math.Log(b - f' 2));              introSort(f' b' depth_limit);          }          else            InsertionSort(f' b);
Magic Number,C5,Sorter<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Sorting.cs,IntroSort,The following statement contains a magic number: if (b - f > 31)          {            int depth_limit = (int)Math.Floor(2.5 * Math.Log(b - f' 2));              introSort(f' b' depth_limit);          }          else            InsertionSort(f' b);
Magic Number,C5,Sorter<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Sorting.cs,IntroSort,The following statement contains a magic number: if (b - f > 31)          {            int depth_limit = (int)Math.Floor(2.5 * Math.Log(b - f' 2));              introSort(f' b' depth_limit);          }          else            InsertionSort(f' b);
Magic Number,C5,Sorter<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Sorting.cs,introSort,The following statement contains a magic number: const int size_threshold = 14;
Magic Number,C5,Sorter<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Sorting.cs,partition,The following statement contains a magic number: int bot = f' mid = (b + f) / 2' top = b - 1;
Magic Number,C5,Sorter<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Sorting.cs,HeapSort,The following statement contains a magic number: for (int i = (b + f) / 2; i >= f; i--) heapify(f' b' i);
Magic Number,C5,Sorter<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\Sorting.cs,heapify,The following statement contains a magic number: while (true)          {            int l = 2 * j - f + 1' r = l + 1;              if (l < b && compare(lv = a[l]' max) > 0) { maxpt = l; max = lv; }              if (r < b && compare(rv = a[r]' max) > 0) { maxpt = r; max = rv; }              if (maxpt == j)              break;              a[j] = max;            max = pv;            j = maxpt;          }
Magic Number,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,stackcheck,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth)        {          dirs = new int[2 * dirs.Length];          path = new Node[2 * dirs.Length];        }
Magic Number,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,stackcheck,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth)        {          dirs = new int[2 * dirs.Length];          path = new Node[2 * dirs.Length];        }
Magic Number,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,stackcheck,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth)        {          dirs = new int[2 * dirs.Length];          path = new Node[2 * dirs.Length];        }
Magic Number,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,removeAt,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth)        {          dirs = new int[2 * dirs.Length];          path = new Node[2 * dirs.Length];        }
Magic Number,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,removeAt,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth)        {          dirs = new int[2 * dirs.Length];          path = new Node[2 * dirs.Length];        }
Magic Number,C5,TreeBag<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,removeAt,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth)        {          dirs = new int[2 * dirs.Length];          path = new Node[2 * dirs.Length];        }
Magic Number,C5,Enumerator,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,Enumerator,The following statement contains a magic number: path = new Node[2 * tree.blackdepth];
Magic Number,C5,Enumerator,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,Enumerator,The following statement contains a magic number: path = new Node[2 * range.basis.blackdepth];
Magic Number,C5,Enumerator,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,Enumerator,The following statement contains a magic number: path = new Node[2 * tree.blackdepth];
Magic Number,C5,Enumerator,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,Enumerator,The following statement contains a magic number: path = new Node[2 * range.basis.blackdepth];
Magic Number,C5,SnapEnumerator,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,SnapEnumerator,The following statement contains a magic number: path = new Node[2 * tree.blackdepth];
Magic Number,C5,SnapEnumerator,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeBag.cs,SnapEnumerator,The following statement contains a magic number: path = new Node[2 * tree.blackdepth];
Magic Number,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,stackcheck,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth)        {          dirs = new int[2 * dirs.Length];          path = new Node[2 * dirs.Length];        }
Magic Number,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,stackcheck,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth)        {          dirs = new int[2 * dirs.Length];          path = new Node[2 * dirs.Length];        }
Magic Number,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,stackcheck,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth)        {          dirs = new int[2 * dirs.Length];          path = new Node[2 * dirs.Length];        }
Magic Number,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,removeAt,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth)        {          dirs = new int[2 * dirs.Length];          path = new Node[2 * dirs.Length];        }
Magic Number,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,removeAt,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth)        {          dirs = new int[2 * dirs.Length];          path = new Node[2 * dirs.Length];        }
Magic Number,C5,TreeSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\trees\RedBlackTreeSet.cs,removeAt,The following statement contains a magic number: while (dirs.Length < 2 * blackdepth)        {          dirs = new int[2 * dirs.Length];          path = new Node[2 * dirs.Length];        }
Duplicate Code,C5,HashSet<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\hashing\HashTable.cs,searchoradd,The method contains a code clone-set at the following line numbers (starting from the method definition): ((31' 55)' (118' 142))
Duplicate Code,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Check,The method contains a code clone-set at the following line numbers (starting from the method definition): ((100' 121)' (158' 179))
Duplicate Code,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Check,The method contains a code clone-set at the following line numbers (starting from the method definition): ((100' 121)' (158' 179))
Missing Default,C5,ArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\ArrayList.cs,disposeOverlappingViews,The following switch statement is missing a default case: switch (viewPosition(view.offset' view.size))              {                case MutualViewPosition.ContainedIn:                  if (reverse)                    view.offset = 2 * offset + size - view.size - view.offset;                  else                    view.Dispose();                  break;                case MutualViewPosition.Overlapping:                  view.Dispose();                  break;                case MutualViewPosition.Contains:                case MutualViewPosition.NonOverlapping:                  break;              }
Missing Default,C5,HashedArrayList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\arrays\HashedArrayList.cs,disposeOverlappingViews,The following switch statement is missing a default case: switch (viewPosition(view.offset' view.size))              {                case MutualViewPosition.ContainedIn:                  if (reverse)                    view.offset = 2 * offset + size - view.size - view.offset;                  else                    view.Dispose();                  break;                case MutualViewPosition.Overlapping:                  view.Dispose();                  break;                case MutualViewPosition.Contains:                case MutualViewPosition.NonOverlapping:                  break;              }
Missing Default,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,disposeOverlappingViews,The following switch statement is missing a default case: switch (viewPosition(view))              {                case MutualViewPosition.ContainedIn:                  if (reverse)                  { }                  else                    view.Dispose();                  break;                case MutualViewPosition.Overlapping:                  view.Dispose();                  break;                case MutualViewPosition.Contains:                case MutualViewPosition.NonOverlapping:                  break;              }
Missing Default,C5,HashedLinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\HashedLinkedList.cs,Reverse,The following switch statement is missing a default case: switch (viewPosition(view))              {                case MutualViewPosition.ContainedIn:                  (_positions ?? (_positions = new CircularQueue<Position>())).Enqueue(new Position(view' true));                  _positions.Enqueue(new Position(view' false));                  break;                case MutualViewPosition.Overlapping:                  view.Dispose();                  break;                case MutualViewPosition.Contains:                case MutualViewPosition.NonOverlapping:                  break;              }
Missing Default,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,disposeOverlappingViews,The following switch statement is missing a default case: switch (viewPosition(view))              {                case MutualViewPosition.ContainedIn:                  if (reverse)                  { }                  else                    view.Dispose();                  break;                case MutualViewPosition.Overlapping:                  view.Dispose();                  break;                case MutualViewPosition.Contains:                case MutualViewPosition.NonOverlapping:                  break;              }
Missing Default,C5,LinkedList<T>,C:\repos\ericksoa_i4o\i4o.Silverlight\c5\linkedlists\LinkedList.cs,Reverse,The following switch statement is missing a default case: switch (viewPosition(view))              {                case MutualViewPosition.ContainedIn:                  (_positions ?? (_positions = new CircularQueue<Position>())).Enqueue(new Position(view' true));                  _positions.Enqueue(new Position(view' false));                  break;                case MutualViewPosition.Overlapping:                  view.Dispose();                  break;                case MutualViewPosition.Contains:                case MutualViewPosition.NonOverlapping:                  break;              }
