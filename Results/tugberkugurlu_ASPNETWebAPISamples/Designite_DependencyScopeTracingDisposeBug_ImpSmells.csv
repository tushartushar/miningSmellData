Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos1\tugberkugurlu_ASPNETWebAPISamples\DependencyScopeTracingDisposeBug\DependencyScopeTracingDisposeBug\App_Packages\TaskHelpers.Sources.0.2\TaskHelpersExtensions.cs,,The length of the parameter _rethrowWithNoStackLossDelegate is 31.
Long Statement,DependencyScopeTracingDisposeBug,Global,D:\research\architectureSmells\repos1\tugberkugurlu_ASPNETWebAPISamples\DependencyScopeTracingDisposeBug\DependencyScopeTracingDisposeBug\Global.asax.cs,RegisterTypes,The length of the statement  "            builder.RegisterType<EntityRepository<HttpApiLogRecord>>().As<IEntityRepository<HttpApiLogRecord>>().InstancePerApiRequest(); " is 125.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos1\tugberkugurlu_ASPNETWebAPISamples\DependencyScopeTracingDisposeBug\DependencyScopeTracingDisposeBug\App_Packages\TaskHelpers.Sources.0.2\TaskHelpersExtensions.cs,CatchImpl,The length of the statement  "                            throw new InvalidOperationException("You must set the Task property of the CatchInfo returned from the TaskHelpersExtensions.Catch continuation."); " is 147.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos1\tugberkugurlu_ASPNETWebAPISamples\DependencyScopeTracingDisposeBug\DependencyScopeTracingDisposeBug\App_Packages\TaskHelpers.Sources.0.2\TaskHelpersExtensions.cs,CatchImplContinuation,The length of the statement  "            task.ContinueWith(innerTask => tcs.TrySetFromTask(innerTask)' TaskContinuationOptions.NotOnFaulted | TaskContinuationOptions.ExecuteSynchronously); " is 147.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos1\tugberkugurlu_ASPNETWebAPISamples\DependencyScopeTracingDisposeBug\DependencyScopeTracingDisposeBug\App_Packages\TaskHelpers.Sources.0.2\TaskHelpersExtensions.cs,CatchImplContinuation,The length of the statement  "                                throw new InvalidOperationException("You cannot return null from the TaskHelpersExtensions.Catch continuation. You must return a valid task or throw an exception."); " is 165.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos1\tugberkugurlu_ASPNETWebAPISamples\DependencyScopeTracingDisposeBug\DependencyScopeTracingDisposeBug\App_Packages\TaskHelpers.Sources.0.2\TaskHelpersExtensions.cs,CatchImplContinuation,The length of the statement  "                            throw new InvalidOperationException("You cannot return null from the TaskHelpersExtensions.Catch continuation. You must return a valid task or throw an exception."); " is 165.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos1\tugberkugurlu_ASPNETWebAPISamples\DependencyScopeTracingDisposeBug\DependencyScopeTracingDisposeBug\App_Packages\TaskHelpers.Sources.0.2\TaskHelpersExtensions.cs,GetRethrowWithNoStackLossDelegate,The length of the statement  "                // No-ops if the task completed successfully' else throws the originating exception complete with the correct call stack. " is 121.
Long Statement,DependencyScopeTracingDisposeBug.MessageHandlers,DisposableRequestResourcesReorderHandler,D:\research\architectureSmells\repos1\tugberkugurlu_ASPNETWebAPISamples\DependencyScopeTracingDisposeBug\DependencyScopeTracingDisposeBug\MessageHandlers\DisposableRequestResourcesReorderHandler.cs,SendAsync,The length of the statement  "                List<IDisposable> disposableResources = request.Properties[HttpPropertyKeys.DisposableRequestResourcesKey] as List<IDisposable>; " is 128.
Long Statement,DependencyScopeTracingDisposeBug.Tracing,WebApiTracer,D:\research\architectureSmells\repos1\tugberkugurlu_ASPNETWebAPISamples\DependencyScopeTracingDisposeBug\DependencyScopeTracingDisposeBug\Tracing\WebApiTracer.cs,Log,The length of the statement  "                BaseExceptionType = traceRecord.Exception != null ? traceRecord.Exception.GetBaseException().GetType().ToString() : null' " is 121.
Empty Catch Block,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos1\tugberkugurlu_ASPNETWebAPISamples\DependencyScopeTracingDisposeBug\DependencyScopeTracingDisposeBug\App_Packages\TaskHelpers.Sources.0.2\TaskHelpersExtensions.cs,GetRethrowWithNoStackLossDelegate,The method has an empty catch block.
Missing Default,System.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos1\tugberkugurlu_ASPNETWebAPISamples\DependencyScopeTracingDisposeBug\DependencyScopeTracingDisposeBug\App_Packages\TaskHelpers.Sources.0.2\TaskHelpers.cs,SetIfTaskFailed,The following switch statement is missing a default case: switch (source.Status)              {                  case TaskStatus.Canceled:                  case TaskStatus.Faulted:                      return tcs.TrySetFromTask(source);              }
Missing Default,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos1\tugberkugurlu_ASPNETWebAPISamples\DependencyScopeTracingDisposeBug\DependencyScopeTracingDisposeBug\App_Packages\TaskHelpers.Sources.0.2\TaskHelpersExtensions.cs,CopyResultToCompletionSourceImpl,The following switch statement is missing a default case: switch (task.Status)                  {                      case TaskStatus.Canceled:                      case TaskStatus.Faulted:                          TaskHelpers.TrySetFromTask(tcs' task);                          break;                        case TaskStatus.RanToCompletion:                          tcs.TrySetResult(resultThunk(task));                          break;                  }
Missing Default,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos1\tugberkugurlu_ASPNETWebAPISamples\DependencyScopeTracingDisposeBug\DependencyScopeTracingDisposeBug\App_Packages\TaskHelpers.Sources.0.2\TaskHelpersExtensions.cs,CopyResultToCompletionSourceImplContinuation,The following switch statement is missing a default case: switch (innerTask.Status)                  {                      case TaskStatus.Canceled:                      case TaskStatus.Faulted:                          TaskHelpers.TrySetFromTask(tcs' innerTask);                          break;                        case TaskStatus.RanToCompletion:                          tcs.TrySetResult(resultThunk(task));                          break;                  }
